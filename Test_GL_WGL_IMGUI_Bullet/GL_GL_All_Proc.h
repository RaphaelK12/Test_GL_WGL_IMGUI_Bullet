// Globals
// Typedefs
typedef char GLchar;
typedef char GLcharARB;
typedef signed char GLbyte;
typedef unsigned char GLboolean;
typedef unsigned char GLubyte;
typedef short GLshort;
typedef unsigned short GLhalfNV;
typedef unsigned short GLushort;
typedef int GLint;
typedef int GLsizei;
typedef unsigned int GLbitfield;
typedef unsigned int GLenum;
typedef unsigned int GLuint;
typedef float GLclampf;
typedef float GLfloat;
typedef double GLclampd;
typedef double GLdouble;
typedef void* GLeglClientBufferEXT;
typedef void* GLeglImageOES;
typedef void* GLhandleARB;
typedef void GLvoid;
typedef khronos_int32_t GLfixed;
typedef khronos_int64_t GLint64;
typedef khronos_int64_t GLint64EXT;
typedef khronos_intptr_t GLintptr;
typedef khronos_intptr_t GLintptrARB;
typedef khronos_ssize_t GLsizeiptr;
typedef khronos_ssize_t GLsizeiptrARB;
typedef khronos_uint16_t GLhalf;
typedef khronos_uint16_t GLhalfARB;
typedef khronos_uint64_t GLuint64;
typedef khronos_uint64_t GLuint64EXT;
typedef GLintptr GLvdpauSurfaceNV;
typedef struct __GLsync* GLsync;

// Defines
#ifndef APIENTRY
#define APIENTRY
#endif
#ifndef APIENTRYP
#define APIENTRYP APIENTRY *
#endif
#ifndef GLAPI
#define GLAPI extern
#endif


#ifndef GL_VERSION_1_0

// Defines
#define GL_DEPTH_BUFFER_BIT               0x00000100 
#define GL_STENCIL_BUFFER_BIT             0x00000400 
#define GL_COLOR_BUFFER_BIT               0x00004000 
#define GL_FALSE                          0 
#define GL_TRUE                           1 
#define GL_POINTS                         0x0000 
#define GL_LINES                          0x0001 
#define GL_LINE_LOOP                      0x0002 
#define GL_LINE_STRIP                     0x0003 
#define GL_TRIANGLES                      0x0004 
#define GL_TRIANGLE_STRIP                 0x0005 
#define GL_TRIANGLE_FAN                   0x0006 
#define GL_QUADS                          0x0007 
#define GL_NEVER                          0x0200 
#define GL_LESS                           0x0201 
#define GL_EQUAL                          0x0202 
#define GL_LEQUAL                         0x0203 
#define GL_GREATER                        0x0204 
#define GL_NOTEQUAL                       0x0205 
#define GL_GEQUAL                         0x0206 
#define GL_ALWAYS                         0x0207 
#define GL_ZERO                           0 
#define GL_ONE                            1 
#define GL_SRC_COLOR                      0x0300 
#define GL_ONE_MINUS_SRC_COLOR            0x0301 
#define GL_SRC_ALPHA                      0x0302 
#define GL_ONE_MINUS_SRC_ALPHA            0x0303 
#define GL_DST_ALPHA                      0x0304 
#define GL_ONE_MINUS_DST_ALPHA            0x0305 
#define GL_DST_COLOR                      0x0306 
#define GL_ONE_MINUS_DST_COLOR            0x0307 
#define GL_SRC_ALPHA_SATURATE             0x0308 
#define GL_NONE                           0 
#define GL_FRONT_LEFT                     0x0400 
#define GL_FRONT_RIGHT                    0x0401 
#define GL_BACK_LEFT                      0x0402 
#define GL_BACK_RIGHT                     0x0403 
#define GL_FRONT                          0x0404 
#define GL_BACK                           0x0405 
#define GL_LEFT                           0x0406 
#define GL_RIGHT                          0x0407 
#define GL_FRONT_AND_BACK                 0x0408 
#define GL_NO_ERROR                       0 
#define GL_INVALID_ENUM                   0x0500 
#define GL_INVALID_VALUE                  0x0501 
#define GL_INVALID_OPERATION              0x0502 
#define GL_OUT_OF_MEMORY                  0x0505 
#define GL_CW                             0x0900 
#define GL_CCW                            0x0901 
#define GL_POINT_SIZE                     0x0B11 
#define GL_POINT_SIZE_RANGE               0x0B12 
#define GL_POINT_SIZE_GRANULARITY         0x0B13 
#define GL_LINE_SMOOTH                    0x0B20 
#define GL_LINE_WIDTH                     0x0B21 
#define GL_LINE_WIDTH_RANGE               0x0B22 
#define GL_LINE_WIDTH_GRANULARITY         0x0B23 
#define GL_POLYGON_MODE                   0x0B40 
#define GL_POLYGON_SMOOTH                 0x0B41 
#define GL_CULL_FACE                      0x0B44 
#define GL_CULL_FACE_MODE                 0x0B45 
#define GL_FRONT_FACE                     0x0B46 
#define GL_DEPTH_RANGE                    0x0B70 
#define GL_DEPTH_TEST                     0x0B71 
#define GL_DEPTH_WRITEMASK                0x0B72 
#define GL_DEPTH_CLEAR_VALUE              0x0B73 
#define GL_DEPTH_FUNC                     0x0B74 
#define GL_STENCIL_TEST                   0x0B90 
#define GL_STENCIL_CLEAR_VALUE            0x0B91 
#define GL_STENCIL_FUNC                   0x0B92 
#define GL_STENCIL_VALUE_MASK             0x0B93 
#define GL_STENCIL_FAIL                   0x0B94 
#define GL_STENCIL_PASS_DEPTH_FAIL        0x0B95 
#define GL_STENCIL_PASS_DEPTH_PASS        0x0B96 
#define GL_STENCIL_REF                    0x0B97 
#define GL_STENCIL_WRITEMASK              0x0B98 
#define GL_VIEWPORT                       0x0BA2 
#define GL_DITHER                         0x0BD0 
#define GL_BLEND_DST                      0x0BE0 
#define GL_BLEND_SRC                      0x0BE1 
#define GL_BLEND                          0x0BE2 
#define GL_LOGIC_OP_MODE                  0x0BF0 
#define GL_DRAW_BUFFER                    0x0C01 
#define GL_READ_BUFFER                    0x0C02 
#define GL_SCISSOR_BOX                    0x0C10 
#define GL_SCISSOR_TEST                   0x0C11 
#define GL_COLOR_CLEAR_VALUE              0x0C22 
#define GL_COLOR_WRITEMASK                0x0C23 
#define GL_DOUBLEBUFFER                   0x0C32 
#define GL_STEREO                         0x0C33 
#define GL_LINE_SMOOTH_HINT               0x0C52 
#define GL_POLYGON_SMOOTH_HINT            0x0C53 
#define GL_UNPACK_SWAP_BYTES              0x0CF0 
#define GL_UNPACK_LSB_FIRST               0x0CF1 
#define GL_UNPACK_ROW_LENGTH              0x0CF2 
#define GL_UNPACK_SKIP_ROWS               0x0CF3 
#define GL_UNPACK_SKIP_PIXELS             0x0CF4 
#define GL_UNPACK_ALIGNMENT               0x0CF5 
#define GL_PACK_SWAP_BYTES                0x0D00 
#define GL_PACK_LSB_FIRST                 0x0D01 
#define GL_PACK_ROW_LENGTH                0x0D02 
#define GL_PACK_SKIP_ROWS                 0x0D03 
#define GL_PACK_SKIP_PIXELS               0x0D04 
#define GL_PACK_ALIGNMENT                 0x0D05 
#define GL_MAX_TEXTURE_SIZE               0x0D33 
#define GL_MAX_VIEWPORT_DIMS              0x0D3A 
#define GL_SUBPIXEL_BITS                  0x0D50 
#define GL_TEXTURE_1D                     0x0DE0 
#define GL_TEXTURE_2D                     0x0DE1 
#define GL_TEXTURE_WIDTH                  0x1000 
#define GL_TEXTURE_HEIGHT                 0x1001 
#define GL_TEXTURE_BORDER_COLOR           0x1004 
#define GL_DONT_CARE                      0x1100 
#define GL_FASTEST                        0x1101 
#define GL_NICEST                         0x1102 
#define GL_BYTE                           0x1400 
#define GL_UNSIGNED_BYTE                  0x1401 
#define GL_SHORT                          0x1402 
#define GL_UNSIGNED_SHORT                 0x1403 
#define GL_INT                            0x1404 
#define GL_UNSIGNED_INT                   0x1405 
#define GL_FLOAT                          0x1406 
#define GL_STACK_OVERFLOW                 0x0503 
#define GL_STACK_UNDERFLOW                0x0504 
#define GL_CLEAR                          0x1500 
#define GL_AND                            0x1501 
#define GL_AND_REVERSE                    0x1502 
#define GL_COPY                           0x1503 
#define GL_AND_INVERTED                   0x1504 
#define GL_NOOP                           0x1505 
#define GL_XOR                            0x1506 
#define GL_OR                             0x1507 
#define GL_NOR                            0x1508 
#define GL_EQUIV                          0x1509 
#define GL_INVERT                         0x150A 
#define GL_OR_REVERSE                     0x150B 
#define GL_COPY_INVERTED                  0x150C 
#define GL_OR_INVERTED                    0x150D 
#define GL_NAND                           0x150E 
#define GL_SET                            0x150F 
#define GL_TEXTURE                        0x1702 
#define GL_COLOR                          0x1800 
#define GL_DEPTH                          0x1801 
#define GL_STENCIL                        0x1802 
#define GL_STENCIL_INDEX                  0x1901 
#define GL_DEPTH_COMPONENT                0x1902 
#define GL_RED                            0x1903 
#define GL_GREEN                          0x1904 
#define GL_BLUE                           0x1905 
#define GL_ALPHA                          0x1906 
#define GL_RGB                            0x1907 
#define GL_RGBA                           0x1908 
#define GL_POINT                          0x1B00 
#define GL_LINE                           0x1B01 
#define GL_FILL                           0x1B02 
#define GL_KEEP                           0x1E00 
#define GL_REPLACE                        0x1E01 
#define GL_INCR                           0x1E02 
#define GL_DECR                           0x1E03 
#define GL_VENDOR                         0x1F00 
#define GL_RENDERER                       0x1F01 
#define GL_VERSION                        0x1F02 
#define GL_EXTENSIONS                     0x1F03 
#define GL_NEAREST                        0x2600 
#define GL_LINEAR                         0x2601 
#define GL_NEAREST_MIPMAP_NEAREST         0x2700 
#define GL_LINEAR_MIPMAP_NEAREST          0x2701 
#define GL_NEAREST_MIPMAP_LINEAR          0x2702 
#define GL_LINEAR_MIPMAP_LINEAR           0x2703 
#define GL_TEXTURE_MAG_FILTER             0x2800 
#define GL_TEXTURE_MIN_FILTER             0x2801 
#define GL_TEXTURE_WRAP_S                 0x2802 
#define GL_TEXTURE_WRAP_T                 0x2803 
#define GL_REPEAT                         0x2901 

// functions typedefs
typedef void (APIENTRYP PFN_GLCULLFACE_PROC) (GLenum mode);
typedef void (APIENTRYP PFN_GLFRONTFACE_PROC) (GLenum mode);
typedef void (APIENTRYP PFN_GLHINT_PROC) (GLenum target, GLenum mode);
typedef void (APIENTRYP PFN_GLLINEWIDTH_PROC) (GLfloat width);
typedef void (APIENTRYP PFN_GLPOINTSIZE_PROC) (GLfloat size);
typedef void (APIENTRYP PFN_GLPOLYGONMODE_PROC) (GLenum face, GLenum mode);
typedef void (APIENTRYP PFN_GLSCISSOR_PROC) (GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLTEXPARAMETERF_PROC) (GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLTEXPARAMETERFV_PROC) (GLenum target, GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLTEXPARAMETERI_PROC) (GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLTEXPARAMETERIV_PROC) (GLenum target, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLTEXIMAGE1D_PROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLTEXIMAGE2D_PROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLDRAWBUFFER_PROC) (GLenum buf);
typedef void (APIENTRYP PFN_GLCLEAR_PROC) (GLbitfield mask);
typedef void (APIENTRYP PFN_GLCLEARCOLOR_PROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (APIENTRYP PFN_GLCLEARSTENCIL_PROC) (GLint s);
typedef void (APIENTRYP PFN_GLCLEARDEPTH_PROC) (GLdouble depth);
typedef void (APIENTRYP PFN_GLSTENCILMASK_PROC) (GLuint mask);
typedef void (APIENTRYP PFN_GLCOLORMASK_PROC) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void (APIENTRYP PFN_GLDEPTHMASK_PROC) (GLboolean flag);
typedef void (APIENTRYP PFN_GLDISABLE_PROC) (GLenum cap);
typedef void (APIENTRYP PFN_GLENABLE_PROC) (GLenum cap);
typedef void (APIENTRYP PFN_GLFINISH_PROC) (void);
typedef void (APIENTRYP PFN_GLFLUSH_PROC) (void);
typedef void (APIENTRYP PFN_GLBLENDFUNC_PROC) (GLenum sfactor, GLenum dfactor);
typedef void (APIENTRYP PFN_GLLOGICOP_PROC) (GLenum opcode);
typedef void (APIENTRYP PFN_GLSTENCILFUNC_PROC) (GLenum func, GLint ref, GLuint mask);
typedef void (APIENTRYP PFN_GLSTENCILOP_PROC) (GLenum fail, GLenum zfail, GLenum zpass);
typedef void (APIENTRYP PFN_GLDEPTHFUNC_PROC) (GLenum func);
typedef void (APIENTRYP PFN_GLPIXELSTOREF_PROC) (GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLPIXELSTOREI_PROC) (GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLREADBUFFER_PROC) (GLenum src);
typedef void (APIENTRYP PFN_GLREADPIXELS_PROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);
typedef void (APIENTRYP PFN_GLGETBOOLEANV_PROC) (GLenum pname, GLboolean * data);
typedef void (APIENTRYP PFN_GLGETDOUBLEV_PROC) (GLenum pname, GLdouble * data);
typedef GLenum (APIENTRYP PFN_GLGETERROR_PROC) (void);
typedef void (APIENTRYP PFN_GLGETFLOATV_PROC) (GLenum pname, GLfloat * data);
typedef void (APIENTRYP PFN_GLGETINTEGERV_PROC) (GLenum pname, GLint * data);
typedef const GLubyte * (APIENTRYP PFN_GLGETSTRING_PROC) (GLenum name);
typedef void (APIENTRYP PFN_GLGETTEXIMAGE_PROC) (GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
typedef void (APIENTRYP PFN_GLGETTEXPARAMETERFV_PROC) (GLenum target, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETTEXPARAMETERIV_PROC) (GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETTEXLEVELPARAMETERFV_PROC) (GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETTEXLEVELPARAMETERIV_PROC) (GLenum target, GLint level, GLenum pname, GLint * params);
typedef GLboolean (APIENTRYP PFN_GLISENABLED_PROC) (GLenum cap);
typedef void (APIENTRYP PFN_GLDEPTHRANGE_PROC) (GLdouble n, GLdouble f);
typedef void (APIENTRYP PFN_GLVIEWPORT_PROC) (GLint x, GLint y, GLsizei width, GLsizei height);

// functions typedefs
GL_FUNC_DEF PFN_GLCULLFACE_PROC _glCullFace_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRONTFACE_PROC _glFrontFace_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLHINT_PROC _glHint_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLINEWIDTH_PROC _glLineWidth_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOINTSIZE_PROC _glPointSize_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOLYGONMODE_PROC _glPolygonMode_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSCISSOR_PROC _glScissor_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXPARAMETERF_PROC _glTexParameterf_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXPARAMETERFV_PROC _glTexParameterfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXPARAMETERI_PROC _glTexParameteri_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXPARAMETERIV_PROC _glTexParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXIMAGE1D_PROC _glTexImage1D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXIMAGE2D_PROC _glTexImage2D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWBUFFER_PROC _glDrawBuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEAR_PROC _glClear_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARCOLOR_PROC _glClearColor_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARSTENCIL_PROC _glClearStencil_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARDEPTH_PROC _glClearDepth_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSTENCILMASK_PROC _glStencilMask_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLORMASK_PROC _glColorMask_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDEPTHMASK_PROC _glDepthMask_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDISABLE_PROC _glDisable_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENABLE_PROC _glEnable_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFINISH_PROC _glFinish_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFLUSH_PROC _glFlush_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBLENDFUNC_PROC _glBlendFunc_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLOGICOP_PROC _glLogicOp_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSTENCILFUNC_PROC _glStencilFunc_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSTENCILOP_PROC _glStencilOp_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDEPTHFUNC_PROC _glDepthFunc_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPIXELSTOREF_PROC _glPixelStoref_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPIXELSTOREI_PROC _glPixelStorei_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREADBUFFER_PROC _glReadBuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREADPIXELS_PROC _glReadPixels_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETBOOLEANV_PROC _glGetBooleanv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETDOUBLEV_PROC _glGetDoublev_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETERROR_PROC _glGetError_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFLOATV_PROC _glGetFloatv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETINTEGERV_PROC _glGetIntegerv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETSTRING_PROC _glGetString_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXIMAGE_PROC _glGetTexImage_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXPARAMETERFV_PROC _glGetTexParameterfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXPARAMETERIV_PROC _glGetTexParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXLEVELPARAMETERFV_PROC _glGetTexLevelParameterfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXLEVELPARAMETERIV_PROC _glGetTexLevelParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISENABLED_PROC _glIsEnabled_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDEPTHRANGE_PROC _glDepthRange_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVIEWPORT_PROC _glViewport_ GL_FUNC_DEF2;

// functions inline wrap
inline void glCullFace (GLenum mode) { return _glCullFace_(mode); };
inline void glFrontFace (GLenum mode) { return _glFrontFace_(mode); };
inline void glHint (GLenum target, GLenum mode) { return _glHint_(target, mode); };
inline void glLineWidth (GLfloat width) { return _glLineWidth_(width); };
inline void glPointSize (GLfloat size) { return _glPointSize_(size); };
inline void glPolygonMode (GLenum face, GLenum mode) { return _glPolygonMode_(face, mode); };
inline void glScissor (GLint x, GLint y, GLsizei width, GLsizei height) { return _glScissor_(x, y, width, height); };
inline void glTexParameterf (GLenum target, GLenum pname, GLfloat param) { return _glTexParameterf_(target, pname, param); };
inline void glTexParameterfv (GLenum target, GLenum pname, const GLfloat * params) { return _glTexParameterfv_(target, pname, params); };
inline void glTexParameteri (GLenum target, GLenum pname, GLint param) { return _glTexParameteri_(target, pname, param); };
inline void glTexParameteriv (GLenum target, GLenum pname, const GLint * params) { return _glTexParameteriv_(target, pname, params); };
inline void glTexImage1D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) { return _glTexImage1D_(target, level, internalformat, width, border, format, type, pixels); };
inline void glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) { return _glTexImage2D_(target, level, internalformat, width, height, border, format, type, pixels); };
inline void glDrawBuffer (GLenum buf) { return _glDrawBuffer_(buf); };
inline void glClear (GLbitfield mask) { return _glClear_(mask); };
inline void glClearColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { return _glClearColor_(red, green, blue, alpha); };
inline void glClearStencil (GLint s) { return _glClearStencil_(s); };
inline void glClearDepth (GLdouble depth) { return _glClearDepth_(depth); };
inline void glStencilMask (GLuint mask) { return _glStencilMask_(mask); };
inline void glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) { return _glColorMask_(red, green, blue, alpha); };
inline void glDepthMask (GLboolean flag) { return _glDepthMask_(flag); };
inline void glDisable (GLenum cap) { return _glDisable_(cap); };
inline void glEnable (GLenum cap) { return _glEnable_(cap); };
inline void glFinish (void) { return _glFinish_(); };
inline void glFlush (void) { return _glFlush_(); };
inline void glBlendFunc (GLenum sfactor, GLenum dfactor) { return _glBlendFunc_(sfactor, dfactor); };
inline void glLogicOp (GLenum opcode) { return _glLogicOp_(opcode); };
inline void glStencilFunc (GLenum func, GLint ref, GLuint mask) { return _glStencilFunc_(func, ref, mask); };
inline void glStencilOp (GLenum fail, GLenum zfail, GLenum zpass) { return _glStencilOp_(fail, zfail, zpass); };
inline void glDepthFunc (GLenum func) { return _glDepthFunc_(func); };
inline void glPixelStoref (GLenum pname, GLfloat param) { return _glPixelStoref_(pname, param); };
inline void glPixelStorei (GLenum pname, GLint param) { return _glPixelStorei_(pname, param); };
inline void glReadBuffer (GLenum src) { return _glReadBuffer_(src); };
inline void glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels) { return _glReadPixels_(x, y, width, height, format, type, pixels); };
inline void glGetBooleanv (GLenum pname, GLboolean * data) { return _glGetBooleanv_(pname, data); };
inline void glGetDoublev (GLenum pname, GLdouble * data) { return _glGetDoublev_(pname, data); };
inline GLenum glGetError (void) { return _glGetError_(); };
inline void glGetFloatv (GLenum pname, GLfloat * data) { return _glGetFloatv_(pname, data); };
inline void glGetIntegerv (GLenum pname, GLint * data) { return _glGetIntegerv_(pname, data); };
inline const GLubyte * glGetString (GLenum name) { return _glGetString_(name); };
inline void glGetTexImage (GLenum target, GLint level, GLenum format, GLenum type, void * pixels) { return _glGetTexImage_(target, level, format, type, pixels); };
inline void glGetTexParameterfv (GLenum target, GLenum pname, GLfloat * params) { return _glGetTexParameterfv_(target, pname, params); };
inline void glGetTexParameteriv (GLenum target, GLenum pname, GLint * params) { return _glGetTexParameteriv_(target, pname, params); };
inline void glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat * params) { return _glGetTexLevelParameterfv_(target, level, pname, params); };
inline void glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint * params) { return _glGetTexLevelParameteriv_(target, level, pname, params); };
inline GLboolean glIsEnabled (GLenum cap) { return _glIsEnabled_(cap); };
inline void glDepthRange (GLdouble n, GLdouble f) { return _glDepthRange_(n, f); };
inline void glViewport (GLint x, GLint y, GLsizei width, GLsizei height) { return _glViewport_(x, y, width, height); };
#endif //GL_VERSION_1_0

#ifndef GL_VERSION_1_1

// Defines
#define GL_COLOR_LOGIC_OP                 0x0BF2 
#define GL_POLYGON_OFFSET_UNITS           0x2A00 
#define GL_POLYGON_OFFSET_POINT           0x2A01 
#define GL_POLYGON_OFFSET_LINE            0x2A02 
#define GL_POLYGON_OFFSET_FILL            0x8037 
#define GL_POLYGON_OFFSET_FACTOR          0x8038 
#define GL_TEXTURE_BINDING_1D             0x8068 
#define GL_TEXTURE_BINDING_2D             0x8069 
#define GL_TEXTURE_INTERNAL_FORMAT        0x1003 
#define GL_TEXTURE_RED_SIZE               0x805C 
#define GL_TEXTURE_GREEN_SIZE             0x805D 
#define GL_TEXTURE_BLUE_SIZE              0x805E 
#define GL_TEXTURE_ALPHA_SIZE             0x805F 
#define GL_DOUBLE                         0x140A 
#define GL_PROXY_TEXTURE_1D               0x8063 
#define GL_PROXY_TEXTURE_2D               0x8064 
#define GL_R3_G3_B2                       0x2A10 
#define GL_RGB4                           0x804F 
#define GL_RGB5                           0x8050 
#define GL_RGB8                           0x8051 
#define GL_RGB10                          0x8052 
#define GL_RGB12                          0x8053 
#define GL_RGB16                          0x8054 
#define GL_RGBA2                          0x8055 
#define GL_RGBA4                          0x8056 
#define GL_RGB5_A1                        0x8057 
#define GL_RGBA8                          0x8058 
#define GL_RGB10_A2                       0x8059 
#define GL_RGBA12                         0x805A 
#define GL_RGBA16                         0x805B 
#define GL_VERTEX_ARRAY                   0x8074 

// functions typedefs
typedef void (APIENTRYP PFN_GLDRAWARRAYS_PROC) (GLenum mode, GLint first, GLsizei count);
typedef void (APIENTRYP PFN_GLDRAWELEMENTS_PROC) (GLenum mode, GLsizei count, GLenum type, const void * indices);
typedef void (APIENTRYP PFN_GLGETPOINTERV_PROC) (GLenum pname, void * * params);
typedef void (APIENTRYP PFN_GLPOLYGONOFFSET_PROC) (GLfloat factor, GLfloat units);
typedef void (APIENTRYP PFN_GLCOPYTEXIMAGE1D_PROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (APIENTRYP PFN_GLCOPYTEXIMAGE2D_PROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (APIENTRYP PFN_GLCOPYTEXSUBIMAGE1D_PROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (APIENTRYP PFN_GLCOPYTEXSUBIMAGE2D_PROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLTEXSUBIMAGE1D_PROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLTEXSUBIMAGE2D_PROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLBINDTEXTURE_PROC) (GLenum target, GLuint texture);
typedef void (APIENTRYP PFN_GLDELETETEXTURES_PROC) (GLsizei n, const GLuint * textures);
typedef void (APIENTRYP PFN_GLGENTEXTURES_PROC) (GLsizei n, GLuint * textures);
typedef GLboolean (APIENTRYP PFN_GLISTEXTURE_PROC) (GLuint texture);

// functions typedefs
GL_FUNC_DEF PFN_GLDRAWARRAYS_PROC _glDrawArrays_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWELEMENTS_PROC _glDrawElements_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPOINTERV_PROC _glGetPointerv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOLYGONOFFSET_PROC _glPolygonOffset_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYTEXIMAGE1D_PROC _glCopyTexImage1D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYTEXIMAGE2D_PROC _glCopyTexImage2D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYTEXSUBIMAGE1D_PROC _glCopyTexSubImage1D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYTEXSUBIMAGE2D_PROC _glCopyTexSubImage2D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXSUBIMAGE1D_PROC _glTexSubImage1D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXSUBIMAGE2D_PROC _glTexSubImage2D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDTEXTURE_PROC _glBindTexture_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETETEXTURES_PROC _glDeleteTextures_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENTEXTURES_PROC _glGenTextures_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISTEXTURE_PROC _glIsTexture_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDrawArrays (GLenum mode, GLint first, GLsizei count) { return _glDrawArrays_(mode, first, count); };
inline void glDrawElements (GLenum mode, GLsizei count, GLenum type, const void * indices) { return _glDrawElements_(mode, count, type, indices); };
inline void glGetPointerv (GLenum pname, void * * params) { return _glGetPointerv_(pname, params); };
inline void glPolygonOffset (GLfloat factor, GLfloat units) { return _glPolygonOffset_(factor, units); };
inline void glCopyTexImage1D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { return _glCopyTexImage1D_(target, level, internalformat, x, y, width, border); };
inline void glCopyTexImage2D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { return _glCopyTexImage2D_(target, level, internalformat, x, y, width, height, border); };
inline void glCopyTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { return _glCopyTexSubImage1D_(target, level, xoffset, x, y, width); };
inline void glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { return _glCopyTexSubImage2D_(target, level, xoffset, yoffset, x, y, width, height); };
inline void glTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { return _glTexSubImage1D_(target, level, xoffset, width, format, type, pixels); };
inline void glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { return _glTexSubImage2D_(target, level, xoffset, yoffset, width, height, format, type, pixels); };
inline void glBindTexture (GLenum target, GLuint texture) { return _glBindTexture_(target, texture); };
inline void glDeleteTextures (GLsizei n, const GLuint * textures) { return _glDeleteTextures_(n, textures); };
inline void glGenTextures (GLsizei n, GLuint * textures) { return _glGenTextures_(n, textures); };
inline GLboolean glIsTexture (GLuint texture) { return _glIsTexture_(texture); };
#endif //GL_VERSION_1_1

#ifndef GL_VERSION_1_2

// Defines
#define GL_UNSIGNED_BYTE_3_3_2            0x8032 
#define GL_UNSIGNED_SHORT_4_4_4_4         0x8033 
#define GL_UNSIGNED_SHORT_5_5_5_1         0x8034 
#define GL_UNSIGNED_INT_8_8_8_8           0x8035 
#define GL_UNSIGNED_INT_10_10_10_2        0x8036 
#define GL_TEXTURE_BINDING_3D             0x806A 
#define GL_PACK_SKIP_IMAGES               0x806B 
#define GL_PACK_IMAGE_HEIGHT              0x806C 
#define GL_UNPACK_SKIP_IMAGES             0x806D 
#define GL_UNPACK_IMAGE_HEIGHT            0x806E 
#define GL_TEXTURE_3D                     0x806F 
#define GL_PROXY_TEXTURE_3D               0x8070 
#define GL_TEXTURE_DEPTH                  0x8071 
#define GL_TEXTURE_WRAP_R                 0x8072 
#define GL_MAX_3D_TEXTURE_SIZE            0x8073 
#define GL_UNSIGNED_BYTE_2_3_3_REV        0x8362 
#define GL_UNSIGNED_SHORT_5_6_5           0x8363 
#define GL_UNSIGNED_SHORT_5_6_5_REV       0x8364 
#define GL_UNSIGNED_SHORT_4_4_4_4_REV     0x8365 
#define GL_UNSIGNED_SHORT_1_5_5_5_REV     0x8366 
#define GL_UNSIGNED_INT_8_8_8_8_REV       0x8367 
#define GL_UNSIGNED_INT_2_10_10_10_REV    0x8368 
#define GL_BGR                            0x80E0 
#define GL_BGRA                           0x80E1 
#define GL_MAX_ELEMENTS_VERTICES          0x80E8 
#define GL_MAX_ELEMENTS_INDICES           0x80E9 
#define GL_CLAMP_TO_EDGE                  0x812F 
#define GL_TEXTURE_MIN_LOD                0x813A 
#define GL_TEXTURE_MAX_LOD                0x813B 
#define GL_TEXTURE_BASE_LEVEL             0x813C 
#define GL_TEXTURE_MAX_LEVEL              0x813D 
#define GL_SMOOTH_POINT_SIZE_RANGE        0x0B12 
#define GL_SMOOTH_POINT_SIZE_GRANULARITY  0x0B13 
#define GL_SMOOTH_LINE_WIDTH_RANGE        0x0B22 
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY  0x0B23 
#define GL_ALIASED_LINE_WIDTH_RANGE       0x846E 
#define GL_RESCALE_NORMAL                 0x803A 
#define GL_LIGHT_MODEL_COLOR_CONTROL      0x81F8 
#define GL_SINGLE_COLOR                   0x81F9 
#define GL_SEPARATE_SPECULAR_COLOR        0x81FA 
#define GL_ALIASED_POINT_SIZE_RANGE       0x846D 

// functions typedefs
typedef void (APIENTRYP PFN_GLDRAWRANGEELEMENTS_PROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
typedef void (APIENTRYP PFN_GLTEXIMAGE3D_PROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLTEXSUBIMAGE3D_PROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLCOPYTEXSUBIMAGE3D_PROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);

// functions typedefs
GL_FUNC_DEF PFN_GLDRAWRANGEELEMENTS_PROC _glDrawRangeElements_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXIMAGE3D_PROC _glTexImage3D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXSUBIMAGE3D_PROC _glTexSubImage3D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYTEXSUBIMAGE3D_PROC _glCopyTexSubImage3D_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDrawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) { return _glDrawRangeElements_(mode, start, end, count, type, indices); };
inline void glTexImage3D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { return _glTexImage3D_(target, level, internalformat, width, height, depth, border, format, type, pixels); };
inline void glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { return _glTexSubImage3D_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); };
inline void glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { return _glCopyTexSubImage3D_(target, level, xoffset, yoffset, zoffset, x, y, width, height); };
#endif //GL_VERSION_1_2

#ifndef GL_VERSION_1_3

// Defines
#define GL_TEXTURE0                       0x84C0 
#define GL_TEXTURE1                       0x84C1 
#define GL_TEXTURE2                       0x84C2 
#define GL_TEXTURE3                       0x84C3 
#define GL_TEXTURE4                       0x84C4 
#define GL_TEXTURE5                       0x84C5 
#define GL_TEXTURE6                       0x84C6 
#define GL_TEXTURE7                       0x84C7 
#define GL_TEXTURE8                       0x84C8 
#define GL_TEXTURE9                       0x84C9 
#define GL_TEXTURE10                      0x84CA 
#define GL_TEXTURE11                      0x84CB 
#define GL_TEXTURE12                      0x84CC 
#define GL_TEXTURE13                      0x84CD 
#define GL_TEXTURE14                      0x84CE 
#define GL_TEXTURE15                      0x84CF 
#define GL_TEXTURE16                      0x84D0 
#define GL_TEXTURE17                      0x84D1 
#define GL_TEXTURE18                      0x84D2 
#define GL_TEXTURE19                      0x84D3 
#define GL_TEXTURE20                      0x84D4 
#define GL_TEXTURE21                      0x84D5 
#define GL_TEXTURE22                      0x84D6 
#define GL_TEXTURE23                      0x84D7 
#define GL_TEXTURE24                      0x84D8 
#define GL_TEXTURE25                      0x84D9 
#define GL_TEXTURE26                      0x84DA 
#define GL_TEXTURE27                      0x84DB 
#define GL_TEXTURE28                      0x84DC 
#define GL_TEXTURE29                      0x84DD 
#define GL_TEXTURE30                      0x84DE 
#define GL_TEXTURE31                      0x84DF 
#define GL_ACTIVE_TEXTURE                 0x84E0 
#define GL_MULTISAMPLE                    0x809D 
#define GL_SAMPLE_ALPHA_TO_COVERAGE       0x809E 
#define GL_SAMPLE_ALPHA_TO_ONE            0x809F 
#define GL_SAMPLE_COVERAGE                0x80A0 
#define GL_SAMPLE_BUFFERS                 0x80A8 
#define GL_SAMPLES                        0x80A9 
#define GL_SAMPLE_COVERAGE_VALUE          0x80AA 
#define GL_SAMPLE_COVERAGE_INVERT         0x80AB 
#define GL_TEXTURE_CUBE_MAP               0x8513 
#define GL_TEXTURE_BINDING_CUBE_MAP       0x8514 
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X    0x8515 
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X    0x8516 
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y    0x8517 
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y    0x8518 
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z    0x8519 
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z    0x851A 
#define GL_PROXY_TEXTURE_CUBE_MAP         0x851B 
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE      0x851C 
#define GL_COMPRESSED_RGB                 0x84ED 
#define GL_COMPRESSED_RGBA                0x84EE 
#define GL_TEXTURE_COMPRESSION_HINT       0x84EF 
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE  0x86A0 
#define GL_TEXTURE_COMPRESSED             0x86A1 
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2 
#define GL_COMPRESSED_TEXTURE_FORMATS     0x86A3 
#define GL_CLAMP_TO_BORDER                0x812D 
#define GL_CLIENT_ACTIVE_TEXTURE          0x84E1 
#define GL_MAX_TEXTURE_UNITS              0x84E2 
#define GL_TRANSPOSE_MODELVIEW_MATRIX     0x84E3 
#define GL_TRANSPOSE_PROJECTION_MATRIX    0x84E4 
#define GL_TRANSPOSE_TEXTURE_MATRIX       0x84E5 
#define GL_TRANSPOSE_COLOR_MATRIX         0x84E6 
#define GL_MULTISAMPLE_BIT                0x20000000 
#define GL_NORMAL_MAP                     0x8511 
#define GL_REFLECTION_MAP                 0x8512 
#define GL_COMPRESSED_ALPHA               0x84E9 
#define GL_COMPRESSED_LUMINANCE           0x84EA 
#define GL_COMPRESSED_LUMINANCE_ALPHA     0x84EB 
#define GL_COMPRESSED_INTENSITY           0x84EC 
#define GL_COMBINE                        0x8570 
#define GL_COMBINE_RGB                    0x8571 
#define GL_COMBINE_ALPHA                  0x8572 
#define GL_SOURCE0_RGB                    0x8580 
#define GL_SOURCE1_RGB                    0x8581 
#define GL_SOURCE2_RGB                    0x8582 
#define GL_SOURCE0_ALPHA                  0x8588 
#define GL_SOURCE1_ALPHA                  0x8589 
#define GL_SOURCE2_ALPHA                  0x858A 
#define GL_OPERAND0_RGB                   0x8590 
#define GL_OPERAND1_RGB                   0x8591 
#define GL_OPERAND2_RGB                   0x8592 
#define GL_OPERAND0_ALPHA                 0x8598 
#define GL_OPERAND1_ALPHA                 0x8599 
#define GL_OPERAND2_ALPHA                 0x859A 
#define GL_RGB_SCALE                      0x8573 
#define GL_ADD_SIGNED                     0x8574 
#define GL_INTERPOLATE                    0x8575 
#define GL_SUBTRACT                       0x84E7 
#define GL_CONSTANT                       0x8576 
#define GL_PRIMARY_COLOR                  0x8577 
#define GL_PREVIOUS                       0x8578 
#define GL_DOT3_RGB                       0x86AE 
#define GL_DOT3_RGBA                      0x86AF 

// functions typedefs
typedef void (APIENTRYP PFN_GLACTIVETEXTURE_PROC) (GLenum texture);
typedef void (APIENTRYP PFN_GLSAMPLECOVERAGE_PROC) (GLfloat value, GLboolean invert);
typedef void (APIENTRYP PFN_GLCOMPRESSEDTEXIMAGE3D_PROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
typedef void (APIENTRYP PFN_GLCOMPRESSEDTEXIMAGE2D_PROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
typedef void (APIENTRYP PFN_GLCOMPRESSEDTEXIMAGE1D_PROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
typedef void (APIENTRYP PFN_GLCOMPRESSEDTEXSUBIMAGE3D_PROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void (APIENTRYP PFN_GLCOMPRESSEDTEXSUBIMAGE2D_PROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void (APIENTRYP PFN_GLCOMPRESSEDTEXSUBIMAGE1D_PROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
typedef void (APIENTRYP PFN_GLGETCOMPRESSEDTEXIMAGE_PROC) (GLenum target, GLint level, void * img);
typedef void (APIENTRYP PFN_GLCLIENTACTIVETEXTURE_PROC) (GLenum texture);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1D_PROC) (GLenum target, GLdouble s);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1DV_PROC) (GLenum target, const GLdouble * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1F_PROC) (GLenum target, GLfloat s);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1FV_PROC) (GLenum target, const GLfloat * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1I_PROC) (GLenum target, GLint s);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1IV_PROC) (GLenum target, const GLint * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1S_PROC) (GLenum target, GLshort s);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1SV_PROC) (GLenum target, const GLshort * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2D_PROC) (GLenum target, GLdouble s, GLdouble t);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2DV_PROC) (GLenum target, const GLdouble * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2F_PROC) (GLenum target, GLfloat s, GLfloat t);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2FV_PROC) (GLenum target, const GLfloat * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2I_PROC) (GLenum target, GLint s, GLint t);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2IV_PROC) (GLenum target, const GLint * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2S_PROC) (GLenum target, GLshort s, GLshort t);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2SV_PROC) (GLenum target, const GLshort * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3D_PROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3DV_PROC) (GLenum target, const GLdouble * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3F_PROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3FV_PROC) (GLenum target, const GLfloat * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3I_PROC) (GLenum target, GLint s, GLint t, GLint r);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3IV_PROC) (GLenum target, const GLint * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3S_PROC) (GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3SV_PROC) (GLenum target, const GLshort * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4D_PROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4DV_PROC) (GLenum target, const GLdouble * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4F_PROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4FV_PROC) (GLenum target, const GLfloat * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4I_PROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4IV_PROC) (GLenum target, const GLint * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4S_PROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4SV_PROC) (GLenum target, const GLshort * v);
typedef void (APIENTRYP PFN_GLLOADTRANSPOSEMATRIXF_PROC) (const GLfloat * m);
typedef void (APIENTRYP PFN_GLLOADTRANSPOSEMATRIXD_PROC) (const GLdouble * m);
typedef void (APIENTRYP PFN_GLMULTTRANSPOSEMATRIXF_PROC) (const GLfloat * m);
typedef void (APIENTRYP PFN_GLMULTTRANSPOSEMATRIXD_PROC) (const GLdouble * m);

// functions typedefs
GL_FUNC_DEF PFN_GLACTIVETEXTURE_PROC _glActiveTexture_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSAMPLECOVERAGE_PROC _glSampleCoverage_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDTEXIMAGE3D_PROC _glCompressedTexImage3D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDTEXIMAGE2D_PROC _glCompressedTexImage2D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDTEXIMAGE1D_PROC _glCompressedTexImage1D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDTEXSUBIMAGE3D_PROC _glCompressedTexSubImage3D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDTEXSUBIMAGE2D_PROC _glCompressedTexSubImage2D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDTEXSUBIMAGE1D_PROC _glCompressedTexSubImage1D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOMPRESSEDTEXIMAGE_PROC _glGetCompressedTexImage_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLIENTACTIVETEXTURE_PROC _glClientActiveTexture_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD1D_PROC _glMultiTexCoord1d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD1DV_PROC _glMultiTexCoord1dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD1F_PROC _glMultiTexCoord1f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD1FV_PROC _glMultiTexCoord1fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD1I_PROC _glMultiTexCoord1i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD1IV_PROC _glMultiTexCoord1iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD1S_PROC _glMultiTexCoord1s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD1SV_PROC _glMultiTexCoord1sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2D_PROC _glMultiTexCoord2d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2DV_PROC _glMultiTexCoord2dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2F_PROC _glMultiTexCoord2f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2FV_PROC _glMultiTexCoord2fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2I_PROC _glMultiTexCoord2i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2IV_PROC _glMultiTexCoord2iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2S_PROC _glMultiTexCoord2s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2SV_PROC _glMultiTexCoord2sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3D_PROC _glMultiTexCoord3d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3DV_PROC _glMultiTexCoord3dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3F_PROC _glMultiTexCoord3f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3FV_PROC _glMultiTexCoord3fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3I_PROC _glMultiTexCoord3i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3IV_PROC _glMultiTexCoord3iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3S_PROC _glMultiTexCoord3s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3SV_PROC _glMultiTexCoord3sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4D_PROC _glMultiTexCoord4d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4DV_PROC _glMultiTexCoord4dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4F_PROC _glMultiTexCoord4f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4FV_PROC _glMultiTexCoord4fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4I_PROC _glMultiTexCoord4i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4IV_PROC _glMultiTexCoord4iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4S_PROC _glMultiTexCoord4s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4SV_PROC _glMultiTexCoord4sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLOADTRANSPOSEMATRIXF_PROC _glLoadTransposeMatrixf_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLOADTRANSPOSEMATRIXD_PROC _glLoadTransposeMatrixd_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTTRANSPOSEMATRIXF_PROC _glMultTransposeMatrixf_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTTRANSPOSEMATRIXD_PROC _glMultTransposeMatrixd_ GL_FUNC_DEF2;

// functions inline wrap
inline void glActiveTexture (GLenum texture) { return _glActiveTexture_(texture); };
inline void glSampleCoverage (GLfloat value, GLboolean invert) { return _glSampleCoverage_(value, invert); };
inline void glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) { return _glCompressedTexImage3D_(target, level, internalformat, width, height, depth, border, imageSize, data); };
inline void glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) { return _glCompressedTexImage2D_(target, level, internalformat, width, height, border, imageSize, data); };
inline void glCompressedTexImage1D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) { return _glCompressedTexImage1D_(target, level, internalformat, width, border, imageSize, data); };
inline void glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { return _glCompressedTexSubImage3D_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); };
inline void glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) { return _glCompressedTexSubImage2D_(target, level, xoffset, yoffset, width, height, format, imageSize, data); };
inline void glCompressedTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) { return _glCompressedTexSubImage1D_(target, level, xoffset, width, format, imageSize, data); };
inline void glGetCompressedTexImage (GLenum target, GLint level, void * img) { return _glGetCompressedTexImage_(target, level, img); };
inline void glClientActiveTexture (GLenum texture) { return _glClientActiveTexture_(texture); };
inline void glMultiTexCoord1d (GLenum target, GLdouble s) { return _glMultiTexCoord1d_(target, s); };
inline void glMultiTexCoord1dv (GLenum target, const GLdouble * v) { return _glMultiTexCoord1dv_(target, v); };
inline void glMultiTexCoord1f (GLenum target, GLfloat s) { return _glMultiTexCoord1f_(target, s); };
inline void glMultiTexCoord1fv (GLenum target, const GLfloat * v) { return _glMultiTexCoord1fv_(target, v); };
inline void glMultiTexCoord1i (GLenum target, GLint s) { return _glMultiTexCoord1i_(target, s); };
inline void glMultiTexCoord1iv (GLenum target, const GLint * v) { return _glMultiTexCoord1iv_(target, v); };
inline void glMultiTexCoord1s (GLenum target, GLshort s) { return _glMultiTexCoord1s_(target, s); };
inline void glMultiTexCoord1sv (GLenum target, const GLshort * v) { return _glMultiTexCoord1sv_(target, v); };
inline void glMultiTexCoord2d (GLenum target, GLdouble s, GLdouble t) { return _glMultiTexCoord2d_(target, s, t); };
inline void glMultiTexCoord2dv (GLenum target, const GLdouble * v) { return _glMultiTexCoord2dv_(target, v); };
inline void glMultiTexCoord2f (GLenum target, GLfloat s, GLfloat t) { return _glMultiTexCoord2f_(target, s, t); };
inline void glMultiTexCoord2fv (GLenum target, const GLfloat * v) { return _glMultiTexCoord2fv_(target, v); };
inline void glMultiTexCoord2i (GLenum target, GLint s, GLint t) { return _glMultiTexCoord2i_(target, s, t); };
inline void glMultiTexCoord2iv (GLenum target, const GLint * v) { return _glMultiTexCoord2iv_(target, v); };
inline void glMultiTexCoord2s (GLenum target, GLshort s, GLshort t) { return _glMultiTexCoord2s_(target, s, t); };
inline void glMultiTexCoord2sv (GLenum target, const GLshort * v) { return _glMultiTexCoord2sv_(target, v); };
inline void glMultiTexCoord3d (GLenum target, GLdouble s, GLdouble t, GLdouble r) { return _glMultiTexCoord3d_(target, s, t, r); };
inline void glMultiTexCoord3dv (GLenum target, const GLdouble * v) { return _glMultiTexCoord3dv_(target, v); };
inline void glMultiTexCoord3f (GLenum target, GLfloat s, GLfloat t, GLfloat r) { return _glMultiTexCoord3f_(target, s, t, r); };
inline void glMultiTexCoord3fv (GLenum target, const GLfloat * v) { return _glMultiTexCoord3fv_(target, v); };
inline void glMultiTexCoord3i (GLenum target, GLint s, GLint t, GLint r) { return _glMultiTexCoord3i_(target, s, t, r); };
inline void glMultiTexCoord3iv (GLenum target, const GLint * v) { return _glMultiTexCoord3iv_(target, v); };
inline void glMultiTexCoord3s (GLenum target, GLshort s, GLshort t, GLshort r) { return _glMultiTexCoord3s_(target, s, t, r); };
inline void glMultiTexCoord3sv (GLenum target, const GLshort * v) { return _glMultiTexCoord3sv_(target, v); };
inline void glMultiTexCoord4d (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) { return _glMultiTexCoord4d_(target, s, t, r, q); };
inline void glMultiTexCoord4dv (GLenum target, const GLdouble * v) { return _glMultiTexCoord4dv_(target, v); };
inline void glMultiTexCoord4f (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) { return _glMultiTexCoord4f_(target, s, t, r, q); };
inline void glMultiTexCoord4fv (GLenum target, const GLfloat * v) { return _glMultiTexCoord4fv_(target, v); };
inline void glMultiTexCoord4i (GLenum target, GLint s, GLint t, GLint r, GLint q) { return _glMultiTexCoord4i_(target, s, t, r, q); };
inline void glMultiTexCoord4iv (GLenum target, const GLint * v) { return _glMultiTexCoord4iv_(target, v); };
inline void glMultiTexCoord4s (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) { return _glMultiTexCoord4s_(target, s, t, r, q); };
inline void glMultiTexCoord4sv (GLenum target, const GLshort * v) { return _glMultiTexCoord4sv_(target, v); };
inline void glLoadTransposeMatrixf (const GLfloat * m) { return _glLoadTransposeMatrixf_(m); };
inline void glLoadTransposeMatrixd (const GLdouble * m) { return _glLoadTransposeMatrixd_(m); };
inline void glMultTransposeMatrixf (const GLfloat * m) { return _glMultTransposeMatrixf_(m); };
inline void glMultTransposeMatrixd (const GLdouble * m) { return _glMultTransposeMatrixd_(m); };
#endif //GL_VERSION_1_3

#ifndef GL_VERSION_1_4

// Defines
#define GL_BLEND_DST_RGB                  0x80C8 
#define GL_BLEND_SRC_RGB                  0x80C9 
#define GL_BLEND_DST_ALPHA                0x80CA 
#define GL_BLEND_SRC_ALPHA                0x80CB 
#define GL_POINT_FADE_THRESHOLD_SIZE      0x8128 
#define GL_DEPTH_COMPONENT16              0x81A5 
#define GL_DEPTH_COMPONENT24              0x81A6 
#define GL_DEPTH_COMPONENT32              0x81A7 
#define GL_MIRRORED_REPEAT                0x8370 
#define GL_MAX_TEXTURE_LOD_BIAS           0x84FD 
#define GL_TEXTURE_LOD_BIAS               0x8501 
#define GL_INCR_WRAP                      0x8507 
#define GL_DECR_WRAP                      0x8508 
#define GL_TEXTURE_DEPTH_SIZE             0x884A 
#define GL_TEXTURE_COMPARE_MODE           0x884C 
#define GL_TEXTURE_COMPARE_FUNC           0x884D 
#define GL_BLEND_COLOR                    0x8005 
#define GL_BLEND_EQUATION                 0x8009 
#define GL_CONSTANT_COLOR                 0x8001 
#define GL_ONE_MINUS_CONSTANT_COLOR       0x8002 
#define GL_CONSTANT_ALPHA                 0x8003 
#define GL_ONE_MINUS_CONSTANT_ALPHA       0x8004 
#define GL_FUNC_ADD                       0x8006 
#define GL_FUNC_REVERSE_SUBTRACT          0x800B 
#define GL_FUNC_SUBTRACT                  0x800A 
#define GL_MIN                            0x8007 
#define GL_MAX                            0x8008 
#define GL_POINT_SIZE_MIN                 0x8126 
#define GL_POINT_SIZE_MAX                 0x8127 
#define GL_POINT_DISTANCE_ATTENUATION     0x8129 
#define GL_GENERATE_MIPMAP                0x8191 
#define GL_GENERATE_MIPMAP_HINT           0x8192 
#define GL_FOG_COORDINATE_SOURCE          0x8450 
#define GL_FOG_COORDINATE                 0x8451 
#define GL_FRAGMENT_DEPTH                 0x8452 
#define GL_CURRENT_FOG_COORDINATE         0x8453 
#define GL_FOG_COORDINATE_ARRAY_TYPE      0x8454 
#define GL_FOG_COORDINATE_ARRAY_STRIDE    0x8455 
#define GL_FOG_COORDINATE_ARRAY_POINTER   0x8456 
#define GL_FOG_COORDINATE_ARRAY           0x8457 
#define GL_COLOR_SUM                      0x8458 
#define GL_CURRENT_SECONDARY_COLOR        0x8459 
#define GL_SECONDARY_COLOR_ARRAY_SIZE     0x845A 
#define GL_SECONDARY_COLOR_ARRAY_TYPE     0x845B 
#define GL_SECONDARY_COLOR_ARRAY_STRIDE   0x845C 
#define GL_SECONDARY_COLOR_ARRAY_POINTER  0x845D 
#define GL_SECONDARY_COLOR_ARRAY          0x845E 
#define GL_TEXTURE_FILTER_CONTROL         0x8500 
#define GL_DEPTH_TEXTURE_MODE             0x884B 
#define GL_COMPARE_R_TO_TEXTURE           0x884E 

// functions typedefs
typedef void (APIENTRYP PFN_GLBLENDFUNCSEPARATE_PROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (APIENTRYP PFN_GLMULTIDRAWARRAYS_PROC) (GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount);
typedef void (APIENTRYP PFN_GLMULTIDRAWELEMENTS_PROC) (GLenum mode, const GLsizei * count, GLenum type, const void * const * indices, GLsizei drawcount);
typedef void (APIENTRYP PFN_GLPOINTPARAMETERF_PROC) (GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLPOINTPARAMETERFV_PROC) (GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLPOINTPARAMETERI_PROC) (GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLPOINTPARAMETERIV_PROC) (GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLBLENDCOLOR_PROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (APIENTRYP PFN_GLBLENDEQUATION_PROC) (GLenum mode);
typedef void (APIENTRYP PFN_GLFOGCOORDF_PROC) (GLfloat coord);
typedef void (APIENTRYP PFN_GLFOGCOORDFV_PROC) (const GLfloat * coord);
typedef void (APIENTRYP PFN_GLFOGCOORDD_PROC) (GLdouble coord);
typedef void (APIENTRYP PFN_GLFOGCOORDDV_PROC) (const GLdouble * coord);
typedef void (APIENTRYP PFN_GLFOGCOORDPOINTER_PROC) (GLenum type, GLsizei stride, const void * pointer);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3B_PROC) (GLbyte red, GLbyte green, GLbyte blue);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3BV_PROC) (const GLbyte * v);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3D_PROC) (GLdouble red, GLdouble green, GLdouble blue);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3DV_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3F_PROC) (GLfloat red, GLfloat green, GLfloat blue);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3FV_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3I_PROC) (GLint red, GLint green, GLint blue);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3IV_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3S_PROC) (GLshort red, GLshort green, GLshort blue);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3SV_PROC) (const GLshort * v);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3UB_PROC) (GLubyte red, GLubyte green, GLubyte blue);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3UBV_PROC) (const GLubyte * v);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3UI_PROC) (GLuint red, GLuint green, GLuint blue);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3UIV_PROC) (const GLuint * v);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3US_PROC) (GLushort red, GLushort green, GLushort blue);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3USV_PROC) (const GLushort * v);
typedef void (APIENTRYP PFN_GLSECONDARYCOLORPOINTER_PROC) (GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (APIENTRYP PFN_GLWINDOWPOS2D_PROC) (GLdouble x, GLdouble y);
typedef void (APIENTRYP PFN_GLWINDOWPOS2DV_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS2F_PROC) (GLfloat x, GLfloat y);
typedef void (APIENTRYP PFN_GLWINDOWPOS2FV_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS2I_PROC) (GLint x, GLint y);
typedef void (APIENTRYP PFN_GLWINDOWPOS2IV_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS2S_PROC) (GLshort x, GLshort y);
typedef void (APIENTRYP PFN_GLWINDOWPOS2SV_PROC) (const GLshort * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS3D_PROC) (GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFN_GLWINDOWPOS3DV_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS3F_PROC) (GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLWINDOWPOS3FV_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS3I_PROC) (GLint x, GLint y, GLint z);
typedef void (APIENTRYP PFN_GLWINDOWPOS3IV_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS3S_PROC) (GLshort x, GLshort y, GLshort z);
typedef void (APIENTRYP PFN_GLWINDOWPOS3SV_PROC) (const GLshort * v);

// functions typedefs
GL_FUNC_DEF PFN_GLBLENDFUNCSEPARATE_PROC _glBlendFuncSeparate_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTIDRAWARRAYS_PROC _glMultiDrawArrays_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTIDRAWELEMENTS_PROC _glMultiDrawElements_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOINTPARAMETERF_PROC _glPointParameterf_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOINTPARAMETERFV_PROC _glPointParameterfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOINTPARAMETERI_PROC _glPointParameteri_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOINTPARAMETERIV_PROC _glPointParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBLENDCOLOR_PROC _glBlendColor_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBLENDEQUATION_PROC _glBlendEquation_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFOGCOORDF_PROC _glFogCoordf_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFOGCOORDFV_PROC _glFogCoordfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFOGCOORDD_PROC _glFogCoordd_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFOGCOORDDV_PROC _glFogCoorddv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFOGCOORDPOINTER_PROC _glFogCoordPointer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3B_PROC _glSecondaryColor3b_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3BV_PROC _glSecondaryColor3bv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3D_PROC _glSecondaryColor3d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3DV_PROC _glSecondaryColor3dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3F_PROC _glSecondaryColor3f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3FV_PROC _glSecondaryColor3fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3I_PROC _glSecondaryColor3i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3IV_PROC _glSecondaryColor3iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3S_PROC _glSecondaryColor3s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3SV_PROC _glSecondaryColor3sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3UB_PROC _glSecondaryColor3ub_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3UBV_PROC _glSecondaryColor3ubv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3UI_PROC _glSecondaryColor3ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3UIV_PROC _glSecondaryColor3uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3US_PROC _glSecondaryColor3us_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3USV_PROC _glSecondaryColor3usv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLORPOINTER_PROC _glSecondaryColorPointer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2D_PROC _glWindowPos2d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2DV_PROC _glWindowPos2dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2F_PROC _glWindowPos2f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2FV_PROC _glWindowPos2fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2I_PROC _glWindowPos2i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2IV_PROC _glWindowPos2iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2S_PROC _glWindowPos2s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2SV_PROC _glWindowPos2sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3D_PROC _glWindowPos3d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3DV_PROC _glWindowPos3dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3F_PROC _glWindowPos3f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3FV_PROC _glWindowPos3fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3I_PROC _glWindowPos3i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3IV_PROC _glWindowPos3iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3S_PROC _glWindowPos3s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3SV_PROC _glWindowPos3sv_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBlendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { return _glBlendFuncSeparate_(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); };
inline void glMultiDrawArrays (GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount) { return _glMultiDrawArrays_(mode, first, count, drawcount); };
inline void glMultiDrawElements (GLenum mode, const GLsizei * count, GLenum type, const void * const * indices, GLsizei drawcount) { return _glMultiDrawElements_(mode, count, type, indices, drawcount); };
inline void glPointParameterf (GLenum pname, GLfloat param) { return _glPointParameterf_(pname, param); };
inline void glPointParameterfv (GLenum pname, const GLfloat * params) { return _glPointParameterfv_(pname, params); };
inline void glPointParameteri (GLenum pname, GLint param) { return _glPointParameteri_(pname, param); };
inline void glPointParameteriv (GLenum pname, const GLint * params) { return _glPointParameteriv_(pname, params); };
inline void glBlendColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { return _glBlendColor_(red, green, blue, alpha); };
inline void glBlendEquation (GLenum mode) { return _glBlendEquation_(mode); };
inline void glFogCoordf (GLfloat coord) { return _glFogCoordf_(coord); };
inline void glFogCoordfv (const GLfloat * coord) { return _glFogCoordfv_(coord); };
inline void glFogCoordd (GLdouble coord) { return _glFogCoordd_(coord); };
inline void glFogCoorddv (const GLdouble * coord) { return _glFogCoorddv_(coord); };
inline void glFogCoordPointer (GLenum type, GLsizei stride, const void * pointer) { return _glFogCoordPointer_(type, stride, pointer); };
inline void glSecondaryColor3b (GLbyte red, GLbyte green, GLbyte blue) { return _glSecondaryColor3b_(red, green, blue); };
inline void glSecondaryColor3bv (const GLbyte * v) { return _glSecondaryColor3bv_(v); };
inline void glSecondaryColor3d (GLdouble red, GLdouble green, GLdouble blue) { return _glSecondaryColor3d_(red, green, blue); };
inline void glSecondaryColor3dv (const GLdouble * v) { return _glSecondaryColor3dv_(v); };
inline void glSecondaryColor3f (GLfloat red, GLfloat green, GLfloat blue) { return _glSecondaryColor3f_(red, green, blue); };
inline void glSecondaryColor3fv (const GLfloat * v) { return _glSecondaryColor3fv_(v); };
inline void glSecondaryColor3i (GLint red, GLint green, GLint blue) { return _glSecondaryColor3i_(red, green, blue); };
inline void glSecondaryColor3iv (const GLint * v) { return _glSecondaryColor3iv_(v); };
inline void glSecondaryColor3s (GLshort red, GLshort green, GLshort blue) { return _glSecondaryColor3s_(red, green, blue); };
inline void glSecondaryColor3sv (const GLshort * v) { return _glSecondaryColor3sv_(v); };
inline void glSecondaryColor3ub (GLubyte red, GLubyte green, GLubyte blue) { return _glSecondaryColor3ub_(red, green, blue); };
inline void glSecondaryColor3ubv (const GLubyte * v) { return _glSecondaryColor3ubv_(v); };
inline void glSecondaryColor3ui (GLuint red, GLuint green, GLuint blue) { return _glSecondaryColor3ui_(red, green, blue); };
inline void glSecondaryColor3uiv (const GLuint * v) { return _glSecondaryColor3uiv_(v); };
inline void glSecondaryColor3us (GLushort red, GLushort green, GLushort blue) { return _glSecondaryColor3us_(red, green, blue); };
inline void glSecondaryColor3usv (const GLushort * v) { return _glSecondaryColor3usv_(v); };
inline void glSecondaryColorPointer (GLint size, GLenum type, GLsizei stride, const void * pointer) { return _glSecondaryColorPointer_(size, type, stride, pointer); };
inline void glWindowPos2d (GLdouble x, GLdouble y) { return _glWindowPos2d_(x, y); };
inline void glWindowPos2dv (const GLdouble * v) { return _glWindowPos2dv_(v); };
inline void glWindowPos2f (GLfloat x, GLfloat y) { return _glWindowPos2f_(x, y); };
inline void glWindowPos2fv (const GLfloat * v) { return _glWindowPos2fv_(v); };
inline void glWindowPos2i (GLint x, GLint y) { return _glWindowPos2i_(x, y); };
inline void glWindowPos2iv (const GLint * v) { return _glWindowPos2iv_(v); };
inline void glWindowPos2s (GLshort x, GLshort y) { return _glWindowPos2s_(x, y); };
inline void glWindowPos2sv (const GLshort * v) { return _glWindowPos2sv_(v); };
inline void glWindowPos3d (GLdouble x, GLdouble y, GLdouble z) { return _glWindowPos3d_(x, y, z); };
inline void glWindowPos3dv (const GLdouble * v) { return _glWindowPos3dv_(v); };
inline void glWindowPos3f (GLfloat x, GLfloat y, GLfloat z) { return _glWindowPos3f_(x, y, z); };
inline void glWindowPos3fv (const GLfloat * v) { return _glWindowPos3fv_(v); };
inline void glWindowPos3i (GLint x, GLint y, GLint z) { return _glWindowPos3i_(x, y, z); };
inline void glWindowPos3iv (const GLint * v) { return _glWindowPos3iv_(v); };
inline void glWindowPos3s (GLshort x, GLshort y, GLshort z) { return _glWindowPos3s_(x, y, z); };
inline void glWindowPos3sv (const GLshort * v) { return _glWindowPos3sv_(v); };
#endif //GL_VERSION_1_4

#ifndef GL_VERSION_1_5

// Defines
#define GL_BUFFER_SIZE                    0x8764 
#define GL_BUFFER_USAGE                   0x8765 
#define GL_QUERY_COUNTER_BITS             0x8864 
#define GL_CURRENT_QUERY                  0x8865 
#define GL_QUERY_RESULT                   0x8866 
#define GL_QUERY_RESULT_AVAILABLE         0x8867 
#define GL_ARRAY_BUFFER                   0x8892 
#define GL_ELEMENT_ARRAY_BUFFER           0x8893 
#define GL_ARRAY_BUFFER_BINDING           0x8894 
#define GL_ELEMENT_ARRAY_BUFFER_BINDING   0x8895 
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F 
#define GL_READ_ONLY                      0x88B8 
#define GL_WRITE_ONLY                     0x88B9 
#define GL_READ_WRITE                     0x88BA 
#define GL_BUFFER_ACCESS                  0x88BB 
#define GL_BUFFER_MAPPED                  0x88BC 
#define GL_BUFFER_MAP_POINTER             0x88BD 
#define GL_STREAM_DRAW                    0x88E0 
#define GL_STREAM_READ                    0x88E1 
#define GL_STREAM_COPY                    0x88E2 
#define GL_STATIC_DRAW                    0x88E4 
#define GL_STATIC_READ                    0x88E5 
#define GL_STATIC_COPY                    0x88E6 
#define GL_DYNAMIC_DRAW                   0x88E8 
#define GL_DYNAMIC_READ                   0x88E9 
#define GL_DYNAMIC_COPY                   0x88EA 
#define GL_SAMPLES_PASSED                 0x8914 
#define GL_SRC1_ALPHA                     0x8589 
#define GL_VERTEX_ARRAY_BUFFER_BINDING    0x8896 
#define GL_NORMAL_ARRAY_BUFFER_BINDING    0x8897 
#define GL_COLOR_ARRAY_BUFFER_BINDING     0x8898 
#define GL_INDEX_ARRAY_BUFFER_BINDING     0x8899 
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A 
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B 
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C 
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D 
#define GL_WEIGHT_ARRAY_BUFFER_BINDING    0x889E 
#define GL_FOG_COORD_SRC                  0x8450 
#define GL_FOG_COORD                      0x8451 
#define GL_CURRENT_FOG_COORD              0x8453 
#define GL_FOG_COORD_ARRAY_TYPE           0x8454 
#define GL_FOG_COORD_ARRAY_STRIDE         0x8455 
#define GL_FOG_COORD_ARRAY_POINTER        0x8456 
#define GL_FOG_COORD_ARRAY                0x8457 
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D 
#define GL_SRC0_RGB                       0x8580 
#define GL_SRC1_RGB                       0x8581 
#define GL_SRC2_RGB                       0x8582 
#define GL_SRC0_ALPHA                     0x8588 
#define GL_SRC2_ALPHA                     0x858A 

// functions typedefs
typedef void (APIENTRYP PFN_GLGENQUERIES_PROC) (GLsizei n, GLuint * ids);
typedef void (APIENTRYP PFN_GLDELETEQUERIES_PROC) (GLsizei n, const GLuint * ids);
typedef GLboolean (APIENTRYP PFN_GLISQUERY_PROC) (GLuint id);
typedef void (APIENTRYP PFN_GLBEGINQUERY_PROC) (GLenum target, GLuint id);
typedef void (APIENTRYP PFN_GLENDQUERY_PROC) (GLenum target);
typedef void (APIENTRYP PFN_GLGETQUERYIV_PROC) (GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETQUERYOBJECTIV_PROC) (GLuint id, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETQUERYOBJECTUIV_PROC) (GLuint id, GLenum pname, GLuint * params);
typedef void (APIENTRYP PFN_GLBINDBUFFER_PROC) (GLenum target, GLuint buffer);
typedef void (APIENTRYP PFN_GLDELETEBUFFERS_PROC) (GLsizei n, const GLuint * buffers);
typedef void (APIENTRYP PFN_GLGENBUFFERS_PROC) (GLsizei n, GLuint * buffers);
typedef GLboolean (APIENTRYP PFN_GLISBUFFER_PROC) (GLuint buffer);
typedef void (APIENTRYP PFN_GLBUFFERDATA_PROC) (GLenum target, GLsizeiptr size, const void * data, GLenum usage);
typedef void (APIENTRYP PFN_GLBUFFERSUBDATA_PROC) (GLenum target, GLintptr offset, GLsizeiptr size, const void * data);
typedef void (APIENTRYP PFN_GLGETBUFFERSUBDATA_PROC) (GLenum target, GLintptr offset, GLsizeiptr size, void * data);
typedef void * (APIENTRYP PFN_GLMAPBUFFER_PROC) (GLenum target, GLenum access);
typedef GLboolean (APIENTRYP PFN_GLUNMAPBUFFER_PROC) (GLenum target);
typedef void (APIENTRYP PFN_GLGETBUFFERPARAMETERIV_PROC) (GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETBUFFERPOINTERV_PROC) (GLenum target, GLenum pname, void * * params);

// functions typedefs
GL_FUNC_DEF PFN_GLGENQUERIES_PROC _glGenQueries_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEQUERIES_PROC _glDeleteQueries_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISQUERY_PROC _glIsQuery_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBEGINQUERY_PROC _glBeginQuery_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENDQUERY_PROC _glEndQuery_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETQUERYIV_PROC _glGetQueryiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETQUERYOBJECTIV_PROC _glGetQueryObjectiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETQUERYOBJECTUIV_PROC _glGetQueryObjectuiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDBUFFER_PROC _glBindBuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEBUFFERS_PROC _glDeleteBuffers_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENBUFFERS_PROC _glGenBuffers_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISBUFFER_PROC _glIsBuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBUFFERDATA_PROC _glBufferData_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBUFFERSUBDATA_PROC _glBufferSubData_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETBUFFERSUBDATA_PROC _glGetBufferSubData_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAPBUFFER_PROC _glMapBuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNMAPBUFFER_PROC _glUnmapBuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETBUFFERPARAMETERIV_PROC _glGetBufferParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETBUFFERPOINTERV_PROC _glGetBufferPointerv_ GL_FUNC_DEF2;

// functions inline wrap
inline void glGenQueries (GLsizei n, GLuint * ids) { return _glGenQueries_(n, ids); };
inline void glDeleteQueries (GLsizei n, const GLuint * ids) { return _glDeleteQueries_(n, ids); };
inline GLboolean glIsQuery (GLuint id) { return _glIsQuery_(id); };
inline void glBeginQuery (GLenum target, GLuint id) { return _glBeginQuery_(target, id); };
inline void glEndQuery (GLenum target) { return _glEndQuery_(target); };
inline void glGetQueryiv (GLenum target, GLenum pname, GLint * params) { return _glGetQueryiv_(target, pname, params); };
inline void glGetQueryObjectiv (GLuint id, GLenum pname, GLint * params) { return _glGetQueryObjectiv_(id, pname, params); };
inline void glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint * params) { return _glGetQueryObjectuiv_(id, pname, params); };
inline void glBindBuffer (GLenum target, GLuint buffer) { return _glBindBuffer_(target, buffer); };
inline void glDeleteBuffers (GLsizei n, const GLuint * buffers) { return _glDeleteBuffers_(n, buffers); };
inline void glGenBuffers (GLsizei n, GLuint * buffers) { return _glGenBuffers_(n, buffers); };
inline GLboolean glIsBuffer (GLuint buffer) { return _glIsBuffer_(buffer); };
inline void glBufferData (GLenum target, GLsizeiptr size, const void * data, GLenum usage) { return _glBufferData_(target, size, data, usage); };
inline void glBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const void * data) { return _glBufferSubData_(target, offset, size, data); };
inline void glGetBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, void * data) { return _glGetBufferSubData_(target, offset, size, data); };
inline void * glMapBuffer (GLenum target, GLenum access) { return _glMapBuffer_(target, access); };
inline GLboolean glUnmapBuffer (GLenum target) { return _glUnmapBuffer_(target); };
inline void glGetBufferParameteriv (GLenum target, GLenum pname, GLint * params) { return _glGetBufferParameteriv_(target, pname, params); };
inline void glGetBufferPointerv (GLenum target, GLenum pname, void * * params) { return _glGetBufferPointerv_(target, pname, params); };
#endif //GL_VERSION_1_5

#ifndef GL_VERSION_2_0

// Defines
#define GL_BLEND_EQUATION_RGB             0x8009 
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED    0x8622 
#define GL_VERTEX_ATTRIB_ARRAY_SIZE       0x8623 
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE     0x8624 
#define GL_VERTEX_ATTRIB_ARRAY_TYPE       0x8625 
#define GL_CURRENT_VERTEX_ATTRIB          0x8626 
#define GL_VERTEX_PROGRAM_POINT_SIZE      0x8642 
#define GL_VERTEX_ATTRIB_ARRAY_POINTER    0x8645 
#define GL_STENCIL_BACK_FUNC              0x8800 
#define GL_STENCIL_BACK_FAIL              0x8801 
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL   0x8802 
#define GL_STENCIL_BACK_PASS_DEPTH_PASS   0x8803 
#define GL_MAX_DRAW_BUFFERS               0x8824 
#define GL_DRAW_BUFFER0                   0x8825 
#define GL_DRAW_BUFFER1                   0x8826 
#define GL_DRAW_BUFFER2                   0x8827 
#define GL_DRAW_BUFFER3                   0x8828 
#define GL_DRAW_BUFFER4                   0x8829 
#define GL_DRAW_BUFFER5                   0x882A 
#define GL_DRAW_BUFFER6                   0x882B 
#define GL_DRAW_BUFFER7                   0x882C 
#define GL_DRAW_BUFFER8                   0x882D 
#define GL_DRAW_BUFFER9                   0x882E 
#define GL_DRAW_BUFFER10                  0x882F 
#define GL_DRAW_BUFFER11                  0x8830 
#define GL_DRAW_BUFFER12                  0x8831 
#define GL_DRAW_BUFFER13                  0x8832 
#define GL_DRAW_BUFFER14                  0x8833 
#define GL_DRAW_BUFFER15                  0x8834 
#define GL_BLEND_EQUATION_ALPHA           0x883D 
#define GL_MAX_VERTEX_ATTRIBS             0x8869 
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A 
#define GL_MAX_TEXTURE_IMAGE_UNITS        0x8872 
#define GL_FRAGMENT_SHADER                0x8B30 
#define GL_VERTEX_SHADER                  0x8B31 
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49 
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS  0x8B4A 
#define GL_MAX_VARYING_FLOATS             0x8B4B 
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C 
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D 
#define GL_SHADER_TYPE                    0x8B4F 
#define GL_FLOAT_VEC2                     0x8B50 
#define GL_FLOAT_VEC3                     0x8B51 
#define GL_FLOAT_VEC4                     0x8B52 
#define GL_INT_VEC2                       0x8B53 
#define GL_INT_VEC3                       0x8B54 
#define GL_INT_VEC4                       0x8B55 
#define GL_BOOL                           0x8B56 
#define GL_BOOL_VEC2                      0x8B57 
#define GL_BOOL_VEC3                      0x8B58 
#define GL_BOOL_VEC4                      0x8B59 
#define GL_FLOAT_MAT2                     0x8B5A 
#define GL_FLOAT_MAT3                     0x8B5B 
#define GL_FLOAT_MAT4                     0x8B5C 
#define GL_SAMPLER_1D                     0x8B5D 
#define GL_SAMPLER_2D                     0x8B5E 
#define GL_SAMPLER_3D                     0x8B5F 
#define GL_SAMPLER_CUBE                   0x8B60 
#define GL_SAMPLER_1D_SHADOW              0x8B61 
#define GL_SAMPLER_2D_SHADOW              0x8B62 
#define GL_DELETE_STATUS                  0x8B80 
#define GL_COMPILE_STATUS                 0x8B81 
#define GL_LINK_STATUS                    0x8B82 
#define GL_VALIDATE_STATUS                0x8B83 
#define GL_INFO_LOG_LENGTH                0x8B84 
#define GL_ATTACHED_SHADERS               0x8B85 
#define GL_ACTIVE_UNIFORMS                0x8B86 
#define GL_ACTIVE_UNIFORM_MAX_LENGTH      0x8B87 
#define GL_SHADER_SOURCE_LENGTH           0x8B88 
#define GL_ACTIVE_ATTRIBUTES              0x8B89 
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH    0x8B8A 
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B 
#define GL_SHADING_LANGUAGE_VERSION       0x8B8C 
#define GL_CURRENT_PROGRAM                0x8B8D 
#define GL_POINT_SPRITE_COORD_ORIGIN      0x8CA0 
#define GL_LOWER_LEFT                     0x8CA1 
#define GL_UPPER_LEFT                     0x8CA2 
#define GL_STENCIL_BACK_REF               0x8CA3 
#define GL_STENCIL_BACK_VALUE_MASK        0x8CA4 
#define GL_STENCIL_BACK_WRITEMASK         0x8CA5 
#define GL_VERTEX_PROGRAM_TWO_SIDE        0x8643 
#define GL_POINT_SPRITE                   0x8861 
#define GL_COORD_REPLACE                  0x8862 
#define GL_MAX_TEXTURE_COORDS             0x8871 

// functions typedefs
typedef void (APIENTRYP PFN_GLBLENDEQUATIONSEPARATE_PROC) (GLenum modeRGB, GLenum modeAlpha);
typedef void (APIENTRYP PFN_GLDRAWBUFFERS_PROC) (GLsizei n, const GLenum * bufs);
typedef void (APIENTRYP PFN_GLSTENCILOPSEPARATE_PROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (APIENTRYP PFN_GLSTENCILFUNCSEPARATE_PROC) (GLenum face, GLenum func, GLint ref, GLuint mask);
typedef void (APIENTRYP PFN_GLSTENCILMASKSEPARATE_PROC) (GLenum face, GLuint mask);
typedef void (APIENTRYP PFN_GLATTACHSHADER_PROC) (GLuint program, GLuint shader);
typedef void (APIENTRYP PFN_GLBINDATTRIBLOCATION_PROC) (GLuint program, GLuint index, const GLchar * name);
typedef void (APIENTRYP PFN_GLCOMPILESHADER_PROC) (GLuint shader);
typedef GLuint (APIENTRYP PFN_GLCREATEPROGRAM_PROC) (void);
typedef GLuint (APIENTRYP PFN_GLCREATESHADER_PROC) (GLenum type);
typedef void (APIENTRYP PFN_GLDELETEPROGRAM_PROC) (GLuint program);
typedef void (APIENTRYP PFN_GLDELETESHADER_PROC) (GLuint shader);
typedef void (APIENTRYP PFN_GLDETACHSHADER_PROC) (GLuint program, GLuint shader);
typedef void (APIENTRYP PFN_GLDISABLEVERTEXATTRIBARRAY_PROC) (GLuint index);
typedef void (APIENTRYP PFN_GLENABLEVERTEXATTRIBARRAY_PROC) (GLuint index);
typedef void (APIENTRYP PFN_GLGETACTIVEATTRIB_PROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void (APIENTRYP PFN_GLGETACTIVEUNIFORM_PROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void (APIENTRYP PFN_GLGETATTACHEDSHADERS_PROC) (GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders);
typedef GLint (APIENTRYP PFN_GLGETATTRIBLOCATION_PROC) (GLuint program, const GLchar * name);
typedef void (APIENTRYP PFN_GLGETPROGRAMIV_PROC) (GLuint program, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETPROGRAMINFOLOG_PROC) (GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (APIENTRYP PFN_GLGETSHADERIV_PROC) (GLuint shader, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETSHADERINFOLOG_PROC) (GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (APIENTRYP PFN_GLGETSHADERSOURCE_PROC) (GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source);
typedef GLint (APIENTRYP PFN_GLGETUNIFORMLOCATION_PROC) (GLuint program, const GLchar * name);
typedef void (APIENTRYP PFN_GLGETUNIFORMFV_PROC) (GLuint program, GLint location, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETUNIFORMIV_PROC) (GLuint program, GLint location, GLint * params);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBDV_PROC) (GLuint index, GLenum pname, GLdouble * params);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBFV_PROC) (GLuint index, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBIV_PROC) (GLuint index, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBPOINTERV_PROC) (GLuint index, GLenum pname, void * * pointer);
typedef GLboolean (APIENTRYP PFN_GLISPROGRAM_PROC) (GLuint program);
typedef GLboolean (APIENTRYP PFN_GLISSHADER_PROC) (GLuint shader);
typedef void (APIENTRYP PFN_GLLINKPROGRAM_PROC) (GLuint program);
typedef void (APIENTRYP PFN_GLSHADERSOURCE_PROC) (GLuint shader, GLsizei count, const GLchar * const * string, const GLint * length);
typedef void (APIENTRYP PFN_GLUSEPROGRAM_PROC) (GLuint program);
typedef void (APIENTRYP PFN_GLUNIFORM1F_PROC) (GLint location, GLfloat v0);
typedef void (APIENTRYP PFN_GLUNIFORM2F_PROC) (GLint location, GLfloat v0, GLfloat v1);
typedef void (APIENTRYP PFN_GLUNIFORM3F_PROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (APIENTRYP PFN_GLUNIFORM4F_PROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (APIENTRYP PFN_GLUNIFORM1I_PROC) (GLint location, GLint v0);
typedef void (APIENTRYP PFN_GLUNIFORM2I_PROC) (GLint location, GLint v0, GLint v1);
typedef void (APIENTRYP PFN_GLUNIFORM3I_PROC) (GLint location, GLint v0, GLint v1, GLint v2);
typedef void (APIENTRYP PFN_GLUNIFORM4I_PROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (APIENTRYP PFN_GLUNIFORM1FV_PROC) (GLint location, GLsizei count, const GLfloat * value);
typedef void (APIENTRYP PFN_GLUNIFORM2FV_PROC) (GLint location, GLsizei count, const GLfloat * value);
typedef void (APIENTRYP PFN_GLUNIFORM3FV_PROC) (GLint location, GLsizei count, const GLfloat * value);
typedef void (APIENTRYP PFN_GLUNIFORM4FV_PROC) (GLint location, GLsizei count, const GLfloat * value);
typedef void (APIENTRYP PFN_GLUNIFORM1IV_PROC) (GLint location, GLsizei count, const GLint * value);
typedef void (APIENTRYP PFN_GLUNIFORM2IV_PROC) (GLint location, GLsizei count, const GLint * value);
typedef void (APIENTRYP PFN_GLUNIFORM3IV_PROC) (GLint location, GLsizei count, const GLint * value);
typedef void (APIENTRYP PFN_GLUNIFORM4IV_PROC) (GLint location, GLsizei count, const GLint * value);
typedef void (APIENTRYP PFN_GLUNIFORMMATRIX2FV_PROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLUNIFORMMATRIX3FV_PROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLUNIFORMMATRIX4FV_PROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLVALIDATEPROGRAM_PROC) (GLuint program);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB1D_PROC) (GLuint index, GLdouble x);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB1DV_PROC) (GLuint index, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB1F_PROC) (GLuint index, GLfloat x);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB1FV_PROC) (GLuint index, const GLfloat * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB1S_PROC) (GLuint index, GLshort x);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB1SV_PROC) (GLuint index, const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB2D_PROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB2DV_PROC) (GLuint index, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB2F_PROC) (GLuint index, GLfloat x, GLfloat y);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB2FV_PROC) (GLuint index, const GLfloat * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB2S_PROC) (GLuint index, GLshort x, GLshort y);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB2SV_PROC) (GLuint index, const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB3D_PROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB3DV_PROC) (GLuint index, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB3F_PROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB3FV_PROC) (GLuint index, const GLfloat * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB3S_PROC) (GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB3SV_PROC) (GLuint index, const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4NBV_PROC) (GLuint index, const GLbyte * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4NIV_PROC) (GLuint index, const GLint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4NSV_PROC) (GLuint index, const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4NUB_PROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4NUBV_PROC) (GLuint index, const GLubyte * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4NUIV_PROC) (GLuint index, const GLuint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4NUSV_PROC) (GLuint index, const GLushort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4BV_PROC) (GLuint index, const GLbyte * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4D_PROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4DV_PROC) (GLuint index, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4F_PROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4FV_PROC) (GLuint index, const GLfloat * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4IV_PROC) (GLuint index, const GLint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4S_PROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4SV_PROC) (GLuint index, const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4UBV_PROC) (GLuint index, const GLubyte * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4UIV_PROC) (GLuint index, const GLuint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4USV_PROC) (GLuint index, const GLushort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBPOINTER_PROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);

// functions typedefs
GL_FUNC_DEF PFN_GLBLENDEQUATIONSEPARATE_PROC _glBlendEquationSeparate_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWBUFFERS_PROC _glDrawBuffers_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSTENCILOPSEPARATE_PROC _glStencilOpSeparate_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSTENCILFUNCSEPARATE_PROC _glStencilFuncSeparate_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSTENCILMASKSEPARATE_PROC _glStencilMaskSeparate_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLATTACHSHADER_PROC _glAttachShader_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDATTRIBLOCATION_PROC _glBindAttribLocation_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPILESHADER_PROC _glCompileShader_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCREATEPROGRAM_PROC _glCreateProgram_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCREATESHADER_PROC _glCreateShader_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEPROGRAM_PROC _glDeleteProgram_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETESHADER_PROC _glDeleteShader_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDETACHSHADER_PROC _glDetachShader_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDISABLEVERTEXATTRIBARRAY_PROC _glDisableVertexAttribArray_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENABLEVERTEXATTRIBARRAY_PROC _glEnableVertexAttribArray_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETACTIVEATTRIB_PROC _glGetActiveAttrib_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETACTIVEUNIFORM_PROC _glGetActiveUniform_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETATTACHEDSHADERS_PROC _glGetAttachedShaders_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETATTRIBLOCATION_PROC _glGetAttribLocation_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMIV_PROC _glGetProgramiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMINFOLOG_PROC _glGetProgramInfoLog_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETSHADERIV_PROC _glGetShaderiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETSHADERINFOLOG_PROC _glGetShaderInfoLog_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETSHADERSOURCE_PROC _glGetShaderSource_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETUNIFORMLOCATION_PROC _glGetUniformLocation_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETUNIFORMFV_PROC _glGetUniformfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETUNIFORMIV_PROC _glGetUniformiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBDV_PROC _glGetVertexAttribdv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBFV_PROC _glGetVertexAttribfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBIV_PROC _glGetVertexAttribiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBPOINTERV_PROC _glGetVertexAttribPointerv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISPROGRAM_PROC _glIsProgram_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISSHADER_PROC _glIsShader_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLINKPROGRAM_PROC _glLinkProgram_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSHADERSOURCE_PROC _glShaderSource_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUSEPROGRAM_PROC _glUseProgram_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM1F_PROC _glUniform1f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2F_PROC _glUniform2f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3F_PROC _glUniform3f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4F_PROC _glUniform4f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM1I_PROC _glUniform1i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2I_PROC _glUniform2i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3I_PROC _glUniform3i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4I_PROC _glUniform4i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM1FV_PROC _glUniform1fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2FV_PROC _glUniform2fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3FV_PROC _glUniform3fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4FV_PROC _glUniform4fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM1IV_PROC _glUniform1iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2IV_PROC _glUniform2iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3IV_PROC _glUniform3iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4IV_PROC _glUniform4iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMMATRIX2FV_PROC _glUniformMatrix2fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMMATRIX3FV_PROC _glUniformMatrix3fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMMATRIX4FV_PROC _glUniformMatrix4fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVALIDATEPROGRAM_PROC _glValidateProgram_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB1D_PROC _glVertexAttrib1d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB1DV_PROC _glVertexAttrib1dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB1F_PROC _glVertexAttrib1f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB1FV_PROC _glVertexAttrib1fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB1S_PROC _glVertexAttrib1s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB1SV_PROC _glVertexAttrib1sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB2D_PROC _glVertexAttrib2d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB2DV_PROC _glVertexAttrib2dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB2F_PROC _glVertexAttrib2f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB2FV_PROC _glVertexAttrib2fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB2S_PROC _glVertexAttrib2s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB2SV_PROC _glVertexAttrib2sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB3D_PROC _glVertexAttrib3d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB3DV_PROC _glVertexAttrib3dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB3F_PROC _glVertexAttrib3f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB3FV_PROC _glVertexAttrib3fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB3S_PROC _glVertexAttrib3s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB3SV_PROC _glVertexAttrib3sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4NBV_PROC _glVertexAttrib4Nbv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4NIV_PROC _glVertexAttrib4Niv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4NSV_PROC _glVertexAttrib4Nsv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4NUB_PROC _glVertexAttrib4Nub_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4NUBV_PROC _glVertexAttrib4Nubv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4NUIV_PROC _glVertexAttrib4Nuiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4NUSV_PROC _glVertexAttrib4Nusv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4BV_PROC _glVertexAttrib4bv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4D_PROC _glVertexAttrib4d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4DV_PROC _glVertexAttrib4dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4F_PROC _glVertexAttrib4f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4FV_PROC _glVertexAttrib4fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4IV_PROC _glVertexAttrib4iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4S_PROC _glVertexAttrib4s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4SV_PROC _glVertexAttrib4sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4UBV_PROC _glVertexAttrib4ubv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4UIV_PROC _glVertexAttrib4uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4USV_PROC _glVertexAttrib4usv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBPOINTER_PROC _glVertexAttribPointer_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBlendEquationSeparate (GLenum modeRGB, GLenum modeAlpha) { return _glBlendEquationSeparate_(modeRGB, modeAlpha); };
inline void glDrawBuffers (GLsizei n, const GLenum * bufs) { return _glDrawBuffers_(n, bufs); };
inline void glStencilOpSeparate (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) { return _glStencilOpSeparate_(face, sfail, dpfail, dppass); };
inline void glStencilFuncSeparate (GLenum face, GLenum func, GLint ref, GLuint mask) { return _glStencilFuncSeparate_(face, func, ref, mask); };
inline void glStencilMaskSeparate (GLenum face, GLuint mask) { return _glStencilMaskSeparate_(face, mask); };
inline void glAttachShader (GLuint program, GLuint shader) { return _glAttachShader_(program, shader); };
inline void glBindAttribLocation (GLuint program, GLuint index, const GLchar * name) { return _glBindAttribLocation_(program, index, name); };
inline void glCompileShader (GLuint shader) { return _glCompileShader_(shader); };
inline GLuint glCreateProgram (void) { return _glCreateProgram_(); };
inline GLuint glCreateShader (GLenum type) { return _glCreateShader_(type); };
inline void glDeleteProgram (GLuint program) { return _glDeleteProgram_(program); };
inline void glDeleteShader (GLuint shader) { return _glDeleteShader_(shader); };
inline void glDetachShader (GLuint program, GLuint shader) { return _glDetachShader_(program, shader); };
inline void glDisableVertexAttribArray (GLuint index) { return _glDisableVertexAttribArray_(index); };
inline void glEnableVertexAttribArray (GLuint index) { return _glEnableVertexAttribArray_(index); };
inline void glGetActiveAttrib (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) { return _glGetActiveAttrib_(program, index, bufSize, length, size, type, name); };
inline void glGetActiveUniform (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) { return _glGetActiveUniform_(program, index, bufSize, length, size, type, name); };
inline void glGetAttachedShaders (GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders) { return _glGetAttachedShaders_(program, maxCount, count, shaders); };
inline GLint glGetAttribLocation (GLuint program, const GLchar * name) { return _glGetAttribLocation_(program, name); };
inline void glGetProgramiv (GLuint program, GLenum pname, GLint * params) { return _glGetProgramiv_(program, pname, params); };
inline void glGetProgramInfoLog (GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { return _glGetProgramInfoLog_(program, bufSize, length, infoLog); };
inline void glGetShaderiv (GLuint shader, GLenum pname, GLint * params) { return _glGetShaderiv_(shader, pname, params); };
inline void glGetShaderInfoLog (GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { return _glGetShaderInfoLog_(shader, bufSize, length, infoLog); };
inline void glGetShaderSource (GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source) { return _glGetShaderSource_(shader, bufSize, length, source); };
inline GLint glGetUniformLocation (GLuint program, const GLchar * name) { return _glGetUniformLocation_(program, name); };
inline void glGetUniformfv (GLuint program, GLint location, GLfloat * params) { return _glGetUniformfv_(program, location, params); };
inline void glGetUniformiv (GLuint program, GLint location, GLint * params) { return _glGetUniformiv_(program, location, params); };
inline void glGetVertexAttribdv (GLuint index, GLenum pname, GLdouble * params) { return _glGetVertexAttribdv_(index, pname, params); };
inline void glGetVertexAttribfv (GLuint index, GLenum pname, GLfloat * params) { return _glGetVertexAttribfv_(index, pname, params); };
inline void glGetVertexAttribiv (GLuint index, GLenum pname, GLint * params) { return _glGetVertexAttribiv_(index, pname, params); };
inline void glGetVertexAttribPointerv (GLuint index, GLenum pname, void * * pointer) { return _glGetVertexAttribPointerv_(index, pname, pointer); };
inline GLboolean glIsProgram (GLuint program) { return _glIsProgram_(program); };
inline GLboolean glIsShader (GLuint shader) { return _glIsShader_(shader); };
inline void glLinkProgram (GLuint program) { return _glLinkProgram_(program); };
inline void glShaderSource (GLuint shader, GLsizei count, const GLchar * const * string, const GLint * length) { return _glShaderSource_(shader, count, string, length); };
inline void glUseProgram (GLuint program) { return _glUseProgram_(program); };
inline void glUniform1f (GLint location, GLfloat v0) { return _glUniform1f_(location, v0); };
inline void glUniform2f (GLint location, GLfloat v0, GLfloat v1) { return _glUniform2f_(location, v0, v1); };
inline void glUniform3f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { return _glUniform3f_(location, v0, v1, v2); };
inline void glUniform4f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { return _glUniform4f_(location, v0, v1, v2, v3); };
inline void glUniform1i (GLint location, GLint v0) { return _glUniform1i_(location, v0); };
inline void glUniform2i (GLint location, GLint v0, GLint v1) { return _glUniform2i_(location, v0, v1); };
inline void glUniform3i (GLint location, GLint v0, GLint v1, GLint v2) { return _glUniform3i_(location, v0, v1, v2); };
inline void glUniform4i (GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { return _glUniform4i_(location, v0, v1, v2, v3); };
inline void glUniform1fv (GLint location, GLsizei count, const GLfloat * value) { return _glUniform1fv_(location, count, value); };
inline void glUniform2fv (GLint location, GLsizei count, const GLfloat * value) { return _glUniform2fv_(location, count, value); };
inline void glUniform3fv (GLint location, GLsizei count, const GLfloat * value) { return _glUniform3fv_(location, count, value); };
inline void glUniform4fv (GLint location, GLsizei count, const GLfloat * value) { return _glUniform4fv_(location, count, value); };
inline void glUniform1iv (GLint location, GLsizei count, const GLint * value) { return _glUniform1iv_(location, count, value); };
inline void glUniform2iv (GLint location, GLsizei count, const GLint * value) { return _glUniform2iv_(location, count, value); };
inline void glUniform3iv (GLint location, GLsizei count, const GLint * value) { return _glUniform3iv_(location, count, value); };
inline void glUniform4iv (GLint location, GLsizei count, const GLint * value) { return _glUniform4iv_(location, count, value); };
inline void glUniformMatrix2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glUniformMatrix2fv_(location, count, transpose, value); };
inline void glUniformMatrix3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glUniformMatrix3fv_(location, count, transpose, value); };
inline void glUniformMatrix4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glUniformMatrix4fv_(location, count, transpose, value); };
inline void glValidateProgram (GLuint program) { return _glValidateProgram_(program); };
inline void glVertexAttrib1d (GLuint index, GLdouble x) { return _glVertexAttrib1d_(index, x); };
inline void glVertexAttrib1dv (GLuint index, const GLdouble * v) { return _glVertexAttrib1dv_(index, v); };
inline void glVertexAttrib1f (GLuint index, GLfloat x) { return _glVertexAttrib1f_(index, x); };
inline void glVertexAttrib1fv (GLuint index, const GLfloat * v) { return _glVertexAttrib1fv_(index, v); };
inline void glVertexAttrib1s (GLuint index, GLshort x) { return _glVertexAttrib1s_(index, x); };
inline void glVertexAttrib1sv (GLuint index, const GLshort * v) { return _glVertexAttrib1sv_(index, v); };
inline void glVertexAttrib2d (GLuint index, GLdouble x, GLdouble y) { return _glVertexAttrib2d_(index, x, y); };
inline void glVertexAttrib2dv (GLuint index, const GLdouble * v) { return _glVertexAttrib2dv_(index, v); };
inline void glVertexAttrib2f (GLuint index, GLfloat x, GLfloat y) { return _glVertexAttrib2f_(index, x, y); };
inline void glVertexAttrib2fv (GLuint index, const GLfloat * v) { return _glVertexAttrib2fv_(index, v); };
inline void glVertexAttrib2s (GLuint index, GLshort x, GLshort y) { return _glVertexAttrib2s_(index, x, y); };
inline void glVertexAttrib2sv (GLuint index, const GLshort * v) { return _glVertexAttrib2sv_(index, v); };
inline void glVertexAttrib3d (GLuint index, GLdouble x, GLdouble y, GLdouble z) { return _glVertexAttrib3d_(index, x, y, z); };
inline void glVertexAttrib3dv (GLuint index, const GLdouble * v) { return _glVertexAttrib3dv_(index, v); };
inline void glVertexAttrib3f (GLuint index, GLfloat x, GLfloat y, GLfloat z) { return _glVertexAttrib3f_(index, x, y, z); };
inline void glVertexAttrib3fv (GLuint index, const GLfloat * v) { return _glVertexAttrib3fv_(index, v); };
inline void glVertexAttrib3s (GLuint index, GLshort x, GLshort y, GLshort z) { return _glVertexAttrib3s_(index, x, y, z); };
inline void glVertexAttrib3sv (GLuint index, const GLshort * v) { return _glVertexAttrib3sv_(index, v); };
inline void glVertexAttrib4Nbv (GLuint index, const GLbyte * v) { return _glVertexAttrib4Nbv_(index, v); };
inline void glVertexAttrib4Niv (GLuint index, const GLint * v) { return _glVertexAttrib4Niv_(index, v); };
inline void glVertexAttrib4Nsv (GLuint index, const GLshort * v) { return _glVertexAttrib4Nsv_(index, v); };
inline void glVertexAttrib4Nub (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { return _glVertexAttrib4Nub_(index, x, y, z, w); };
inline void glVertexAttrib4Nubv (GLuint index, const GLubyte * v) { return _glVertexAttrib4Nubv_(index, v); };
inline void glVertexAttrib4Nuiv (GLuint index, const GLuint * v) { return _glVertexAttrib4Nuiv_(index, v); };
inline void glVertexAttrib4Nusv (GLuint index, const GLushort * v) { return _glVertexAttrib4Nusv_(index, v); };
inline void glVertexAttrib4bv (GLuint index, const GLbyte * v) { return _glVertexAttrib4bv_(index, v); };
inline void glVertexAttrib4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { return _glVertexAttrib4d_(index, x, y, z, w); };
inline void glVertexAttrib4dv (GLuint index, const GLdouble * v) { return _glVertexAttrib4dv_(index, v); };
inline void glVertexAttrib4f (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { return _glVertexAttrib4f_(index, x, y, z, w); };
inline void glVertexAttrib4fv (GLuint index, const GLfloat * v) { return _glVertexAttrib4fv_(index, v); };
inline void glVertexAttrib4iv (GLuint index, const GLint * v) { return _glVertexAttrib4iv_(index, v); };
inline void glVertexAttrib4s (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { return _glVertexAttrib4s_(index, x, y, z, w); };
inline void glVertexAttrib4sv (GLuint index, const GLshort * v) { return _glVertexAttrib4sv_(index, v); };
inline void glVertexAttrib4ubv (GLuint index, const GLubyte * v) { return _glVertexAttrib4ubv_(index, v); };
inline void glVertexAttrib4uiv (GLuint index, const GLuint * v) { return _glVertexAttrib4uiv_(index, v); };
inline void glVertexAttrib4usv (GLuint index, const GLushort * v) { return _glVertexAttrib4usv_(index, v); };
inline void glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) { return _glVertexAttribPointer_(index, size, type, normalized, stride, pointer); };
#endif //GL_VERSION_2_0

#ifndef GL_VERSION_2_1

// Defines
#define GL_PIXEL_PACK_BUFFER              0x88EB 
#define GL_PIXEL_UNPACK_BUFFER            0x88EC 
#define GL_PIXEL_PACK_BUFFER_BINDING      0x88ED 
#define GL_PIXEL_UNPACK_BUFFER_BINDING    0x88EF 
#define GL_FLOAT_MAT2x3                   0x8B65 
#define GL_FLOAT_MAT2x4                   0x8B66 
#define GL_FLOAT_MAT3x2                   0x8B67 
#define GL_FLOAT_MAT3x4                   0x8B68 
#define GL_FLOAT_MAT4x2                   0x8B69 
#define GL_FLOAT_MAT4x3                   0x8B6A 
#define GL_SRGB                           0x8C40 
#define GL_SRGB8                          0x8C41 
#define GL_SRGB_ALPHA                     0x8C42 
#define GL_SRGB8_ALPHA8                   0x8C43 
#define GL_COMPRESSED_SRGB                0x8C48 
#define GL_COMPRESSED_SRGB_ALPHA          0x8C49 
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F 
#define GL_SLUMINANCE_ALPHA               0x8C44 
#define GL_SLUMINANCE8_ALPHA8             0x8C45 
#define GL_SLUMINANCE                     0x8C46 
#define GL_SLUMINANCE8                    0x8C47 
#define GL_COMPRESSED_SLUMINANCE          0x8C4A 
#define GL_COMPRESSED_SLUMINANCE_ALPHA    0x8C4B 

// functions typedefs
typedef void (APIENTRYP PFN_GLUNIFORMMATRIX2X3FV_PROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLUNIFORMMATRIX3X2FV_PROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLUNIFORMMATRIX2X4FV_PROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLUNIFORMMATRIX4X2FV_PROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLUNIFORMMATRIX3X4FV_PROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLUNIFORMMATRIX4X3FV_PROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);

// functions typedefs
GL_FUNC_DEF PFN_GLUNIFORMMATRIX2X3FV_PROC _glUniformMatrix2x3fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMMATRIX3X2FV_PROC _glUniformMatrix3x2fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMMATRIX2X4FV_PROC _glUniformMatrix2x4fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMMATRIX4X2FV_PROC _glUniformMatrix4x2fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMMATRIX3X4FV_PROC _glUniformMatrix3x4fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMMATRIX4X3FV_PROC _glUniformMatrix4x3fv_ GL_FUNC_DEF2;

// functions inline wrap
inline void glUniformMatrix2x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glUniformMatrix2x3fv_(location, count, transpose, value); };
inline void glUniformMatrix3x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glUniformMatrix3x2fv_(location, count, transpose, value); };
inline void glUniformMatrix2x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glUniformMatrix2x4fv_(location, count, transpose, value); };
inline void glUniformMatrix4x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glUniformMatrix4x2fv_(location, count, transpose, value); };
inline void glUniformMatrix3x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glUniformMatrix3x4fv_(location, count, transpose, value); };
inline void glUniformMatrix4x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glUniformMatrix4x3fv_(location, count, transpose, value); };
#endif //GL_VERSION_2_1

#ifndef GL_VERSION_3_0

// Defines
#define GL_COMPARE_REF_TO_TEXTURE         0x884E 
#define GL_CLIP_DISTANCE0                 0x3000 
#define GL_CLIP_DISTANCE1                 0x3001 
#define GL_CLIP_DISTANCE2                 0x3002 
#define GL_CLIP_DISTANCE3                 0x3003 
#define GL_CLIP_DISTANCE4                 0x3004 
#define GL_CLIP_DISTANCE5                 0x3005 
#define GL_CLIP_DISTANCE6                 0x3006 
#define GL_CLIP_DISTANCE7                 0x3007 
#define GL_MAX_CLIP_DISTANCES             0x0D32 
#define GL_MAJOR_VERSION                  0x821B 
#define GL_MINOR_VERSION                  0x821C 
#define GL_NUM_EXTENSIONS                 0x821D 
#define GL_CONTEXT_FLAGS                  0x821E 
#define GL_COMPRESSED_RED                 0x8225 
#define GL_COMPRESSED_RG                  0x8226 
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001 
#define GL_RGBA32F                        0x8814 
#define GL_RGB32F                         0x8815 
#define GL_RGBA16F                        0x881A 
#define GL_RGB16F                         0x881B 
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER    0x88FD 
#define GL_MAX_ARRAY_TEXTURE_LAYERS       0x88FF 
#define GL_MIN_PROGRAM_TEXEL_OFFSET       0x8904 
#define GL_MAX_PROGRAM_TEXEL_OFFSET       0x8905 
#define GL_CLAMP_READ_COLOR               0x891C 
#define GL_FIXED_ONLY                     0x891D 
#define GL_MAX_VARYING_COMPONENTS         0x8B4B 
#define GL_TEXTURE_1D_ARRAY               0x8C18 
#define GL_PROXY_TEXTURE_1D_ARRAY         0x8C19 
#define GL_TEXTURE_2D_ARRAY               0x8C1A 
#define GL_PROXY_TEXTURE_2D_ARRAY         0x8C1B 
#define GL_TEXTURE_BINDING_1D_ARRAY       0x8C1C 
#define GL_TEXTURE_BINDING_2D_ARRAY       0x8C1D 
#define GL_R11F_G11F_B10F                 0x8C3A 
#define GL_UNSIGNED_INT_10F_11F_11F_REV   0x8C3B 
#define GL_RGB9_E5                        0x8C3D 
#define GL_UNSIGNED_INT_5_9_9_9_REV       0x8C3E 
#define GL_TEXTURE_SHARED_SIZE            0x8C3F 
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76 
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F 
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80 
#define GL_TRANSFORM_FEEDBACK_VARYINGS    0x8C83 
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84 
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85 
#define GL_PRIMITIVES_GENERATED           0x8C87 
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88 
#define GL_RASTERIZER_DISCARD             0x8C89 
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A 
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B 
#define GL_INTERLEAVED_ATTRIBS            0x8C8C 
#define GL_SEPARATE_ATTRIBS               0x8C8D 
#define GL_TRANSFORM_FEEDBACK_BUFFER      0x8C8E 
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F 
#define GL_RGBA32UI                       0x8D70 
#define GL_RGB32UI                        0x8D71 
#define GL_RGBA16UI                       0x8D76 
#define GL_RGB16UI                        0x8D77 
#define GL_RGBA8UI                        0x8D7C 
#define GL_RGB8UI                         0x8D7D 
#define GL_RGBA32I                        0x8D82 
#define GL_RGB32I                         0x8D83 
#define GL_RGBA16I                        0x8D88 
#define GL_RGB16I                         0x8D89 
#define GL_RGBA8I                         0x8D8E 
#define GL_RGB8I                          0x8D8F 
#define GL_RED_INTEGER                    0x8D94 
#define GL_GREEN_INTEGER                  0x8D95 
#define GL_BLUE_INTEGER                   0x8D96 
#define GL_RGB_INTEGER                    0x8D98 
#define GL_RGBA_INTEGER                   0x8D99 
#define GL_BGR_INTEGER                    0x8D9A 
#define GL_BGRA_INTEGER                   0x8D9B 
#define GL_SAMPLER_1D_ARRAY               0x8DC0 
#define GL_SAMPLER_2D_ARRAY               0x8DC1 
#define GL_SAMPLER_1D_ARRAY_SHADOW        0x8DC3 
#define GL_SAMPLER_2D_ARRAY_SHADOW        0x8DC4 
#define GL_SAMPLER_CUBE_SHADOW            0x8DC5 
#define GL_UNSIGNED_INT_VEC2              0x8DC6 
#define GL_UNSIGNED_INT_VEC3              0x8DC7 
#define GL_UNSIGNED_INT_VEC4              0x8DC8 
#define GL_INT_SAMPLER_1D                 0x8DC9 
#define GL_INT_SAMPLER_2D                 0x8DCA 
#define GL_INT_SAMPLER_3D                 0x8DCB 
#define GL_INT_SAMPLER_CUBE               0x8DCC 
#define GL_INT_SAMPLER_1D_ARRAY           0x8DCE 
#define GL_INT_SAMPLER_2D_ARRAY           0x8DCF 
#define GL_UNSIGNED_INT_SAMPLER_1D        0x8DD1 
#define GL_UNSIGNED_INT_SAMPLER_2D        0x8DD2 
#define GL_UNSIGNED_INT_SAMPLER_3D        0x8DD3 
#define GL_UNSIGNED_INT_SAMPLER_CUBE      0x8DD4 
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY  0x8DD6 
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY  0x8DD7 
#define GL_QUERY_WAIT                     0x8E13 
#define GL_QUERY_NO_WAIT                  0x8E14 
#define GL_QUERY_BY_REGION_WAIT           0x8E15 
#define GL_QUERY_BY_REGION_NO_WAIT        0x8E16 
#define GL_BUFFER_ACCESS_FLAGS            0x911F 
#define GL_BUFFER_MAP_LENGTH              0x9120 
#define GL_BUFFER_MAP_OFFSET              0x9121 
#define GL_DEPTH_COMPONENT32F             0x8CAC 
#define GL_DEPTH32F_STENCIL8              0x8CAD 
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD 
#define GL_INVALID_FRAMEBUFFER_OPERATION  0x0506 
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210 
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211 
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212 
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213 
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214 
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215 
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216 
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217 
#define GL_FRAMEBUFFER_DEFAULT            0x8218 
#define GL_FRAMEBUFFER_UNDEFINED          0x8219 
#define GL_DEPTH_STENCIL_ATTACHMENT       0x821A 
#define GL_MAX_RENDERBUFFER_SIZE          0x84E8 
#define GL_DEPTH_STENCIL                  0x84F9 
#define GL_UNSIGNED_INT_24_8              0x84FA 
#define GL_DEPTH24_STENCIL8               0x88F0 
#define GL_TEXTURE_STENCIL_SIZE           0x88F1 
#define GL_TEXTURE_RED_TYPE               0x8C10 
#define GL_TEXTURE_GREEN_TYPE             0x8C11 
#define GL_TEXTURE_BLUE_TYPE              0x8C12 
#define GL_TEXTURE_ALPHA_TYPE             0x8C13 
#define GL_TEXTURE_DEPTH_TYPE             0x8C16 
#define GL_UNSIGNED_NORMALIZED            0x8C17 
#define GL_FRAMEBUFFER_BINDING            0x8CA6 
#define GL_DRAW_FRAMEBUFFER_BINDING       0x8CA6 
#define GL_RENDERBUFFER_BINDING           0x8CA7 
#define GL_READ_FRAMEBUFFER               0x8CA8 
#define GL_DRAW_FRAMEBUFFER               0x8CA9 
#define GL_READ_FRAMEBUFFER_BINDING       0x8CAA 
#define GL_RENDERBUFFER_SAMPLES           0x8CAB 
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0 
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1 
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2 
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3 
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4 
#define GL_FRAMEBUFFER_COMPLETE           0x8CD5 
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6 
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7 
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB 
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC 
#define GL_FRAMEBUFFER_UNSUPPORTED        0x8CDD 
#define GL_MAX_COLOR_ATTACHMENTS          0x8CDF 
#define GL_COLOR_ATTACHMENT0              0x8CE0 
#define GL_COLOR_ATTACHMENT1              0x8CE1 
#define GL_COLOR_ATTACHMENT2              0x8CE2 
#define GL_COLOR_ATTACHMENT3              0x8CE3 
#define GL_COLOR_ATTACHMENT4              0x8CE4 
#define GL_COLOR_ATTACHMENT5              0x8CE5 
#define GL_COLOR_ATTACHMENT6              0x8CE6 
#define GL_COLOR_ATTACHMENT7              0x8CE7 
#define GL_COLOR_ATTACHMENT8              0x8CE8 
#define GL_COLOR_ATTACHMENT9              0x8CE9 
#define GL_COLOR_ATTACHMENT10             0x8CEA 
#define GL_COLOR_ATTACHMENT11             0x8CEB 
#define GL_COLOR_ATTACHMENT12             0x8CEC 
#define GL_COLOR_ATTACHMENT13             0x8CED 
#define GL_COLOR_ATTACHMENT14             0x8CEE 
#define GL_COLOR_ATTACHMENT15             0x8CEF 
#define GL_COLOR_ATTACHMENT16             0x8CF0 
#define GL_COLOR_ATTACHMENT17             0x8CF1 
#define GL_COLOR_ATTACHMENT18             0x8CF2 
#define GL_COLOR_ATTACHMENT19             0x8CF3 
#define GL_COLOR_ATTACHMENT20             0x8CF4 
#define GL_COLOR_ATTACHMENT21             0x8CF5 
#define GL_COLOR_ATTACHMENT22             0x8CF6 
#define GL_COLOR_ATTACHMENT23             0x8CF7 
#define GL_COLOR_ATTACHMENT24             0x8CF8 
#define GL_COLOR_ATTACHMENT25             0x8CF9 
#define GL_COLOR_ATTACHMENT26             0x8CFA 
#define GL_COLOR_ATTACHMENT27             0x8CFB 
#define GL_COLOR_ATTACHMENT28             0x8CFC 
#define GL_COLOR_ATTACHMENT29             0x8CFD 
#define GL_COLOR_ATTACHMENT30             0x8CFE 
#define GL_COLOR_ATTACHMENT31             0x8CFF 
#define GL_DEPTH_ATTACHMENT               0x8D00 
#define GL_STENCIL_ATTACHMENT             0x8D20 
#define GL_FRAMEBUFFER                    0x8D40 
#define GL_RENDERBUFFER                   0x8D41 
#define GL_RENDERBUFFER_WIDTH             0x8D42 
#define GL_RENDERBUFFER_HEIGHT            0x8D43 
#define GL_RENDERBUFFER_INTERNAL_FORMAT   0x8D44 
#define GL_STENCIL_INDEX1                 0x8D46 
#define GL_STENCIL_INDEX4                 0x8D47 
#define GL_STENCIL_INDEX8                 0x8D48 
#define GL_STENCIL_INDEX16                0x8D49 
#define GL_RENDERBUFFER_RED_SIZE          0x8D50 
#define GL_RENDERBUFFER_GREEN_SIZE        0x8D51 
#define GL_RENDERBUFFER_BLUE_SIZE         0x8D52 
#define GL_RENDERBUFFER_ALPHA_SIZE        0x8D53 
#define GL_RENDERBUFFER_DEPTH_SIZE        0x8D54 
#define GL_RENDERBUFFER_STENCIL_SIZE      0x8D55 
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56 
#define GL_MAX_SAMPLES                    0x8D57 
#define GL_FRAMEBUFFER_SRGB               0x8DB9 
#define GL_HALF_FLOAT                     0x140B 
#define GL_MAP_READ_BIT                   0x0001 
#define GL_MAP_WRITE_BIT                  0x0002 
#define GL_MAP_INVALIDATE_RANGE_BIT       0x0004 
#define GL_MAP_INVALIDATE_BUFFER_BIT      0x0008 
#define GL_MAP_FLUSH_EXPLICIT_BIT         0x0010 
#define GL_MAP_UNSYNCHRONIZED_BIT         0x0020 
#define GL_COMPRESSED_RED_RGTC1           0x8DBB 
#define GL_COMPRESSED_SIGNED_RED_RGTC1    0x8DBC 
#define GL_COMPRESSED_RG_RGTC2            0x8DBD 
#define GL_COMPRESSED_SIGNED_RG_RGTC2     0x8DBE 
#define GL_RG                             0x8227 
#define GL_RG_INTEGER                     0x8228 
#define GL_R8                             0x8229 
#define GL_R16                            0x822A 
#define GL_RG8                            0x822B 
#define GL_RG16                           0x822C 
#define GL_R16F                           0x822D 
#define GL_R32F                           0x822E 
#define GL_RG16F                          0x822F 
#define GL_RG32F                          0x8230 
#define GL_R8I                            0x8231 
#define GL_R8UI                           0x8232 
#define GL_R16I                           0x8233 
#define GL_R16UI                          0x8234 
#define GL_R32I                           0x8235 
#define GL_R32UI                          0x8236 
#define GL_RG8I                           0x8237 
#define GL_RG8UI                          0x8238 
#define GL_RG16I                          0x8239 
#define GL_RG16UI                         0x823A 
#define GL_RG32I                          0x823B 
#define GL_RG32UI                         0x823C 
#define GL_VERTEX_ARRAY_BINDING           0x85B5 
#define GL_INDEX                          0x8222 
#define GL_TEXTURE_LUMINANCE_TYPE         0x8C14 
#define GL_TEXTURE_INTENSITY_TYPE         0x8C15 
#define GL_CLAMP_VERTEX_COLOR             0x891A 
#define GL_CLAMP_FRAGMENT_COLOR           0x891B 
#define GL_ALPHA_INTEGER                  0x8D97 

// functions typedefs
typedef void (APIENTRYP PFN_GLCOLORMASKI_PROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (APIENTRYP PFN_GLGETBOOLEANI_V_PROC) (GLenum target, GLuint index, GLboolean * data);
typedef void (APIENTRYP PFN_GLGETINTEGERI_V_PROC) (GLenum target, GLuint index, GLint * data);
typedef void (APIENTRYP PFN_GLENABLEI_PROC) (GLenum target, GLuint index);
typedef void (APIENTRYP PFN_GLDISABLEI_PROC) (GLenum target, GLuint index);
typedef GLboolean (APIENTRYP PFN_GLISENABLEDI_PROC) (GLenum target, GLuint index);
typedef void (APIENTRYP PFN_GLBEGINTRANSFORMFEEDBACK_PROC) (GLenum primitiveMode);
typedef void (APIENTRYP PFN_GLENDTRANSFORMFEEDBACK_PROC) (void);
typedef void (APIENTRYP PFN_GLBINDBUFFERRANGE_PROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRYP PFN_GLBINDBUFFERBASE_PROC) (GLenum target, GLuint index, GLuint buffer);
typedef void (APIENTRYP PFN_GLTRANSFORMFEEDBACKVARYINGS_PROC) (GLuint program, GLsizei count, const GLchar * const * varyings, GLenum bufferMode);
typedef void (APIENTRYP PFN_GLGETTRANSFORMFEEDBACKVARYING_PROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef void (APIENTRYP PFN_GLCLAMPCOLOR_PROC) (GLenum target, GLenum clamp);
typedef void (APIENTRYP PFN_GLBEGINCONDITIONALRENDER_PROC) (GLuint id, GLenum mode);
typedef void (APIENTRYP PFN_GLENDCONDITIONALRENDER_PROC) (void);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBIPOINTER_PROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBIIV_PROC) (GLuint index, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBIUIV_PROC) (GLuint index, GLenum pname, GLuint * params);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI1I_PROC) (GLuint index, GLint x);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI2I_PROC) (GLuint index, GLint x, GLint y);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI3I_PROC) (GLuint index, GLint x, GLint y, GLint z);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI4I_PROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI1UI_PROC) (GLuint index, GLuint x);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI2UI_PROC) (GLuint index, GLuint x, GLuint y);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI3UI_PROC) (GLuint index, GLuint x, GLuint y, GLuint z);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI4UI_PROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI1IV_PROC) (GLuint index, const GLint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI2IV_PROC) (GLuint index, const GLint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI3IV_PROC) (GLuint index, const GLint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI4IV_PROC) (GLuint index, const GLint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI1UIV_PROC) (GLuint index, const GLuint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI2UIV_PROC) (GLuint index, const GLuint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI3UIV_PROC) (GLuint index, const GLuint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI4UIV_PROC) (GLuint index, const GLuint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI4BV_PROC) (GLuint index, const GLbyte * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI4SV_PROC) (GLuint index, const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI4UBV_PROC) (GLuint index, const GLubyte * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI4USV_PROC) (GLuint index, const GLushort * v);
typedef void (APIENTRYP PFN_GLGETUNIFORMUIV_PROC) (GLuint program, GLint location, GLuint * params);
typedef void (APIENTRYP PFN_GLBINDFRAGDATALOCATION_PROC) (GLuint program, GLuint color, const GLchar * name);
typedef GLint (APIENTRYP PFN_GLGETFRAGDATALOCATION_PROC) (GLuint program, const GLchar * name);
typedef void (APIENTRYP PFN_GLUNIFORM1UI_PROC) (GLint location, GLuint v0);
typedef void (APIENTRYP PFN_GLUNIFORM2UI_PROC) (GLint location, GLuint v0, GLuint v1);
typedef void (APIENTRYP PFN_GLUNIFORM3UI_PROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (APIENTRYP PFN_GLUNIFORM4UI_PROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (APIENTRYP PFN_GLUNIFORM1UIV_PROC) (GLint location, GLsizei count, const GLuint * value);
typedef void (APIENTRYP PFN_GLUNIFORM2UIV_PROC) (GLint location, GLsizei count, const GLuint * value);
typedef void (APIENTRYP PFN_GLUNIFORM3UIV_PROC) (GLint location, GLsizei count, const GLuint * value);
typedef void (APIENTRYP PFN_GLUNIFORM4UIV_PROC) (GLint location, GLsizei count, const GLuint * value);
typedef void (APIENTRYP PFN_GLTEXPARAMETERIIV_PROC) (GLenum target, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLTEXPARAMETERIUIV_PROC) (GLenum target, GLenum pname, const GLuint * params);
typedef void (APIENTRYP PFN_GLGETTEXPARAMETERIIV_PROC) (GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETTEXPARAMETERIUIV_PROC) (GLenum target, GLenum pname, GLuint * params);
typedef void (APIENTRYP PFN_GLCLEARBUFFERIV_PROC) (GLenum buffer, GLint drawbuffer, const GLint * value);
typedef void (APIENTRYP PFN_GLCLEARBUFFERUIV_PROC) (GLenum buffer, GLint drawbuffer, const GLuint * value);
typedef void (APIENTRYP PFN_GLCLEARBUFFERFV_PROC) (GLenum buffer, GLint drawbuffer, const GLfloat * value);
typedef void (APIENTRYP PFN_GLCLEARBUFFERFI_PROC) (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef const GLubyte * (APIENTRYP PFN_GLGETSTRINGI_PROC) (GLenum name, GLuint index);
typedef GLboolean (APIENTRYP PFN_GLISRENDERBUFFER_PROC) (GLuint renderbuffer);
typedef void (APIENTRYP PFN_GLBINDRENDERBUFFER_PROC) (GLenum target, GLuint renderbuffer);
typedef void (APIENTRYP PFN_GLDELETERENDERBUFFERS_PROC) (GLsizei n, const GLuint * renderbuffers);
typedef void (APIENTRYP PFN_GLGENRENDERBUFFERS_PROC) (GLsizei n, GLuint * renderbuffers);
typedef void (APIENTRYP PFN_GLRENDERBUFFERSTORAGE_PROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLGETRENDERBUFFERPARAMETERIV_PROC) (GLenum target, GLenum pname, GLint * params);
typedef GLboolean (APIENTRYP PFN_GLISFRAMEBUFFER_PROC) (GLuint framebuffer);
typedef void (APIENTRYP PFN_GLBINDFRAMEBUFFER_PROC) (GLenum target, GLuint framebuffer);
typedef void (APIENTRYP PFN_GLDELETEFRAMEBUFFERS_PROC) (GLsizei n, const GLuint * framebuffers);
typedef void (APIENTRYP PFN_GLGENFRAMEBUFFERS_PROC) (GLsizei n, GLuint * framebuffers);
typedef GLenum (APIENTRYP PFN_GLCHECKFRAMEBUFFERSTATUS_PROC) (GLenum target);
typedef void (APIENTRYP PFN_GLFRAMEBUFFERTEXTURE1D_PROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (APIENTRYP PFN_GLFRAMEBUFFERTEXTURE2D_PROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (APIENTRYP PFN_GLFRAMEBUFFERTEXTURE3D_PROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (APIENTRYP PFN_GLFRAMEBUFFERRENDERBUFFER_PROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (APIENTRYP PFN_GLGETFRAMEBUFFERATTACHMENTPARAMETERIV_PROC) (GLenum target, GLenum attachment, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGENERATEMIPMAP_PROC) (GLenum target);
typedef void (APIENTRYP PFN_GLBLITFRAMEBUFFER_PROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (APIENTRYP PFN_GLRENDERBUFFERSTORAGEMULTISAMPLE_PROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLFRAMEBUFFERTEXTURELAYER_PROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void * (APIENTRYP PFN_GLMAPBUFFERRANGE_PROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (APIENTRYP PFN_GLFLUSHMAPPEDBUFFERRANGE_PROC) (GLenum target, GLintptr offset, GLsizeiptr length);
typedef void (APIENTRYP PFN_GLBINDVERTEXARRAY_PROC) (GLuint array);
typedef void (APIENTRYP PFN_GLDELETEVERTEXARRAYS_PROC) (GLsizei n, const GLuint * arrays);
typedef void (APIENTRYP PFN_GLGENVERTEXARRAYS_PROC) (GLsizei n, GLuint * arrays);
typedef GLboolean (APIENTRYP PFN_GLISVERTEXARRAY_PROC) (GLuint array);

// functions typedefs
GL_FUNC_DEF PFN_GLCOLORMASKI_PROC _glColorMaski_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETBOOLEANI_V_PROC _glGetBooleani_v_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETINTEGERI_V_PROC _glGetIntegeri_v_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENABLEI_PROC _glEnablei_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDISABLEI_PROC _glDisablei_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISENABLEDI_PROC _glIsEnabledi_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBEGINTRANSFORMFEEDBACK_PROC _glBeginTransformFeedback_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENDTRANSFORMFEEDBACK_PROC _glEndTransformFeedback_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDBUFFERRANGE_PROC _glBindBufferRange_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDBUFFERBASE_PROC _glBindBufferBase_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTRANSFORMFEEDBACKVARYINGS_PROC _glTransformFeedbackVaryings_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTRANSFORMFEEDBACKVARYING_PROC _glGetTransformFeedbackVarying_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLAMPCOLOR_PROC _glClampColor_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBEGINCONDITIONALRENDER_PROC _glBeginConditionalRender_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENDCONDITIONALRENDER_PROC _glEndConditionalRender_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBIPOINTER_PROC _glVertexAttribIPointer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBIIV_PROC _glGetVertexAttribIiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBIUIV_PROC _glGetVertexAttribIuiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI1I_PROC _glVertexAttribI1i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI2I_PROC _glVertexAttribI2i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI3I_PROC _glVertexAttribI3i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI4I_PROC _glVertexAttribI4i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI1UI_PROC _glVertexAttribI1ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI2UI_PROC _glVertexAttribI2ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI3UI_PROC _glVertexAttribI3ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI4UI_PROC _glVertexAttribI4ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI1IV_PROC _glVertexAttribI1iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI2IV_PROC _glVertexAttribI2iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI3IV_PROC _glVertexAttribI3iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI4IV_PROC _glVertexAttribI4iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI1UIV_PROC _glVertexAttribI1uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI2UIV_PROC _glVertexAttribI2uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI3UIV_PROC _glVertexAttribI3uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI4UIV_PROC _glVertexAttribI4uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI4BV_PROC _glVertexAttribI4bv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI4SV_PROC _glVertexAttribI4sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI4UBV_PROC _glVertexAttribI4ubv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI4USV_PROC _glVertexAttribI4usv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETUNIFORMUIV_PROC _glGetUniformuiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDFRAGDATALOCATION_PROC _glBindFragDataLocation_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFRAGDATALOCATION_PROC _glGetFragDataLocation_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM1UI_PROC _glUniform1ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2UI_PROC _glUniform2ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3UI_PROC _glUniform3ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4UI_PROC _glUniform4ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM1UIV_PROC _glUniform1uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2UIV_PROC _glUniform2uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3UIV_PROC _glUniform3uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4UIV_PROC _glUniform4uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXPARAMETERIIV_PROC _glTexParameterIiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXPARAMETERIUIV_PROC _glTexParameterIuiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXPARAMETERIIV_PROC _glGetTexParameterIiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXPARAMETERIUIV_PROC _glGetTexParameterIuiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARBUFFERIV_PROC _glClearBufferiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARBUFFERUIV_PROC _glClearBufferuiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARBUFFERFV_PROC _glClearBufferfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARBUFFERFI_PROC _glClearBufferfi_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETSTRINGI_PROC _glGetStringi_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISRENDERBUFFER_PROC _glIsRenderbuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDRENDERBUFFER_PROC _glBindRenderbuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETERENDERBUFFERS_PROC _glDeleteRenderbuffers_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENRENDERBUFFERS_PROC _glGenRenderbuffers_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRENDERBUFFERSTORAGE_PROC _glRenderbufferStorage_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETRENDERBUFFERPARAMETERIV_PROC _glGetRenderbufferParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISFRAMEBUFFER_PROC _glIsFramebuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDFRAMEBUFFER_PROC _glBindFramebuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEFRAMEBUFFERS_PROC _glDeleteFramebuffers_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENFRAMEBUFFERS_PROC _glGenFramebuffers_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCHECKFRAMEBUFFERSTATUS_PROC _glCheckFramebufferStatus_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAMEBUFFERTEXTURE1D_PROC _glFramebufferTexture1D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAMEBUFFERTEXTURE2D_PROC _glFramebufferTexture2D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAMEBUFFERTEXTURE3D_PROC _glFramebufferTexture3D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAMEBUFFERRENDERBUFFER_PROC _glFramebufferRenderbuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFRAMEBUFFERATTACHMENTPARAMETERIV_PROC _glGetFramebufferAttachmentParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENERATEMIPMAP_PROC _glGenerateMipmap_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBLITFRAMEBUFFER_PROC _glBlitFramebuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRENDERBUFFERSTORAGEMULTISAMPLE_PROC _glRenderbufferStorageMultisample_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAMEBUFFERTEXTURELAYER_PROC _glFramebufferTextureLayer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAPBUFFERRANGE_PROC _glMapBufferRange_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFLUSHMAPPEDBUFFERRANGE_PROC _glFlushMappedBufferRange_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDVERTEXARRAY_PROC _glBindVertexArray_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEVERTEXARRAYS_PROC _glDeleteVertexArrays_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENVERTEXARRAYS_PROC _glGenVertexArrays_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISVERTEXARRAY_PROC _glIsVertexArray_ GL_FUNC_DEF2;

// functions inline wrap
inline void glColorMaski (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { return _glColorMaski_(index, r, g, b, a); };
inline void glGetBooleani_v (GLenum target, GLuint index, GLboolean * data) { return _glGetBooleani_v_(target, index, data); };
inline void glGetIntegeri_v (GLenum target, GLuint index, GLint * data) { return _glGetIntegeri_v_(target, index, data); };
inline void glEnablei (GLenum target, GLuint index) { return _glEnablei_(target, index); };
inline void glDisablei (GLenum target, GLuint index) { return _glDisablei_(target, index); };
inline GLboolean glIsEnabledi (GLenum target, GLuint index) { return _glIsEnabledi_(target, index); };
inline void glBeginTransformFeedback (GLenum primitiveMode) { return _glBeginTransformFeedback_(primitiveMode); };
inline void glEndTransformFeedback (void) { return _glEndTransformFeedback_(); };
inline void glBindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { return _glBindBufferRange_(target, index, buffer, offset, size); };
inline void glBindBufferBase (GLenum target, GLuint index, GLuint buffer) { return _glBindBufferBase_(target, index, buffer); };
inline void glTransformFeedbackVaryings (GLuint program, GLsizei count, const GLchar * const * varyings, GLenum bufferMode) { return _glTransformFeedbackVaryings_(program, count, varyings, bufferMode); };
inline void glGetTransformFeedbackVarying (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) { return _glGetTransformFeedbackVarying_(program, index, bufSize, length, size, type, name); };
inline void glClampColor (GLenum target, GLenum clamp) { return _glClampColor_(target, clamp); };
inline void glBeginConditionalRender (GLuint id, GLenum mode) { return _glBeginConditionalRender_(id, mode); };
inline void glEndConditionalRender (void) { return _glEndConditionalRender_(); };
inline void glVertexAttribIPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { return _glVertexAttribIPointer_(index, size, type, stride, pointer); };
inline void glGetVertexAttribIiv (GLuint index, GLenum pname, GLint * params) { return _glGetVertexAttribIiv_(index, pname, params); };
inline void glGetVertexAttribIuiv (GLuint index, GLenum pname, GLuint * params) { return _glGetVertexAttribIuiv_(index, pname, params); };
inline void glVertexAttribI1i (GLuint index, GLint x) { return _glVertexAttribI1i_(index, x); };
inline void glVertexAttribI2i (GLuint index, GLint x, GLint y) { return _glVertexAttribI2i_(index, x, y); };
inline void glVertexAttribI3i (GLuint index, GLint x, GLint y, GLint z) { return _glVertexAttribI3i_(index, x, y, z); };
inline void glVertexAttribI4i (GLuint index, GLint x, GLint y, GLint z, GLint w) { return _glVertexAttribI4i_(index, x, y, z, w); };
inline void glVertexAttribI1ui (GLuint index, GLuint x) { return _glVertexAttribI1ui_(index, x); };
inline void glVertexAttribI2ui (GLuint index, GLuint x, GLuint y) { return _glVertexAttribI2ui_(index, x, y); };
inline void glVertexAttribI3ui (GLuint index, GLuint x, GLuint y, GLuint z) { return _glVertexAttribI3ui_(index, x, y, z); };
inline void glVertexAttribI4ui (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { return _glVertexAttribI4ui_(index, x, y, z, w); };
inline void glVertexAttribI1iv (GLuint index, const GLint * v) { return _glVertexAttribI1iv_(index, v); };
inline void glVertexAttribI2iv (GLuint index, const GLint * v) { return _glVertexAttribI2iv_(index, v); };
inline void glVertexAttribI3iv (GLuint index, const GLint * v) { return _glVertexAttribI3iv_(index, v); };
inline void glVertexAttribI4iv (GLuint index, const GLint * v) { return _glVertexAttribI4iv_(index, v); };
inline void glVertexAttribI1uiv (GLuint index, const GLuint * v) { return _glVertexAttribI1uiv_(index, v); };
inline void glVertexAttribI2uiv (GLuint index, const GLuint * v) { return _glVertexAttribI2uiv_(index, v); };
inline void glVertexAttribI3uiv (GLuint index, const GLuint * v) { return _glVertexAttribI3uiv_(index, v); };
inline void glVertexAttribI4uiv (GLuint index, const GLuint * v) { return _glVertexAttribI4uiv_(index, v); };
inline void glVertexAttribI4bv (GLuint index, const GLbyte * v) { return _glVertexAttribI4bv_(index, v); };
inline void glVertexAttribI4sv (GLuint index, const GLshort * v) { return _glVertexAttribI4sv_(index, v); };
inline void glVertexAttribI4ubv (GLuint index, const GLubyte * v) { return _glVertexAttribI4ubv_(index, v); };
inline void glVertexAttribI4usv (GLuint index, const GLushort * v) { return _glVertexAttribI4usv_(index, v); };
inline void glGetUniformuiv (GLuint program, GLint location, GLuint * params) { return _glGetUniformuiv_(program, location, params); };
inline void glBindFragDataLocation (GLuint program, GLuint color, const GLchar * name) { return _glBindFragDataLocation_(program, color, name); };
inline GLint glGetFragDataLocation (GLuint program, const GLchar * name) { return _glGetFragDataLocation_(program, name); };
inline void glUniform1ui (GLint location, GLuint v0) { return _glUniform1ui_(location, v0); };
inline void glUniform2ui (GLint location, GLuint v0, GLuint v1) { return _glUniform2ui_(location, v0, v1); };
inline void glUniform3ui (GLint location, GLuint v0, GLuint v1, GLuint v2) { return _glUniform3ui_(location, v0, v1, v2); };
inline void glUniform4ui (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { return _glUniform4ui_(location, v0, v1, v2, v3); };
inline void glUniform1uiv (GLint location, GLsizei count, const GLuint * value) { return _glUniform1uiv_(location, count, value); };
inline void glUniform2uiv (GLint location, GLsizei count, const GLuint * value) { return _glUniform2uiv_(location, count, value); };
inline void glUniform3uiv (GLint location, GLsizei count, const GLuint * value) { return _glUniform3uiv_(location, count, value); };
inline void glUniform4uiv (GLint location, GLsizei count, const GLuint * value) { return _glUniform4uiv_(location, count, value); };
inline void glTexParameterIiv (GLenum target, GLenum pname, const GLint * params) { return _glTexParameterIiv_(target, pname, params); };
inline void glTexParameterIuiv (GLenum target, GLenum pname, const GLuint * params) { return _glTexParameterIuiv_(target, pname, params); };
inline void glGetTexParameterIiv (GLenum target, GLenum pname, GLint * params) { return _glGetTexParameterIiv_(target, pname, params); };
inline void glGetTexParameterIuiv (GLenum target, GLenum pname, GLuint * params) { return _glGetTexParameterIuiv_(target, pname, params); };
inline void glClearBufferiv (GLenum buffer, GLint drawbuffer, const GLint * value) { return _glClearBufferiv_(buffer, drawbuffer, value); };
inline void glClearBufferuiv (GLenum buffer, GLint drawbuffer, const GLuint * value) { return _glClearBufferuiv_(buffer, drawbuffer, value); };
inline void glClearBufferfv (GLenum buffer, GLint drawbuffer, const GLfloat * value) { return _glClearBufferfv_(buffer, drawbuffer, value); };
inline void glClearBufferfi (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) { return _glClearBufferfi_(buffer, drawbuffer, depth, stencil); };
inline const GLubyte * glGetStringi (GLenum name, GLuint index) { return _glGetStringi_(name, index); };
inline GLboolean glIsRenderbuffer (GLuint renderbuffer) { return _glIsRenderbuffer_(renderbuffer); };
inline void glBindRenderbuffer (GLenum target, GLuint renderbuffer) { return _glBindRenderbuffer_(target, renderbuffer); };
inline void glDeleteRenderbuffers (GLsizei n, const GLuint * renderbuffers) { return _glDeleteRenderbuffers_(n, renderbuffers); };
inline void glGenRenderbuffers (GLsizei n, GLuint * renderbuffers) { return _glGenRenderbuffers_(n, renderbuffers); };
inline void glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { return _glRenderbufferStorage_(target, internalformat, width, height); };
inline void glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint * params) { return _glGetRenderbufferParameteriv_(target, pname, params); };
inline GLboolean glIsFramebuffer (GLuint framebuffer) { return _glIsFramebuffer_(framebuffer); };
inline void glBindFramebuffer (GLenum target, GLuint framebuffer) { return _glBindFramebuffer_(target, framebuffer); };
inline void glDeleteFramebuffers (GLsizei n, const GLuint * framebuffers) { return _glDeleteFramebuffers_(n, framebuffers); };
inline void glGenFramebuffers (GLsizei n, GLuint * framebuffers) { return _glGenFramebuffers_(n, framebuffers); };
inline GLenum glCheckFramebufferStatus (GLenum target) { return _glCheckFramebufferStatus_(target); };
inline void glFramebufferTexture1D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { return _glFramebufferTexture1D_(target, attachment, textarget, texture, level); };
inline void glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { return _glFramebufferTexture2D_(target, attachment, textarget, texture, level); };
inline void glFramebufferTexture3D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { return _glFramebufferTexture3D_(target, attachment, textarget, texture, level, zoffset); };
inline void glFramebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { return _glFramebufferRenderbuffer_(target, attachment, renderbuffertarget, renderbuffer); };
inline void glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint * params) { return _glGetFramebufferAttachmentParameteriv_(target, attachment, pname, params); };
inline void glGenerateMipmap (GLenum target) { return _glGenerateMipmap_(target); };
inline void glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { return _glBlitFramebuffer_(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); };
inline void glRenderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { return _glRenderbufferStorageMultisample_(target, samples, internalformat, width, height); };
inline void glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { return _glFramebufferTextureLayer_(target, attachment, texture, level, layer); };
inline void * glMapBufferRange (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) { return _glMapBufferRange_(target, offset, length, access); };
inline void glFlushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length) { return _glFlushMappedBufferRange_(target, offset, length); };
inline void glBindVertexArray (GLuint array) { return _glBindVertexArray_(array); };
inline void glDeleteVertexArrays (GLsizei n, const GLuint * arrays) { return _glDeleteVertexArrays_(n, arrays); };
inline void glGenVertexArrays (GLsizei n, GLuint * arrays) { return _glGenVertexArrays_(n, arrays); };
inline GLboolean glIsVertexArray (GLuint array) { return _glIsVertexArray_(array); };
#endif //GL_VERSION_3_0

#ifndef GL_VERSION_3_1

// Defines
#define GL_SAMPLER_2D_RECT                0x8B63 
#define GL_SAMPLER_2D_RECT_SHADOW         0x8B64 
#define GL_SAMPLER_BUFFER                 0x8DC2 
#define GL_INT_SAMPLER_2D_RECT            0x8DCD 
#define GL_INT_SAMPLER_BUFFER             0x8DD0 
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT   0x8DD5 
#define GL_UNSIGNED_INT_SAMPLER_BUFFER    0x8DD8 
#define GL_TEXTURE_BUFFER                 0x8C2A 
#define GL_MAX_TEXTURE_BUFFER_SIZE        0x8C2B 
#define GL_TEXTURE_BINDING_BUFFER         0x8C2C 
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D 
#define GL_TEXTURE_RECTANGLE              0x84F5 
#define GL_TEXTURE_BINDING_RECTANGLE      0x84F6 
#define GL_PROXY_TEXTURE_RECTANGLE        0x84F7 
#define GL_MAX_RECTANGLE_TEXTURE_SIZE     0x84F8 
#define GL_R8_SNORM                       0x8F94 
#define GL_RG8_SNORM                      0x8F95 
#define GL_RGB8_SNORM                     0x8F96 
#define GL_RGBA8_SNORM                    0x8F97 
#define GL_R16_SNORM                      0x8F98 
#define GL_RG16_SNORM                     0x8F99 
#define GL_RGB16_SNORM                    0x8F9A 
#define GL_RGBA16_SNORM                   0x8F9B 
#define GL_SIGNED_NORMALIZED              0x8F9C 
#define GL_PRIMITIVE_RESTART              0x8F9D 
#define GL_PRIMITIVE_RESTART_INDEX        0x8F9E 
#define GL_COPY_READ_BUFFER               0x8F36 
#define GL_COPY_WRITE_BUFFER              0x8F37 
#define GL_UNIFORM_BUFFER                 0x8A11 
#define GL_UNIFORM_BUFFER_BINDING         0x8A28 
#define GL_UNIFORM_BUFFER_START           0x8A29 
#define GL_UNIFORM_BUFFER_SIZE            0x8A2A 
#define GL_MAX_VERTEX_UNIFORM_BLOCKS      0x8A2B 
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS    0x8A2C 
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS    0x8A2D 
#define GL_MAX_COMBINED_UNIFORM_BLOCKS    0x8A2E 
#define GL_MAX_UNIFORM_BUFFER_BINDINGS    0x8A2F 
#define GL_MAX_UNIFORM_BLOCK_SIZE         0x8A30 
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31 
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32 
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33 
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34 
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35 
#define GL_ACTIVE_UNIFORM_BLOCKS          0x8A36 
#define GL_UNIFORM_TYPE                   0x8A37 
#define GL_UNIFORM_SIZE                   0x8A38 
#define GL_UNIFORM_NAME_LENGTH            0x8A39 
#define GL_UNIFORM_BLOCK_INDEX            0x8A3A 
#define GL_UNIFORM_OFFSET                 0x8A3B 
#define GL_UNIFORM_ARRAY_STRIDE           0x8A3C 
#define GL_UNIFORM_MATRIX_STRIDE          0x8A3D 
#define GL_UNIFORM_IS_ROW_MAJOR           0x8A3E 
#define GL_UNIFORM_BLOCK_BINDING          0x8A3F 
#define GL_UNIFORM_BLOCK_DATA_SIZE        0x8A40 
#define GL_UNIFORM_BLOCK_NAME_LENGTH      0x8A41 
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS  0x8A42 
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43 
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44 
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45 
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46 
#define GL_INVALID_INDEX                  0xFFFFFFFFu 

// functions typedefs
typedef void (APIENTRYP PFN_GLDRAWARRAYSINSTANCED_PROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
typedef void (APIENTRYP PFN_GLDRAWELEMENTSINSTANCED_PROC) (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount);
typedef void (APIENTRYP PFN_GLTEXBUFFER_PROC) (GLenum target, GLenum internalformat, GLuint buffer);
typedef void (APIENTRYP PFN_GLPRIMITIVERESTARTINDEX_PROC) (GLuint index);
typedef void (APIENTRYP PFN_GLCOPYBUFFERSUBDATA_PROC) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (APIENTRYP PFN_GLGETUNIFORMINDICES_PROC) (GLuint program, GLsizei uniformCount, const GLchar * const * uniformNames, GLuint * uniformIndices);
typedef void (APIENTRYP PFN_GLGETACTIVEUNIFORMSIV_PROC) (GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETACTIVEUNIFORMNAME_PROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName);
typedef GLuint (APIENTRYP PFN_GLGETUNIFORMBLOCKINDEX_PROC) (GLuint program, const GLchar * uniformBlockName);
typedef void (APIENTRYP PFN_GLGETACTIVEUNIFORMBLOCKIV_PROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETACTIVEUNIFORMBLOCKNAME_PROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName);
typedef void (APIENTRYP PFN_GLUNIFORMBLOCKBINDING_PROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);

// functions typedefs
GL_FUNC_DEF PFN_GLDRAWARRAYSINSTANCED_PROC _glDrawArraysInstanced_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWELEMENTSINSTANCED_PROC _glDrawElementsInstanced_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXBUFFER_PROC _glTexBuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPRIMITIVERESTARTINDEX_PROC _glPrimitiveRestartIndex_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYBUFFERSUBDATA_PROC _glCopyBufferSubData_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETUNIFORMINDICES_PROC _glGetUniformIndices_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETACTIVEUNIFORMSIV_PROC _glGetActiveUniformsiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETACTIVEUNIFORMNAME_PROC _glGetActiveUniformName_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETUNIFORMBLOCKINDEX_PROC _glGetUniformBlockIndex_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETACTIVEUNIFORMBLOCKIV_PROC _glGetActiveUniformBlockiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETACTIVEUNIFORMBLOCKNAME_PROC _glGetActiveUniformBlockName_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMBLOCKBINDING_PROC _glUniformBlockBinding_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDrawArraysInstanced (GLenum mode, GLint first, GLsizei count, GLsizei instancecount) { return _glDrawArraysInstanced_(mode, first, count, instancecount); };
inline void glDrawElementsInstanced (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount) { return _glDrawElementsInstanced_(mode, count, type, indices, instancecount); };
inline void glTexBuffer (GLenum target, GLenum internalformat, GLuint buffer) { return _glTexBuffer_(target, internalformat, buffer); };
inline void glPrimitiveRestartIndex (GLuint index) { return _glPrimitiveRestartIndex_(index); };
inline void glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { return _glCopyBufferSubData_(readTarget, writeTarget, readOffset, writeOffset, size); };
inline void glGetUniformIndices (GLuint program, GLsizei uniformCount, const GLchar * const * uniformNames, GLuint * uniformIndices) { return _glGetUniformIndices_(program, uniformCount, uniformNames, uniformIndices); };
inline void glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params) { return _glGetActiveUniformsiv_(program, uniformCount, uniformIndices, pname, params); };
inline void glGetActiveUniformName (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName) { return _glGetActiveUniformName_(program, uniformIndex, bufSize, length, uniformName); };
inline GLuint glGetUniformBlockIndex (GLuint program, const GLchar * uniformBlockName) { return _glGetUniformBlockIndex_(program, uniformBlockName); };
inline void glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params) { return _glGetActiveUniformBlockiv_(program, uniformBlockIndex, pname, params); };
inline void glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName) { return _glGetActiveUniformBlockName_(program, uniformBlockIndex, bufSize, length, uniformBlockName); };
inline void glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) { return _glUniformBlockBinding_(program, uniformBlockIndex, uniformBlockBinding); };
#endif //GL_VERSION_3_1

#ifndef GL_VERSION_3_2

// Defines
#define GL_CONTEXT_CORE_PROFILE_BIT       0x00000001 
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002 
#define GL_LINES_ADJACENCY                0x000A 
#define GL_LINE_STRIP_ADJACENCY           0x000B 
#define GL_TRIANGLES_ADJACENCY            0x000C 
#define GL_TRIANGLE_STRIP_ADJACENCY       0x000D 
#define GL_PROGRAM_POINT_SIZE             0x8642 
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29 
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7 
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8 
#define GL_GEOMETRY_SHADER                0x8DD9 
#define GL_GEOMETRY_VERTICES_OUT          0x8916 
#define GL_GEOMETRY_INPUT_TYPE            0x8917 
#define GL_GEOMETRY_OUTPUT_TYPE           0x8918 
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF 
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES   0x8DE0 
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1 
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS   0x9122 
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS  0x9123 
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124 
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS  0x9125 
#define GL_CONTEXT_PROFILE_MASK           0x9126 
#define GL_DEPTH_CLAMP                    0x864F 
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C 
#define GL_FIRST_VERTEX_CONVENTION        0x8E4D 
#define GL_LAST_VERTEX_CONVENTION         0x8E4E 
#define GL_PROVOKING_VERTEX               0x8E4F 
#define GL_TEXTURE_CUBE_MAP_SEAMLESS      0x884F 
#define GL_MAX_SERVER_WAIT_TIMEOUT        0x9111 
#define GL_OBJECT_TYPE                    0x9112 
#define GL_SYNC_CONDITION                 0x9113 
#define GL_SYNC_STATUS                    0x9114 
#define GL_SYNC_FLAGS                     0x9115 
#define GL_SYNC_FENCE                     0x9116 
#define GL_SYNC_GPU_COMMANDS_COMPLETE     0x9117 
#define GL_UNSIGNALED                     0x9118 
#define GL_SIGNALED                       0x9119 
#define GL_ALREADY_SIGNALED               0x911A 
#define GL_TIMEOUT_EXPIRED                0x911B 
#define GL_CONDITION_SATISFIED            0x911C 
#define GL_WAIT_FAILED                    0x911D 
#define GL_TIMEOUT_IGNORED                0xFFFFFFFFFFFFFFFFull 
#define GL_SYNC_FLUSH_COMMANDS_BIT        0x00000001 
#define GL_SAMPLE_POSITION                0x8E50 
#define GL_SAMPLE_MASK                    0x8E51 
#define GL_SAMPLE_MASK_VALUE              0x8E52 
#define GL_MAX_SAMPLE_MASK_WORDS          0x8E59 
#define GL_TEXTURE_2D_MULTISAMPLE         0x9100 
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE   0x9101 
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY   0x9102 
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103 
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104 
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105 
#define GL_TEXTURE_SAMPLES                0x9106 
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107 
#define GL_SAMPLER_2D_MULTISAMPLE         0x9108 
#define GL_INT_SAMPLER_2D_MULTISAMPLE     0x9109 
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A 
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY   0x910B 
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C 
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D 
#define GL_MAX_COLOR_TEXTURE_SAMPLES      0x910E 
#define GL_MAX_DEPTH_TEXTURE_SAMPLES      0x910F 
#define GL_MAX_INTEGER_SAMPLES            0x9110 

// functions typedefs
typedef void (APIENTRYP PFN_GLDRAWELEMENTSBASEVERTEX_PROC) (GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void (APIENTRYP PFN_GLDRAWRANGEELEMENTSBASEVERTEX_PROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void (APIENTRYP PFN_GLDRAWELEMENTSINSTANCEDBASEVERTEX_PROC) (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex);
typedef void (APIENTRYP PFN_GLMULTIDRAWELEMENTSBASEVERTEX_PROC) (GLenum mode, const GLsizei * count, GLenum type, const void * const * indices, GLsizei drawcount, const GLint * basevertex);
typedef void (APIENTRYP PFN_GLPROVOKINGVERTEX_PROC) (GLenum mode);
typedef GLsync (APIENTRYP PFN_GLFENCESYNC_PROC) (GLenum condition, GLbitfield flags);
typedef GLboolean (APIENTRYP PFN_GLISSYNC_PROC) (GLsync sync);
typedef void (APIENTRYP PFN_GLDELETESYNC_PROC) (GLsync sync);
typedef GLenum (APIENTRYP PFN_GLCLIENTWAITSYNC_PROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (APIENTRYP PFN_GLWAITSYNC_PROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (APIENTRYP PFN_GLGETINTEGER64V_PROC) (GLenum pname, GLint64 * data);
typedef void (APIENTRYP PFN_GLGETSYNCIV_PROC) (GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values);
typedef void (APIENTRYP PFN_GLGETINTEGER64I_V_PROC) (GLenum target, GLuint index, GLint64 * data);
typedef void (APIENTRYP PFN_GLGETBUFFERPARAMETERI64V_PROC) (GLenum target, GLenum pname, GLint64 * params);
typedef void (APIENTRYP PFN_GLFRAMEBUFFERTEXTURE_PROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (APIENTRYP PFN_GLTEXIMAGE2DMULTISAMPLE_PROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (APIENTRYP PFN_GLTEXIMAGE3DMULTISAMPLE_PROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (APIENTRYP PFN_GLGETMULTISAMPLEFV_PROC) (GLenum pname, GLuint index, GLfloat * val);
typedef void (APIENTRYP PFN_GLSAMPLEMASKI_PROC) (GLuint maskNumber, GLbitfield mask);

// functions typedefs
GL_FUNC_DEF PFN_GLDRAWELEMENTSBASEVERTEX_PROC _glDrawElementsBaseVertex_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWRANGEELEMENTSBASEVERTEX_PROC _glDrawRangeElementsBaseVertex_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWELEMENTSINSTANCEDBASEVERTEX_PROC _glDrawElementsInstancedBaseVertex_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTIDRAWELEMENTSBASEVERTEX_PROC _glMultiDrawElementsBaseVertex_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROVOKINGVERTEX_PROC _glProvokingVertex_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFENCESYNC_PROC _glFenceSync_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISSYNC_PROC _glIsSync_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETESYNC_PROC _glDeleteSync_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLIENTWAITSYNC_PROC _glClientWaitSync_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWAITSYNC_PROC _glWaitSync_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETINTEGER64V_PROC _glGetInteger64v_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETSYNCIV_PROC _glGetSynciv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETINTEGER64I_V_PROC _glGetInteger64i_v_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETBUFFERPARAMETERI64V_PROC _glGetBufferParameteri64v_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAMEBUFFERTEXTURE_PROC _glFramebufferTexture_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXIMAGE2DMULTISAMPLE_PROC _glTexImage2DMultisample_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXIMAGE3DMULTISAMPLE_PROC _glTexImage3DMultisample_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMULTISAMPLEFV_PROC _glGetMultisamplefv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSAMPLEMASKI_PROC _glSampleMaski_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDrawElementsBaseVertex (GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) { return _glDrawElementsBaseVertex_(mode, count, type, indices, basevertex); };
inline void glDrawRangeElementsBaseVertex (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) { return _glDrawRangeElementsBaseVertex_(mode, start, end, count, type, indices, basevertex); };
inline void glDrawElementsInstancedBaseVertex (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) { return _glDrawElementsInstancedBaseVertex_(mode, count, type, indices, instancecount, basevertex); };
inline void glMultiDrawElementsBaseVertex (GLenum mode, const GLsizei * count, GLenum type, const void * const * indices, GLsizei drawcount, const GLint * basevertex) { return _glMultiDrawElementsBaseVertex_(mode, count, type, indices, drawcount, basevertex); };
inline void glProvokingVertex (GLenum mode) { return _glProvokingVertex_(mode); };
inline GLsync glFenceSync (GLenum condition, GLbitfield flags) { return _glFenceSync_(condition, flags); };
inline GLboolean glIsSync (GLsync sync) { return _glIsSync_(sync); };
inline void glDeleteSync (GLsync sync) { return _glDeleteSync_(sync); };
inline GLenum glClientWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout) { return _glClientWaitSync_(sync, flags, timeout); };
inline void glWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout) { return _glWaitSync_(sync, flags, timeout); };
inline void glGetInteger64v (GLenum pname, GLint64 * data) { return _glGetInteger64v_(pname, data); };
inline void glGetSynciv (GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values) { return _glGetSynciv_(sync, pname, count, length, values); };
inline void glGetInteger64i_v (GLenum target, GLuint index, GLint64 * data) { return _glGetInteger64i_v_(target, index, data); };
inline void glGetBufferParameteri64v (GLenum target, GLenum pname, GLint64 * params) { return _glGetBufferParameteri64v_(target, pname, params); };
inline void glFramebufferTexture (GLenum target, GLenum attachment, GLuint texture, GLint level) { return _glFramebufferTexture_(target, attachment, texture, level); };
inline void glTexImage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { return _glTexImage2DMultisample_(target, samples, internalformat, width, height, fixedsamplelocations); };
inline void glTexImage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { return _glTexImage3DMultisample_(target, samples, internalformat, width, height, depth, fixedsamplelocations); };
inline void glGetMultisamplefv (GLenum pname, GLuint index, GLfloat * val) { return _glGetMultisamplefv_(pname, index, val); };
inline void glSampleMaski (GLuint maskNumber, GLbitfield mask) { return _glSampleMaski_(maskNumber, mask); };
#endif //GL_VERSION_3_2

#ifndef GL_VERSION_3_3

// Defines
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR    0x88FE 
#define GL_SRC1_COLOR                     0x88F9 
#define GL_ONE_MINUS_SRC1_COLOR           0x88FA 
#define GL_ONE_MINUS_SRC1_ALPHA           0x88FB 
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS   0x88FC 
#define GL_ANY_SAMPLES_PASSED             0x8C2F 
#define GL_SAMPLER_BINDING                0x8919 
#define GL_RGB10_A2UI                     0x906F 
#define GL_TEXTURE_SWIZZLE_R              0x8E42 
#define GL_TEXTURE_SWIZZLE_G              0x8E43 
#define GL_TEXTURE_SWIZZLE_B              0x8E44 
#define GL_TEXTURE_SWIZZLE_A              0x8E45 
#define GL_TEXTURE_SWIZZLE_RGBA           0x8E46 
#define GL_TIME_ELAPSED                   0x88BF 
#define GL_TIMESTAMP                      0x8E28 
#define GL_INT_2_10_10_10_REV             0x8D9F 

// functions typedefs
typedef void (APIENTRYP PFN_GLBINDFRAGDATALOCATIONINDEXED_PROC) (GLuint program, GLuint colorNumber, GLuint index, const GLchar * name);
typedef GLint (APIENTRYP PFN_GLGETFRAGDATAINDEX_PROC) (GLuint program, const GLchar * name);
typedef void (APIENTRYP PFN_GLGENSAMPLERS_PROC) (GLsizei count, GLuint * samplers);
typedef void (APIENTRYP PFN_GLDELETESAMPLERS_PROC) (GLsizei count, const GLuint * samplers);
typedef GLboolean (APIENTRYP PFN_GLISSAMPLER_PROC) (GLuint sampler);
typedef void (APIENTRYP PFN_GLBINDSAMPLER_PROC) (GLuint unit, GLuint sampler);
typedef void (APIENTRYP PFN_GLSAMPLERPARAMETERI_PROC) (GLuint sampler, GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLSAMPLERPARAMETERIV_PROC) (GLuint sampler, GLenum pname, const GLint * param);
typedef void (APIENTRYP PFN_GLSAMPLERPARAMETERF_PROC) (GLuint sampler, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLSAMPLERPARAMETERFV_PROC) (GLuint sampler, GLenum pname, const GLfloat * param);
typedef void (APIENTRYP PFN_GLSAMPLERPARAMETERIIV_PROC) (GLuint sampler, GLenum pname, const GLint * param);
typedef void (APIENTRYP PFN_GLSAMPLERPARAMETERIUIV_PROC) (GLuint sampler, GLenum pname, const GLuint * param);
typedef void (APIENTRYP PFN_GLGETSAMPLERPARAMETERIV_PROC) (GLuint sampler, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETSAMPLERPARAMETERIIV_PROC) (GLuint sampler, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETSAMPLERPARAMETERFV_PROC) (GLuint sampler, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETSAMPLERPARAMETERIUIV_PROC) (GLuint sampler, GLenum pname, GLuint * params);
typedef void (APIENTRYP PFN_GLQUERYCOUNTER_PROC) (GLuint id, GLenum target);
typedef void (APIENTRYP PFN_GLGETQUERYOBJECTI64V_PROC) (GLuint id, GLenum pname, GLint64 * params);
typedef void (APIENTRYP PFN_GLGETQUERYOBJECTUI64V_PROC) (GLuint id, GLenum pname, GLuint64 * params);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBDIVISOR_PROC) (GLuint index, GLuint divisor);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBP1UI_PROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBP1UIV_PROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBP2UI_PROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBP2UIV_PROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBP3UI_PROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBP3UIV_PROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBP4UI_PROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBP4UIV_PROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (APIENTRYP PFN_GLVERTEXP2UI_PROC) (GLenum type, GLuint value);
typedef void (APIENTRYP PFN_GLVERTEXP2UIV_PROC) (GLenum type, const GLuint * value);
typedef void (APIENTRYP PFN_GLVERTEXP3UI_PROC) (GLenum type, GLuint value);
typedef void (APIENTRYP PFN_GLVERTEXP3UIV_PROC) (GLenum type, const GLuint * value);
typedef void (APIENTRYP PFN_GLVERTEXP4UI_PROC) (GLenum type, GLuint value);
typedef void (APIENTRYP PFN_GLVERTEXP4UIV_PROC) (GLenum type, const GLuint * value);
typedef void (APIENTRYP PFN_GLTEXCOORDP1UI_PROC) (GLenum type, GLuint coords);
typedef void (APIENTRYP PFN_GLTEXCOORDP1UIV_PROC) (GLenum type, const GLuint * coords);
typedef void (APIENTRYP PFN_GLTEXCOORDP2UI_PROC) (GLenum type, GLuint coords);
typedef void (APIENTRYP PFN_GLTEXCOORDP2UIV_PROC) (GLenum type, const GLuint * coords);
typedef void (APIENTRYP PFN_GLTEXCOORDP3UI_PROC) (GLenum type, GLuint coords);
typedef void (APIENTRYP PFN_GLTEXCOORDP3UIV_PROC) (GLenum type, const GLuint * coords);
typedef void (APIENTRYP PFN_GLTEXCOORDP4UI_PROC) (GLenum type, GLuint coords);
typedef void (APIENTRYP PFN_GLTEXCOORDP4UIV_PROC) (GLenum type, const GLuint * coords);
typedef void (APIENTRYP PFN_GLMULTITEXCOORDP1UI_PROC) (GLenum texture, GLenum type, GLuint coords);
typedef void (APIENTRYP PFN_GLMULTITEXCOORDP1UIV_PROC) (GLenum texture, GLenum type, const GLuint * coords);
typedef void (APIENTRYP PFN_GLMULTITEXCOORDP2UI_PROC) (GLenum texture, GLenum type, GLuint coords);
typedef void (APIENTRYP PFN_GLMULTITEXCOORDP2UIV_PROC) (GLenum texture, GLenum type, const GLuint * coords);
typedef void (APIENTRYP PFN_GLMULTITEXCOORDP3UI_PROC) (GLenum texture, GLenum type, GLuint coords);
typedef void (APIENTRYP PFN_GLMULTITEXCOORDP3UIV_PROC) (GLenum texture, GLenum type, const GLuint * coords);
typedef void (APIENTRYP PFN_GLMULTITEXCOORDP4UI_PROC) (GLenum texture, GLenum type, GLuint coords);
typedef void (APIENTRYP PFN_GLMULTITEXCOORDP4UIV_PROC) (GLenum texture, GLenum type, const GLuint * coords);
typedef void (APIENTRYP PFN_GLNORMALP3UI_PROC) (GLenum type, GLuint coords);
typedef void (APIENTRYP PFN_GLNORMALP3UIV_PROC) (GLenum type, const GLuint * coords);
typedef void (APIENTRYP PFN_GLCOLORP3UI_PROC) (GLenum type, GLuint color);
typedef void (APIENTRYP PFN_GLCOLORP3UIV_PROC) (GLenum type, const GLuint * color);
typedef void (APIENTRYP PFN_GLCOLORP4UI_PROC) (GLenum type, GLuint color);
typedef void (APIENTRYP PFN_GLCOLORP4UIV_PROC) (GLenum type, const GLuint * color);
typedef void (APIENTRYP PFN_GLSECONDARYCOLORP3UI_PROC) (GLenum type, GLuint color);
typedef void (APIENTRYP PFN_GLSECONDARYCOLORP3UIV_PROC) (GLenum type, const GLuint * color);

// functions typedefs
GL_FUNC_DEF PFN_GLBINDFRAGDATALOCATIONINDEXED_PROC _glBindFragDataLocationIndexed_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFRAGDATAINDEX_PROC _glGetFragDataIndex_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENSAMPLERS_PROC _glGenSamplers_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETESAMPLERS_PROC _glDeleteSamplers_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISSAMPLER_PROC _glIsSampler_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDSAMPLER_PROC _glBindSampler_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSAMPLERPARAMETERI_PROC _glSamplerParameteri_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSAMPLERPARAMETERIV_PROC _glSamplerParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSAMPLERPARAMETERF_PROC _glSamplerParameterf_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSAMPLERPARAMETERFV_PROC _glSamplerParameterfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSAMPLERPARAMETERIIV_PROC _glSamplerParameterIiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSAMPLERPARAMETERIUIV_PROC _glSamplerParameterIuiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETSAMPLERPARAMETERIV_PROC _glGetSamplerParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETSAMPLERPARAMETERIIV_PROC _glGetSamplerParameterIiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETSAMPLERPARAMETERFV_PROC _glGetSamplerParameterfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETSAMPLERPARAMETERIUIV_PROC _glGetSamplerParameterIuiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLQUERYCOUNTER_PROC _glQueryCounter_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETQUERYOBJECTI64V_PROC _glGetQueryObjecti64v_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETQUERYOBJECTUI64V_PROC _glGetQueryObjectui64v_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBDIVISOR_PROC _glVertexAttribDivisor_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBP1UI_PROC _glVertexAttribP1ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBP1UIV_PROC _glVertexAttribP1uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBP2UI_PROC _glVertexAttribP2ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBP2UIV_PROC _glVertexAttribP2uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBP3UI_PROC _glVertexAttribP3ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBP3UIV_PROC _glVertexAttribP3uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBP4UI_PROC _glVertexAttribP4ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBP4UIV_PROC _glVertexAttribP4uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXP2UI_PROC _glVertexP2ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXP2UIV_PROC _glVertexP2uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXP3UI_PROC _glVertexP3ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXP3UIV_PROC _glVertexP3uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXP4UI_PROC _glVertexP4ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXP4UIV_PROC _glVertexP4uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORDP1UI_PROC _glTexCoordP1ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORDP1UIV_PROC _glTexCoordP1uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORDP2UI_PROC _glTexCoordP2ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORDP2UIV_PROC _glTexCoordP2uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORDP3UI_PROC _glTexCoordP3ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORDP3UIV_PROC _glTexCoordP3uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORDP4UI_PROC _glTexCoordP4ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORDP4UIV_PROC _glTexCoordP4uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORDP1UI_PROC _glMultiTexCoordP1ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORDP1UIV_PROC _glMultiTexCoordP1uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORDP2UI_PROC _glMultiTexCoordP2ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORDP2UIV_PROC _glMultiTexCoordP2uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORDP3UI_PROC _glMultiTexCoordP3ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORDP3UIV_PROC _glMultiTexCoordP3uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORDP4UI_PROC _glMultiTexCoordP4ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORDP4UIV_PROC _glMultiTexCoordP4uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMALP3UI_PROC _glNormalP3ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMALP3UIV_PROC _glNormalP3uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLORP3UI_PROC _glColorP3ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLORP3UIV_PROC _glColorP3uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLORP4UI_PROC _glColorP4ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLORP4UIV_PROC _glColorP4uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLORP3UI_PROC _glSecondaryColorP3ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLORP3UIV_PROC _glSecondaryColorP3uiv_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBindFragDataLocationIndexed (GLuint program, GLuint colorNumber, GLuint index, const GLchar * name) { return _glBindFragDataLocationIndexed_(program, colorNumber, index, name); };
inline GLint glGetFragDataIndex (GLuint program, const GLchar * name) { return _glGetFragDataIndex_(program, name); };
inline void glGenSamplers (GLsizei count, GLuint * samplers) { return _glGenSamplers_(count, samplers); };
inline void glDeleteSamplers (GLsizei count, const GLuint * samplers) { return _glDeleteSamplers_(count, samplers); };
inline GLboolean glIsSampler (GLuint sampler) { return _glIsSampler_(sampler); };
inline void glBindSampler (GLuint unit, GLuint sampler) { return _glBindSampler_(unit, sampler); };
inline void glSamplerParameteri (GLuint sampler, GLenum pname, GLint param) { return _glSamplerParameteri_(sampler, pname, param); };
inline void glSamplerParameteriv (GLuint sampler, GLenum pname, const GLint * param) { return _glSamplerParameteriv_(sampler, pname, param); };
inline void glSamplerParameterf (GLuint sampler, GLenum pname, GLfloat param) { return _glSamplerParameterf_(sampler, pname, param); };
inline void glSamplerParameterfv (GLuint sampler, GLenum pname, const GLfloat * param) { return _glSamplerParameterfv_(sampler, pname, param); };
inline void glSamplerParameterIiv (GLuint sampler, GLenum pname, const GLint * param) { return _glSamplerParameterIiv_(sampler, pname, param); };
inline void glSamplerParameterIuiv (GLuint sampler, GLenum pname, const GLuint * param) { return _glSamplerParameterIuiv_(sampler, pname, param); };
inline void glGetSamplerParameteriv (GLuint sampler, GLenum pname, GLint * params) { return _glGetSamplerParameteriv_(sampler, pname, params); };
inline void glGetSamplerParameterIiv (GLuint sampler, GLenum pname, GLint * params) { return _glGetSamplerParameterIiv_(sampler, pname, params); };
inline void glGetSamplerParameterfv (GLuint sampler, GLenum pname, GLfloat * params) { return _glGetSamplerParameterfv_(sampler, pname, params); };
inline void glGetSamplerParameterIuiv (GLuint sampler, GLenum pname, GLuint * params) { return _glGetSamplerParameterIuiv_(sampler, pname, params); };
inline void glQueryCounter (GLuint id, GLenum target) { return _glQueryCounter_(id, target); };
inline void glGetQueryObjecti64v (GLuint id, GLenum pname, GLint64 * params) { return _glGetQueryObjecti64v_(id, pname, params); };
inline void glGetQueryObjectui64v (GLuint id, GLenum pname, GLuint64 * params) { return _glGetQueryObjectui64v_(id, pname, params); };
inline void glVertexAttribDivisor (GLuint index, GLuint divisor) { return _glVertexAttribDivisor_(index, divisor); };
inline void glVertexAttribP1ui (GLuint index, GLenum type, GLboolean normalized, GLuint value) { return _glVertexAttribP1ui_(index, type, normalized, value); };
inline void glVertexAttribP1uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { return _glVertexAttribP1uiv_(index, type, normalized, value); };
inline void glVertexAttribP2ui (GLuint index, GLenum type, GLboolean normalized, GLuint value) { return _glVertexAttribP2ui_(index, type, normalized, value); };
inline void glVertexAttribP2uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { return _glVertexAttribP2uiv_(index, type, normalized, value); };
inline void glVertexAttribP3ui (GLuint index, GLenum type, GLboolean normalized, GLuint value) { return _glVertexAttribP3ui_(index, type, normalized, value); };
inline void glVertexAttribP3uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { return _glVertexAttribP3uiv_(index, type, normalized, value); };
inline void glVertexAttribP4ui (GLuint index, GLenum type, GLboolean normalized, GLuint value) { return _glVertexAttribP4ui_(index, type, normalized, value); };
inline void glVertexAttribP4uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { return _glVertexAttribP4uiv_(index, type, normalized, value); };
inline void glVertexP2ui (GLenum type, GLuint value) { return _glVertexP2ui_(type, value); };
inline void glVertexP2uiv (GLenum type, const GLuint * value) { return _glVertexP2uiv_(type, value); };
inline void glVertexP3ui (GLenum type, GLuint value) { return _glVertexP3ui_(type, value); };
inline void glVertexP3uiv (GLenum type, const GLuint * value) { return _glVertexP3uiv_(type, value); };
inline void glVertexP4ui (GLenum type, GLuint value) { return _glVertexP4ui_(type, value); };
inline void glVertexP4uiv (GLenum type, const GLuint * value) { return _glVertexP4uiv_(type, value); };
inline void glTexCoordP1ui (GLenum type, GLuint coords) { return _glTexCoordP1ui_(type, coords); };
inline void glTexCoordP1uiv (GLenum type, const GLuint * coords) { return _glTexCoordP1uiv_(type, coords); };
inline void glTexCoordP2ui (GLenum type, GLuint coords) { return _glTexCoordP2ui_(type, coords); };
inline void glTexCoordP2uiv (GLenum type, const GLuint * coords) { return _glTexCoordP2uiv_(type, coords); };
inline void glTexCoordP3ui (GLenum type, GLuint coords) { return _glTexCoordP3ui_(type, coords); };
inline void glTexCoordP3uiv (GLenum type, const GLuint * coords) { return _glTexCoordP3uiv_(type, coords); };
inline void glTexCoordP4ui (GLenum type, GLuint coords) { return _glTexCoordP4ui_(type, coords); };
inline void glTexCoordP4uiv (GLenum type, const GLuint * coords) { return _glTexCoordP4uiv_(type, coords); };
inline void glMultiTexCoordP1ui (GLenum texture, GLenum type, GLuint coords) { return _glMultiTexCoordP1ui_(texture, type, coords); };
inline void glMultiTexCoordP1uiv (GLenum texture, GLenum type, const GLuint * coords) { return _glMultiTexCoordP1uiv_(texture, type, coords); };
inline void glMultiTexCoordP2ui (GLenum texture, GLenum type, GLuint coords) { return _glMultiTexCoordP2ui_(texture, type, coords); };
inline void glMultiTexCoordP2uiv (GLenum texture, GLenum type, const GLuint * coords) { return _glMultiTexCoordP2uiv_(texture, type, coords); };
inline void glMultiTexCoordP3ui (GLenum texture, GLenum type, GLuint coords) { return _glMultiTexCoordP3ui_(texture, type, coords); };
inline void glMultiTexCoordP3uiv (GLenum texture, GLenum type, const GLuint * coords) { return _glMultiTexCoordP3uiv_(texture, type, coords); };
inline void glMultiTexCoordP4ui (GLenum texture, GLenum type, GLuint coords) { return _glMultiTexCoordP4ui_(texture, type, coords); };
inline void glMultiTexCoordP4uiv (GLenum texture, GLenum type, const GLuint * coords) { return _glMultiTexCoordP4uiv_(texture, type, coords); };
inline void glNormalP3ui (GLenum type, GLuint coords) { return _glNormalP3ui_(type, coords); };
inline void glNormalP3uiv (GLenum type, const GLuint * coords) { return _glNormalP3uiv_(type, coords); };
inline void glColorP3ui (GLenum type, GLuint color) { return _glColorP3ui_(type, color); };
inline void glColorP3uiv (GLenum type, const GLuint * color) { return _glColorP3uiv_(type, color); };
inline void glColorP4ui (GLenum type, GLuint color) { return _glColorP4ui_(type, color); };
inline void glColorP4uiv (GLenum type, const GLuint * color) { return _glColorP4uiv_(type, color); };
inline void glSecondaryColorP3ui (GLenum type, GLuint color) { return _glSecondaryColorP3ui_(type, color); };
inline void glSecondaryColorP3uiv (GLenum type, const GLuint * color) { return _glSecondaryColorP3uiv_(type, color); };
#endif //GL_VERSION_3_3

#ifndef GL_VERSION_4_0

// Defines
#define GL_SAMPLE_SHADING                 0x8C36 
#define GL_MIN_SAMPLE_SHADING_VALUE       0x8C37 
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E 
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F 
#define GL_TEXTURE_CUBE_MAP_ARRAY         0x9009 
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A 
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY   0x900B 
#define GL_SAMPLER_CUBE_MAP_ARRAY         0x900C 
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW  0x900D 
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY     0x900E 
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F 
#define GL_DRAW_INDIRECT_BUFFER           0x8F3F 
#define GL_DRAW_INDIRECT_BUFFER_BINDING   0x8F43 
#define GL_GEOMETRY_SHADER_INVOCATIONS    0x887F 
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A 
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B 
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C 
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D 
#define GL_MAX_VERTEX_STREAMS             0x8E71 
#define GL_DOUBLE_VEC2                    0x8FFC 
#define GL_DOUBLE_VEC3                    0x8FFD 
#define GL_DOUBLE_VEC4                    0x8FFE 
#define GL_DOUBLE_MAT2                    0x8F46 
#define GL_DOUBLE_MAT3                    0x8F47 
#define GL_DOUBLE_MAT4                    0x8F48 
#define GL_DOUBLE_MAT2x3                  0x8F49 
#define GL_DOUBLE_MAT2x4                  0x8F4A 
#define GL_DOUBLE_MAT3x2                  0x8F4B 
#define GL_DOUBLE_MAT3x4                  0x8F4C 
#define GL_DOUBLE_MAT4x2                  0x8F4D 
#define GL_DOUBLE_MAT4x3                  0x8F4E 
#define GL_ACTIVE_SUBROUTINES             0x8DE5 
#define GL_ACTIVE_SUBROUTINE_UNIFORMS     0x8DE6 
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47 
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH   0x8E48 
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49 
#define GL_MAX_SUBROUTINES                0x8DE7 
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8 
#define GL_NUM_COMPATIBLE_SUBROUTINES     0x8E4A 
#define GL_COMPATIBLE_SUBROUTINES         0x8E4B 
#define GL_PATCHES                        0x000E 
#define GL_PATCH_VERTICES                 0x8E72 
#define GL_PATCH_DEFAULT_INNER_LEVEL      0x8E73 
#define GL_PATCH_DEFAULT_OUTER_LEVEL      0x8E74 
#define GL_TESS_CONTROL_OUTPUT_VERTICES   0x8E75 
#define GL_TESS_GEN_MODE                  0x8E76 
#define GL_TESS_GEN_SPACING               0x8E77 
#define GL_TESS_GEN_VERTEX_ORDER          0x8E78 
#define GL_TESS_GEN_POINT_MODE            0x8E79 
#define GL_ISOLINES                       0x8E7A 
#define GL_FRACTIONAL_ODD                 0x8E7B 
#define GL_FRACTIONAL_EVEN                0x8E7C 
#define GL_MAX_PATCH_VERTICES             0x8E7D 
#define GL_MAX_TESS_GEN_LEVEL             0x8E7E 
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F 
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80 
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81 
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82 
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83 
#define GL_MAX_TESS_PATCH_COMPONENTS      0x8E84 
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85 
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86 
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89 
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A 
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C 
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D 
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E 
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F 
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0 
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1 
#define GL_TESS_EVALUATION_SHADER         0x8E87 
#define GL_TESS_CONTROL_SHADER            0x8E88 
#define GL_TRANSFORM_FEEDBACK             0x8E22 
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23 
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24 
#define GL_TRANSFORM_FEEDBACK_BINDING     0x8E25 
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70 

// functions typedefs
typedef void (APIENTRYP PFN_GLMINSAMPLESHADING_PROC) (GLfloat value);
typedef void (APIENTRYP PFN_GLBLENDEQUATIONI_PROC) (GLuint buf, GLenum mode);
typedef void (APIENTRYP PFN_GLBLENDEQUATIONSEPARATEI_PROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (APIENTRYP PFN_GLBLENDFUNCI_PROC) (GLuint buf, GLenum src, GLenum dst);
typedef void (APIENTRYP PFN_GLBLENDFUNCSEPARATEI_PROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (APIENTRYP PFN_GLDRAWARRAYSINDIRECT_PROC) (GLenum mode, const void * indirect);
typedef void (APIENTRYP PFN_GLDRAWELEMENTSINDIRECT_PROC) (GLenum mode, GLenum type, const void * indirect);
typedef void (APIENTRYP PFN_GLUNIFORM1D_PROC) (GLint location, GLdouble x);
typedef void (APIENTRYP PFN_GLUNIFORM2D_PROC) (GLint location, GLdouble x, GLdouble y);
typedef void (APIENTRYP PFN_GLUNIFORM3D_PROC) (GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFN_GLUNIFORM4D_PROC) (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFN_GLUNIFORM1DV_PROC) (GLint location, GLsizei count, const GLdouble * value);
typedef void (APIENTRYP PFN_GLUNIFORM2DV_PROC) (GLint location, GLsizei count, const GLdouble * value);
typedef void (APIENTRYP PFN_GLUNIFORM3DV_PROC) (GLint location, GLsizei count, const GLdouble * value);
typedef void (APIENTRYP PFN_GLUNIFORM4DV_PROC) (GLint location, GLsizei count, const GLdouble * value);
typedef void (APIENTRYP PFN_GLUNIFORMMATRIX2DV_PROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLUNIFORMMATRIX3DV_PROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLUNIFORMMATRIX4DV_PROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLUNIFORMMATRIX2X3DV_PROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLUNIFORMMATRIX2X4DV_PROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLUNIFORMMATRIX3X2DV_PROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLUNIFORMMATRIX3X4DV_PROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLUNIFORMMATRIX4X2DV_PROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLUNIFORMMATRIX4X3DV_PROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLGETUNIFORMDV_PROC) (GLuint program, GLint location, GLdouble * params);
typedef GLint (APIENTRYP PFN_GLGETSUBROUTINEUNIFORMLOCATION_PROC) (GLuint program, GLenum shadertype, const GLchar * name);
typedef GLuint (APIENTRYP PFN_GLGETSUBROUTINEINDEX_PROC) (GLuint program, GLenum shadertype, const GLchar * name);
typedef void (APIENTRYP PFN_GLGETACTIVESUBROUTINEUNIFORMIV_PROC) (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values);
typedef void (APIENTRYP PFN_GLGETACTIVESUBROUTINEUNIFORMNAME_PROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
typedef void (APIENTRYP PFN_GLGETACTIVESUBROUTINENAME_PROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
typedef void (APIENTRYP PFN_GLUNIFORMSUBROUTINESUIV_PROC) (GLenum shadertype, GLsizei count, const GLuint * indices);
typedef void (APIENTRYP PFN_GLGETUNIFORMSUBROUTINEUIV_PROC) (GLenum shadertype, GLint location, GLuint * params);
typedef void (APIENTRYP PFN_GLGETPROGRAMSTAGEIV_PROC) (GLuint program, GLenum shadertype, GLenum pname, GLint * values);
typedef void (APIENTRYP PFN_GLPATCHPARAMETERI_PROC) (GLenum pname, GLint value);
typedef void (APIENTRYP PFN_GLPATCHPARAMETERFV_PROC) (GLenum pname, const GLfloat * values);
typedef void (APIENTRYP PFN_GLBINDTRANSFORMFEEDBACK_PROC) (GLenum target, GLuint id);
typedef void (APIENTRYP PFN_GLDELETETRANSFORMFEEDBACKS_PROC) (GLsizei n, const GLuint * ids);
typedef void (APIENTRYP PFN_GLGENTRANSFORMFEEDBACKS_PROC) (GLsizei n, GLuint * ids);
typedef GLboolean (APIENTRYP PFN_GLISTRANSFORMFEEDBACK_PROC) (GLuint id);
typedef void (APIENTRYP PFN_GLPAUSETRANSFORMFEEDBACK_PROC) (void);
typedef void (APIENTRYP PFN_GLRESUMETRANSFORMFEEDBACK_PROC) (void);
typedef void (APIENTRYP PFN_GLDRAWTRANSFORMFEEDBACK_PROC) (GLenum mode, GLuint id);
typedef void (APIENTRYP PFN_GLDRAWTRANSFORMFEEDBACKSTREAM_PROC) (GLenum mode, GLuint id, GLuint stream);
typedef void (APIENTRYP PFN_GLBEGINQUERYINDEXED_PROC) (GLenum target, GLuint index, GLuint id);
typedef void (APIENTRYP PFN_GLENDQUERYINDEXED_PROC) (GLenum target, GLuint index);
typedef void (APIENTRYP PFN_GLGETQUERYINDEXEDIV_PROC) (GLenum target, GLuint index, GLenum pname, GLint * params);

// functions typedefs
GL_FUNC_DEF PFN_GLMINSAMPLESHADING_PROC _glMinSampleShading_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBLENDEQUATIONI_PROC _glBlendEquationi_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBLENDEQUATIONSEPARATEI_PROC _glBlendEquationSeparatei_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBLENDFUNCI_PROC _glBlendFunci_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBLENDFUNCSEPARATEI_PROC _glBlendFuncSeparatei_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWARRAYSINDIRECT_PROC _glDrawArraysIndirect_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWELEMENTSINDIRECT_PROC _glDrawElementsIndirect_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM1D_PROC _glUniform1d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2D_PROC _glUniform2d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3D_PROC _glUniform3d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4D_PROC _glUniform4d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM1DV_PROC _glUniform1dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2DV_PROC _glUniform2dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3DV_PROC _glUniform3dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4DV_PROC _glUniform4dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMMATRIX2DV_PROC _glUniformMatrix2dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMMATRIX3DV_PROC _glUniformMatrix3dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMMATRIX4DV_PROC _glUniformMatrix4dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMMATRIX2X3DV_PROC _glUniformMatrix2x3dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMMATRIX2X4DV_PROC _glUniformMatrix2x4dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMMATRIX3X2DV_PROC _glUniformMatrix3x2dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMMATRIX3X4DV_PROC _glUniformMatrix3x4dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMMATRIX4X2DV_PROC _glUniformMatrix4x2dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMMATRIX4X3DV_PROC _glUniformMatrix4x3dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETUNIFORMDV_PROC _glGetUniformdv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETSUBROUTINEUNIFORMLOCATION_PROC _glGetSubroutineUniformLocation_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETSUBROUTINEINDEX_PROC _glGetSubroutineIndex_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETACTIVESUBROUTINEUNIFORMIV_PROC _glGetActiveSubroutineUniformiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETACTIVESUBROUTINEUNIFORMNAME_PROC _glGetActiveSubroutineUniformName_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETACTIVESUBROUTINENAME_PROC _glGetActiveSubroutineName_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMSUBROUTINESUIV_PROC _glUniformSubroutinesuiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETUNIFORMSUBROUTINEUIV_PROC _glGetUniformSubroutineuiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMSTAGEIV_PROC _glGetProgramStageiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATCHPARAMETERI_PROC _glPatchParameteri_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATCHPARAMETERFV_PROC _glPatchParameterfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDTRANSFORMFEEDBACK_PROC _glBindTransformFeedback_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETETRANSFORMFEEDBACKS_PROC _glDeleteTransformFeedbacks_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENTRANSFORMFEEDBACKS_PROC _glGenTransformFeedbacks_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISTRANSFORMFEEDBACK_PROC _glIsTransformFeedback_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPAUSETRANSFORMFEEDBACK_PROC _glPauseTransformFeedback_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRESUMETRANSFORMFEEDBACK_PROC _glResumeTransformFeedback_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWTRANSFORMFEEDBACK_PROC _glDrawTransformFeedback_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWTRANSFORMFEEDBACKSTREAM_PROC _glDrawTransformFeedbackStream_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBEGINQUERYINDEXED_PROC _glBeginQueryIndexed_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENDQUERYINDEXED_PROC _glEndQueryIndexed_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETQUERYINDEXEDIV_PROC _glGetQueryIndexediv_ GL_FUNC_DEF2;

// functions inline wrap
inline void glMinSampleShading (GLfloat value) { return _glMinSampleShading_(value); };
inline void glBlendEquationi (GLuint buf, GLenum mode) { return _glBlendEquationi_(buf, mode); };
inline void glBlendEquationSeparatei (GLuint buf, GLenum modeRGB, GLenum modeAlpha) { return _glBlendEquationSeparatei_(buf, modeRGB, modeAlpha); };
inline void glBlendFunci (GLuint buf, GLenum src, GLenum dst) { return _glBlendFunci_(buf, src, dst); };
inline void glBlendFuncSeparatei (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { return _glBlendFuncSeparatei_(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); };
inline void glDrawArraysIndirect (GLenum mode, const void * indirect) { return _glDrawArraysIndirect_(mode, indirect); };
inline void glDrawElementsIndirect (GLenum mode, GLenum type, const void * indirect) { return _glDrawElementsIndirect_(mode, type, indirect); };
inline void glUniform1d (GLint location, GLdouble x) { return _glUniform1d_(location, x); };
inline void glUniform2d (GLint location, GLdouble x, GLdouble y) { return _glUniform2d_(location, x, y); };
inline void glUniform3d (GLint location, GLdouble x, GLdouble y, GLdouble z) { return _glUniform3d_(location, x, y, z); };
inline void glUniform4d (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { return _glUniform4d_(location, x, y, z, w); };
inline void glUniform1dv (GLint location, GLsizei count, const GLdouble * value) { return _glUniform1dv_(location, count, value); };
inline void glUniform2dv (GLint location, GLsizei count, const GLdouble * value) { return _glUniform2dv_(location, count, value); };
inline void glUniform3dv (GLint location, GLsizei count, const GLdouble * value) { return _glUniform3dv_(location, count, value); };
inline void glUniform4dv (GLint location, GLsizei count, const GLdouble * value) { return _glUniform4dv_(location, count, value); };
inline void glUniformMatrix2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glUniformMatrix2dv_(location, count, transpose, value); };
inline void glUniformMatrix3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glUniformMatrix3dv_(location, count, transpose, value); };
inline void glUniformMatrix4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glUniformMatrix4dv_(location, count, transpose, value); };
inline void glUniformMatrix2x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glUniformMatrix2x3dv_(location, count, transpose, value); };
inline void glUniformMatrix2x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glUniformMatrix2x4dv_(location, count, transpose, value); };
inline void glUniformMatrix3x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glUniformMatrix3x2dv_(location, count, transpose, value); };
inline void glUniformMatrix3x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glUniformMatrix3x4dv_(location, count, transpose, value); };
inline void glUniformMatrix4x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glUniformMatrix4x2dv_(location, count, transpose, value); };
inline void glUniformMatrix4x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glUniformMatrix4x3dv_(location, count, transpose, value); };
inline void glGetUniformdv (GLuint program, GLint location, GLdouble * params) { return _glGetUniformdv_(program, location, params); };
inline GLint glGetSubroutineUniformLocation (GLuint program, GLenum shadertype, const GLchar * name) { return _glGetSubroutineUniformLocation_(program, shadertype, name); };
inline GLuint glGetSubroutineIndex (GLuint program, GLenum shadertype, const GLchar * name) { return _glGetSubroutineIndex_(program, shadertype, name); };
inline void glGetActiveSubroutineUniformiv (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values) { return _glGetActiveSubroutineUniformiv_(program, shadertype, index, pname, values); };
inline void glGetActiveSubroutineUniformName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) { return _glGetActiveSubroutineUniformName_(program, shadertype, index, bufSize, length, name); };
inline void glGetActiveSubroutineName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) { return _glGetActiveSubroutineName_(program, shadertype, index, bufSize, length, name); };
inline void glUniformSubroutinesuiv (GLenum shadertype, GLsizei count, const GLuint * indices) { return _glUniformSubroutinesuiv_(shadertype, count, indices); };
inline void glGetUniformSubroutineuiv (GLenum shadertype, GLint location, GLuint * params) { return _glGetUniformSubroutineuiv_(shadertype, location, params); };
inline void glGetProgramStageiv (GLuint program, GLenum shadertype, GLenum pname, GLint * values) { return _glGetProgramStageiv_(program, shadertype, pname, values); };
inline void glPatchParameteri (GLenum pname, GLint value) { return _glPatchParameteri_(pname, value); };
inline void glPatchParameterfv (GLenum pname, const GLfloat * values) { return _glPatchParameterfv_(pname, values); };
inline void glBindTransformFeedback (GLenum target, GLuint id) { return _glBindTransformFeedback_(target, id); };
inline void glDeleteTransformFeedbacks (GLsizei n, const GLuint * ids) { return _glDeleteTransformFeedbacks_(n, ids); };
inline void glGenTransformFeedbacks (GLsizei n, GLuint * ids) { return _glGenTransformFeedbacks_(n, ids); };
inline GLboolean glIsTransformFeedback (GLuint id) { return _glIsTransformFeedback_(id); };
inline void glPauseTransformFeedback (void) { return _glPauseTransformFeedback_(); };
inline void glResumeTransformFeedback (void) { return _glResumeTransformFeedback_(); };
inline void glDrawTransformFeedback (GLenum mode, GLuint id) { return _glDrawTransformFeedback_(mode, id); };
inline void glDrawTransformFeedbackStream (GLenum mode, GLuint id, GLuint stream) { return _glDrawTransformFeedbackStream_(mode, id, stream); };
inline void glBeginQueryIndexed (GLenum target, GLuint index, GLuint id) { return _glBeginQueryIndexed_(target, index, id); };
inline void glEndQueryIndexed (GLenum target, GLuint index) { return _glEndQueryIndexed_(target, index); };
inline void glGetQueryIndexediv (GLenum target, GLuint index, GLenum pname, GLint * params) { return _glGetQueryIndexediv_(target, index, pname, params); };
#endif //GL_VERSION_4_0

#ifndef GL_VERSION_4_1

// Defines
#define GL_FIXED                          0x140C 
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A 
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B 
#define GL_LOW_FLOAT                      0x8DF0 
#define GL_MEDIUM_FLOAT                   0x8DF1 
#define GL_HIGH_FLOAT                     0x8DF2 
#define GL_LOW_INT                        0x8DF3 
#define GL_MEDIUM_INT                     0x8DF4 
#define GL_HIGH_INT                       0x8DF5 
#define GL_SHADER_COMPILER                0x8DFA 
#define GL_SHADER_BINARY_FORMATS          0x8DF8 
#define GL_NUM_SHADER_BINARY_FORMATS      0x8DF9 
#define GL_MAX_VERTEX_UNIFORM_VECTORS     0x8DFB 
#define GL_MAX_VARYING_VECTORS            0x8DFC 
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS   0x8DFD 
#define GL_RGB565                         0x8D62 
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257 
#define GL_PROGRAM_BINARY_LENGTH          0x8741 
#define GL_NUM_PROGRAM_BINARY_FORMATS     0x87FE 
#define GL_PROGRAM_BINARY_FORMATS         0x87FF 
#define GL_VERTEX_SHADER_BIT              0x00000001 
#define GL_FRAGMENT_SHADER_BIT            0x00000002 
#define GL_GEOMETRY_SHADER_BIT            0x00000004 
#define GL_TESS_CONTROL_SHADER_BIT        0x00000008 
#define GL_TESS_EVALUATION_SHADER_BIT     0x00000010 
#define GL_ALL_SHADER_BITS                0xFFFFFFFF 
#define GL_PROGRAM_SEPARABLE              0x8258 
#define GL_ACTIVE_PROGRAM                 0x8259 
#define GL_PROGRAM_PIPELINE_BINDING       0x825A 
#define GL_MAX_VIEWPORTS                  0x825B 
#define GL_VIEWPORT_SUBPIXEL_BITS         0x825C 
#define GL_VIEWPORT_BOUNDS_RANGE          0x825D 
#define GL_LAYER_PROVOKING_VERTEX         0x825E 
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F 
#define GL_UNDEFINED_VERTEX               0x8260 

// functions typedefs
typedef void (APIENTRYP PFN_GLRELEASESHADERCOMPILER_PROC) (void);
typedef void (APIENTRYP PFN_GLSHADERBINARY_PROC) (GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length);
typedef void (APIENTRYP PFN_GLGETSHADERPRECISIONFORMAT_PROC) (GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision);
typedef void (APIENTRYP PFN_GLDEPTHRANGEF_PROC) (GLfloat n, GLfloat f);
typedef void (APIENTRYP PFN_GLCLEARDEPTHF_PROC) (GLfloat d);
typedef void (APIENTRYP PFN_GLGETPROGRAMBINARY_PROC) (GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);
typedef void (APIENTRYP PFN_GLPROGRAMBINARY_PROC) (GLuint program, GLenum binaryFormat, const void * binary, GLsizei length);
typedef void (APIENTRYP PFN_GLPROGRAMPARAMETERI_PROC) (GLuint program, GLenum pname, GLint value);
typedef void (APIENTRYP PFN_GLUSEPROGRAMSTAGES_PROC) (GLuint pipeline, GLbitfield stages, GLuint program);
typedef void (APIENTRYP PFN_GLACTIVESHADERPROGRAM_PROC) (GLuint pipeline, GLuint program);
typedef GLuint (APIENTRYP PFN_GLCREATESHADERPROGRAMV_PROC) (GLenum type, GLsizei count, const GLchar * const * strings);
typedef void (APIENTRYP PFN_GLBINDPROGRAMPIPELINE_PROC) (GLuint pipeline);
typedef void (APIENTRYP PFN_GLDELETEPROGRAMPIPELINES_PROC) (GLsizei n, const GLuint * pipelines);
typedef void (APIENTRYP PFN_GLGENPROGRAMPIPELINES_PROC) (GLsizei n, GLuint * pipelines);
typedef GLboolean (APIENTRYP PFN_GLISPROGRAMPIPELINE_PROC) (GLuint pipeline);
typedef void (APIENTRYP PFN_GLGETPROGRAMPIPELINEIV_PROC) (GLuint pipeline, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1I_PROC) (GLuint program, GLint location, GLint v0);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1IV_PROC) (GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1F_PROC) (GLuint program, GLint location, GLfloat v0);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1FV_PROC) (GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1D_PROC) (GLuint program, GLint location, GLdouble v0);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1DV_PROC) (GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1UI_PROC) (GLuint program, GLint location, GLuint v0);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1UIV_PROC) (GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2I_PROC) (GLuint program, GLint location, GLint v0, GLint v1);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2IV_PROC) (GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2F_PROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2FV_PROC) (GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2D_PROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2DV_PROC) (GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2UI_PROC) (GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2UIV_PROC) (GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3I_PROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3IV_PROC) (GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3F_PROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3FV_PROC) (GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3D_PROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3DV_PROC) (GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3UI_PROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3UIV_PROC) (GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4I_PROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4IV_PROC) (GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4F_PROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4FV_PROC) (GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4D_PROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4DV_PROC) (GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4UI_PROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4UIV_PROC) (GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX2FV_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX3FV_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX4FV_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX2DV_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX3DV_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX4DV_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX2X3FV_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX3X2FV_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX2X4FV_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX4X2FV_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX3X4FV_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX4X3FV_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX2X3DV_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX3X2DV_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX2X4DV_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX4X2DV_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX3X4DV_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX4X3DV_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLVALIDATEPROGRAMPIPELINE_PROC) (GLuint pipeline);
typedef void (APIENTRYP PFN_GLGETPROGRAMPIPELINEINFOLOG_PROC) (GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL1D_PROC) (GLuint index, GLdouble x);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL2D_PROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL3D_PROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL4D_PROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL1DV_PROC) (GLuint index, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL2DV_PROC) (GLuint index, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL3DV_PROC) (GLuint index, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL4DV_PROC) (GLuint index, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBLPOINTER_PROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBLDV_PROC) (GLuint index, GLenum pname, GLdouble * params);
typedef void (APIENTRYP PFN_GLVIEWPORTARRAYV_PROC) (GLuint first, GLsizei count, const GLfloat * v);
typedef void (APIENTRYP PFN_GLVIEWPORTINDEXEDF_PROC) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
typedef void (APIENTRYP PFN_GLVIEWPORTINDEXEDFV_PROC) (GLuint index, const GLfloat * v);
typedef void (APIENTRYP PFN_GLSCISSORARRAYV_PROC) (GLuint first, GLsizei count, const GLint * v);
typedef void (APIENTRYP PFN_GLSCISSORINDEXED_PROC) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLSCISSORINDEXEDV_PROC) (GLuint index, const GLint * v);
typedef void (APIENTRYP PFN_GLDEPTHRANGEARRAYV_PROC) (GLuint first, GLsizei count, const GLdouble * v);
typedef void (APIENTRYP PFN_GLDEPTHRANGEINDEXED_PROC) (GLuint index, GLdouble n, GLdouble f);
typedef void (APIENTRYP PFN_GLGETFLOATI_V_PROC) (GLenum target, GLuint index, GLfloat * data);
typedef void (APIENTRYP PFN_GLGETDOUBLEI_V_PROC) (GLenum target, GLuint index, GLdouble * data);

// functions typedefs
GL_FUNC_DEF PFN_GLRELEASESHADERCOMPILER_PROC _glReleaseShaderCompiler_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSHADERBINARY_PROC _glShaderBinary_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETSHADERPRECISIONFORMAT_PROC _glGetShaderPrecisionFormat_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDEPTHRANGEF_PROC _glDepthRangef_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARDEPTHF_PROC _glClearDepthf_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMBINARY_PROC _glGetProgramBinary_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMBINARY_PROC _glProgramBinary_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMPARAMETERI_PROC _glProgramParameteri_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUSEPROGRAMSTAGES_PROC _glUseProgramStages_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLACTIVESHADERPROGRAM_PROC _glActiveShaderProgram_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCREATESHADERPROGRAMV_PROC _glCreateShaderProgramv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDPROGRAMPIPELINE_PROC _glBindProgramPipeline_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEPROGRAMPIPELINES_PROC _glDeleteProgramPipelines_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENPROGRAMPIPELINES_PROC _glGenProgramPipelines_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISPROGRAMPIPELINE_PROC _glIsProgramPipeline_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMPIPELINEIV_PROC _glGetProgramPipelineiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1I_PROC _glProgramUniform1i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1IV_PROC _glProgramUniform1iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1F_PROC _glProgramUniform1f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1FV_PROC _glProgramUniform1fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1D_PROC _glProgramUniform1d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1DV_PROC _glProgramUniform1dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1UI_PROC _glProgramUniform1ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1UIV_PROC _glProgramUniform1uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2I_PROC _glProgramUniform2i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2IV_PROC _glProgramUniform2iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2F_PROC _glProgramUniform2f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2FV_PROC _glProgramUniform2fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2D_PROC _glProgramUniform2d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2DV_PROC _glProgramUniform2dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2UI_PROC _glProgramUniform2ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2UIV_PROC _glProgramUniform2uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3I_PROC _glProgramUniform3i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3IV_PROC _glProgramUniform3iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3F_PROC _glProgramUniform3f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3FV_PROC _glProgramUniform3fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3D_PROC _glProgramUniform3d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3DV_PROC _glProgramUniform3dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3UI_PROC _glProgramUniform3ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3UIV_PROC _glProgramUniform3uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4I_PROC _glProgramUniform4i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4IV_PROC _glProgramUniform4iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4F_PROC _glProgramUniform4f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4FV_PROC _glProgramUniform4fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4D_PROC _glProgramUniform4d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4DV_PROC _glProgramUniform4dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4UI_PROC _glProgramUniform4ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4UIV_PROC _glProgramUniform4uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX2FV_PROC _glProgramUniformMatrix2fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX3FV_PROC _glProgramUniformMatrix3fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX4FV_PROC _glProgramUniformMatrix4fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX2DV_PROC _glProgramUniformMatrix2dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX3DV_PROC _glProgramUniformMatrix3dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX4DV_PROC _glProgramUniformMatrix4dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX2X3FV_PROC _glProgramUniformMatrix2x3fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX3X2FV_PROC _glProgramUniformMatrix3x2fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX2X4FV_PROC _glProgramUniformMatrix2x4fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX4X2FV_PROC _glProgramUniformMatrix4x2fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX3X4FV_PROC _glProgramUniformMatrix3x4fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX4X3FV_PROC _glProgramUniformMatrix4x3fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX2X3DV_PROC _glProgramUniformMatrix2x3dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX3X2DV_PROC _glProgramUniformMatrix3x2dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX2X4DV_PROC _glProgramUniformMatrix2x4dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX4X2DV_PROC _glProgramUniformMatrix4x2dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX3X4DV_PROC _glProgramUniformMatrix3x4dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX4X3DV_PROC _glProgramUniformMatrix4x3dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVALIDATEPROGRAMPIPELINE_PROC _glValidateProgramPipeline_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMPIPELINEINFOLOG_PROC _glGetProgramPipelineInfoLog_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL1D_PROC _glVertexAttribL1d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL2D_PROC _glVertexAttribL2d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL3D_PROC _glVertexAttribL3d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL4D_PROC _glVertexAttribL4d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL1DV_PROC _glVertexAttribL1dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL2DV_PROC _glVertexAttribL2dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL3DV_PROC _glVertexAttribL3dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL4DV_PROC _glVertexAttribL4dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBLPOINTER_PROC _glVertexAttribLPointer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBLDV_PROC _glGetVertexAttribLdv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVIEWPORTARRAYV_PROC _glViewportArrayv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVIEWPORTINDEXEDF_PROC _glViewportIndexedf_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVIEWPORTINDEXEDFV_PROC _glViewportIndexedfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSCISSORARRAYV_PROC _glScissorArrayv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSCISSORINDEXED_PROC _glScissorIndexed_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSCISSORINDEXEDV_PROC _glScissorIndexedv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDEPTHRANGEARRAYV_PROC _glDepthRangeArrayv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDEPTHRANGEINDEXED_PROC _glDepthRangeIndexed_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFLOATI_V_PROC _glGetFloati_v_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETDOUBLEI_V_PROC _glGetDoublei_v_ GL_FUNC_DEF2;

// functions inline wrap
inline void glReleaseShaderCompiler (void) { return _glReleaseShaderCompiler_(); };
inline void glShaderBinary (GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length) { return _glShaderBinary_(count, shaders, binaryformat, binary, length); };
inline void glGetShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision) { return _glGetShaderPrecisionFormat_(shadertype, precisiontype, range, precision); };
inline void glDepthRangef (GLfloat n, GLfloat f) { return _glDepthRangef_(n, f); };
inline void glClearDepthf (GLfloat d) { return _glClearDepthf_(d); };
inline void glGetProgramBinary (GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) { return _glGetProgramBinary_(program, bufSize, length, binaryFormat, binary); };
inline void glProgramBinary (GLuint program, GLenum binaryFormat, const void * binary, GLsizei length) { return _glProgramBinary_(program, binaryFormat, binary, length); };
inline void glProgramParameteri (GLuint program, GLenum pname, GLint value) { return _glProgramParameteri_(program, pname, value); };
inline void glUseProgramStages (GLuint pipeline, GLbitfield stages, GLuint program) { return _glUseProgramStages_(pipeline, stages, program); };
inline void glActiveShaderProgram (GLuint pipeline, GLuint program) { return _glActiveShaderProgram_(pipeline, program); };
inline GLuint glCreateShaderProgramv (GLenum type, GLsizei count, const GLchar * const * strings) { return _glCreateShaderProgramv_(type, count, strings); };
inline void glBindProgramPipeline (GLuint pipeline) { return _glBindProgramPipeline_(pipeline); };
inline void glDeleteProgramPipelines (GLsizei n, const GLuint * pipelines) { return _glDeleteProgramPipelines_(n, pipelines); };
inline void glGenProgramPipelines (GLsizei n, GLuint * pipelines) { return _glGenProgramPipelines_(n, pipelines); };
inline GLboolean glIsProgramPipeline (GLuint pipeline) { return _glIsProgramPipeline_(pipeline); };
inline void glGetProgramPipelineiv (GLuint pipeline, GLenum pname, GLint * params) { return _glGetProgramPipelineiv_(pipeline, pname, params); };
inline void glProgramUniform1i (GLuint program, GLint location, GLint v0) { return _glProgramUniform1i_(program, location, v0); };
inline void glProgramUniform1iv (GLuint program, GLint location, GLsizei count, const GLint * value) { return _glProgramUniform1iv_(program, location, count, value); };
inline void glProgramUniform1f (GLuint program, GLint location, GLfloat v0) { return _glProgramUniform1f_(program, location, v0); };
inline void glProgramUniform1fv (GLuint program, GLint location, GLsizei count, const GLfloat * value) { return _glProgramUniform1fv_(program, location, count, value); };
inline void glProgramUniform1d (GLuint program, GLint location, GLdouble v0) { return _glProgramUniform1d_(program, location, v0); };
inline void glProgramUniform1dv (GLuint program, GLint location, GLsizei count, const GLdouble * value) { return _glProgramUniform1dv_(program, location, count, value); };
inline void glProgramUniform1ui (GLuint program, GLint location, GLuint v0) { return _glProgramUniform1ui_(program, location, v0); };
inline void glProgramUniform1uiv (GLuint program, GLint location, GLsizei count, const GLuint * value) { return _glProgramUniform1uiv_(program, location, count, value); };
inline void glProgramUniform2i (GLuint program, GLint location, GLint v0, GLint v1) { return _glProgramUniform2i_(program, location, v0, v1); };
inline void glProgramUniform2iv (GLuint program, GLint location, GLsizei count, const GLint * value) { return _glProgramUniform2iv_(program, location, count, value); };
inline void glProgramUniform2f (GLuint program, GLint location, GLfloat v0, GLfloat v1) { return _glProgramUniform2f_(program, location, v0, v1); };
inline void glProgramUniform2fv (GLuint program, GLint location, GLsizei count, const GLfloat * value) { return _glProgramUniform2fv_(program, location, count, value); };
inline void glProgramUniform2d (GLuint program, GLint location, GLdouble v0, GLdouble v1) { return _glProgramUniform2d_(program, location, v0, v1); };
inline void glProgramUniform2dv (GLuint program, GLint location, GLsizei count, const GLdouble * value) { return _glProgramUniform2dv_(program, location, count, value); };
inline void glProgramUniform2ui (GLuint program, GLint location, GLuint v0, GLuint v1) { return _glProgramUniform2ui_(program, location, v0, v1); };
inline void glProgramUniform2uiv (GLuint program, GLint location, GLsizei count, const GLuint * value) { return _glProgramUniform2uiv_(program, location, count, value); };
inline void glProgramUniform3i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2) { return _glProgramUniform3i_(program, location, v0, v1, v2); };
inline void glProgramUniform3iv (GLuint program, GLint location, GLsizei count, const GLint * value) { return _glProgramUniform3iv_(program, location, count, value); };
inline void glProgramUniform3f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { return _glProgramUniform3f_(program, location, v0, v1, v2); };
inline void glProgramUniform3fv (GLuint program, GLint location, GLsizei count, const GLfloat * value) { return _glProgramUniform3fv_(program, location, count, value); };
inline void glProgramUniform3d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) { return _glProgramUniform3d_(program, location, v0, v1, v2); };
inline void glProgramUniform3dv (GLuint program, GLint location, GLsizei count, const GLdouble * value) { return _glProgramUniform3dv_(program, location, count, value); };
inline void glProgramUniform3ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) { return _glProgramUniform3ui_(program, location, v0, v1, v2); };
inline void glProgramUniform3uiv (GLuint program, GLint location, GLsizei count, const GLuint * value) { return _glProgramUniform3uiv_(program, location, count, value); };
inline void glProgramUniform4i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { return _glProgramUniform4i_(program, location, v0, v1, v2, v3); };
inline void glProgramUniform4iv (GLuint program, GLint location, GLsizei count, const GLint * value) { return _glProgramUniform4iv_(program, location, count, value); };
inline void glProgramUniform4f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { return _glProgramUniform4f_(program, location, v0, v1, v2, v3); };
inline void glProgramUniform4fv (GLuint program, GLint location, GLsizei count, const GLfloat * value) { return _glProgramUniform4fv_(program, location, count, value); };
inline void glProgramUniform4d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) { return _glProgramUniform4d_(program, location, v0, v1, v2, v3); };
inline void glProgramUniform4dv (GLuint program, GLint location, GLsizei count, const GLdouble * value) { return _glProgramUniform4dv_(program, location, count, value); };
inline void glProgramUniform4ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { return _glProgramUniform4ui_(program, location, v0, v1, v2, v3); };
inline void glProgramUniform4uiv (GLuint program, GLint location, GLsizei count, const GLuint * value) { return _glProgramUniform4uiv_(program, location, count, value); };
inline void glProgramUniformMatrix2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glProgramUniformMatrix2fv_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glProgramUniformMatrix3fv_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glProgramUniformMatrix4fv_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glProgramUniformMatrix2dv_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glProgramUniformMatrix3dv_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glProgramUniformMatrix4dv_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix2x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glProgramUniformMatrix2x3fv_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix3x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glProgramUniformMatrix3x2fv_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix2x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glProgramUniformMatrix2x4fv_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix4x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glProgramUniformMatrix4x2fv_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix3x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glProgramUniformMatrix3x4fv_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix4x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glProgramUniformMatrix4x3fv_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix2x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glProgramUniformMatrix2x3dv_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix3x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glProgramUniformMatrix3x2dv_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix2x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glProgramUniformMatrix2x4dv_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix4x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glProgramUniformMatrix4x2dv_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix3x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glProgramUniformMatrix3x4dv_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix4x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glProgramUniformMatrix4x3dv_(program, location, count, transpose, value); };
inline void glValidateProgramPipeline (GLuint pipeline) { return _glValidateProgramPipeline_(pipeline); };
inline void glGetProgramPipelineInfoLog (GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { return _glGetProgramPipelineInfoLog_(pipeline, bufSize, length, infoLog); };
inline void glVertexAttribL1d (GLuint index, GLdouble x) { return _glVertexAttribL1d_(index, x); };
inline void glVertexAttribL2d (GLuint index, GLdouble x, GLdouble y) { return _glVertexAttribL2d_(index, x, y); };
inline void glVertexAttribL3d (GLuint index, GLdouble x, GLdouble y, GLdouble z) { return _glVertexAttribL3d_(index, x, y, z); };
inline void glVertexAttribL4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { return _glVertexAttribL4d_(index, x, y, z, w); };
inline void glVertexAttribL1dv (GLuint index, const GLdouble * v) { return _glVertexAttribL1dv_(index, v); };
inline void glVertexAttribL2dv (GLuint index, const GLdouble * v) { return _glVertexAttribL2dv_(index, v); };
inline void glVertexAttribL3dv (GLuint index, const GLdouble * v) { return _glVertexAttribL3dv_(index, v); };
inline void glVertexAttribL4dv (GLuint index, const GLdouble * v) { return _glVertexAttribL4dv_(index, v); };
inline void glVertexAttribLPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { return _glVertexAttribLPointer_(index, size, type, stride, pointer); };
inline void glGetVertexAttribLdv (GLuint index, GLenum pname, GLdouble * params) { return _glGetVertexAttribLdv_(index, pname, params); };
inline void glViewportArrayv (GLuint first, GLsizei count, const GLfloat * v) { return _glViewportArrayv_(first, count, v); };
inline void glViewportIndexedf (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { return _glViewportIndexedf_(index, x, y, w, h); };
inline void glViewportIndexedfv (GLuint index, const GLfloat * v) { return _glViewportIndexedfv_(index, v); };
inline void glScissorArrayv (GLuint first, GLsizei count, const GLint * v) { return _glScissorArrayv_(first, count, v); };
inline void glScissorIndexed (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { return _glScissorIndexed_(index, left, bottom, width, height); };
inline void glScissorIndexedv (GLuint index, const GLint * v) { return _glScissorIndexedv_(index, v); };
inline void glDepthRangeArrayv (GLuint first, GLsizei count, const GLdouble * v) { return _glDepthRangeArrayv_(first, count, v); };
inline void glDepthRangeIndexed (GLuint index, GLdouble n, GLdouble f) { return _glDepthRangeIndexed_(index, n, f); };
inline void glGetFloati_v (GLenum target, GLuint index, GLfloat * data) { return _glGetFloati_v_(target, index, data); };
inline void glGetDoublei_v (GLenum target, GLuint index, GLdouble * data) { return _glGetDoublei_v_(target, index, data); };
#endif //GL_VERSION_4_1

#ifndef GL_VERSION_4_2

// Defines
#define GL_COPY_READ_BUFFER_BINDING       0x8F36 
#define GL_COPY_WRITE_BUFFER_BINDING      0x8F37 
#define GL_TRANSFORM_FEEDBACK_ACTIVE      0x8E24 
#define GL_TRANSFORM_FEEDBACK_PAUSED      0x8E23 
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH  0x9127 
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128 
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH  0x9129 
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE   0x912A 
#define GL_PACK_COMPRESSED_BLOCK_WIDTH    0x912B 
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT   0x912C 
#define GL_PACK_COMPRESSED_BLOCK_DEPTH    0x912D 
#define GL_PACK_COMPRESSED_BLOCK_SIZE     0x912E 
#define GL_NUM_SAMPLE_COUNTS              0x9380 
#define GL_MIN_MAP_BUFFER_ALIGNMENT       0x90BC 
#define GL_ATOMIC_COUNTER_BUFFER          0x92C0 
#define GL_ATOMIC_COUNTER_BUFFER_BINDING  0x92C1 
#define GL_ATOMIC_COUNTER_BUFFER_START    0x92C2 
#define GL_ATOMIC_COUNTER_BUFFER_SIZE     0x92C3 
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4 
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5 
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6 
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7 
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8 
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9 
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA 
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB 
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC 
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD 
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE 
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF 
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0 
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1 
#define GL_MAX_VERTEX_ATOMIC_COUNTERS     0x92D2 
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3 
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4 
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS   0x92D5 
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS   0x92D6 
#define GL_MAX_COMBINED_ATOMIC_COUNTERS   0x92D7 
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8 
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC 
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS  0x92D9 
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA 
#define GL_UNSIGNED_INT_ATOMIC_COUNTER    0x92DB 
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001 
#define GL_ELEMENT_ARRAY_BARRIER_BIT      0x00000002 
#define GL_UNIFORM_BARRIER_BIT            0x00000004 
#define GL_TEXTURE_FETCH_BARRIER_BIT      0x00000008 
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020 
#define GL_COMMAND_BARRIER_BIT            0x00000040 
#define GL_PIXEL_BUFFER_BARRIER_BIT       0x00000080 
#define GL_TEXTURE_UPDATE_BARRIER_BIT     0x00000100 
#define GL_BUFFER_UPDATE_BARRIER_BIT      0x00000200 
#define GL_FRAMEBUFFER_BARRIER_BIT        0x00000400 
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800 
#define GL_ATOMIC_COUNTER_BARRIER_BIT     0x00001000 
#define GL_ALL_BARRIER_BITS               0xFFFFFFFF 
#define GL_MAX_IMAGE_UNITS                0x8F38 
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39 
#define GL_IMAGE_BINDING_NAME             0x8F3A 
#define GL_IMAGE_BINDING_LEVEL            0x8F3B 
#define GL_IMAGE_BINDING_LAYERED          0x8F3C 
#define GL_IMAGE_BINDING_LAYER            0x8F3D 
#define GL_IMAGE_BINDING_ACCESS           0x8F3E 
#define GL_IMAGE_1D                       0x904C 
#define GL_IMAGE_2D                       0x904D 
#define GL_IMAGE_3D                       0x904E 
#define GL_IMAGE_2D_RECT                  0x904F 
#define GL_IMAGE_CUBE                     0x9050 
#define GL_IMAGE_BUFFER                   0x9051 
#define GL_IMAGE_1D_ARRAY                 0x9052 
#define GL_IMAGE_2D_ARRAY                 0x9053 
#define GL_IMAGE_CUBE_MAP_ARRAY           0x9054 
#define GL_IMAGE_2D_MULTISAMPLE           0x9055 
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY     0x9056 
#define GL_INT_IMAGE_1D                   0x9057 
#define GL_INT_IMAGE_2D                   0x9058 
#define GL_INT_IMAGE_3D                   0x9059 
#define GL_INT_IMAGE_2D_RECT              0x905A 
#define GL_INT_IMAGE_CUBE                 0x905B 
#define GL_INT_IMAGE_BUFFER               0x905C 
#define GL_INT_IMAGE_1D_ARRAY             0x905D 
#define GL_INT_IMAGE_2D_ARRAY             0x905E 
#define GL_INT_IMAGE_CUBE_MAP_ARRAY       0x905F 
#define GL_INT_IMAGE_2D_MULTISAMPLE       0x9060 
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061 
#define GL_UNSIGNED_INT_IMAGE_1D          0x9062 
#define GL_UNSIGNED_INT_IMAGE_2D          0x9063 
#define GL_UNSIGNED_INT_IMAGE_3D          0x9064 
#define GL_UNSIGNED_INT_IMAGE_2D_RECT     0x9065 
#define GL_UNSIGNED_INT_IMAGE_CUBE        0x9066 
#define GL_UNSIGNED_INT_IMAGE_BUFFER      0x9067 
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY    0x9068 
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY    0x9069 
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A 
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B 
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C 
#define GL_MAX_IMAGE_SAMPLES              0x906D 
#define GL_IMAGE_BINDING_FORMAT           0x906E 
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7 
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8 
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9 
#define GL_MAX_VERTEX_IMAGE_UNIFORMS      0x90CA 
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB 
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC 
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS    0x90CD 
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS    0x90CE 
#define GL_MAX_COMBINED_IMAGE_UNIFORMS    0x90CF 
#define GL_COMPRESSED_RGBA_BPTC_UNORM     0x8E8C 
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D 
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E 
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F 
#define GL_TEXTURE_IMMUTABLE_FORMAT       0x912F 

// functions typedefs
typedef void (APIENTRYP PFN_GLDRAWARRAYSINSTANCEDBASEINSTANCE_PROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
typedef void (APIENTRYP PFN_GLDRAWELEMENTSINSTANCEDBASEINSTANCE_PROC) (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance);
typedef void (APIENTRYP PFN_GLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCE_PROC) (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
typedef void (APIENTRYP PFN_GLGETINTERNALFORMATIV_PROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint * params);
typedef void (APIENTRYP PFN_GLGETACTIVEATOMICCOUNTERBUFFERIV_PROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLBINDIMAGETEXTURE_PROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
typedef void (APIENTRYP PFN_GLMEMORYBARRIER_PROC) (GLbitfield barriers);
typedef void (APIENTRYP PFN_GLTEXSTORAGE1D_PROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (APIENTRYP PFN_GLTEXSTORAGE2D_PROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLTEXSTORAGE3D_PROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (APIENTRYP PFN_GLDRAWTRANSFORMFEEDBACKINSTANCED_PROC) (GLenum mode, GLuint id, GLsizei instancecount);
typedef void (APIENTRYP PFN_GLDRAWTRANSFORMFEEDBACKSTREAMINSTANCED_PROC) (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);

// functions typedefs
GL_FUNC_DEF PFN_GLDRAWARRAYSINSTANCEDBASEINSTANCE_PROC _glDrawArraysInstancedBaseInstance_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWELEMENTSINSTANCEDBASEINSTANCE_PROC _glDrawElementsInstancedBaseInstance_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCE_PROC _glDrawElementsInstancedBaseVertexBaseInstance_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETINTERNALFORMATIV_PROC _glGetInternalformativ_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETACTIVEATOMICCOUNTERBUFFERIV_PROC _glGetActiveAtomicCounterBufferiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDIMAGETEXTURE_PROC _glBindImageTexture_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMEMORYBARRIER_PROC _glMemoryBarrier_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXSTORAGE1D_PROC _glTexStorage1D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXSTORAGE2D_PROC _glTexStorage2D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXSTORAGE3D_PROC _glTexStorage3D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWTRANSFORMFEEDBACKINSTANCED_PROC _glDrawTransformFeedbackInstanced_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWTRANSFORMFEEDBACKSTREAMINSTANCED_PROC _glDrawTransformFeedbackStreamInstanced_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDrawArraysInstancedBaseInstance (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) { return _glDrawArraysInstancedBaseInstance_(mode, first, count, instancecount, baseinstance); };
inline void glDrawElementsInstancedBaseInstance (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance) { return _glDrawElementsInstancedBaseInstance_(mode, count, type, indices, instancecount, baseinstance); };
inline void glDrawElementsInstancedBaseVertexBaseInstance (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) { return _glDrawElementsInstancedBaseVertexBaseInstance_(mode, count, type, indices, instancecount, basevertex, baseinstance); };
inline void glGetInternalformativ (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint * params) { return _glGetInternalformativ_(target, internalformat, pname, count, params); };
inline void glGetActiveAtomicCounterBufferiv (GLuint program, GLuint bufferIndex, GLenum pname, GLint * params) { return _glGetActiveAtomicCounterBufferiv_(program, bufferIndex, pname, params); };
inline void glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) { return _glBindImageTexture_(unit, texture, level, layered, layer, access, format); };
inline void glMemoryBarrier (GLbitfield barriers) { return _glMemoryBarrier_(barriers); };
inline void glTexStorage1D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { return _glTexStorage1D_(target, levels, internalformat, width); };
inline void glTexStorage2D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { return _glTexStorage2D_(target, levels, internalformat, width, height); };
inline void glTexStorage3D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { return _glTexStorage3D_(target, levels, internalformat, width, height, depth); };
inline void glDrawTransformFeedbackInstanced (GLenum mode, GLuint id, GLsizei instancecount) { return _glDrawTransformFeedbackInstanced_(mode, id, instancecount); };
inline void glDrawTransformFeedbackStreamInstanced (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) { return _glDrawTransformFeedbackStreamInstanced_(mode, id, stream, instancecount); };
#endif //GL_VERSION_4_2

#ifndef GL_VERSION_4_3

// Defines
#define GL_NUM_SHADING_LANGUAGE_VERSIONS  0x82E9 
#define GL_VERTEX_ATTRIB_ARRAY_LONG       0x874E 
#define GL_COMPRESSED_RGB8_ETC2           0x9274 
#define GL_COMPRESSED_SRGB8_ETC2          0x9275 
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276 
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277 
#define GL_COMPRESSED_RGBA8_ETC2_EAC      0x9278 
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279 
#define GL_COMPRESSED_R11_EAC             0x9270 
#define GL_COMPRESSED_SIGNED_R11_EAC      0x9271 
#define GL_COMPRESSED_RG11_EAC            0x9272 
#define GL_COMPRESSED_SIGNED_RG11_EAC     0x9273 
#define GL_PRIMITIVE_RESTART_FIXED_INDEX  0x8D69 
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A 
#define GL_MAX_ELEMENT_INDEX              0x8D6B 
#define GL_COMPUTE_SHADER                 0x91B9 
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS     0x91BB 
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC 
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS     0x91BD 
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262 
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263 
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264 
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS    0x8265 
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266 
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB 
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT   0x91BE 
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE    0x91BF 
#define GL_COMPUTE_WORK_GROUP_SIZE        0x8267 
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC 
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED 
#define GL_DISPATCH_INDIRECT_BUFFER       0x90EE 
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF 
#define GL_COMPUTE_SHADER_BIT             0x00000020 
#define GL_DEBUG_OUTPUT_SYNCHRONOUS       0x8242 
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243 
#define GL_DEBUG_CALLBACK_FUNCTION        0x8244 
#define GL_DEBUG_CALLBACK_USER_PARAM      0x8245 
#define GL_DEBUG_SOURCE_API               0x8246 
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM     0x8247 
#define GL_DEBUG_SOURCE_SHADER_COMPILER   0x8248 
#define GL_DEBUG_SOURCE_THIRD_PARTY       0x8249 
#define GL_DEBUG_SOURCE_APPLICATION       0x824A 
#define GL_DEBUG_SOURCE_OTHER             0x824B 
#define GL_DEBUG_TYPE_ERROR               0x824C 
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D 
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR  0x824E 
#define GL_DEBUG_TYPE_PORTABILITY         0x824F 
#define GL_DEBUG_TYPE_PERFORMANCE         0x8250 
#define GL_DEBUG_TYPE_OTHER               0x8251 
#define GL_MAX_DEBUG_MESSAGE_LENGTH       0x9143 
#define GL_MAX_DEBUG_LOGGED_MESSAGES      0x9144 
#define GL_DEBUG_LOGGED_MESSAGES          0x9145 
#define GL_DEBUG_SEVERITY_HIGH            0x9146 
#define GL_DEBUG_SEVERITY_MEDIUM          0x9147 
#define GL_DEBUG_SEVERITY_LOW             0x9148 
#define GL_DEBUG_TYPE_MARKER              0x8268 
#define GL_DEBUG_TYPE_PUSH_GROUP          0x8269 
#define GL_DEBUG_TYPE_POP_GROUP           0x826A 
#define GL_DEBUG_SEVERITY_NOTIFICATION    0x826B 
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH    0x826C 
#define GL_DEBUG_GROUP_STACK_DEPTH        0x826D 
#define GL_BUFFER                         0x82E0 
#define GL_SHADER                         0x82E1 
#define GL_PROGRAM                        0x82E2 
#define GL_QUERY                          0x82E3 
#define GL_PROGRAM_PIPELINE               0x82E4 
#define GL_SAMPLER                        0x82E6 
#define GL_MAX_LABEL_LENGTH               0x82E8 
#define GL_DEBUG_OUTPUT                   0x92E0 
#define GL_CONTEXT_FLAG_DEBUG_BIT         0x00000002 
#define GL_MAX_UNIFORM_LOCATIONS          0x826E 
#define GL_FRAMEBUFFER_DEFAULT_WIDTH      0x9310 
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT     0x9311 
#define GL_FRAMEBUFFER_DEFAULT_LAYERS     0x9312 
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES    0x9313 
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314 
#define GL_MAX_FRAMEBUFFER_WIDTH          0x9315 
#define GL_MAX_FRAMEBUFFER_HEIGHT         0x9316 
#define GL_MAX_FRAMEBUFFER_LAYERS         0x9317 
#define GL_MAX_FRAMEBUFFER_SAMPLES        0x9318 
#define GL_INTERNALFORMAT_SUPPORTED       0x826F 
#define GL_INTERNALFORMAT_PREFERRED       0x8270 
#define GL_INTERNALFORMAT_RED_SIZE        0x8271 
#define GL_INTERNALFORMAT_GREEN_SIZE      0x8272 
#define GL_INTERNALFORMAT_BLUE_SIZE       0x8273 
#define GL_INTERNALFORMAT_ALPHA_SIZE      0x8274 
#define GL_INTERNALFORMAT_DEPTH_SIZE      0x8275 
#define GL_INTERNALFORMAT_STENCIL_SIZE    0x8276 
#define GL_INTERNALFORMAT_SHARED_SIZE     0x8277 
#define GL_INTERNALFORMAT_RED_TYPE        0x8278 
#define GL_INTERNALFORMAT_GREEN_TYPE      0x8279 
#define GL_INTERNALFORMAT_BLUE_TYPE       0x827A 
#define GL_INTERNALFORMAT_ALPHA_TYPE      0x827B 
#define GL_INTERNALFORMAT_DEPTH_TYPE      0x827C 
#define GL_INTERNALFORMAT_STENCIL_TYPE    0x827D 
#define GL_MAX_WIDTH                      0x827E 
#define GL_MAX_HEIGHT                     0x827F 
#define GL_MAX_DEPTH                      0x8280 
#define GL_MAX_LAYERS                     0x8281 
#define GL_MAX_COMBINED_DIMENSIONS        0x8282 
#define GL_COLOR_COMPONENTS               0x8283 
#define GL_DEPTH_COMPONENTS               0x8284 
#define GL_STENCIL_COMPONENTS             0x8285 
#define GL_COLOR_RENDERABLE               0x8286 
#define GL_DEPTH_RENDERABLE               0x8287 
#define GL_STENCIL_RENDERABLE             0x8288 
#define GL_FRAMEBUFFER_RENDERABLE         0x8289 
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A 
#define GL_FRAMEBUFFER_BLEND              0x828B 
#define GL_READ_PIXELS                    0x828C 
#define GL_READ_PIXELS_FORMAT             0x828D 
#define GL_READ_PIXELS_TYPE               0x828E 
#define GL_TEXTURE_IMAGE_FORMAT           0x828F 
#define GL_TEXTURE_IMAGE_TYPE             0x8290 
#define GL_GET_TEXTURE_IMAGE_FORMAT       0x8291 
#define GL_GET_TEXTURE_IMAGE_TYPE         0x8292 
#define GL_MIPMAP                         0x8293 
#define GL_MANUAL_GENERATE_MIPMAP         0x8294 
#define GL_AUTO_GENERATE_MIPMAP           0x8295 
#define GL_COLOR_ENCODING                 0x8296 
#define GL_SRGB_READ                      0x8297 
#define GL_SRGB_WRITE                     0x8298 
#define GL_FILTER                         0x829A 
#define GL_VERTEX_TEXTURE                 0x829B 
#define GL_TESS_CONTROL_TEXTURE           0x829C 
#define GL_TESS_EVALUATION_TEXTURE        0x829D 
#define GL_GEOMETRY_TEXTURE               0x829E 
#define GL_FRAGMENT_TEXTURE               0x829F 
#define GL_COMPUTE_TEXTURE                0x82A0 
#define GL_TEXTURE_SHADOW                 0x82A1 
#define GL_TEXTURE_GATHER                 0x82A2 
#define GL_TEXTURE_GATHER_SHADOW          0x82A3 
#define GL_SHADER_IMAGE_LOAD              0x82A4 
#define GL_SHADER_IMAGE_STORE             0x82A5 
#define GL_SHADER_IMAGE_ATOMIC            0x82A6 
#define GL_IMAGE_TEXEL_SIZE               0x82A7 
#define GL_IMAGE_COMPATIBILITY_CLASS      0x82A8 
#define GL_IMAGE_PIXEL_FORMAT             0x82A9 
#define GL_IMAGE_PIXEL_TYPE               0x82AA 
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC 
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD 
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE 
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF 
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1 
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2 
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE  0x82B3 
#define GL_CLEAR_BUFFER                   0x82B4 
#define GL_TEXTURE_VIEW                   0x82B5 
#define GL_VIEW_COMPATIBILITY_CLASS       0x82B6 
#define GL_FULL_SUPPORT                   0x82B7 
#define GL_CAVEAT_SUPPORT                 0x82B8 
#define GL_IMAGE_CLASS_4_X_32             0x82B9 
#define GL_IMAGE_CLASS_2_X_32             0x82BA 
#define GL_IMAGE_CLASS_1_X_32             0x82BB 
#define GL_IMAGE_CLASS_4_X_16             0x82BC 
#define GL_IMAGE_CLASS_2_X_16             0x82BD 
#define GL_IMAGE_CLASS_1_X_16             0x82BE 
#define GL_IMAGE_CLASS_4_X_8              0x82BF 
#define GL_IMAGE_CLASS_2_X_8              0x82C0 
#define GL_IMAGE_CLASS_1_X_8              0x82C1 
#define GL_IMAGE_CLASS_11_11_10           0x82C2 
#define GL_IMAGE_CLASS_10_10_10_2         0x82C3 
#define GL_VIEW_CLASS_128_BITS            0x82C4 
#define GL_VIEW_CLASS_96_BITS             0x82C5 
#define GL_VIEW_CLASS_64_BITS             0x82C6 
#define GL_VIEW_CLASS_48_BITS             0x82C7 
#define GL_VIEW_CLASS_32_BITS             0x82C8 
#define GL_VIEW_CLASS_24_BITS             0x82C9 
#define GL_VIEW_CLASS_16_BITS             0x82CA 
#define GL_VIEW_CLASS_8_BITS              0x82CB 
#define GL_VIEW_CLASS_S3TC_DXT1_RGB       0x82CC 
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA      0x82CD 
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA      0x82CE 
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA      0x82CF 
#define GL_VIEW_CLASS_RGTC1_RED           0x82D0 
#define GL_VIEW_CLASS_RGTC2_RG            0x82D1 
#define GL_VIEW_CLASS_BPTC_UNORM          0x82D2 
#define GL_VIEW_CLASS_BPTC_FLOAT          0x82D3 
#define GL_UNIFORM                        0x92E1 
#define GL_UNIFORM_BLOCK                  0x92E2 
#define GL_PROGRAM_INPUT                  0x92E3 
#define GL_PROGRAM_OUTPUT                 0x92E4 
#define GL_BUFFER_VARIABLE                0x92E5 
#define GL_SHADER_STORAGE_BLOCK           0x92E6 
#define GL_VERTEX_SUBROUTINE              0x92E8 
#define GL_TESS_CONTROL_SUBROUTINE        0x92E9 
#define GL_TESS_EVALUATION_SUBROUTINE     0x92EA 
#define GL_GEOMETRY_SUBROUTINE            0x92EB 
#define GL_FRAGMENT_SUBROUTINE            0x92EC 
#define GL_COMPUTE_SUBROUTINE             0x92ED 
#define GL_VERTEX_SUBROUTINE_UNIFORM      0x92EE 
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF 
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0 
#define GL_GEOMETRY_SUBROUTINE_UNIFORM    0x92F1 
#define GL_FRAGMENT_SUBROUTINE_UNIFORM    0x92F2 
#define GL_COMPUTE_SUBROUTINE_UNIFORM     0x92F3 
#define GL_TRANSFORM_FEEDBACK_VARYING     0x92F4 
#define GL_ACTIVE_RESOURCES               0x92F5 
#define GL_MAX_NAME_LENGTH                0x92F6 
#define GL_MAX_NUM_ACTIVE_VARIABLES       0x92F7 
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8 
#define GL_NAME_LENGTH                    0x92F9 
#define GL_TYPE                           0x92FA 
#define GL_ARRAY_SIZE                     0x92FB 
#define GL_OFFSET                         0x92FC 
#define GL_BLOCK_INDEX                    0x92FD 
#define GL_ARRAY_STRIDE                   0x92FE 
#define GL_MATRIX_STRIDE                  0x92FF 
#define GL_IS_ROW_MAJOR                   0x9300 
#define GL_ATOMIC_COUNTER_BUFFER_INDEX    0x9301 
#define GL_BUFFER_BINDING                 0x9302 
#define GL_BUFFER_DATA_SIZE               0x9303 
#define GL_NUM_ACTIVE_VARIABLES           0x9304 
#define GL_ACTIVE_VARIABLES               0x9305 
#define GL_REFERENCED_BY_VERTEX_SHADER    0x9306 
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307 
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308 
#define GL_REFERENCED_BY_GEOMETRY_SHADER  0x9309 
#define GL_REFERENCED_BY_FRAGMENT_SHADER  0x930A 
#define GL_REFERENCED_BY_COMPUTE_SHADER   0x930B 
#define GL_TOP_LEVEL_ARRAY_SIZE           0x930C 
#define GL_TOP_LEVEL_ARRAY_STRIDE         0x930D 
#define GL_LOCATION                       0x930E 
#define GL_LOCATION_INDEX                 0x930F 
#define GL_IS_PER_PATCH                   0x92E7 
#define GL_SHADER_STORAGE_BUFFER          0x90D2 
#define GL_SHADER_STORAGE_BUFFER_BINDING  0x90D3 
#define GL_SHADER_STORAGE_BUFFER_START    0x90D4 
#define GL_SHADER_STORAGE_BUFFER_SIZE     0x90D5 
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6 
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7 
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8 
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9 
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA 
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB 
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC 
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD 
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE  0x90DE 
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF 
#define GL_SHADER_STORAGE_BARRIER_BIT     0x00002000 
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39 
#define GL_DEPTH_STENCIL_TEXTURE_MODE     0x90EA 
#define GL_TEXTURE_BUFFER_OFFSET          0x919D 
#define GL_TEXTURE_BUFFER_SIZE            0x919E 
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F 
#define GL_TEXTURE_VIEW_MIN_LEVEL         0x82DB 
#define GL_TEXTURE_VIEW_NUM_LEVELS        0x82DC 
#define GL_TEXTURE_VIEW_MIN_LAYER         0x82DD 
#define GL_TEXTURE_VIEW_NUM_LAYERS        0x82DE 
#define GL_TEXTURE_IMMUTABLE_LEVELS       0x82DF 
#define GL_VERTEX_ATTRIB_BINDING          0x82D4 
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET  0x82D5 
#define GL_VERTEX_BINDING_DIVISOR         0x82D6 
#define GL_VERTEX_BINDING_OFFSET          0x82D7 
#define GL_VERTEX_BINDING_STRIDE          0x82D8 
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9 
#define GL_MAX_VERTEX_ATTRIB_BINDINGS     0x82DA 
#define GL_VERTEX_BINDING_BUFFER          0x8F4F 
#define GL_DISPLAY_LIST                   0x82E7 

// functions typedefs
typedef void (APIENTRYP PFN_GLCLEARBUFFERDATA_PROC) (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data);
typedef void (APIENTRYP PFN_GLCLEARBUFFERSUBDATA_PROC) (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
typedef void (APIENTRYP PFN_GLDISPATCHCOMPUTE_PROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
typedef void (APIENTRYP PFN_GLDISPATCHCOMPUTEINDIRECT_PROC) (GLintptr indirect);
typedef void (APIENTRYP PFN_GLCOPYIMAGESUBDATA_PROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef void (APIENTRYP PFN_GLFRAMEBUFFERPARAMETERI_PROC) (GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLGETFRAMEBUFFERPARAMETERIV_PROC) (GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETINTERNALFORMATI64V_PROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 * params);
typedef void (APIENTRYP PFN_GLINVALIDATETEXSUBIMAGE_PROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
typedef void (APIENTRYP PFN_GLINVALIDATETEXIMAGE_PROC) (GLuint texture, GLint level);
typedef void (APIENTRYP PFN_GLINVALIDATEBUFFERSUBDATA_PROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (APIENTRYP PFN_GLINVALIDATEBUFFERDATA_PROC) (GLuint buffer);
typedef void (APIENTRYP PFN_GLINVALIDATEFRAMEBUFFER_PROC) (GLenum target, GLsizei numAttachments, const GLenum * attachments);
typedef void (APIENTRYP PFN_GLINVALIDATESUBFRAMEBUFFER_PROC) (GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLMULTIDRAWARRAYSINDIRECT_PROC) (GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride);
typedef void (APIENTRYP PFN_GLMULTIDRAWELEMENTSINDIRECT_PROC) (GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride);
typedef void (APIENTRYP PFN_GLGETPROGRAMINTERFACEIV_PROC) (GLuint program, GLenum programInterface, GLenum pname, GLint * params);
typedef GLuint (APIENTRYP PFN_GLGETPROGRAMRESOURCEINDEX_PROC) (GLuint program, GLenum programInterface, const GLchar * name);
typedef void (APIENTRYP PFN_GLGETPROGRAMRESOURCENAME_PROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
typedef void (APIENTRYP PFN_GLGETPROGRAMRESOURCEIV_PROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLint * params);
typedef GLint (APIENTRYP PFN_GLGETPROGRAMRESOURCELOCATION_PROC) (GLuint program, GLenum programInterface, const GLchar * name);
typedef GLint (APIENTRYP PFN_GLGETPROGRAMRESOURCELOCATIONINDEX_PROC) (GLuint program, GLenum programInterface, const GLchar * name);
typedef void (APIENTRYP PFN_GLSHADERSTORAGEBLOCKBINDING_PROC) (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
typedef void (APIENTRYP PFN_GLTEXBUFFERRANGE_PROC) (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRYP PFN_GLTEXSTORAGE2DMULTISAMPLE_PROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (APIENTRYP PFN_GLTEXSTORAGE3DMULTISAMPLE_PROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (APIENTRYP PFN_GLTEXTUREVIEW_PROC) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
typedef void (APIENTRYP PFN_GLBINDVERTEXBUFFER_PROC) (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBFORMAT_PROC) (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBIFORMAT_PROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBLFORMAT_PROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBBINDING_PROC) (GLuint attribindex, GLuint bindingindex);
typedef void (APIENTRYP PFN_GLVERTEXBINDINGDIVISOR_PROC) (GLuint bindingindex, GLuint divisor);
typedef void (APIENTRYP PFN_GLDEBUGMESSAGECONTROL_PROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
typedef void (APIENTRYP PFN_GLDEBUGMESSAGEINSERT_PROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
typedef void (APIENTRYP PFN_GLDEBUGMESSAGECALLBACK_PROC) (GLDEBUGPROC callback, const void * userParam);
typedef GLuint (APIENTRYP PFN_GLGETDEBUGMESSAGELOG_PROC) (GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
typedef void (APIENTRYP PFN_GLPUSHDEBUGGROUP_PROC) (GLenum source, GLuint id, GLsizei length, const GLchar * message);
typedef void (APIENTRYP PFN_GLPOPDEBUGGROUP_PROC) (void);
typedef void (APIENTRYP PFN_GLOBJECTLABEL_PROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar * label);
typedef void (APIENTRYP PFN_GLGETOBJECTLABEL_PROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef void (APIENTRYP PFN_GLOBJECTPTRLABEL_PROC) (const void * ptr, GLsizei length, const GLchar * label);
typedef void (APIENTRYP PFN_GLGETOBJECTPTRLABEL_PROC) (const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label);

// functions typedefs
GL_FUNC_DEF PFN_GLCLEARBUFFERDATA_PROC _glClearBufferData_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARBUFFERSUBDATA_PROC _glClearBufferSubData_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDISPATCHCOMPUTE_PROC _glDispatchCompute_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDISPATCHCOMPUTEINDIRECT_PROC _glDispatchComputeIndirect_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYIMAGESUBDATA_PROC _glCopyImageSubData_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAMEBUFFERPARAMETERI_PROC _glFramebufferParameteri_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFRAMEBUFFERPARAMETERIV_PROC _glGetFramebufferParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETINTERNALFORMATI64V_PROC _glGetInternalformati64v_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINVALIDATETEXSUBIMAGE_PROC _glInvalidateTexSubImage_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINVALIDATETEXIMAGE_PROC _glInvalidateTexImage_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINVALIDATEBUFFERSUBDATA_PROC _glInvalidateBufferSubData_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINVALIDATEBUFFERDATA_PROC _glInvalidateBufferData_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINVALIDATEFRAMEBUFFER_PROC _glInvalidateFramebuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINVALIDATESUBFRAMEBUFFER_PROC _glInvalidateSubFramebuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTIDRAWARRAYSINDIRECT_PROC _glMultiDrawArraysIndirect_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTIDRAWELEMENTSINDIRECT_PROC _glMultiDrawElementsIndirect_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMINTERFACEIV_PROC _glGetProgramInterfaceiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMRESOURCEINDEX_PROC _glGetProgramResourceIndex_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMRESOURCENAME_PROC _glGetProgramResourceName_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMRESOURCEIV_PROC _glGetProgramResourceiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMRESOURCELOCATION_PROC _glGetProgramResourceLocation_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMRESOURCELOCATIONINDEX_PROC _glGetProgramResourceLocationIndex_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSHADERSTORAGEBLOCKBINDING_PROC _glShaderStorageBlockBinding_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXBUFFERRANGE_PROC _glTexBufferRange_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXSTORAGE2DMULTISAMPLE_PROC _glTexStorage2DMultisample_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXSTORAGE3DMULTISAMPLE_PROC _glTexStorage3DMultisample_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREVIEW_PROC _glTextureView_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDVERTEXBUFFER_PROC _glBindVertexBuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBFORMAT_PROC _glVertexAttribFormat_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBIFORMAT_PROC _glVertexAttribIFormat_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBLFORMAT_PROC _glVertexAttribLFormat_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBBINDING_PROC _glVertexAttribBinding_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXBINDINGDIVISOR_PROC _glVertexBindingDivisor_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDEBUGMESSAGECONTROL_PROC _glDebugMessageControl_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDEBUGMESSAGEINSERT_PROC _glDebugMessageInsert_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDEBUGMESSAGECALLBACK_PROC _glDebugMessageCallback_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETDEBUGMESSAGELOG_PROC _glGetDebugMessageLog_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPUSHDEBUGGROUP_PROC _glPushDebugGroup_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOPDEBUGGROUP_PROC _glPopDebugGroup_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLOBJECTLABEL_PROC _glObjectLabel_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETOBJECTLABEL_PROC _glGetObjectLabel_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLOBJECTPTRLABEL_PROC _glObjectPtrLabel_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETOBJECTPTRLABEL_PROC _glGetObjectPtrLabel_ GL_FUNC_DEF2;

// functions inline wrap
inline void glClearBufferData (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data) { return _glClearBufferData_(target, internalformat, format, type, data); };
inline void glClearBufferSubData (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) { return _glClearBufferSubData_(target, internalformat, offset, size, format, type, data); };
inline void glDispatchCompute (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) { return _glDispatchCompute_(num_groups_x, num_groups_y, num_groups_z); };
inline void glDispatchComputeIndirect (GLintptr indirect) { return _glDispatchComputeIndirect_(indirect); };
inline void glCopyImageSubData (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { return _glCopyImageSubData_(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); };
inline void glFramebufferParameteri (GLenum target, GLenum pname, GLint param) { return _glFramebufferParameteri_(target, pname, param); };
inline void glGetFramebufferParameteriv (GLenum target, GLenum pname, GLint * params) { return _glGetFramebufferParameteriv_(target, pname, params); };
inline void glGetInternalformati64v (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 * params) { return _glGetInternalformati64v_(target, internalformat, pname, count, params); };
inline void glInvalidateTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) { return _glInvalidateTexSubImage_(texture, level, xoffset, yoffset, zoffset, width, height, depth); };
inline void glInvalidateTexImage (GLuint texture, GLint level) { return _glInvalidateTexImage_(texture, level); };
inline void glInvalidateBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr length) { return _glInvalidateBufferSubData_(buffer, offset, length); };
inline void glInvalidateBufferData (GLuint buffer) { return _glInvalidateBufferData_(buffer); };
inline void glInvalidateFramebuffer (GLenum target, GLsizei numAttachments, const GLenum * attachments) { return _glInvalidateFramebuffer_(target, numAttachments, attachments); };
inline void glInvalidateSubFramebuffer (GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) { return _glInvalidateSubFramebuffer_(target, numAttachments, attachments, x, y, width, height); };
inline void glMultiDrawArraysIndirect (GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride) { return _glMultiDrawArraysIndirect_(mode, indirect, drawcount, stride); };
inline void glMultiDrawElementsIndirect (GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride) { return _glMultiDrawElementsIndirect_(mode, type, indirect, drawcount, stride); };
inline void glGetProgramInterfaceiv (GLuint program, GLenum programInterface, GLenum pname, GLint * params) { return _glGetProgramInterfaceiv_(program, programInterface, pname, params); };
inline GLuint glGetProgramResourceIndex (GLuint program, GLenum programInterface, const GLchar * name) { return _glGetProgramResourceIndex_(program, programInterface, name); };
inline void glGetProgramResourceName (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) { return _glGetProgramResourceName_(program, programInterface, index, bufSize, length, name); };
inline void glGetProgramResourceiv (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLint * params) { return _glGetProgramResourceiv_(program, programInterface, index, propCount, props, count, length, params); };
inline GLint glGetProgramResourceLocation (GLuint program, GLenum programInterface, const GLchar * name) { return _glGetProgramResourceLocation_(program, programInterface, name); };
inline GLint glGetProgramResourceLocationIndex (GLuint program, GLenum programInterface, const GLchar * name) { return _glGetProgramResourceLocationIndex_(program, programInterface, name); };
inline void glShaderStorageBlockBinding (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) { return _glShaderStorageBlockBinding_(program, storageBlockIndex, storageBlockBinding); };
inline void glTexBufferRange (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { return _glTexBufferRange_(target, internalformat, buffer, offset, size); };
inline void glTexStorage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { return _glTexStorage2DMultisample_(target, samples, internalformat, width, height, fixedsamplelocations); };
inline void glTexStorage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { return _glTexStorage3DMultisample_(target, samples, internalformat, width, height, depth, fixedsamplelocations); };
inline void glTextureView (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { return _glTextureView_(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); };
inline void glBindVertexBuffer (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { return _glBindVertexBuffer_(bindingindex, buffer, offset, stride); };
inline void glVertexAttribFormat (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { return _glVertexAttribFormat_(attribindex, size, type, normalized, relativeoffset); };
inline void glVertexAttribIFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { return _glVertexAttribIFormat_(attribindex, size, type, relativeoffset); };
inline void glVertexAttribLFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { return _glVertexAttribLFormat_(attribindex, size, type, relativeoffset); };
inline void glVertexAttribBinding (GLuint attribindex, GLuint bindingindex) { return _glVertexAttribBinding_(attribindex, bindingindex); };
inline void glVertexBindingDivisor (GLuint bindingindex, GLuint divisor) { return _glVertexBindingDivisor_(bindingindex, divisor); };
inline void glDebugMessageControl (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { return _glDebugMessageControl_(source, type, severity, count, ids, enabled); };
inline void glDebugMessageInsert (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) { return _glDebugMessageInsert_(source, type, id, severity, length, buf); };
inline void glDebugMessageCallback (GLDEBUGPROC callback, const void * userParam) { return _glDebugMessageCallback_(callback, userParam); };
inline GLuint glGetDebugMessageLog (GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) { return _glGetDebugMessageLog_(count, bufSize, sources, types, ids, severities, lengths, messageLog); };
inline void glPushDebugGroup (GLenum source, GLuint id, GLsizei length, const GLchar * message) { return _glPushDebugGroup_(source, id, length, message); };
inline void glPopDebugGroup (void) { return _glPopDebugGroup_(); };
inline void glObjectLabel (GLenum identifier, GLuint name, GLsizei length, const GLchar * label) { return _glObjectLabel_(identifier, name, length, label); };
inline void glGetObjectLabel (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label) { return _glGetObjectLabel_(identifier, name, bufSize, length, label); };
inline void glObjectPtrLabel (const void * ptr, GLsizei length, const GLchar * label) { return _glObjectPtrLabel_(ptr, length, label); };
inline void glGetObjectPtrLabel (const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label) { return _glGetObjectPtrLabel_(ptr, bufSize, length, label); };
#endif //GL_VERSION_4_3

#ifndef GL_VERSION_4_4

// Defines
#define GL_MAX_VERTEX_ATTRIB_STRIDE       0x82E5 
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221 
#define GL_TEXTURE_BUFFER_BINDING         0x8C2A 
#define GL_MAP_PERSISTENT_BIT             0x0040 
#define GL_MAP_COHERENT_BIT               0x0080 
#define GL_DYNAMIC_STORAGE_BIT            0x0100 
#define GL_CLIENT_STORAGE_BIT             0x0200 
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000 
#define GL_BUFFER_IMMUTABLE_STORAGE       0x821F 
#define GL_BUFFER_STORAGE_FLAGS           0x8220 
#define GL_CLEAR_TEXTURE                  0x9365 
#define GL_LOCATION_COMPONENT             0x934A 
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B 
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C 
#define GL_QUERY_BUFFER                   0x9192 
#define GL_QUERY_BUFFER_BARRIER_BIT       0x00008000 
#define GL_QUERY_BUFFER_BINDING           0x9193 
#define GL_QUERY_RESULT_NO_WAIT           0x9194 
#define GL_MIRROR_CLAMP_TO_EDGE           0x8743 

// functions typedefs
typedef void (APIENTRYP PFN_GLBUFFERSTORAGE_PROC) (GLenum target, GLsizeiptr size, const void * data, GLbitfield flags);
typedef void (APIENTRYP PFN_GLCLEARTEXIMAGE_PROC) (GLuint texture, GLint level, GLenum format, GLenum type, const void * data);
typedef void (APIENTRYP PFN_GLCLEARTEXSUBIMAGE_PROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data);
typedef void (APIENTRYP PFN_GLBINDBUFFERSBASE_PROC) (GLenum target, GLuint first, GLsizei count, const GLuint * buffers);
typedef void (APIENTRYP PFN_GLBINDBUFFERSRANGE_PROC) (GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes);
typedef void (APIENTRYP PFN_GLBINDTEXTURES_PROC) (GLuint first, GLsizei count, const GLuint * textures);
typedef void (APIENTRYP PFN_GLBINDSAMPLERS_PROC) (GLuint first, GLsizei count, const GLuint * samplers);
typedef void (APIENTRYP PFN_GLBINDIMAGETEXTURES_PROC) (GLuint first, GLsizei count, const GLuint * textures);
typedef void (APIENTRYP PFN_GLBINDVERTEXBUFFERS_PROC) (GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);

// functions typedefs
GL_FUNC_DEF PFN_GLBUFFERSTORAGE_PROC _glBufferStorage_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARTEXIMAGE_PROC _glClearTexImage_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARTEXSUBIMAGE_PROC _glClearTexSubImage_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDBUFFERSBASE_PROC _glBindBuffersBase_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDBUFFERSRANGE_PROC _glBindBuffersRange_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDTEXTURES_PROC _glBindTextures_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDSAMPLERS_PROC _glBindSamplers_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDIMAGETEXTURES_PROC _glBindImageTextures_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDVERTEXBUFFERS_PROC _glBindVertexBuffers_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBufferStorage (GLenum target, GLsizeiptr size, const void * data, GLbitfield flags) { return _glBufferStorage_(target, size, data, flags); };
inline void glClearTexImage (GLuint texture, GLint level, GLenum format, GLenum type, const void * data) { return _glClearTexImage_(texture, level, format, type, data); };
inline void glClearTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data) { return _glClearTexSubImage_(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data); };
inline void glBindBuffersBase (GLenum target, GLuint first, GLsizei count, const GLuint * buffers) { return _glBindBuffersBase_(target, first, count, buffers); };
inline void glBindBuffersRange (GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes) { return _glBindBuffersRange_(target, first, count, buffers, offsets, sizes); };
inline void glBindTextures (GLuint first, GLsizei count, const GLuint * textures) { return _glBindTextures_(first, count, textures); };
inline void glBindSamplers (GLuint first, GLsizei count, const GLuint * samplers) { return _glBindSamplers_(first, count, samplers); };
inline void glBindImageTextures (GLuint first, GLsizei count, const GLuint * textures) { return _glBindImageTextures_(first, count, textures); };
inline void glBindVertexBuffers (GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) { return _glBindVertexBuffers_(first, count, buffers, offsets, strides); };
#endif //GL_VERSION_4_4

#ifndef GL_VERSION_4_5

// Defines
#define GL_CONTEXT_LOST                   0x0507 
#define GL_NEGATIVE_ONE_TO_ONE            0x935E 
#define GL_ZERO_TO_ONE                    0x935F 
#define GL_CLIP_ORIGIN                    0x935C 
#define GL_CLIP_DEPTH_MODE                0x935D 
#define GL_QUERY_WAIT_INVERTED            0x8E17 
#define GL_QUERY_NO_WAIT_INVERTED         0x8E18 
#define GL_QUERY_BY_REGION_WAIT_INVERTED  0x8E19 
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A 
#define GL_MAX_CULL_DISTANCES             0x82F9 
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA 
#define GL_TEXTURE_TARGET                 0x1006 
#define GL_QUERY_TARGET                   0x82EA 
#define GL_GUILTY_CONTEXT_RESET           0x8253 
#define GL_INNOCENT_CONTEXT_RESET         0x8254 
#define GL_UNKNOWN_CONTEXT_RESET          0x8255 
#define GL_RESET_NOTIFICATION_STRATEGY    0x8256 
#define GL_LOSE_CONTEXT_ON_RESET          0x8252 
#define GL_NO_RESET_NOTIFICATION          0x8261 
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004 
#define GL_CONTEXT_RELEASE_BEHAVIOR       0x82FB 
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC 

// functions typedefs
typedef void (APIENTRYP PFN_GLCLIPCONTROL_PROC) (GLenum origin, GLenum depth);
typedef void (APIENTRYP PFN_GLCREATETRANSFORMFEEDBACKS_PROC) (GLsizei n, GLuint * ids);
typedef void (APIENTRYP PFN_GLTRANSFORMFEEDBACKBUFFERBASE_PROC) (GLuint xfb, GLuint index, GLuint buffer);
typedef void (APIENTRYP PFN_GLTRANSFORMFEEDBACKBUFFERRANGE_PROC) (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRYP PFN_GLGETTRANSFORMFEEDBACKIV_PROC) (GLuint xfb, GLenum pname, GLint * param);
typedef void (APIENTRYP PFN_GLGETTRANSFORMFEEDBACKI_V_PROC) (GLuint xfb, GLenum pname, GLuint index, GLint * param);
typedef void (APIENTRYP PFN_GLGETTRANSFORMFEEDBACKI64_V_PROC) (GLuint xfb, GLenum pname, GLuint index, GLint64 * param);
typedef void (APIENTRYP PFN_GLCREATEBUFFERS_PROC) (GLsizei n, GLuint * buffers);
typedef void (APIENTRYP PFN_GLNAMEDBUFFERSTORAGE_PROC) (GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags);
typedef void (APIENTRYP PFN_GLNAMEDBUFFERDATA_PROC) (GLuint buffer, GLsizeiptr size, const void * data, GLenum usage);
typedef void (APIENTRYP PFN_GLNAMEDBUFFERSUBDATA_PROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data);
typedef void (APIENTRYP PFN_GLCOPYNAMEDBUFFERSUBDATA_PROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (APIENTRYP PFN_GLCLEARNAMEDBUFFERDATA_PROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data);
typedef void (APIENTRYP PFN_GLCLEARNAMEDBUFFERSUBDATA_PROC) (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
typedef void * (APIENTRYP PFN_GLMAPNAMEDBUFFER_PROC) (GLuint buffer, GLenum access);
typedef void * (APIENTRYP PFN_GLMAPNAMEDBUFFERRANGE_PROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef GLboolean (APIENTRYP PFN_GLUNMAPNAMEDBUFFER_PROC) (GLuint buffer);
typedef void (APIENTRYP PFN_GLFLUSHMAPPEDNAMEDBUFFERRANGE_PROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (APIENTRYP PFN_GLGETNAMEDBUFFERPARAMETERIV_PROC) (GLuint buffer, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETNAMEDBUFFERPARAMETERI64V_PROC) (GLuint buffer, GLenum pname, GLint64 * params);
typedef void (APIENTRYP PFN_GLGETNAMEDBUFFERPOINTERV_PROC) (GLuint buffer, GLenum pname, void * * params);
typedef void (APIENTRYP PFN_GLGETNAMEDBUFFERSUBDATA_PROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, void * data);
typedef void (APIENTRYP PFN_GLCREATEFRAMEBUFFERS_PROC) (GLsizei n, GLuint * framebuffers);
typedef void (APIENTRYP PFN_GLNAMEDFRAMEBUFFERRENDERBUFFER_PROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (APIENTRYP PFN_GLNAMEDFRAMEBUFFERPARAMETERI_PROC) (GLuint framebuffer, GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLNAMEDFRAMEBUFFERTEXTURE_PROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (APIENTRYP PFN_GLNAMEDFRAMEBUFFERTEXTURELAYER_PROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (APIENTRYP PFN_GLNAMEDFRAMEBUFFERDRAWBUFFER_PROC) (GLuint framebuffer, GLenum buf);
typedef void (APIENTRYP PFN_GLNAMEDFRAMEBUFFERDRAWBUFFERS_PROC) (GLuint framebuffer, GLsizei n, const GLenum * bufs);
typedef void (APIENTRYP PFN_GLNAMEDFRAMEBUFFERREADBUFFER_PROC) (GLuint framebuffer, GLenum src);
typedef void (APIENTRYP PFN_GLINVALIDATENAMEDFRAMEBUFFERDATA_PROC) (GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments);
typedef void (APIENTRYP PFN_GLINVALIDATENAMEDFRAMEBUFFERSUBDATA_PROC) (GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLCLEARNAMEDFRAMEBUFFERIV_PROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value);
typedef void (APIENTRYP PFN_GLCLEARNAMEDFRAMEBUFFERUIV_PROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value);
typedef void (APIENTRYP PFN_GLCLEARNAMEDFRAMEBUFFERFV_PROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value);
typedef void (APIENTRYP PFN_GLCLEARNAMEDFRAMEBUFFERFI_PROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void (APIENTRYP PFN_GLBLITNAMEDFRAMEBUFFER_PROC) (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef GLenum (APIENTRYP PFN_GLCHECKNAMEDFRAMEBUFFERSTATUS_PROC) (GLuint framebuffer, GLenum target);
typedef void (APIENTRYP PFN_GLGETNAMEDFRAMEBUFFERPARAMETERIV_PROC) (GLuint framebuffer, GLenum pname, GLint * param);
typedef void (APIENTRYP PFN_GLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIV_PROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLCREATERENDERBUFFERS_PROC) (GLsizei n, GLuint * renderbuffers);
typedef void (APIENTRYP PFN_GLNAMEDRENDERBUFFERSTORAGE_PROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLNAMEDRENDERBUFFERSTORAGEMULTISAMPLE_PROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLGETNAMEDRENDERBUFFERPARAMETERIV_PROC) (GLuint renderbuffer, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLCREATETEXTURES_PROC) (GLenum target, GLsizei n, GLuint * textures);
typedef void (APIENTRYP PFN_GLTEXTUREBUFFER_PROC) (GLuint texture, GLenum internalformat, GLuint buffer);
typedef void (APIENTRYP PFN_GLTEXTUREBUFFERRANGE_PROC) (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRYP PFN_GLTEXTURESTORAGE1D_PROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (APIENTRYP PFN_GLTEXTURESTORAGE2D_PROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLTEXTURESTORAGE3D_PROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (APIENTRYP PFN_GLTEXTURESTORAGE2DMULTISAMPLE_PROC) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (APIENTRYP PFN_GLTEXTURESTORAGE3DMULTISAMPLE_PROC) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (APIENTRYP PFN_GLTEXTURESUBIMAGE1D_PROC) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLTEXTURESUBIMAGE2D_PROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLTEXTURESUBIMAGE3D_PROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLCOMPRESSEDTEXTURESUBIMAGE1D_PROC) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
typedef void (APIENTRYP PFN_GLCOMPRESSEDTEXTURESUBIMAGE2D_PROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void (APIENTRYP PFN_GLCOMPRESSEDTEXTURESUBIMAGE3D_PROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void (APIENTRYP PFN_GLCOPYTEXTURESUBIMAGE1D_PROC) (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (APIENTRYP PFN_GLCOPYTEXTURESUBIMAGE2D_PROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLCOPYTEXTURESUBIMAGE3D_PROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLTEXTUREPARAMETERF_PROC) (GLuint texture, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLTEXTUREPARAMETERFV_PROC) (GLuint texture, GLenum pname, const GLfloat * param);
typedef void (APIENTRYP PFN_GLTEXTUREPARAMETERI_PROC) (GLuint texture, GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLTEXTUREPARAMETERIIV_PROC) (GLuint texture, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLTEXTUREPARAMETERIUIV_PROC) (GLuint texture, GLenum pname, const GLuint * params);
typedef void (APIENTRYP PFN_GLTEXTUREPARAMETERIV_PROC) (GLuint texture, GLenum pname, const GLint * param);
typedef void (APIENTRYP PFN_GLGENERATETEXTUREMIPMAP_PROC) (GLuint texture);
typedef void (APIENTRYP PFN_GLBINDTEXTUREUNIT_PROC) (GLuint unit, GLuint texture);
typedef void (APIENTRYP PFN_GLGETTEXTUREIMAGE_PROC) (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
typedef void (APIENTRYP PFN_GLGETCOMPRESSEDTEXTUREIMAGE_PROC) (GLuint texture, GLint level, GLsizei bufSize, void * pixels);
typedef void (APIENTRYP PFN_GLGETTEXTURELEVELPARAMETERFV_PROC) (GLuint texture, GLint level, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETTEXTURELEVELPARAMETERIV_PROC) (GLuint texture, GLint level, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETTEXTUREPARAMETERFV_PROC) (GLuint texture, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETTEXTUREPARAMETERIIV_PROC) (GLuint texture, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETTEXTUREPARAMETERIUIV_PROC) (GLuint texture, GLenum pname, GLuint * params);
typedef void (APIENTRYP PFN_GLGETTEXTUREPARAMETERIV_PROC) (GLuint texture, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLCREATEVERTEXARRAYS_PROC) (GLsizei n, GLuint * arrays);
typedef void (APIENTRYP PFN_GLDISABLEVERTEXARRAYATTRIB_PROC) (GLuint vaobj, GLuint index);
typedef void (APIENTRYP PFN_GLENABLEVERTEXARRAYATTRIB_PROC) (GLuint vaobj, GLuint index);
typedef void (APIENTRYP PFN_GLVERTEXARRAYELEMENTBUFFER_PROC) (GLuint vaobj, GLuint buffer);
typedef void (APIENTRYP PFN_GLVERTEXARRAYVERTEXBUFFER_PROC) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (APIENTRYP PFN_GLVERTEXARRAYVERTEXBUFFERS_PROC) (GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
typedef void (APIENTRYP PFN_GLVERTEXARRAYATTRIBBINDING_PROC) (GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (APIENTRYP PFN_GLVERTEXARRAYATTRIBFORMAT_PROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (APIENTRYP PFN_GLVERTEXARRAYATTRIBIFORMAT_PROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRYP PFN_GLVERTEXARRAYATTRIBLFORMAT_PROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRYP PFN_GLVERTEXARRAYBINDINGDIVISOR_PROC) (GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (APIENTRYP PFN_GLGETVERTEXARRAYIV_PROC) (GLuint vaobj, GLenum pname, GLint * param);
typedef void (APIENTRYP PFN_GLGETVERTEXARRAYINDEXEDIV_PROC) (GLuint vaobj, GLuint index, GLenum pname, GLint * param);
typedef void (APIENTRYP PFN_GLGETVERTEXARRAYINDEXED64IV_PROC) (GLuint vaobj, GLuint index, GLenum pname, GLint64 * param);
typedef void (APIENTRYP PFN_GLCREATESAMPLERS_PROC) (GLsizei n, GLuint * samplers);
typedef void (APIENTRYP PFN_GLCREATEPROGRAMPIPELINES_PROC) (GLsizei n, GLuint * pipelines);
typedef void (APIENTRYP PFN_GLCREATEQUERIES_PROC) (GLenum target, GLsizei n, GLuint * ids);
typedef void (APIENTRYP PFN_GLGETQUERYBUFFEROBJECTI64V_PROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (APIENTRYP PFN_GLGETQUERYBUFFEROBJECTIV_PROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (APIENTRYP PFN_GLGETQUERYBUFFEROBJECTUI64V_PROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (APIENTRYP PFN_GLGETQUERYBUFFEROBJECTUIV_PROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (APIENTRYP PFN_GLMEMORYBARRIERBYREGION_PROC) (GLbitfield barriers);
typedef void (APIENTRYP PFN_GLGETTEXTURESUBIMAGE_PROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
typedef void (APIENTRYP PFN_GLGETCOMPRESSEDTEXTURESUBIMAGE_PROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels);
typedef GLenum (APIENTRYP PFN_GLGETGRAPHICSRESETSTATUS_PROC) (void);
typedef void (APIENTRYP PFN_GLGETNCOMPRESSEDTEXIMAGE_PROC) (GLenum target, GLint lod, GLsizei bufSize, void * pixels);
typedef void (APIENTRYP PFN_GLGETNTEXIMAGE_PROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
typedef void (APIENTRYP PFN_GLGETNUNIFORMDV_PROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble * params);
typedef void (APIENTRYP PFN_GLGETNUNIFORMFV_PROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETNUNIFORMIV_PROC) (GLuint program, GLint location, GLsizei bufSize, GLint * params);
typedef void (APIENTRYP PFN_GLGETNUNIFORMUIV_PROC) (GLuint program, GLint location, GLsizei bufSize, GLuint * params);
typedef void (APIENTRYP PFN_GLREADNPIXELS_PROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);
typedef void (APIENTRYP PFN_GLTEXTUREBARRIER_PROC) (void);
typedef void (APIENTRYP PFN_GLGETNMAPDV_PROC) (GLenum target, GLenum query, GLsizei bufSize, GLdouble * v);
typedef void (APIENTRYP PFN_GLGETNMAPFV_PROC) (GLenum target, GLenum query, GLsizei bufSize, GLfloat * v);
typedef void (APIENTRYP PFN_GLGETNMAPIV_PROC) (GLenum target, GLenum query, GLsizei bufSize, GLint * v);
typedef void (APIENTRYP PFN_GLGETNPIXELMAPFV_PROC) (GLenum map, GLsizei bufSize, GLfloat * values);
typedef void (APIENTRYP PFN_GLGETNPIXELMAPUIV_PROC) (GLenum map, GLsizei bufSize, GLuint * values);
typedef void (APIENTRYP PFN_GLGETNPIXELMAPUSV_PROC) (GLenum map, GLsizei bufSize, GLushort * values);
typedef void (APIENTRYP PFN_GLGETNPOLYGONSTIPPLE_PROC) (GLsizei bufSize, GLubyte * pattern);
typedef void (APIENTRYP PFN_GLGETNCOLORTABLE_PROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table);
typedef void (APIENTRYP PFN_GLGETNCONVOLUTIONFILTER_PROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image);
typedef void (APIENTRYP PFN_GLGETNSEPARABLEFILTER_PROC) (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span);
typedef void (APIENTRYP PFN_GLGETNHISTOGRAM_PROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);
typedef void (APIENTRYP PFN_GLGETNMINMAX_PROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);

// functions typedefs
GL_FUNC_DEF PFN_GLCLIPCONTROL_PROC _glClipControl_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCREATETRANSFORMFEEDBACKS_PROC _glCreateTransformFeedbacks_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTRANSFORMFEEDBACKBUFFERBASE_PROC _glTransformFeedbackBufferBase_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTRANSFORMFEEDBACKBUFFERRANGE_PROC _glTransformFeedbackBufferRange_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTRANSFORMFEEDBACKIV_PROC _glGetTransformFeedbackiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTRANSFORMFEEDBACKI_V_PROC _glGetTransformFeedbacki_v_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTRANSFORMFEEDBACKI64_V_PROC _glGetTransformFeedbacki64_v_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCREATEBUFFERS_PROC _glCreateBuffers_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDBUFFERSTORAGE_PROC _glNamedBufferStorage_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDBUFFERDATA_PROC _glNamedBufferData_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDBUFFERSUBDATA_PROC _glNamedBufferSubData_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYNAMEDBUFFERSUBDATA_PROC _glCopyNamedBufferSubData_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARNAMEDBUFFERDATA_PROC _glClearNamedBufferData_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARNAMEDBUFFERSUBDATA_PROC _glClearNamedBufferSubData_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAPNAMEDBUFFER_PROC _glMapNamedBuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAPNAMEDBUFFERRANGE_PROC _glMapNamedBufferRange_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNMAPNAMEDBUFFER_PROC _glUnmapNamedBuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFLUSHMAPPEDNAMEDBUFFERRANGE_PROC _glFlushMappedNamedBufferRange_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDBUFFERPARAMETERIV_PROC _glGetNamedBufferParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDBUFFERPARAMETERI64V_PROC _glGetNamedBufferParameteri64v_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDBUFFERPOINTERV_PROC _glGetNamedBufferPointerv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDBUFFERSUBDATA_PROC _glGetNamedBufferSubData_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCREATEFRAMEBUFFERS_PROC _glCreateFramebuffers_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDFRAMEBUFFERRENDERBUFFER_PROC _glNamedFramebufferRenderbuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDFRAMEBUFFERPARAMETERI_PROC _glNamedFramebufferParameteri_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDFRAMEBUFFERTEXTURE_PROC _glNamedFramebufferTexture_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDFRAMEBUFFERTEXTURELAYER_PROC _glNamedFramebufferTextureLayer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDFRAMEBUFFERDRAWBUFFER_PROC _glNamedFramebufferDrawBuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDFRAMEBUFFERDRAWBUFFERS_PROC _glNamedFramebufferDrawBuffers_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDFRAMEBUFFERREADBUFFER_PROC _glNamedFramebufferReadBuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINVALIDATENAMEDFRAMEBUFFERDATA_PROC _glInvalidateNamedFramebufferData_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINVALIDATENAMEDFRAMEBUFFERSUBDATA_PROC _glInvalidateNamedFramebufferSubData_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARNAMEDFRAMEBUFFERIV_PROC _glClearNamedFramebufferiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARNAMEDFRAMEBUFFERUIV_PROC _glClearNamedFramebufferuiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARNAMEDFRAMEBUFFERFV_PROC _glClearNamedFramebufferfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARNAMEDFRAMEBUFFERFI_PROC _glClearNamedFramebufferfi_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBLITNAMEDFRAMEBUFFER_PROC _glBlitNamedFramebuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCHECKNAMEDFRAMEBUFFERSTATUS_PROC _glCheckNamedFramebufferStatus_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDFRAMEBUFFERPARAMETERIV_PROC _glGetNamedFramebufferParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIV_PROC _glGetNamedFramebufferAttachmentParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCREATERENDERBUFFERS_PROC _glCreateRenderbuffers_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDRENDERBUFFERSTORAGE_PROC _glNamedRenderbufferStorage_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDRENDERBUFFERSTORAGEMULTISAMPLE_PROC _glNamedRenderbufferStorageMultisample_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDRENDERBUFFERPARAMETERIV_PROC _glGetNamedRenderbufferParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCREATETEXTURES_PROC _glCreateTextures_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREBUFFER_PROC _glTextureBuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREBUFFERRANGE_PROC _glTextureBufferRange_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESTORAGE1D_PROC _glTextureStorage1D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESTORAGE2D_PROC _glTextureStorage2D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESTORAGE3D_PROC _glTextureStorage3D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESTORAGE2DMULTISAMPLE_PROC _glTextureStorage2DMultisample_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESTORAGE3DMULTISAMPLE_PROC _glTextureStorage3DMultisample_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESUBIMAGE1D_PROC _glTextureSubImage1D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESUBIMAGE2D_PROC _glTextureSubImage2D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESUBIMAGE3D_PROC _glTextureSubImage3D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDTEXTURESUBIMAGE1D_PROC _glCompressedTextureSubImage1D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDTEXTURESUBIMAGE2D_PROC _glCompressedTextureSubImage2D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDTEXTURESUBIMAGE3D_PROC _glCompressedTextureSubImage3D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYTEXTURESUBIMAGE1D_PROC _glCopyTextureSubImage1D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYTEXTURESUBIMAGE2D_PROC _glCopyTextureSubImage2D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYTEXTURESUBIMAGE3D_PROC _glCopyTextureSubImage3D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREPARAMETERF_PROC _glTextureParameterf_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREPARAMETERFV_PROC _glTextureParameterfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREPARAMETERI_PROC _glTextureParameteri_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREPARAMETERIIV_PROC _glTextureParameterIiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREPARAMETERIUIV_PROC _glTextureParameterIuiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREPARAMETERIV_PROC _glTextureParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENERATETEXTUREMIPMAP_PROC _glGenerateTextureMipmap_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDTEXTUREUNIT_PROC _glBindTextureUnit_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXTUREIMAGE_PROC _glGetTextureImage_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOMPRESSEDTEXTUREIMAGE_PROC _glGetCompressedTextureImage_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXTURELEVELPARAMETERFV_PROC _glGetTextureLevelParameterfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXTURELEVELPARAMETERIV_PROC _glGetTextureLevelParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXTUREPARAMETERFV_PROC _glGetTextureParameterfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXTUREPARAMETERIIV_PROC _glGetTextureParameterIiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXTUREPARAMETERIUIV_PROC _glGetTextureParameterIuiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXTUREPARAMETERIV_PROC _glGetTextureParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCREATEVERTEXARRAYS_PROC _glCreateVertexArrays_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDISABLEVERTEXARRAYATTRIB_PROC _glDisableVertexArrayAttrib_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENABLEVERTEXARRAYATTRIB_PROC _glEnableVertexArrayAttrib_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYELEMENTBUFFER_PROC _glVertexArrayElementBuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYVERTEXBUFFER_PROC _glVertexArrayVertexBuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYVERTEXBUFFERS_PROC _glVertexArrayVertexBuffers_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYATTRIBBINDING_PROC _glVertexArrayAttribBinding_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYATTRIBFORMAT_PROC _glVertexArrayAttribFormat_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYATTRIBIFORMAT_PROC _glVertexArrayAttribIFormat_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYATTRIBLFORMAT_PROC _glVertexArrayAttribLFormat_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYBINDINGDIVISOR_PROC _glVertexArrayBindingDivisor_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXARRAYIV_PROC _glGetVertexArrayiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXARRAYINDEXEDIV_PROC _glGetVertexArrayIndexediv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXARRAYINDEXED64IV_PROC _glGetVertexArrayIndexed64iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCREATESAMPLERS_PROC _glCreateSamplers_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCREATEPROGRAMPIPELINES_PROC _glCreateProgramPipelines_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCREATEQUERIES_PROC _glCreateQueries_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETQUERYBUFFEROBJECTI64V_PROC _glGetQueryBufferObjecti64v_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETQUERYBUFFEROBJECTIV_PROC _glGetQueryBufferObjectiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETQUERYBUFFEROBJECTUI64V_PROC _glGetQueryBufferObjectui64v_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETQUERYBUFFEROBJECTUIV_PROC _glGetQueryBufferObjectuiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMEMORYBARRIERBYREGION_PROC _glMemoryBarrierByRegion_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXTURESUBIMAGE_PROC _glGetTextureSubImage_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOMPRESSEDTEXTURESUBIMAGE_PROC _glGetCompressedTextureSubImage_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETGRAPHICSRESETSTATUS_PROC _glGetGraphicsResetStatus_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNCOMPRESSEDTEXIMAGE_PROC _glGetnCompressedTexImage_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNTEXIMAGE_PROC _glGetnTexImage_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNUNIFORMDV_PROC _glGetnUniformdv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNUNIFORMFV_PROC _glGetnUniformfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNUNIFORMIV_PROC _glGetnUniformiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNUNIFORMUIV_PROC _glGetnUniformuiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREADNPIXELS_PROC _glReadnPixels_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREBARRIER_PROC _glTextureBarrier_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNMAPDV_PROC _glGetnMapdv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNMAPFV_PROC _glGetnMapfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNMAPIV_PROC _glGetnMapiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNPIXELMAPFV_PROC _glGetnPixelMapfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNPIXELMAPUIV_PROC _glGetnPixelMapuiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNPIXELMAPUSV_PROC _glGetnPixelMapusv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNPOLYGONSTIPPLE_PROC _glGetnPolygonStipple_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNCOLORTABLE_PROC _glGetnColorTable_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNCONVOLUTIONFILTER_PROC _glGetnConvolutionFilter_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNSEPARABLEFILTER_PROC _glGetnSeparableFilter_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNHISTOGRAM_PROC _glGetnHistogram_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNMINMAX_PROC _glGetnMinmax_ GL_FUNC_DEF2;

// functions inline wrap
inline void glClipControl (GLenum origin, GLenum depth) { return _glClipControl_(origin, depth); };
inline void glCreateTransformFeedbacks (GLsizei n, GLuint * ids) { return _glCreateTransformFeedbacks_(n, ids); };
inline void glTransformFeedbackBufferBase (GLuint xfb, GLuint index, GLuint buffer) { return _glTransformFeedbackBufferBase_(xfb, index, buffer); };
inline void glTransformFeedbackBufferRange (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { return _glTransformFeedbackBufferRange_(xfb, index, buffer, offset, size); };
inline void glGetTransformFeedbackiv (GLuint xfb, GLenum pname, GLint * param) { return _glGetTransformFeedbackiv_(xfb, pname, param); };
inline void glGetTransformFeedbacki_v (GLuint xfb, GLenum pname, GLuint index, GLint * param) { return _glGetTransformFeedbacki_v_(xfb, pname, index, param); };
inline void glGetTransformFeedbacki64_v (GLuint xfb, GLenum pname, GLuint index, GLint64 * param) { return _glGetTransformFeedbacki64_v_(xfb, pname, index, param); };
inline void glCreateBuffers (GLsizei n, GLuint * buffers) { return _glCreateBuffers_(n, buffers); };
inline void glNamedBufferStorage (GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags) { return _glNamedBufferStorage_(buffer, size, data, flags); };
inline void glNamedBufferData (GLuint buffer, GLsizeiptr size, const void * data, GLenum usage) { return _glNamedBufferData_(buffer, size, data, usage); };
inline void glNamedBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { return _glNamedBufferSubData_(buffer, offset, size, data); };
inline void glCopyNamedBufferSubData (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { return _glCopyNamedBufferSubData_(readBuffer, writeBuffer, readOffset, writeOffset, size); };
inline void glClearNamedBufferData (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data) { return _glClearNamedBufferData_(buffer, internalformat, format, type, data); };
inline void glClearNamedBufferSubData (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) { return _glClearNamedBufferSubData_(buffer, internalformat, offset, size, format, type, data); };
inline void * glMapNamedBuffer (GLuint buffer, GLenum access) { return _glMapNamedBuffer_(buffer, access); };
inline void * glMapNamedBufferRange (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) { return _glMapNamedBufferRange_(buffer, offset, length, access); };
inline GLboolean glUnmapNamedBuffer (GLuint buffer) { return _glUnmapNamedBuffer_(buffer); };
inline void glFlushMappedNamedBufferRange (GLuint buffer, GLintptr offset, GLsizeiptr length) { return _glFlushMappedNamedBufferRange_(buffer, offset, length); };
inline void glGetNamedBufferParameteriv (GLuint buffer, GLenum pname, GLint * params) { return _glGetNamedBufferParameteriv_(buffer, pname, params); };
inline void glGetNamedBufferParameteri64v (GLuint buffer, GLenum pname, GLint64 * params) { return _glGetNamedBufferParameteri64v_(buffer, pname, params); };
inline void glGetNamedBufferPointerv (GLuint buffer, GLenum pname, void * * params) { return _glGetNamedBufferPointerv_(buffer, pname, params); };
inline void glGetNamedBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr size, void * data) { return _glGetNamedBufferSubData_(buffer, offset, size, data); };
inline void glCreateFramebuffers (GLsizei n, GLuint * framebuffers) { return _glCreateFramebuffers_(n, framebuffers); };
inline void glNamedFramebufferRenderbuffer (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { return _glNamedFramebufferRenderbuffer_(framebuffer, attachment, renderbuffertarget, renderbuffer); };
inline void glNamedFramebufferParameteri (GLuint framebuffer, GLenum pname, GLint param) { return _glNamedFramebufferParameteri_(framebuffer, pname, param); };
inline void glNamedFramebufferTexture (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) { return _glNamedFramebufferTexture_(framebuffer, attachment, texture, level); };
inline void glNamedFramebufferTextureLayer (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) { return _glNamedFramebufferTextureLayer_(framebuffer, attachment, texture, level, layer); };
inline void glNamedFramebufferDrawBuffer (GLuint framebuffer, GLenum buf) { return _glNamedFramebufferDrawBuffer_(framebuffer, buf); };
inline void glNamedFramebufferDrawBuffers (GLuint framebuffer, GLsizei n, const GLenum * bufs) { return _glNamedFramebufferDrawBuffers_(framebuffer, n, bufs); };
inline void glNamedFramebufferReadBuffer (GLuint framebuffer, GLenum src) { return _glNamedFramebufferReadBuffer_(framebuffer, src); };
inline void glInvalidateNamedFramebufferData (GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments) { return _glInvalidateNamedFramebufferData_(framebuffer, numAttachments, attachments); };
inline void glInvalidateNamedFramebufferSubData (GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) { return _glInvalidateNamedFramebufferSubData_(framebuffer, numAttachments, attachments, x, y, width, height); };
inline void glClearNamedFramebufferiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value) { return _glClearNamedFramebufferiv_(framebuffer, buffer, drawbuffer, value); };
inline void glClearNamedFramebufferuiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value) { return _glClearNamedFramebufferuiv_(framebuffer, buffer, drawbuffer, value); };
inline void glClearNamedFramebufferfv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value) { return _glClearNamedFramebufferfv_(framebuffer, buffer, drawbuffer, value); };
inline void glClearNamedFramebufferfi (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) { return _glClearNamedFramebufferfi_(framebuffer, buffer, drawbuffer, depth, stencil); };
inline void glBlitNamedFramebuffer (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { return _glBlitNamedFramebuffer_(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); };
inline GLenum glCheckNamedFramebufferStatus (GLuint framebuffer, GLenum target) { return _glCheckNamedFramebufferStatus_(framebuffer, target); };
inline void glGetNamedFramebufferParameteriv (GLuint framebuffer, GLenum pname, GLint * param) { return _glGetNamedFramebufferParameteriv_(framebuffer, pname, param); };
inline void glGetNamedFramebufferAttachmentParameteriv (GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params) { return _glGetNamedFramebufferAttachmentParameteriv_(framebuffer, attachment, pname, params); };
inline void glCreateRenderbuffers (GLsizei n, GLuint * renderbuffers) { return _glCreateRenderbuffers_(n, renderbuffers); };
inline void glNamedRenderbufferStorage (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) { return _glNamedRenderbufferStorage_(renderbuffer, internalformat, width, height); };
inline void glNamedRenderbufferStorageMultisample (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { return _glNamedRenderbufferStorageMultisample_(renderbuffer, samples, internalformat, width, height); };
inline void glGetNamedRenderbufferParameteriv (GLuint renderbuffer, GLenum pname, GLint * params) { return _glGetNamedRenderbufferParameteriv_(renderbuffer, pname, params); };
inline void glCreateTextures (GLenum target, GLsizei n, GLuint * textures) { return _glCreateTextures_(target, n, textures); };
inline void glTextureBuffer (GLuint texture, GLenum internalformat, GLuint buffer) { return _glTextureBuffer_(texture, internalformat, buffer); };
inline void glTextureBufferRange (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { return _glTextureBufferRange_(texture, internalformat, buffer, offset, size); };
inline void glTextureStorage1D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) { return _glTextureStorage1D_(texture, levels, internalformat, width); };
inline void glTextureStorage2D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { return _glTextureStorage2D_(texture, levels, internalformat, width, height); };
inline void glTextureStorage3D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { return _glTextureStorage3D_(texture, levels, internalformat, width, height, depth); };
inline void glTextureStorage2DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { return _glTextureStorage2DMultisample_(texture, samples, internalformat, width, height, fixedsamplelocations); };
inline void glTextureStorage3DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { return _glTextureStorage3DMultisample_(texture, samples, internalformat, width, height, depth, fixedsamplelocations); };
inline void glTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { return _glTextureSubImage1D_(texture, level, xoffset, width, format, type, pixels); };
inline void glTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { return _glTextureSubImage2D_(texture, level, xoffset, yoffset, width, height, format, type, pixels); };
inline void glTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { return _glTextureSubImage3D_(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); };
inline void glCompressedTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) { return _glCompressedTextureSubImage1D_(texture, level, xoffset, width, format, imageSize, data); };
inline void glCompressedTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) { return _glCompressedTextureSubImage2D_(texture, level, xoffset, yoffset, width, height, format, imageSize, data); };
inline void glCompressedTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { return _glCompressedTextureSubImage3D_(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); };
inline void glCopyTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { return _glCopyTextureSubImage1D_(texture, level, xoffset, x, y, width); };
inline void glCopyTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { return _glCopyTextureSubImage2D_(texture, level, xoffset, yoffset, x, y, width, height); };
inline void glCopyTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { return _glCopyTextureSubImage3D_(texture, level, xoffset, yoffset, zoffset, x, y, width, height); };
inline void glTextureParameterf (GLuint texture, GLenum pname, GLfloat param) { return _glTextureParameterf_(texture, pname, param); };
inline void glTextureParameterfv (GLuint texture, GLenum pname, const GLfloat * param) { return _glTextureParameterfv_(texture, pname, param); };
inline void glTextureParameteri (GLuint texture, GLenum pname, GLint param) { return _glTextureParameteri_(texture, pname, param); };
inline void glTextureParameterIiv (GLuint texture, GLenum pname, const GLint * params) { return _glTextureParameterIiv_(texture, pname, params); };
inline void glTextureParameterIuiv (GLuint texture, GLenum pname, const GLuint * params) { return _glTextureParameterIuiv_(texture, pname, params); };
inline void glTextureParameteriv (GLuint texture, GLenum pname, const GLint * param) { return _glTextureParameteriv_(texture, pname, param); };
inline void glGenerateTextureMipmap (GLuint texture) { return _glGenerateTextureMipmap_(texture); };
inline void glBindTextureUnit (GLuint unit, GLuint texture) { return _glBindTextureUnit_(unit, texture); };
inline void glGetTextureImage (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) { return _glGetTextureImage_(texture, level, format, type, bufSize, pixels); };
inline void glGetCompressedTextureImage (GLuint texture, GLint level, GLsizei bufSize, void * pixels) { return _glGetCompressedTextureImage_(texture, level, bufSize, pixels); };
inline void glGetTextureLevelParameterfv (GLuint texture, GLint level, GLenum pname, GLfloat * params) { return _glGetTextureLevelParameterfv_(texture, level, pname, params); };
inline void glGetTextureLevelParameteriv (GLuint texture, GLint level, GLenum pname, GLint * params) { return _glGetTextureLevelParameteriv_(texture, level, pname, params); };
inline void glGetTextureParameterfv (GLuint texture, GLenum pname, GLfloat * params) { return _glGetTextureParameterfv_(texture, pname, params); };
inline void glGetTextureParameterIiv (GLuint texture, GLenum pname, GLint * params) { return _glGetTextureParameterIiv_(texture, pname, params); };
inline void glGetTextureParameterIuiv (GLuint texture, GLenum pname, GLuint * params) { return _glGetTextureParameterIuiv_(texture, pname, params); };
inline void glGetTextureParameteriv (GLuint texture, GLenum pname, GLint * params) { return _glGetTextureParameteriv_(texture, pname, params); };
inline void glCreateVertexArrays (GLsizei n, GLuint * arrays) { return _glCreateVertexArrays_(n, arrays); };
inline void glDisableVertexArrayAttrib (GLuint vaobj, GLuint index) { return _glDisableVertexArrayAttrib_(vaobj, index); };
inline void glEnableVertexArrayAttrib (GLuint vaobj, GLuint index) { return _glEnableVertexArrayAttrib_(vaobj, index); };
inline void glVertexArrayElementBuffer (GLuint vaobj, GLuint buffer) { return _glVertexArrayElementBuffer_(vaobj, buffer); };
inline void glVertexArrayVertexBuffer (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { return _glVertexArrayVertexBuffer_(vaobj, bindingindex, buffer, offset, stride); };
inline void glVertexArrayVertexBuffers (GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) { return _glVertexArrayVertexBuffers_(vaobj, first, count, buffers, offsets, strides); };
inline void glVertexArrayAttribBinding (GLuint vaobj, GLuint attribindex, GLuint bindingindex) { return _glVertexArrayAttribBinding_(vaobj, attribindex, bindingindex); };
inline void glVertexArrayAttribFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { return _glVertexArrayAttribFormat_(vaobj, attribindex, size, type, normalized, relativeoffset); };
inline void glVertexArrayAttribIFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { return _glVertexArrayAttribIFormat_(vaobj, attribindex, size, type, relativeoffset); };
inline void glVertexArrayAttribLFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { return _glVertexArrayAttribLFormat_(vaobj, attribindex, size, type, relativeoffset); };
inline void glVertexArrayBindingDivisor (GLuint vaobj, GLuint bindingindex, GLuint divisor) { return _glVertexArrayBindingDivisor_(vaobj, bindingindex, divisor); };
inline void glGetVertexArrayiv (GLuint vaobj, GLenum pname, GLint * param) { return _glGetVertexArrayiv_(vaobj, pname, param); };
inline void glGetVertexArrayIndexediv (GLuint vaobj, GLuint index, GLenum pname, GLint * param) { return _glGetVertexArrayIndexediv_(vaobj, index, pname, param); };
inline void glGetVertexArrayIndexed64iv (GLuint vaobj, GLuint index, GLenum pname, GLint64 * param) { return _glGetVertexArrayIndexed64iv_(vaobj, index, pname, param); };
inline void glCreateSamplers (GLsizei n, GLuint * samplers) { return _glCreateSamplers_(n, samplers); };
inline void glCreateProgramPipelines (GLsizei n, GLuint * pipelines) { return _glCreateProgramPipelines_(n, pipelines); };
inline void glCreateQueries (GLenum target, GLsizei n, GLuint * ids) { return _glCreateQueries_(target, n, ids); };
inline void glGetQueryBufferObjecti64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { return _glGetQueryBufferObjecti64v_(id, buffer, pname, offset); };
inline void glGetQueryBufferObjectiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { return _glGetQueryBufferObjectiv_(id, buffer, pname, offset); };
inline void glGetQueryBufferObjectui64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { return _glGetQueryBufferObjectui64v_(id, buffer, pname, offset); };
inline void glGetQueryBufferObjectuiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { return _glGetQueryBufferObjectuiv_(id, buffer, pname, offset); };
inline void glMemoryBarrierByRegion (GLbitfield barriers) { return _glMemoryBarrierByRegion_(barriers); };
inline void glGetTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels) { return _glGetTextureSubImage_(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels); };
inline void glGetCompressedTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels) { return _glGetCompressedTextureSubImage_(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels); };
inline GLenum glGetGraphicsResetStatus (void) { return _glGetGraphicsResetStatus_(); };
inline void glGetnCompressedTexImage (GLenum target, GLint lod, GLsizei bufSize, void * pixels) { return _glGetnCompressedTexImage_(target, lod, bufSize, pixels); };
inline void glGetnTexImage (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) { return _glGetnTexImage_(target, level, format, type, bufSize, pixels); };
inline void glGetnUniformdv (GLuint program, GLint location, GLsizei bufSize, GLdouble * params) { return _glGetnUniformdv_(program, location, bufSize, params); };
inline void glGetnUniformfv (GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { return _glGetnUniformfv_(program, location, bufSize, params); };
inline void glGetnUniformiv (GLuint program, GLint location, GLsizei bufSize, GLint * params) { return _glGetnUniformiv_(program, location, bufSize, params); };
inline void glGetnUniformuiv (GLuint program, GLint location, GLsizei bufSize, GLuint * params) { return _glGetnUniformuiv_(program, location, bufSize, params); };
inline void glReadnPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { return _glReadnPixels_(x, y, width, height, format, type, bufSize, data); };
inline void glTextureBarrier (void) { return _glTextureBarrier_(); };
inline void glGetnMapdv (GLenum target, GLenum query, GLsizei bufSize, GLdouble * v) { return _glGetnMapdv_(target, query, bufSize, v); };
inline void glGetnMapfv (GLenum target, GLenum query, GLsizei bufSize, GLfloat * v) { return _glGetnMapfv_(target, query, bufSize, v); };
inline void glGetnMapiv (GLenum target, GLenum query, GLsizei bufSize, GLint * v) { return _glGetnMapiv_(target, query, bufSize, v); };
inline void glGetnPixelMapfv (GLenum map, GLsizei bufSize, GLfloat * values) { return _glGetnPixelMapfv_(map, bufSize, values); };
inline void glGetnPixelMapuiv (GLenum map, GLsizei bufSize, GLuint * values) { return _glGetnPixelMapuiv_(map, bufSize, values); };
inline void glGetnPixelMapusv (GLenum map, GLsizei bufSize, GLushort * values) { return _glGetnPixelMapusv_(map, bufSize, values); };
inline void glGetnPolygonStipple (GLsizei bufSize, GLubyte * pattern) { return _glGetnPolygonStipple_(bufSize, pattern); };
inline void glGetnColorTable (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table) { return _glGetnColorTable_(target, format, type, bufSize, table); };
inline void glGetnConvolutionFilter (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image) { return _glGetnConvolutionFilter_(target, format, type, bufSize, image); };
inline void glGetnSeparableFilter (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span) { return _glGetnSeparableFilter_(target, format, type, rowBufSize, row, columnBufSize, column, span); };
inline void glGetnHistogram (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { return _glGetnHistogram_(target, reset, format, type, bufSize, values); };
inline void glGetnMinmax (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { return _glGetnMinmax_(target, reset, format, type, bufSize, values); };
#endif //GL_VERSION_4_5

#ifndef GL_VERSION_4_6

// Defines
#define GL_SHADER_BINARY_FORMAT_SPIR_V    0x9551 
#define GL_SPIR_V_BINARY                  0x9552 
#define GL_PARAMETER_BUFFER               0x80EE 
#define GL_PARAMETER_BUFFER_BINDING       0x80EF 
#define GL_CONTEXT_FLAG_NO_ERROR_BIT      0x00000008 
#define GL_VERTICES_SUBMITTED             0x82EE 
#define GL_PRIMITIVES_SUBMITTED           0x82EF 
#define GL_VERTEX_SHADER_INVOCATIONS      0x82F0 
#define GL_TESS_CONTROL_SHADER_PATCHES    0x82F1 
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS 0x82F2 
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED 0x82F3 
#define GL_FRAGMENT_SHADER_INVOCATIONS    0x82F4 
#define GL_COMPUTE_SHADER_INVOCATIONS     0x82F5 
#define GL_CLIPPING_INPUT_PRIMITIVES      0x82F6 
#define GL_CLIPPING_OUTPUT_PRIMITIVES     0x82F7 
#define GL_POLYGON_OFFSET_CLAMP           0x8E1B 
#define GL_SPIR_V_EXTENSIONS              0x9553 
#define GL_NUM_SPIR_V_EXTENSIONS          0x9554 
#define GL_TEXTURE_MAX_ANISOTROPY         0x84FE 
#define GL_MAX_TEXTURE_MAX_ANISOTROPY     0x84FF 
#define GL_TRANSFORM_FEEDBACK_OVERFLOW    0x82EC 
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW 0x82ED 

// functions typedefs
typedef void (APIENTRYP PFN_GLSPECIALIZESHADER_PROC) (GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue);
typedef void (APIENTRYP PFN_GLMULTIDRAWARRAYSINDIRECTCOUNT_PROC) (GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (APIENTRYP PFN_GLMULTIDRAWELEMENTSINDIRECTCOUNT_PROC) (GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (APIENTRYP PFN_GLPOLYGONOFFSETCLAMP_PROC) (GLfloat factor, GLfloat units, GLfloat clamp);

// functions typedefs
GL_FUNC_DEF PFN_GLSPECIALIZESHADER_PROC _glSpecializeShader_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTIDRAWARRAYSINDIRECTCOUNT_PROC _glMultiDrawArraysIndirectCount_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTIDRAWELEMENTSINDIRECTCOUNT_PROC _glMultiDrawElementsIndirectCount_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOLYGONOFFSETCLAMP_PROC _glPolygonOffsetClamp_ GL_FUNC_DEF2;

// functions inline wrap
inline void glSpecializeShader (GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue) { return _glSpecializeShader_(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue); };
inline void glMultiDrawArraysIndirectCount (GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { return _glMultiDrawArraysIndirectCount_(mode, indirect, drawcount, maxdrawcount, stride); };
inline void glMultiDrawElementsIndirectCount (GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { return _glMultiDrawElementsIndirectCount_(mode, type, indirect, drawcount, maxdrawcount, stride); };
inline void glPolygonOffsetClamp (GLfloat factor, GLfloat units, GLfloat clamp) { return _glPolygonOffsetClamp_(factor, units, clamp); };
#endif //GL_VERSION_4_6

// GL_ARB_ES2_compatibility

// GL_ARB_ES3_1_compatibility

#ifndef GL_ARB_ES3_2_compatibility

// Defines
#define GL_PRIMITIVE_BOUNDING_BOX_ARB     0x92BE 
#define GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB 0x9381 
#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB 0x9382 

// functions typedefs
typedef void (APIENTRYP PFN_GLPRIMITIVEBOUNDINGBOXARB_PROC) (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);

// functions typedefs
GL_FUNC_DEF PFN_GLPRIMITIVEBOUNDINGBOXARB_PROC _glPrimitiveBoundingBoxARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glPrimitiveBoundingBoxARB (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { return _glPrimitiveBoundingBoxARB_(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); };
#endif //GL_ARB_ES3_2_compatibility

// GL_ARB_ES3_compatibility

// GL_ARB_arrays_of_arrays

// GL_ARB_base_instance

#ifndef GL_ARB_bindless_texture

// Defines
#define GL_UNSIGNED_INT64_ARB             0x140F 

// functions typedefs
typedef GLuint64 (APIENTRYP PFN_GLGETTEXTUREHANDLEARB_PROC) (GLuint texture);
typedef GLuint64 (APIENTRYP PFN_GLGETTEXTURESAMPLERHANDLEARB_PROC) (GLuint texture, GLuint sampler);
typedef void (APIENTRYP PFN_GLMAKETEXTUREHANDLERESIDENTARB_PROC) (GLuint64 handle);
typedef void (APIENTRYP PFN_GLMAKETEXTUREHANDLENONRESIDENTARB_PROC) (GLuint64 handle);
typedef GLuint64 (APIENTRYP PFN_GLGETIMAGEHANDLEARB_PROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
typedef void (APIENTRYP PFN_GLMAKEIMAGEHANDLERESIDENTARB_PROC) (GLuint64 handle, GLenum access);
typedef void (APIENTRYP PFN_GLMAKEIMAGEHANDLENONRESIDENTARB_PROC) (GLuint64 handle);
typedef void (APIENTRYP PFN_GLUNIFORMHANDLEUI64ARB_PROC) (GLint location, GLuint64 value);
typedef void (APIENTRYP PFN_GLUNIFORMHANDLEUI64VARB_PROC) (GLint location, GLsizei count, const GLuint64 * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMHANDLEUI64ARB_PROC) (GLuint program, GLint location, GLuint64 value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMHANDLEUI64VARB_PROC) (GLuint program, GLint location, GLsizei count, const GLuint64 * values);
typedef GLboolean (APIENTRYP PFN_GLISTEXTUREHANDLERESIDENTARB_PROC) (GLuint64 handle);
typedef GLboolean (APIENTRYP PFN_GLISIMAGEHANDLERESIDENTARB_PROC) (GLuint64 handle);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL1UI64ARB_PROC) (GLuint index, GLuint64EXT x);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL1UI64VARB_PROC) (GLuint index, const GLuint64EXT * v);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBLUI64VARB_PROC) (GLuint index, GLenum pname, GLuint64EXT * params);

// functions typedefs
GL_FUNC_DEF PFN_GLGETTEXTUREHANDLEARB_PROC _glGetTextureHandleARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXTURESAMPLERHANDLEARB_PROC _glGetTextureSamplerHandleARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAKETEXTUREHANDLERESIDENTARB_PROC _glMakeTextureHandleResidentARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAKETEXTUREHANDLENONRESIDENTARB_PROC _glMakeTextureHandleNonResidentARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETIMAGEHANDLEARB_PROC _glGetImageHandleARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAKEIMAGEHANDLERESIDENTARB_PROC _glMakeImageHandleResidentARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAKEIMAGEHANDLENONRESIDENTARB_PROC _glMakeImageHandleNonResidentARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMHANDLEUI64ARB_PROC _glUniformHandleui64ARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMHANDLEUI64VARB_PROC _glUniformHandleui64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMHANDLEUI64ARB_PROC _glProgramUniformHandleui64ARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMHANDLEUI64VARB_PROC _glProgramUniformHandleui64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISTEXTUREHANDLERESIDENTARB_PROC _glIsTextureHandleResidentARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISIMAGEHANDLERESIDENTARB_PROC _glIsImageHandleResidentARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL1UI64ARB_PROC _glVertexAttribL1ui64ARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL1UI64VARB_PROC _glVertexAttribL1ui64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBLUI64VARB_PROC _glGetVertexAttribLui64vARB_ GL_FUNC_DEF2;

// functions inline wrap
inline GLuint64 glGetTextureHandleARB (GLuint texture) { return _glGetTextureHandleARB_(texture); };
inline GLuint64 glGetTextureSamplerHandleARB (GLuint texture, GLuint sampler) { return _glGetTextureSamplerHandleARB_(texture, sampler); };
inline void glMakeTextureHandleResidentARB (GLuint64 handle) { return _glMakeTextureHandleResidentARB_(handle); };
inline void glMakeTextureHandleNonResidentARB (GLuint64 handle) { return _glMakeTextureHandleNonResidentARB_(handle); };
inline GLuint64 glGetImageHandleARB (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) { return _glGetImageHandleARB_(texture, level, layered, layer, format); };
inline void glMakeImageHandleResidentARB (GLuint64 handle, GLenum access) { return _glMakeImageHandleResidentARB_(handle, access); };
inline void glMakeImageHandleNonResidentARB (GLuint64 handle) { return _glMakeImageHandleNonResidentARB_(handle); };
inline void glUniformHandleui64ARB (GLint location, GLuint64 value) { return _glUniformHandleui64ARB_(location, value); };
inline void glUniformHandleui64vARB (GLint location, GLsizei count, const GLuint64 * value) { return _glUniformHandleui64vARB_(location, count, value); };
inline void glProgramUniformHandleui64ARB (GLuint program, GLint location, GLuint64 value) { return _glProgramUniformHandleui64ARB_(program, location, value); };
inline void glProgramUniformHandleui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 * values) { return _glProgramUniformHandleui64vARB_(program, location, count, values); };
inline GLboolean glIsTextureHandleResidentARB (GLuint64 handle) { return _glIsTextureHandleResidentARB_(handle); };
inline GLboolean glIsImageHandleResidentARB (GLuint64 handle) { return _glIsImageHandleResidentARB_(handle); };
inline void glVertexAttribL1ui64ARB (GLuint index, GLuint64EXT x) { return _glVertexAttribL1ui64ARB_(index, x); };
inline void glVertexAttribL1ui64vARB (GLuint index, const GLuint64EXT * v) { return _glVertexAttribL1ui64vARB_(index, v); };
inline void glGetVertexAttribLui64vARB (GLuint index, GLenum pname, GLuint64EXT * params) { return _glGetVertexAttribLui64vARB_(index, pname, params); };
#endif //GL_ARB_bindless_texture

// GL_ARB_blend_func_extended

// GL_ARB_buffer_storage

#ifndef GL_ARB_cl_event
// Structs
struct _cl_context;
struct _cl_event;

// Defines
#define GL_SYNC_CL_EVENT_ARB              0x8240 
#define GL_SYNC_CL_EVENT_COMPLETE_ARB     0x8241 

// functions typedefs
typedef GLsync (APIENTRYP PFN_GLCREATESYNCFROMCLEVENTARB_PROC) (struct _cl_context * context, struct _cl_event * event, GLbitfield flags);

// functions typedefs
GL_FUNC_DEF PFN_GLCREATESYNCFROMCLEVENTARB_PROC _glCreateSyncFromCLeventARB_ GL_FUNC_DEF2;

// functions inline wrap
inline GLsync glCreateSyncFromCLeventARB (struct _cl_context * context, struct _cl_event * event, GLbitfield flags) { return _glCreateSyncFromCLeventARB_(context, event, flags); };
#endif //GL_ARB_cl_event

// GL_ARB_clear_buffer_object

// GL_ARB_clear_texture

// GL_ARB_clip_control

// GL_ARB_compressed_texture_pixel_storage

// GL_ARB_compute_shader

#ifndef GL_ARB_compute_variable_group_size

// Defines
#define GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB 0x9344 
#define GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB 0x90EB 
#define GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB 0x9345 
#define GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB 0x91BF 

// functions typedefs
typedef void (APIENTRYP PFN_GLDISPATCHCOMPUTEGROUPSIZEARB_PROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);

// functions typedefs
GL_FUNC_DEF PFN_GLDISPATCHCOMPUTEGROUPSIZEARB_PROC _glDispatchComputeGroupSizeARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDispatchComputeGroupSizeARB (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) { return _glDispatchComputeGroupSizeARB_(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z); };
#endif //GL_ARB_compute_variable_group_size

// GL_ARB_conditional_render_inverted

// GL_ARB_conservative_depth

// GL_ARB_copy_buffer

// GL_ARB_copy_image

// GL_ARB_cull_distance

#ifndef GL_ARB_debug_output

// Defines
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB   0x8242 
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB 0x8243 
#define GL_DEBUG_CALLBACK_FUNCTION_ARB    0x8244 
#define GL_DEBUG_CALLBACK_USER_PARAM_ARB  0x8245 
#define GL_DEBUG_SOURCE_API_ARB           0x8246 
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB 0x8247 
#define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB 0x8248 
#define GL_DEBUG_SOURCE_THIRD_PARTY_ARB   0x8249 
#define GL_DEBUG_SOURCE_APPLICATION_ARB   0x824A 
#define GL_DEBUG_SOURCE_OTHER_ARB         0x824B 
#define GL_DEBUG_TYPE_ERROR_ARB           0x824C 
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB 0x824D 
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB 0x824E 
#define GL_DEBUG_TYPE_PORTABILITY_ARB     0x824F 
#define GL_DEBUG_TYPE_PERFORMANCE_ARB     0x8250 
#define GL_DEBUG_TYPE_OTHER_ARB           0x8251 
#define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB   0x9143 
#define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB  0x9144 
#define GL_DEBUG_LOGGED_MESSAGES_ARB      0x9145 
#define GL_DEBUG_SEVERITY_HIGH_ARB        0x9146 
#define GL_DEBUG_SEVERITY_MEDIUM_ARB      0x9147 
#define GL_DEBUG_SEVERITY_LOW_ARB         0x9148 

// functions typedefs
typedef void (APIENTRYP PFN_GLDEBUGMESSAGECONTROLARB_PROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
typedef void (APIENTRYP PFN_GLDEBUGMESSAGEINSERTARB_PROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
typedef void (APIENTRYP PFN_GLDEBUGMESSAGECALLBACKARB_PROC) (GLDEBUGPROCARB callback, const void * userParam);
typedef GLuint (APIENTRYP PFN_GLGETDEBUGMESSAGELOGARB_PROC) (GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);

// functions typedefs
GL_FUNC_DEF PFN_GLDEBUGMESSAGECONTROLARB_PROC _glDebugMessageControlARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDEBUGMESSAGEINSERTARB_PROC _glDebugMessageInsertARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDEBUGMESSAGECALLBACKARB_PROC _glDebugMessageCallbackARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETDEBUGMESSAGELOGARB_PROC _glGetDebugMessageLogARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDebugMessageControlARB (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { return _glDebugMessageControlARB_(source, type, severity, count, ids, enabled); };
inline void glDebugMessageInsertARB (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) { return _glDebugMessageInsertARB_(source, type, id, severity, length, buf); };
inline void glDebugMessageCallbackARB (GLDEBUGPROCARB callback, const void * userParam) { return _glDebugMessageCallbackARB_(callback, userParam); };
inline GLuint glGetDebugMessageLogARB (GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) { return _glGetDebugMessageLogARB_(count, bufSize, sources, types, ids, severities, lengths, messageLog); };
#endif //GL_ARB_debug_output

// GL_ARB_depth_buffer_float

// GL_ARB_depth_clamp

// GL_ARB_derivative_control

// GL_ARB_direct_state_access

#ifndef GL_ARB_draw_buffers_blend

// functions typedefs
typedef void (APIENTRYP PFN_GLBLENDEQUATIONIARB_PROC) (GLuint buf, GLenum mode);
typedef void (APIENTRYP PFN_GLBLENDEQUATIONSEPARATEIARB_PROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (APIENTRYP PFN_GLBLENDFUNCIARB_PROC) (GLuint buf, GLenum src, GLenum dst);
typedef void (APIENTRYP PFN_GLBLENDFUNCSEPARATEIARB_PROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);

// functions typedefs
GL_FUNC_DEF PFN_GLBLENDEQUATIONIARB_PROC _glBlendEquationiARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBLENDEQUATIONSEPARATEIARB_PROC _glBlendEquationSeparateiARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBLENDFUNCIARB_PROC _glBlendFunciARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBLENDFUNCSEPARATEIARB_PROC _glBlendFuncSeparateiARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBlendEquationiARB (GLuint buf, GLenum mode) { return _glBlendEquationiARB_(buf, mode); };
inline void glBlendEquationSeparateiARB (GLuint buf, GLenum modeRGB, GLenum modeAlpha) { return _glBlendEquationSeparateiARB_(buf, modeRGB, modeAlpha); };
inline void glBlendFunciARB (GLuint buf, GLenum src, GLenum dst) { return _glBlendFunciARB_(buf, src, dst); };
inline void glBlendFuncSeparateiARB (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { return _glBlendFuncSeparateiARB_(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); };
#endif //GL_ARB_draw_buffers_blend

// GL_ARB_draw_elements_base_vertex

// GL_ARB_draw_indirect

#ifndef GL_ARB_draw_instanced

// functions typedefs
typedef void (APIENTRYP PFN_GLDRAWARRAYSINSTANCEDARB_PROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void (APIENTRYP PFN_GLDRAWELEMENTSINSTANCEDARB_PROC) (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount);

// functions typedefs
GL_FUNC_DEF PFN_GLDRAWARRAYSINSTANCEDARB_PROC _glDrawArraysInstancedARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWELEMENTSINSTANCEDARB_PROC _glDrawElementsInstancedARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDrawArraysInstancedARB (GLenum mode, GLint first, GLsizei count, GLsizei primcount) { return _glDrawArraysInstancedARB_(mode, first, count, primcount); };
inline void glDrawElementsInstancedARB (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { return _glDrawElementsInstancedARB_(mode, count, type, indices, primcount); };
#endif //GL_ARB_draw_instanced

// GL_ARB_enhanced_layouts

// GL_ARB_explicit_attrib_location

// GL_ARB_explicit_uniform_location

// GL_ARB_fragment_coord_conventions

// GL_ARB_fragment_layer_viewport

// GL_ARB_fragment_shader_interlock

// GL_ARB_framebuffer_no_attachments

// GL_ARB_framebuffer_object

// GL_ARB_framebuffer_sRGB

#ifndef GL_ARB_geometry_shader4

// Defines
#define GL_LINES_ADJACENCY_ARB            0x000A 
#define GL_LINE_STRIP_ADJACENCY_ARB       0x000B 
#define GL_TRIANGLES_ADJACENCY_ARB        0x000C 
#define GL_TRIANGLE_STRIP_ADJACENCY_ARB   0x000D 
#define GL_PROGRAM_POINT_SIZE_ARB         0x8642 
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29 
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7 
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8 
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9 
#define GL_GEOMETRY_SHADER_ARB            0x8DD9 
#define GL_GEOMETRY_VERTICES_OUT_ARB      0x8DDA 
#define GL_GEOMETRY_INPUT_TYPE_ARB        0x8DDB 
#define GL_GEOMETRY_OUTPUT_TYPE_ARB       0x8DDC 
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD 
#define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE 
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF 
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0 
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1 

// functions typedefs
typedef void (APIENTRYP PFN_GLPROGRAMPARAMETERIARB_PROC) (GLuint program, GLenum pname, GLint value);
typedef void (APIENTRYP PFN_GLFRAMEBUFFERTEXTUREARB_PROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (APIENTRYP PFN_GLFRAMEBUFFERTEXTURELAYERARB_PROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (APIENTRYP PFN_GLFRAMEBUFFERTEXTUREFACEARB_PROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);

// functions typedefs
GL_FUNC_DEF PFN_GLPROGRAMPARAMETERIARB_PROC _glProgramParameteriARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAMEBUFFERTEXTUREARB_PROC _glFramebufferTextureARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAMEBUFFERTEXTURELAYERARB_PROC _glFramebufferTextureLayerARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAMEBUFFERTEXTUREFACEARB_PROC _glFramebufferTextureFaceARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glProgramParameteriARB (GLuint program, GLenum pname, GLint value) { return _glProgramParameteriARB_(program, pname, value); };
inline void glFramebufferTextureARB (GLenum target, GLenum attachment, GLuint texture, GLint level) { return _glFramebufferTextureARB_(target, attachment, texture, level); };
inline void glFramebufferTextureLayerARB (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { return _glFramebufferTextureLayerARB_(target, attachment, texture, level, layer); };
inline void glFramebufferTextureFaceARB (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) { return _glFramebufferTextureFaceARB_(target, attachment, texture, level, face); };
#endif //GL_ARB_geometry_shader4

// GL_ARB_get_program_binary

// GL_ARB_get_texture_sub_image

#ifndef GL_ARB_gl_spirv

// Defines
#define GL_SHADER_BINARY_FORMAT_SPIR_V_ARB 0x9551 
#define GL_SPIR_V_BINARY_ARB              0x9552 

// functions typedefs
typedef void (APIENTRYP PFN_GLSPECIALIZESHADERARB_PROC) (GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue);

// functions typedefs
GL_FUNC_DEF PFN_GLSPECIALIZESHADERARB_PROC _glSpecializeShaderARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glSpecializeShaderARB (GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue) { return _glSpecializeShaderARB_(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue); };
#endif //GL_ARB_gl_spirv

// GL_ARB_gpu_shader5

// GL_ARB_gpu_shader_fp64

#ifndef GL_ARB_gpu_shader_int64

// Defines
#define GL_INT64_ARB                      0x140E 
#define GL_INT64_VEC2_ARB                 0x8FE9 
#define GL_INT64_VEC3_ARB                 0x8FEA 
#define GL_INT64_VEC4_ARB                 0x8FEB 
#define GL_UNSIGNED_INT64_VEC2_ARB        0x8FF5 
#define GL_UNSIGNED_INT64_VEC3_ARB        0x8FF6 
#define GL_UNSIGNED_INT64_VEC4_ARB        0x8FF7 

// functions typedefs
typedef void (APIENTRYP PFN_GLUNIFORM1I64ARB_PROC) (GLint location, GLint64 x);
typedef void (APIENTRYP PFN_GLUNIFORM2I64ARB_PROC) (GLint location, GLint64 x, GLint64 y);
typedef void (APIENTRYP PFN_GLUNIFORM3I64ARB_PROC) (GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void (APIENTRYP PFN_GLUNIFORM4I64ARB_PROC) (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void (APIENTRYP PFN_GLUNIFORM1I64VARB_PROC) (GLint location, GLsizei count, const GLint64 * value);
typedef void (APIENTRYP PFN_GLUNIFORM2I64VARB_PROC) (GLint location, GLsizei count, const GLint64 * value);
typedef void (APIENTRYP PFN_GLUNIFORM3I64VARB_PROC) (GLint location, GLsizei count, const GLint64 * value);
typedef void (APIENTRYP PFN_GLUNIFORM4I64VARB_PROC) (GLint location, GLsizei count, const GLint64 * value);
typedef void (APIENTRYP PFN_GLUNIFORM1UI64ARB_PROC) (GLint location, GLuint64 x);
typedef void (APIENTRYP PFN_GLUNIFORM2UI64ARB_PROC) (GLint location, GLuint64 x, GLuint64 y);
typedef void (APIENTRYP PFN_GLUNIFORM3UI64ARB_PROC) (GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void (APIENTRYP PFN_GLUNIFORM4UI64ARB_PROC) (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void (APIENTRYP PFN_GLUNIFORM1UI64VARB_PROC) (GLint location, GLsizei count, const GLuint64 * value);
typedef void (APIENTRYP PFN_GLUNIFORM2UI64VARB_PROC) (GLint location, GLsizei count, const GLuint64 * value);
typedef void (APIENTRYP PFN_GLUNIFORM3UI64VARB_PROC) (GLint location, GLsizei count, const GLuint64 * value);
typedef void (APIENTRYP PFN_GLUNIFORM4UI64VARB_PROC) (GLint location, GLsizei count, const GLuint64 * value);
typedef void (APIENTRYP PFN_GLGETUNIFORMI64VARB_PROC) (GLuint program, GLint location, GLint64 * params);
typedef void (APIENTRYP PFN_GLGETUNIFORMUI64VARB_PROC) (GLuint program, GLint location, GLuint64 * params);
typedef void (APIENTRYP PFN_GLGETNUNIFORMI64VARB_PROC) (GLuint program, GLint location, GLsizei bufSize, GLint64 * params);
typedef void (APIENTRYP PFN_GLGETNUNIFORMUI64VARB_PROC) (GLuint program, GLint location, GLsizei bufSize, GLuint64 * params);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1I64ARB_PROC) (GLuint program, GLint location, GLint64 x);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2I64ARB_PROC) (GLuint program, GLint location, GLint64 x, GLint64 y);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3I64ARB_PROC) (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4I64ARB_PROC) (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1I64VARB_PROC) (GLuint program, GLint location, GLsizei count, const GLint64 * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2I64VARB_PROC) (GLuint program, GLint location, GLsizei count, const GLint64 * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3I64VARB_PROC) (GLuint program, GLint location, GLsizei count, const GLint64 * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4I64VARB_PROC) (GLuint program, GLint location, GLsizei count, const GLint64 * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1UI64ARB_PROC) (GLuint program, GLint location, GLuint64 x);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2UI64ARB_PROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3UI64ARB_PROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4UI64ARB_PROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1UI64VARB_PROC) (GLuint program, GLint location, GLsizei count, const GLuint64 * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2UI64VARB_PROC) (GLuint program, GLint location, GLsizei count, const GLuint64 * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3UI64VARB_PROC) (GLuint program, GLint location, GLsizei count, const GLuint64 * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4UI64VARB_PROC) (GLuint program, GLint location, GLsizei count, const GLuint64 * value);

// functions typedefs
GL_FUNC_DEF PFN_GLUNIFORM1I64ARB_PROC _glUniform1i64ARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2I64ARB_PROC _glUniform2i64ARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3I64ARB_PROC _glUniform3i64ARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4I64ARB_PROC _glUniform4i64ARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM1I64VARB_PROC _glUniform1i64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2I64VARB_PROC _glUniform2i64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3I64VARB_PROC _glUniform3i64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4I64VARB_PROC _glUniform4i64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM1UI64ARB_PROC _glUniform1ui64ARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2UI64ARB_PROC _glUniform2ui64ARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3UI64ARB_PROC _glUniform3ui64ARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4UI64ARB_PROC _glUniform4ui64ARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM1UI64VARB_PROC _glUniform1ui64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2UI64VARB_PROC _glUniform2ui64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3UI64VARB_PROC _glUniform3ui64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4UI64VARB_PROC _glUniform4ui64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETUNIFORMI64VARB_PROC _glGetUniformi64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETUNIFORMUI64VARB_PROC _glGetUniformui64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNUNIFORMI64VARB_PROC _glGetnUniformi64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNUNIFORMUI64VARB_PROC _glGetnUniformui64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1I64ARB_PROC _glProgramUniform1i64ARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2I64ARB_PROC _glProgramUniform2i64ARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3I64ARB_PROC _glProgramUniform3i64ARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4I64ARB_PROC _glProgramUniform4i64ARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1I64VARB_PROC _glProgramUniform1i64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2I64VARB_PROC _glProgramUniform2i64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3I64VARB_PROC _glProgramUniform3i64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4I64VARB_PROC _glProgramUniform4i64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1UI64ARB_PROC _glProgramUniform1ui64ARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2UI64ARB_PROC _glProgramUniform2ui64ARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3UI64ARB_PROC _glProgramUniform3ui64ARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4UI64ARB_PROC _glProgramUniform4ui64ARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1UI64VARB_PROC _glProgramUniform1ui64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2UI64VARB_PROC _glProgramUniform2ui64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3UI64VARB_PROC _glProgramUniform3ui64vARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4UI64VARB_PROC _glProgramUniform4ui64vARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glUniform1i64ARB (GLint location, GLint64 x) { return _glUniform1i64ARB_(location, x); };
inline void glUniform2i64ARB (GLint location, GLint64 x, GLint64 y) { return _glUniform2i64ARB_(location, x, y); };
inline void glUniform3i64ARB (GLint location, GLint64 x, GLint64 y, GLint64 z) { return _glUniform3i64ARB_(location, x, y, z); };
inline void glUniform4i64ARB (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) { return _glUniform4i64ARB_(location, x, y, z, w); };
inline void glUniform1i64vARB (GLint location, GLsizei count, const GLint64 * value) { return _glUniform1i64vARB_(location, count, value); };
inline void glUniform2i64vARB (GLint location, GLsizei count, const GLint64 * value) { return _glUniform2i64vARB_(location, count, value); };
inline void glUniform3i64vARB (GLint location, GLsizei count, const GLint64 * value) { return _glUniform3i64vARB_(location, count, value); };
inline void glUniform4i64vARB (GLint location, GLsizei count, const GLint64 * value) { return _glUniform4i64vARB_(location, count, value); };
inline void glUniform1ui64ARB (GLint location, GLuint64 x) { return _glUniform1ui64ARB_(location, x); };
inline void glUniform2ui64ARB (GLint location, GLuint64 x, GLuint64 y) { return _glUniform2ui64ARB_(location, x, y); };
inline void glUniform3ui64ARB (GLint location, GLuint64 x, GLuint64 y, GLuint64 z) { return _glUniform3ui64ARB_(location, x, y, z); };
inline void glUniform4ui64ARB (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) { return _glUniform4ui64ARB_(location, x, y, z, w); };
inline void glUniform1ui64vARB (GLint location, GLsizei count, const GLuint64 * value) { return _glUniform1ui64vARB_(location, count, value); };
inline void glUniform2ui64vARB (GLint location, GLsizei count, const GLuint64 * value) { return _glUniform2ui64vARB_(location, count, value); };
inline void glUniform3ui64vARB (GLint location, GLsizei count, const GLuint64 * value) { return _glUniform3ui64vARB_(location, count, value); };
inline void glUniform4ui64vARB (GLint location, GLsizei count, const GLuint64 * value) { return _glUniform4ui64vARB_(location, count, value); };
inline void glGetUniformi64vARB (GLuint program, GLint location, GLint64 * params) { return _glGetUniformi64vARB_(program, location, params); };
inline void glGetUniformui64vARB (GLuint program, GLint location, GLuint64 * params) { return _glGetUniformui64vARB_(program, location, params); };
inline void glGetnUniformi64vARB (GLuint program, GLint location, GLsizei bufSize, GLint64 * params) { return _glGetnUniformi64vARB_(program, location, bufSize, params); };
inline void glGetnUniformui64vARB (GLuint program, GLint location, GLsizei bufSize, GLuint64 * params) { return _glGetnUniformui64vARB_(program, location, bufSize, params); };
inline void glProgramUniform1i64ARB (GLuint program, GLint location, GLint64 x) { return _glProgramUniform1i64ARB_(program, location, x); };
inline void glProgramUniform2i64ARB (GLuint program, GLint location, GLint64 x, GLint64 y) { return _glProgramUniform2i64ARB_(program, location, x, y); };
inline void glProgramUniform3i64ARB (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z) { return _glProgramUniform3i64ARB_(program, location, x, y, z); };
inline void glProgramUniform4i64ARB (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) { return _glProgramUniform4i64ARB_(program, location, x, y, z, w); };
inline void glProgramUniform1i64vARB (GLuint program, GLint location, GLsizei count, const GLint64 * value) { return _glProgramUniform1i64vARB_(program, location, count, value); };
inline void glProgramUniform2i64vARB (GLuint program, GLint location, GLsizei count, const GLint64 * value) { return _glProgramUniform2i64vARB_(program, location, count, value); };
inline void glProgramUniform3i64vARB (GLuint program, GLint location, GLsizei count, const GLint64 * value) { return _glProgramUniform3i64vARB_(program, location, count, value); };
inline void glProgramUniform4i64vARB (GLuint program, GLint location, GLsizei count, const GLint64 * value) { return _glProgramUniform4i64vARB_(program, location, count, value); };
inline void glProgramUniform1ui64ARB (GLuint program, GLint location, GLuint64 x) { return _glProgramUniform1ui64ARB_(program, location, x); };
inline void glProgramUniform2ui64ARB (GLuint program, GLint location, GLuint64 x, GLuint64 y) { return _glProgramUniform2ui64ARB_(program, location, x, y); };
inline void glProgramUniform3ui64ARB (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z) { return _glProgramUniform3ui64ARB_(program, location, x, y, z); };
inline void glProgramUniform4ui64ARB (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) { return _glProgramUniform4ui64ARB_(program, location, x, y, z, w); };
inline void glProgramUniform1ui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 * value) { return _glProgramUniform1ui64vARB_(program, location, count, value); };
inline void glProgramUniform2ui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 * value) { return _glProgramUniform2ui64vARB_(program, location, count, value); };
inline void glProgramUniform3ui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 * value) { return _glProgramUniform3ui64vARB_(program, location, count, value); };
inline void glProgramUniform4ui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 * value) { return _glProgramUniform4ui64vARB_(program, location, count, value); };
#endif //GL_ARB_gpu_shader_int64

// GL_ARB_half_float_vertex

#ifndef GL_ARB_imaging

// Defines
#define GL_CONVOLUTION_1D                 0x8010 
#define GL_CONVOLUTION_2D                 0x8011 
#define GL_SEPARABLE_2D                   0x8012 
#define GL_CONVOLUTION_BORDER_MODE        0x8013 
#define GL_CONVOLUTION_FILTER_SCALE       0x8014 
#define GL_CONVOLUTION_FILTER_BIAS        0x8015 
#define GL_REDUCE                         0x8016 
#define GL_CONVOLUTION_FORMAT             0x8017 
#define GL_CONVOLUTION_WIDTH              0x8018 
#define GL_CONVOLUTION_HEIGHT             0x8019 
#define GL_MAX_CONVOLUTION_WIDTH          0x801A 
#define GL_MAX_CONVOLUTION_HEIGHT         0x801B 
#define GL_POST_CONVOLUTION_RED_SCALE     0x801C 
#define GL_POST_CONVOLUTION_GREEN_SCALE   0x801D 
#define GL_POST_CONVOLUTION_BLUE_SCALE    0x801E 
#define GL_POST_CONVOLUTION_ALPHA_SCALE   0x801F 
#define GL_POST_CONVOLUTION_RED_BIAS      0x8020 
#define GL_POST_CONVOLUTION_GREEN_BIAS    0x8021 
#define GL_POST_CONVOLUTION_BLUE_BIAS     0x8022 
#define GL_POST_CONVOLUTION_ALPHA_BIAS    0x8023 
#define GL_HISTOGRAM                      0x8024 
#define GL_PROXY_HISTOGRAM                0x8025 
#define GL_HISTOGRAM_WIDTH                0x8026 
#define GL_HISTOGRAM_FORMAT               0x8027 
#define GL_HISTOGRAM_RED_SIZE             0x8028 
#define GL_HISTOGRAM_GREEN_SIZE           0x8029 
#define GL_HISTOGRAM_BLUE_SIZE            0x802A 
#define GL_HISTOGRAM_ALPHA_SIZE           0x802B 
#define GL_HISTOGRAM_LUMINANCE_SIZE       0x802C 
#define GL_HISTOGRAM_SINK                 0x802D 
#define GL_MINMAX                         0x802E 
#define GL_MINMAX_FORMAT                  0x802F 
#define GL_MINMAX_SINK                    0x8030 
#define GL_TABLE_TOO_LARGE                0x8031 
#define GL_COLOR_MATRIX                   0x80B1 
#define GL_COLOR_MATRIX_STACK_DEPTH       0x80B2 
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH   0x80B3 
#define GL_POST_COLOR_MATRIX_RED_SCALE    0x80B4 
#define GL_POST_COLOR_MATRIX_GREEN_SCALE  0x80B5 
#define GL_POST_COLOR_MATRIX_BLUE_SCALE   0x80B6 
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE  0x80B7 
#define GL_POST_COLOR_MATRIX_RED_BIAS     0x80B8 
#define GL_POST_COLOR_MATRIX_GREEN_BIAS   0x80B9 
#define GL_POST_COLOR_MATRIX_BLUE_BIAS    0x80BA 
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS   0x80BB 
#define GL_COLOR_TABLE                    0x80D0 
#define GL_POST_CONVOLUTION_COLOR_TABLE   0x80D1 
#define GL_POST_COLOR_MATRIX_COLOR_TABLE  0x80D2 
#define GL_PROXY_COLOR_TABLE              0x80D3 
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4 
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5 
#define GL_COLOR_TABLE_SCALE              0x80D6 
#define GL_COLOR_TABLE_BIAS               0x80D7 
#define GL_COLOR_TABLE_FORMAT             0x80D8 
#define GL_COLOR_TABLE_WIDTH              0x80D9 
#define GL_COLOR_TABLE_RED_SIZE           0x80DA 
#define GL_COLOR_TABLE_GREEN_SIZE         0x80DB 
#define GL_COLOR_TABLE_BLUE_SIZE          0x80DC 
#define GL_COLOR_TABLE_ALPHA_SIZE         0x80DD 
#define GL_COLOR_TABLE_LUMINANCE_SIZE     0x80DE 
#define GL_COLOR_TABLE_INTENSITY_SIZE     0x80DF 
#define GL_CONSTANT_BORDER                0x8151 
#define GL_REPLICATE_BORDER               0x8153 
#define GL_CONVOLUTION_BORDER_COLOR       0x8154 

// functions typedefs
typedef void (APIENTRYP PFN_GLCOLORTABLE_PROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table);
typedef void (APIENTRYP PFN_GLCOLORTABLEPARAMETERFV_PROC) (GLenum target, GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLCOLORTABLEPARAMETERIV_PROC) (GLenum target, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLCOPYCOLORTABLE_PROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (APIENTRYP PFN_GLGETCOLORTABLE_PROC) (GLenum target, GLenum format, GLenum type, void * table);
typedef void (APIENTRYP PFN_GLGETCOLORTABLEPARAMETERFV_PROC) (GLenum target, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETCOLORTABLEPARAMETERIV_PROC) (GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLCOLORSUBTABLE_PROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data);
typedef void (APIENTRYP PFN_GLCOPYCOLORSUBTABLE_PROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
typedef void (APIENTRYP PFN_GLCONVOLUTIONFILTER1D_PROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image);
typedef void (APIENTRYP PFN_GLCONVOLUTIONFILTER2D_PROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image);
typedef void (APIENTRYP PFN_GLCONVOLUTIONPARAMETERF_PROC) (GLenum target, GLenum pname, GLfloat params);
typedef void (APIENTRYP PFN_GLCONVOLUTIONPARAMETERFV_PROC) (GLenum target, GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLCONVOLUTIONPARAMETERI_PROC) (GLenum target, GLenum pname, GLint params);
typedef void (APIENTRYP PFN_GLCONVOLUTIONPARAMETERIV_PROC) (GLenum target, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLCOPYCONVOLUTIONFILTER1D_PROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (APIENTRYP PFN_GLCOPYCONVOLUTIONFILTER2D_PROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLGETCONVOLUTIONFILTER_PROC) (GLenum target, GLenum format, GLenum type, void * image);
typedef void (APIENTRYP PFN_GLGETCONVOLUTIONPARAMETERFV_PROC) (GLenum target, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETCONVOLUTIONPARAMETERIV_PROC) (GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETSEPARABLEFILTER_PROC) (GLenum target, GLenum format, GLenum type, void * row, void * column, void * span);
typedef void (APIENTRYP PFN_GLSEPARABLEFILTER2D_PROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column);
typedef void (APIENTRYP PFN_GLGETHISTOGRAM_PROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void * values);
typedef void (APIENTRYP PFN_GLGETHISTOGRAMPARAMETERFV_PROC) (GLenum target, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETHISTOGRAMPARAMETERIV_PROC) (GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETMINMAX_PROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void * values);
typedef void (APIENTRYP PFN_GLGETMINMAXPARAMETERFV_PROC) (GLenum target, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETMINMAXPARAMETERIV_PROC) (GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLHISTOGRAM_PROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
typedef void (APIENTRYP PFN_GLMINMAX_PROC) (GLenum target, GLenum internalformat, GLboolean sink);
typedef void (APIENTRYP PFN_GLRESETHISTOGRAM_PROC) (GLenum target);
typedef void (APIENTRYP PFN_GLRESETMINMAX_PROC) (GLenum target);

// functions typedefs
GL_FUNC_DEF PFN_GLCOLORTABLE_PROC _glColorTable_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLORTABLEPARAMETERFV_PROC _glColorTableParameterfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLORTABLEPARAMETERIV_PROC _glColorTableParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYCOLORTABLE_PROC _glCopyColorTable_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOLORTABLE_PROC _glGetColorTable_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOLORTABLEPARAMETERFV_PROC _glGetColorTableParameterfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOLORTABLEPARAMETERIV_PROC _glGetColorTableParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLORSUBTABLE_PROC _glColorSubTable_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYCOLORSUBTABLE_PROC _glCopyColorSubTable_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCONVOLUTIONFILTER1D_PROC _glConvolutionFilter1D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCONVOLUTIONFILTER2D_PROC _glConvolutionFilter2D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCONVOLUTIONPARAMETERF_PROC _glConvolutionParameterf_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCONVOLUTIONPARAMETERFV_PROC _glConvolutionParameterfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCONVOLUTIONPARAMETERI_PROC _glConvolutionParameteri_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCONVOLUTIONPARAMETERIV_PROC _glConvolutionParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYCONVOLUTIONFILTER1D_PROC _glCopyConvolutionFilter1D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYCONVOLUTIONFILTER2D_PROC _glCopyConvolutionFilter2D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCONVOLUTIONFILTER_PROC _glGetConvolutionFilter_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCONVOLUTIONPARAMETERFV_PROC _glGetConvolutionParameterfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCONVOLUTIONPARAMETERIV_PROC _glGetConvolutionParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETSEPARABLEFILTER_PROC _glGetSeparableFilter_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSEPARABLEFILTER2D_PROC _glSeparableFilter2D_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETHISTOGRAM_PROC _glGetHistogram_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETHISTOGRAMPARAMETERFV_PROC _glGetHistogramParameterfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETHISTOGRAMPARAMETERIV_PROC _glGetHistogramParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMINMAX_PROC _glGetMinmax_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMINMAXPARAMETERFV_PROC _glGetMinmaxParameterfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMINMAXPARAMETERIV_PROC _glGetMinmaxParameteriv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLHISTOGRAM_PROC _glHistogram_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMINMAX_PROC _glMinmax_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRESETHISTOGRAM_PROC _glResetHistogram_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRESETMINMAX_PROC _glResetMinmax_ GL_FUNC_DEF2;

// functions inline wrap
inline void glColorTable (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table) { return _glColorTable_(target, internalformat, width, format, type, table); };
inline void glColorTableParameterfv (GLenum target, GLenum pname, const GLfloat * params) { return _glColorTableParameterfv_(target, pname, params); };
inline void glColorTableParameteriv (GLenum target, GLenum pname, const GLint * params) { return _glColorTableParameteriv_(target, pname, params); };
inline void glCopyColorTable (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { return _glCopyColorTable_(target, internalformat, x, y, width); };
inline void glGetColorTable (GLenum target, GLenum format, GLenum type, void * table) { return _glGetColorTable_(target, format, type, table); };
inline void glGetColorTableParameterfv (GLenum target, GLenum pname, GLfloat * params) { return _glGetColorTableParameterfv_(target, pname, params); };
inline void glGetColorTableParameteriv (GLenum target, GLenum pname, GLint * params) { return _glGetColorTableParameteriv_(target, pname, params); };
inline void glColorSubTable (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data) { return _glColorSubTable_(target, start, count, format, type, data); };
inline void glCopyColorSubTable (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) { return _glCopyColorSubTable_(target, start, x, y, width); };
inline void glConvolutionFilter1D (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image) { return _glConvolutionFilter1D_(target, internalformat, width, format, type, image); };
inline void glConvolutionFilter2D (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image) { return _glConvolutionFilter2D_(target, internalformat, width, height, format, type, image); };
inline void glConvolutionParameterf (GLenum target, GLenum pname, GLfloat params) { return _glConvolutionParameterf_(target, pname, params); };
inline void glConvolutionParameterfv (GLenum target, GLenum pname, const GLfloat * params) { return _glConvolutionParameterfv_(target, pname, params); };
inline void glConvolutionParameteri (GLenum target, GLenum pname, GLint params) { return _glConvolutionParameteri_(target, pname, params); };
inline void glConvolutionParameteriv (GLenum target, GLenum pname, const GLint * params) { return _glConvolutionParameteriv_(target, pname, params); };
inline void glCopyConvolutionFilter1D (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { return _glCopyConvolutionFilter1D_(target, internalformat, x, y, width); };
inline void glCopyConvolutionFilter2D (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) { return _glCopyConvolutionFilter2D_(target, internalformat, x, y, width, height); };
inline void glGetConvolutionFilter (GLenum target, GLenum format, GLenum type, void * image) { return _glGetConvolutionFilter_(target, format, type, image); };
inline void glGetConvolutionParameterfv (GLenum target, GLenum pname, GLfloat * params) { return _glGetConvolutionParameterfv_(target, pname, params); };
inline void glGetConvolutionParameteriv (GLenum target, GLenum pname, GLint * params) { return _glGetConvolutionParameteriv_(target, pname, params); };
inline void glGetSeparableFilter (GLenum target, GLenum format, GLenum type, void * row, void * column, void * span) { return _glGetSeparableFilter_(target, format, type, row, column, span); };
inline void glSeparableFilter2D (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column) { return _glSeparableFilter2D_(target, internalformat, width, height, format, type, row, column); };
inline void glGetHistogram (GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { return _glGetHistogram_(target, reset, format, type, values); };
inline void glGetHistogramParameterfv (GLenum target, GLenum pname, GLfloat * params) { return _glGetHistogramParameterfv_(target, pname, params); };
inline void glGetHistogramParameteriv (GLenum target, GLenum pname, GLint * params) { return _glGetHistogramParameteriv_(target, pname, params); };
inline void glGetMinmax (GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { return _glGetMinmax_(target, reset, format, type, values); };
inline void glGetMinmaxParameterfv (GLenum target, GLenum pname, GLfloat * params) { return _glGetMinmaxParameterfv_(target, pname, params); };
inline void glGetMinmaxParameteriv (GLenum target, GLenum pname, GLint * params) { return _glGetMinmaxParameteriv_(target, pname, params); };
inline void glHistogram (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) { return _glHistogram_(target, width, internalformat, sink); };
inline void glMinmax (GLenum target, GLenum internalformat, GLboolean sink) { return _glMinmax_(target, internalformat, sink); };
inline void glResetHistogram (GLenum target) { return _glResetHistogram_(target); };
inline void glResetMinmax (GLenum target) { return _glResetMinmax_(target); };
#endif //GL_ARB_imaging

#ifndef GL_ARB_indirect_parameters

// Defines
#define GL_PARAMETER_BUFFER_ARB           0x80EE 
#define GL_PARAMETER_BUFFER_BINDING_ARB   0x80EF 

// functions typedefs
typedef void (APIENTRYP PFN_GLMULTIDRAWARRAYSINDIRECTCOUNTARB_PROC) (GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (APIENTRYP PFN_GLMULTIDRAWELEMENTSINDIRECTCOUNTARB_PROC) (GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);

// functions typedefs
GL_FUNC_DEF PFN_GLMULTIDRAWARRAYSINDIRECTCOUNTARB_PROC _glMultiDrawArraysIndirectCountARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTIDRAWELEMENTSINDIRECTCOUNTARB_PROC _glMultiDrawElementsIndirectCountARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glMultiDrawArraysIndirectCountARB (GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { return _glMultiDrawArraysIndirectCountARB_(mode, indirect, drawcount, maxdrawcount, stride); };
inline void glMultiDrawElementsIndirectCountARB (GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { return _glMultiDrawElementsIndirectCountARB_(mode, type, indirect, drawcount, maxdrawcount, stride); };
#endif //GL_ARB_indirect_parameters

#ifndef GL_ARB_instanced_arrays

// Defines
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB 0x88FE 

// functions typedefs
typedef void (APIENTRYP PFN_GLVERTEXATTRIBDIVISORARB_PROC) (GLuint index, GLuint divisor);

// functions typedefs
GL_FUNC_DEF PFN_GLVERTEXATTRIBDIVISORARB_PROC _glVertexAttribDivisorARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glVertexAttribDivisorARB (GLuint index, GLuint divisor) { return _glVertexAttribDivisorARB_(index, divisor); };
#endif //GL_ARB_instanced_arrays

// GL_ARB_internalformat_query

#ifndef GL_ARB_internalformat_query2

// Defines
#define GL_SRGB_DECODE_ARB                0x8299 
#define GL_VIEW_CLASS_EAC_R11             0x9383 
#define GL_VIEW_CLASS_EAC_RG11            0x9384 
#define GL_VIEW_CLASS_ETC2_RGB            0x9385 
#define GL_VIEW_CLASS_ETC2_RGBA           0x9386 
#define GL_VIEW_CLASS_ETC2_EAC_RGBA       0x9387 
#define GL_VIEW_CLASS_ASTC_4x4_RGBA       0x9388 
#define GL_VIEW_CLASS_ASTC_5x4_RGBA       0x9389 
#define GL_VIEW_CLASS_ASTC_5x5_RGBA       0x938A 
#define GL_VIEW_CLASS_ASTC_6x5_RGBA       0x938B 
#define GL_VIEW_CLASS_ASTC_6x6_RGBA       0x938C 
#define GL_VIEW_CLASS_ASTC_8x5_RGBA       0x938D 
#define GL_VIEW_CLASS_ASTC_8x6_RGBA       0x938E 
#define GL_VIEW_CLASS_ASTC_8x8_RGBA       0x938F 
#define GL_VIEW_CLASS_ASTC_10x5_RGBA      0x9390 
#define GL_VIEW_CLASS_ASTC_10x6_RGBA      0x9391 
#define GL_VIEW_CLASS_ASTC_10x8_RGBA      0x9392 
#define GL_VIEW_CLASS_ASTC_10x10_RGBA     0x9393 
#define GL_VIEW_CLASS_ASTC_12x10_RGBA     0x9394 
#define GL_VIEW_CLASS_ASTC_12x12_RGBA     0x9395 
#endif //GL_ARB_internalformat_query2

// GL_ARB_invalidate_subdata

// GL_ARB_map_buffer_alignment

// GL_ARB_map_buffer_range

// GL_ARB_multi_bind

// GL_ARB_multi_draw_indirect

// GL_ARB_occlusion_query2

#ifndef GL_ARB_parallel_shader_compile

// Defines
#define GL_MAX_SHADER_COMPILER_THREADS_ARB 0x91B0 
#define GL_COMPLETION_STATUS_ARB          0x91B1 

// functions typedefs
typedef void (APIENTRYP PFN_GLMAXSHADERCOMPILERTHREADSARB_PROC) (GLuint count);

// functions typedefs
GL_FUNC_DEF PFN_GLMAXSHADERCOMPILERTHREADSARB_PROC _glMaxShaderCompilerThreadsARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glMaxShaderCompilerThreadsARB (GLuint count) { return _glMaxShaderCompilerThreadsARB_(count); };
#endif //GL_ARB_parallel_shader_compile

#ifndef GL_ARB_pipeline_statistics_query

// Defines
#define GL_VERTICES_SUBMITTED_ARB         0x82EE 
#define GL_PRIMITIVES_SUBMITTED_ARB       0x82EF 
#define GL_VERTEX_SHADER_INVOCATIONS_ARB  0x82F0 
#define GL_TESS_CONTROL_SHADER_PATCHES_ARB 0x82F1 
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB 0x82F2 
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB 0x82F3 
#define GL_FRAGMENT_SHADER_INVOCATIONS_ARB 0x82F4 
#define GL_COMPUTE_SHADER_INVOCATIONS_ARB 0x82F5 
#define GL_CLIPPING_INPUT_PRIMITIVES_ARB  0x82F6 
#define GL_CLIPPING_OUTPUT_PRIMITIVES_ARB 0x82F7 
#endif //GL_ARB_pipeline_statistics_query

#ifndef GL_ARB_pixel_buffer_object

// Defines
#define GL_PIXEL_PACK_BUFFER_ARB          0x88EB 
#define GL_PIXEL_UNPACK_BUFFER_ARB        0x88EC 
#define GL_PIXEL_PACK_BUFFER_BINDING_ARB  0x88ED 
#define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0x88EF 
#endif //GL_ARB_pixel_buffer_object

// GL_ARB_polygon_offset_clamp

// GL_ARB_post_depth_coverage

// GL_ARB_program_interface_query

// GL_ARB_provoking_vertex

// GL_ARB_query_buffer_object

// GL_ARB_robust_buffer_access_behavior

#ifndef GL_ARB_robustness

// Defines
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0x00000004 
#define GL_LOSE_CONTEXT_ON_RESET_ARB      0x8252 
#define GL_GUILTY_CONTEXT_RESET_ARB       0x8253 
#define GL_INNOCENT_CONTEXT_RESET_ARB     0x8254 
#define GL_UNKNOWN_CONTEXT_RESET_ARB      0x8255 
#define GL_RESET_NOTIFICATION_STRATEGY_ARB 0x8256 
#define GL_NO_RESET_NOTIFICATION_ARB      0x8261 

// functions typedefs
typedef GLenum (APIENTRYP PFN_GLGETGRAPHICSRESETSTATUSARB_PROC) (void);
typedef void (APIENTRYP PFN_GLGETNTEXIMAGEARB_PROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * img);
typedef void (APIENTRYP PFN_GLREADNPIXELSARB_PROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);
typedef void (APIENTRYP PFN_GLGETNCOMPRESSEDTEXIMAGEARB_PROC) (GLenum target, GLint lod, GLsizei bufSize, void * img);
typedef void (APIENTRYP PFN_GLGETNUNIFORMFVARB_PROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETNUNIFORMIVARB_PROC) (GLuint program, GLint location, GLsizei bufSize, GLint * params);
typedef void (APIENTRYP PFN_GLGETNUNIFORMUIVARB_PROC) (GLuint program, GLint location, GLsizei bufSize, GLuint * params);
typedef void (APIENTRYP PFN_GLGETNUNIFORMDVARB_PROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble * params);
typedef void (APIENTRYP PFN_GLGETNMAPDVARB_PROC) (GLenum target, GLenum query, GLsizei bufSize, GLdouble * v);
typedef void (APIENTRYP PFN_GLGETNMAPFVARB_PROC) (GLenum target, GLenum query, GLsizei bufSize, GLfloat * v);
typedef void (APIENTRYP PFN_GLGETNMAPIVARB_PROC) (GLenum target, GLenum query, GLsizei bufSize, GLint * v);
typedef void (APIENTRYP PFN_GLGETNPIXELMAPFVARB_PROC) (GLenum map, GLsizei bufSize, GLfloat * values);
typedef void (APIENTRYP PFN_GLGETNPIXELMAPUIVARB_PROC) (GLenum map, GLsizei bufSize, GLuint * values);
typedef void (APIENTRYP PFN_GLGETNPIXELMAPUSVARB_PROC) (GLenum map, GLsizei bufSize, GLushort * values);
typedef void (APIENTRYP PFN_GLGETNPOLYGONSTIPPLEARB_PROC) (GLsizei bufSize, GLubyte * pattern);
typedef void (APIENTRYP PFN_GLGETNCOLORTABLEARB_PROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table);
typedef void (APIENTRYP PFN_GLGETNCONVOLUTIONFILTERARB_PROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image);
typedef void (APIENTRYP PFN_GLGETNSEPARABLEFILTERARB_PROC) (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span);
typedef void (APIENTRYP PFN_GLGETNHISTOGRAMARB_PROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);
typedef void (APIENTRYP PFN_GLGETNMINMAXARB_PROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);

// functions typedefs
GL_FUNC_DEF PFN_GLGETGRAPHICSRESETSTATUSARB_PROC _glGetGraphicsResetStatusARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNTEXIMAGEARB_PROC _glGetnTexImageARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREADNPIXELSARB_PROC _glReadnPixelsARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNCOMPRESSEDTEXIMAGEARB_PROC _glGetnCompressedTexImageARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNUNIFORMFVARB_PROC _glGetnUniformfvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNUNIFORMIVARB_PROC _glGetnUniformivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNUNIFORMUIVARB_PROC _glGetnUniformuivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNUNIFORMDVARB_PROC _glGetnUniformdvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNMAPDVARB_PROC _glGetnMapdvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNMAPFVARB_PROC _glGetnMapfvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNMAPIVARB_PROC _glGetnMapivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNPIXELMAPFVARB_PROC _glGetnPixelMapfvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNPIXELMAPUIVARB_PROC _glGetnPixelMapuivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNPIXELMAPUSVARB_PROC _glGetnPixelMapusvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNPOLYGONSTIPPLEARB_PROC _glGetnPolygonStippleARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNCOLORTABLEARB_PROC _glGetnColorTableARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNCONVOLUTIONFILTERARB_PROC _glGetnConvolutionFilterARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNSEPARABLEFILTERARB_PROC _glGetnSeparableFilterARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNHISTOGRAMARB_PROC _glGetnHistogramARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNMINMAXARB_PROC _glGetnMinmaxARB_ GL_FUNC_DEF2;

// functions inline wrap
inline GLenum glGetGraphicsResetStatusARB (void) { return _glGetGraphicsResetStatusARB_(); };
inline void glGetnTexImageARB (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * img) { return _glGetnTexImageARB_(target, level, format, type, bufSize, img); };
inline void glReadnPixelsARB (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { return _glReadnPixelsARB_(x, y, width, height, format, type, bufSize, data); };
inline void glGetnCompressedTexImageARB (GLenum target, GLint lod, GLsizei bufSize, void * img) { return _glGetnCompressedTexImageARB_(target, lod, bufSize, img); };
inline void glGetnUniformfvARB (GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { return _glGetnUniformfvARB_(program, location, bufSize, params); };
inline void glGetnUniformivARB (GLuint program, GLint location, GLsizei bufSize, GLint * params) { return _glGetnUniformivARB_(program, location, bufSize, params); };
inline void glGetnUniformuivARB (GLuint program, GLint location, GLsizei bufSize, GLuint * params) { return _glGetnUniformuivARB_(program, location, bufSize, params); };
inline void glGetnUniformdvARB (GLuint program, GLint location, GLsizei bufSize, GLdouble * params) { return _glGetnUniformdvARB_(program, location, bufSize, params); };
inline void glGetnMapdvARB (GLenum target, GLenum query, GLsizei bufSize, GLdouble * v) { return _glGetnMapdvARB_(target, query, bufSize, v); };
inline void glGetnMapfvARB (GLenum target, GLenum query, GLsizei bufSize, GLfloat * v) { return _glGetnMapfvARB_(target, query, bufSize, v); };
inline void glGetnMapivARB (GLenum target, GLenum query, GLsizei bufSize, GLint * v) { return _glGetnMapivARB_(target, query, bufSize, v); };
inline void glGetnPixelMapfvARB (GLenum map, GLsizei bufSize, GLfloat * values) { return _glGetnPixelMapfvARB_(map, bufSize, values); };
inline void glGetnPixelMapuivARB (GLenum map, GLsizei bufSize, GLuint * values) { return _glGetnPixelMapuivARB_(map, bufSize, values); };
inline void glGetnPixelMapusvARB (GLenum map, GLsizei bufSize, GLushort * values) { return _glGetnPixelMapusvARB_(map, bufSize, values); };
inline void glGetnPolygonStippleARB (GLsizei bufSize, GLubyte * pattern) { return _glGetnPolygonStippleARB_(bufSize, pattern); };
inline void glGetnColorTableARB (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table) { return _glGetnColorTableARB_(target, format, type, bufSize, table); };
inline void glGetnConvolutionFilterARB (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image) { return _glGetnConvolutionFilterARB_(target, format, type, bufSize, image); };
inline void glGetnSeparableFilterARB (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span) { return _glGetnSeparableFilterARB_(target, format, type, rowBufSize, row, columnBufSize, column, span); };
inline void glGetnHistogramARB (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { return _glGetnHistogramARB_(target, reset, format, type, bufSize, values); };
inline void glGetnMinmaxARB (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { return _glGetnMinmaxARB_(target, reset, format, type, bufSize, values); };
#endif //GL_ARB_robustness

// GL_ARB_robustness_isolation

#ifndef GL_ARB_sample_locations

// Defines
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB 0x933D 
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB 0x933E 
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB 0x933F 
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB 0x9340 
#define GL_SAMPLE_LOCATION_ARB            0x8E50 
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB 0x9341 
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB 0x9342 
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB 0x9343 

// functions typedefs
typedef void (APIENTRYP PFN_GLFRAMEBUFFERSAMPLELOCATIONSFVARB_PROC) (GLenum target, GLuint start, GLsizei count, const GLfloat * v);
typedef void (APIENTRYP PFN_GLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARB_PROC) (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v);
typedef void (APIENTRYP PFN_GLEVALUATEDEPTHVALUESARB_PROC) (void);

// functions typedefs
GL_FUNC_DEF PFN_GLFRAMEBUFFERSAMPLELOCATIONSFVARB_PROC _glFramebufferSampleLocationsfvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARB_PROC _glNamedFramebufferSampleLocationsfvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEVALUATEDEPTHVALUESARB_PROC _glEvaluateDepthValuesARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glFramebufferSampleLocationsfvARB (GLenum target, GLuint start, GLsizei count, const GLfloat * v) { return _glFramebufferSampleLocationsfvARB_(target, start, count, v); };
inline void glNamedFramebufferSampleLocationsfvARB (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) { return _glNamedFramebufferSampleLocationsfvARB_(framebuffer, start, count, v); };
inline void glEvaluateDepthValuesARB (void) { return _glEvaluateDepthValuesARB_(); };
#endif //GL_ARB_sample_locations

#ifndef GL_ARB_sample_shading

// Defines
#define GL_SAMPLE_SHADING_ARB             0x8C36 
#define GL_MIN_SAMPLE_SHADING_VALUE_ARB   0x8C37 

// functions typedefs
typedef void (APIENTRYP PFN_GLMINSAMPLESHADINGARB_PROC) (GLfloat value);

// functions typedefs
GL_FUNC_DEF PFN_GLMINSAMPLESHADINGARB_PROC _glMinSampleShadingARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glMinSampleShadingARB (GLfloat value) { return _glMinSampleShadingARB_(value); };
#endif //GL_ARB_sample_shading

// GL_ARB_sampler_objects

// GL_ARB_seamless_cube_map

// GL_ARB_seamless_cubemap_per_texture

// GL_ARB_separate_shader_objects

// GL_ARB_shader_atomic_counter_ops

// GL_ARB_shader_atomic_counters

// GL_ARB_shader_ballot

// GL_ARB_shader_bit_encoding

// GL_ARB_shader_clock

// GL_ARB_shader_draw_parameters

// GL_ARB_shader_group_vote

// GL_ARB_shader_image_load_store

// GL_ARB_shader_image_size

// GL_ARB_shader_precision

// GL_ARB_shader_stencil_export

// GL_ARB_shader_storage_buffer_object

// GL_ARB_shader_subroutine

// GL_ARB_shader_texture_image_samples

// GL_ARB_shader_viewport_layer_array

// GL_ARB_shading_language_420pack

#ifndef GL_ARB_shading_language_include

// Defines
#define GL_SHADER_INCLUDE_ARB             0x8DAE 
#define GL_NAMED_STRING_LENGTH_ARB        0x8DE9 
#define GL_NAMED_STRING_TYPE_ARB          0x8DEA 

// functions typedefs
typedef void (APIENTRYP PFN_GLNAMEDSTRINGARB_PROC) (GLenum type, GLint namelen, const GLchar * name, GLint stringlen, const GLchar * string);
typedef void (APIENTRYP PFN_GLDELETENAMEDSTRINGARB_PROC) (GLint namelen, const GLchar * name);
typedef void (APIENTRYP PFN_GLCOMPILESHADERINCLUDEARB_PROC) (GLuint shader, GLsizei count, const GLchar * const * path, const GLint * length);
typedef GLboolean (APIENTRYP PFN_GLISNAMEDSTRINGARB_PROC) (GLint namelen, const GLchar * name);
typedef void (APIENTRYP PFN_GLGETNAMEDSTRINGARB_PROC) (GLint namelen, const GLchar * name, GLsizei bufSize, GLint * stringlen, GLchar * string);
typedef void (APIENTRYP PFN_GLGETNAMEDSTRINGIVARB_PROC) (GLint namelen, const GLchar * name, GLenum pname, GLint * params);

// functions typedefs
GL_FUNC_DEF PFN_GLNAMEDSTRINGARB_PROC _glNamedStringARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETENAMEDSTRINGARB_PROC _glDeleteNamedStringARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPILESHADERINCLUDEARB_PROC _glCompileShaderIncludeARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISNAMEDSTRINGARB_PROC _glIsNamedStringARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDSTRINGARB_PROC _glGetNamedStringARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDSTRINGIVARB_PROC _glGetNamedStringivARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glNamedStringARB (GLenum type, GLint namelen, const GLchar * name, GLint stringlen, const GLchar * string) { return _glNamedStringARB_(type, namelen, name, stringlen, string); };
inline void glDeleteNamedStringARB (GLint namelen, const GLchar * name) { return _glDeleteNamedStringARB_(namelen, name); };
inline void glCompileShaderIncludeARB (GLuint shader, GLsizei count, const GLchar * const * path, const GLint * length) { return _glCompileShaderIncludeARB_(shader, count, path, length); };
inline GLboolean glIsNamedStringARB (GLint namelen, const GLchar * name) { return _glIsNamedStringARB_(namelen, name); };
inline void glGetNamedStringARB (GLint namelen, const GLchar * name, GLsizei bufSize, GLint * stringlen, GLchar * string) { return _glGetNamedStringARB_(namelen, name, bufSize, stringlen, string); };
inline void glGetNamedStringivARB (GLint namelen, const GLchar * name, GLenum pname, GLint * params) { return _glGetNamedStringivARB_(namelen, name, pname, params); };
#endif //GL_ARB_shading_language_include

// GL_ARB_shading_language_packing

#ifndef GL_ARB_sparse_buffer

// Defines
#define GL_SPARSE_STORAGE_BIT_ARB         0x0400 
#define GL_SPARSE_BUFFER_PAGE_SIZE_ARB    0x82F8 

// functions typedefs
typedef void (APIENTRYP PFN_GLBUFFERPAGECOMMITMENTARB_PROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
typedef void (APIENTRYP PFN_GLNAMEDBUFFERPAGECOMMITMENTEXT_PROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
typedef void (APIENTRYP PFN_GLNAMEDBUFFERPAGECOMMITMENTARB_PROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);

// functions typedefs
GL_FUNC_DEF PFN_GLBUFFERPAGECOMMITMENTARB_PROC _glBufferPageCommitmentARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDBUFFERPAGECOMMITMENTEXT_PROC _glNamedBufferPageCommitmentEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDBUFFERPAGECOMMITMENTARB_PROC _glNamedBufferPageCommitmentARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBufferPageCommitmentARB (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) { return _glBufferPageCommitmentARB_(target, offset, size, commit); };
inline void glNamedBufferPageCommitmentEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) { return _glNamedBufferPageCommitmentEXT_(buffer, offset, size, commit); };
inline void glNamedBufferPageCommitmentARB (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) { return _glNamedBufferPageCommitmentARB_(buffer, offset, size, commit); };
#endif //GL_ARB_sparse_buffer

#ifndef GL_ARB_sparse_texture

// Defines
#define GL_TEXTURE_SPARSE_ARB             0x91A6 
#define GL_VIRTUAL_PAGE_SIZE_INDEX_ARB    0x91A7 
#define GL_NUM_SPARSE_LEVELS_ARB          0x91AA 
#define GL_NUM_VIRTUAL_PAGE_SIZES_ARB     0x91A8 
#define GL_VIRTUAL_PAGE_SIZE_X_ARB        0x9195 
#define GL_VIRTUAL_PAGE_SIZE_Y_ARB        0x9196 
#define GL_VIRTUAL_PAGE_SIZE_Z_ARB        0x9197 
#define GL_MAX_SPARSE_TEXTURE_SIZE_ARB    0x9198 
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB 0x9199 
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB 0x919A 
#define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB 0x91A9 

// functions typedefs
typedef void (APIENTRYP PFN_GLTEXPAGECOMMITMENTARB_PROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);

// functions typedefs
GL_FUNC_DEF PFN_GLTEXPAGECOMMITMENTARB_PROC _glTexPageCommitmentARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glTexPageCommitmentARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { return _glTexPageCommitmentARB_(target, level, xoffset, yoffset, zoffset, width, height, depth, commit); };
#endif //GL_ARB_sparse_texture

// GL_ARB_sparse_texture2

// GL_ARB_sparse_texture_clamp

// GL_ARB_spirv_extensions

// GL_ARB_stencil_texturing

// GL_ARB_sync

// GL_ARB_tessellation_shader

// GL_ARB_texture_barrier

#ifndef GL_ARB_texture_border_clamp

// Defines
#define GL_CLAMP_TO_BORDER_ARB            0x812D 
#endif //GL_ARB_texture_border_clamp

#ifndef GL_ARB_texture_buffer_object

// Defines
#define GL_TEXTURE_BUFFER_ARB             0x8C2A 
#define GL_MAX_TEXTURE_BUFFER_SIZE_ARB    0x8C2B 
#define GL_TEXTURE_BINDING_BUFFER_ARB     0x8C2C 
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D 
#define GL_TEXTURE_BUFFER_FORMAT_ARB      0x8C2E 

// functions typedefs
typedef void (APIENTRYP PFN_GLTEXBUFFERARB_PROC) (GLenum target, GLenum internalformat, GLuint buffer);

// functions typedefs
GL_FUNC_DEF PFN_GLTEXBUFFERARB_PROC _glTexBufferARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glTexBufferARB (GLenum target, GLenum internalformat, GLuint buffer) { return _glTexBufferARB_(target, internalformat, buffer); };
#endif //GL_ARB_texture_buffer_object

// GL_ARB_texture_buffer_object_rgb32

// GL_ARB_texture_buffer_range

#ifndef GL_ARB_texture_compression_bptc

// Defines
#define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB 0x8E8C 
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB 0x8E8D 
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB 0x8E8E 
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB 0x8E8F 
#endif //GL_ARB_texture_compression_bptc

// GL_ARB_texture_compression_rgtc

#ifndef GL_ARB_texture_cube_map_array

// Defines
#define GL_TEXTURE_CUBE_MAP_ARRAY_ARB     0x9009 
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB 0x900A 
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB 0x900B 
#define GL_SAMPLER_CUBE_MAP_ARRAY_ARB     0x900C 
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB 0x900D 
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900E 
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900F 
#endif //GL_ARB_texture_cube_map_array

// GL_ARB_texture_filter_anisotropic

#ifndef GL_ARB_texture_filter_minmax

// Defines
#define GL_TEXTURE_REDUCTION_MODE_ARB     0x9366 
#define GL_WEIGHTED_AVERAGE_ARB           0x9367 
#endif //GL_ARB_texture_filter_minmax

#ifndef GL_ARB_texture_gather

// Defines
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5E 
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5F 
#define GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB 0x8F9F 
#endif //GL_ARB_texture_gather

// GL_ARB_texture_mirror_clamp_to_edge

#ifndef GL_ARB_texture_mirrored_repeat

// Defines
#define GL_MIRRORED_REPEAT_ARB            0x8370 
#endif //GL_ARB_texture_mirrored_repeat

// GL_ARB_texture_multisample

// GL_ARB_texture_non_power_of_two

// GL_ARB_texture_query_levels

// GL_ARB_texture_query_lod

// GL_ARB_texture_rg

// GL_ARB_texture_rgb10_a2ui

// GL_ARB_texture_stencil8

// GL_ARB_texture_storage

// GL_ARB_texture_storage_multisample

// GL_ARB_texture_swizzle

// GL_ARB_texture_view

// GL_ARB_timer_query

// GL_ARB_transform_feedback2

// GL_ARB_transform_feedback3

// GL_ARB_transform_feedback_instanced

#ifndef GL_ARB_transform_feedback_overflow_query

// Defines
#define GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB 0x82EC 
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB 0x82ED 
#endif //GL_ARB_transform_feedback_overflow_query

// GL_ARB_uniform_buffer_object

// GL_ARB_vertex_array_bgra

// GL_ARB_vertex_array_object

// GL_ARB_vertex_attrib_64bit

// GL_ARB_vertex_attrib_binding

// GL_ARB_vertex_type_10f_11f_11f_rev

// GL_ARB_vertex_type_2_10_10_10_rev

// GL_ARB_viewport_array

#ifndef GL_KHR_blend_equation_advanced

// Defines
#define GL_MULTIPLY_KHR                   0x9294 
#define GL_SCREEN_KHR                     0x9295 
#define GL_OVERLAY_KHR                    0x9296 
#define GL_DARKEN_KHR                     0x9297 
#define GL_LIGHTEN_KHR                    0x9298 
#define GL_COLORDODGE_KHR                 0x9299 
#define GL_COLORBURN_KHR                  0x929A 
#define GL_HARDLIGHT_KHR                  0x929B 
#define GL_SOFTLIGHT_KHR                  0x929C 
#define GL_DIFFERENCE_KHR                 0x929E 
#define GL_EXCLUSION_KHR                  0x92A0 
#define GL_HSL_HUE_KHR                    0x92AD 
#define GL_HSL_SATURATION_KHR             0x92AE 
#define GL_HSL_COLOR_KHR                  0x92AF 
#define GL_HSL_LUMINOSITY_KHR             0x92B0 

// functions typedefs
typedef void (APIENTRYP PFN_GLBLENDBARRIERKHR_PROC) (void);

// functions typedefs
GL_FUNC_DEF PFN_GLBLENDBARRIERKHR_PROC _glBlendBarrierKHR_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBlendBarrierKHR (void) { return _glBlendBarrierKHR_(); };
#endif //GL_KHR_blend_equation_advanced

#ifndef GL_KHR_blend_equation_advanced_coherent

// Defines
#define GL_BLEND_ADVANCED_COHERENT_KHR    0x9285 
#endif //GL_KHR_blend_equation_advanced_coherent

// GL_KHR_context_flush_control

// GL_KHR_debug

#ifndef GL_KHR_no_error

// Defines
#define GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR  0x00000008 
#endif //GL_KHR_no_error

#ifndef GL_KHR_parallel_shader_compile

// Defines
#define GL_MAX_SHADER_COMPILER_THREADS_KHR 0x91B0 
#define GL_COMPLETION_STATUS_KHR          0x91B1 

// functions typedefs
typedef void (APIENTRYP PFN_GLMAXSHADERCOMPILERTHREADSKHR_PROC) (GLuint count);

// functions typedefs
GL_FUNC_DEF PFN_GLMAXSHADERCOMPILERTHREADSKHR_PROC _glMaxShaderCompilerThreadsKHR_ GL_FUNC_DEF2;

// functions inline wrap
inline void glMaxShaderCompilerThreadsKHR (GLuint count) { return _glMaxShaderCompilerThreadsKHR_(count); };
#endif //GL_KHR_parallel_shader_compile

// GL_KHR_robust_buffer_access_behavior

#ifndef GL_KHR_robustness

// Defines
#define GL_CONTEXT_ROBUST_ACCESS          0x90F3 
#endif //GL_KHR_robustness

#ifndef GL_KHR_shader_subgroup

// Defines
#define GL_SUBGROUP_SIZE_KHR              0x9532 
#define GL_SUBGROUP_SUPPORTED_STAGES_KHR  0x9533 
#define GL_SUBGROUP_SUPPORTED_FEATURES_KHR 0x9534 
#define GL_SUBGROUP_QUAD_ALL_STAGES_KHR   0x9535 
#define GL_SUBGROUP_FEATURE_BASIC_BIT_KHR 0x00000001 
#define GL_SUBGROUP_FEATURE_VOTE_BIT_KHR  0x00000002 
#define GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR 0x00000004 
#define GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR 0x00000008 
#define GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR 0x00000010 
#define GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR 0x00000020 
#define GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR 0x00000040 
#define GL_SUBGROUP_FEATURE_QUAD_BIT_KHR  0x00000080 
#endif //GL_KHR_shader_subgroup

#ifndef GL_KHR_texture_compression_astc_hdr

// Defines
#define GL_COMPRESSED_RGBA_ASTC_4x4_KHR   0x93B0 
#define GL_COMPRESSED_RGBA_ASTC_5x4_KHR   0x93B1 
#define GL_COMPRESSED_RGBA_ASTC_5x5_KHR   0x93B2 
#define GL_COMPRESSED_RGBA_ASTC_6x5_KHR   0x93B3 
#define GL_COMPRESSED_RGBA_ASTC_6x6_KHR   0x93B4 
#define GL_COMPRESSED_RGBA_ASTC_8x5_KHR   0x93B5 
#define GL_COMPRESSED_RGBA_ASTC_8x6_KHR   0x93B6 
#define GL_COMPRESSED_RGBA_ASTC_8x8_KHR   0x93B7 
#define GL_COMPRESSED_RGBA_ASTC_10x5_KHR  0x93B8 
#define GL_COMPRESSED_RGBA_ASTC_10x6_KHR  0x93B9 
#define GL_COMPRESSED_RGBA_ASTC_10x8_KHR  0x93BA 
#define GL_COMPRESSED_RGBA_ASTC_10x10_KHR 0x93BB 
#define GL_COMPRESSED_RGBA_ASTC_12x10_KHR 0x93BC 
#define GL_COMPRESSED_RGBA_ASTC_12x12_KHR 0x93BD 
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR 0x93D0 
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR 0x93D1 
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR 0x93D2 
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR 0x93D3 
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR 0x93D4 
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR 0x93D5 
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR 0x93D6 
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR 0x93D7 
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR 0x93D8 
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR 0x93D9 
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR 0x93DA 
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR 0x93DB 
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR 0x93DC 
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR 0x93DD 
#endif //GL_KHR_texture_compression_astc_hdr

// GL_KHR_texture_compression_astc_ldr

// GL_KHR_texture_compression_astc_sliced_3d

#ifndef GL_AMD_framebuffer_multisample_advanced

// Defines
#define GL_RENDERBUFFER_STORAGE_SAMPLES_AMD 0x91B2 
#define GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD 0x91B3 
#define GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD 0x91B4 
#define GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD 0x91B5 
#define GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD 0x91B6 
#define GL_SUPPORTED_MULTISAMPLE_MODES_AMD 0x91B7 

// functions typedefs
typedef void (APIENTRYP PFN_GLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMD_PROC) (GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMD_PROC) (GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height);

// functions typedefs
GL_FUNC_DEF PFN_GLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMD_PROC _glRenderbufferStorageMultisampleAdvancedAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMD_PROC _glNamedRenderbufferStorageMultisampleAdvancedAMD_ GL_FUNC_DEF2;

// functions inline wrap
inline void glRenderbufferStorageMultisampleAdvancedAMD (GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height) { return _glRenderbufferStorageMultisampleAdvancedAMD_(target, samples, storageSamples, internalformat, width, height); };
inline void glNamedRenderbufferStorageMultisampleAdvancedAMD (GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height) { return _glNamedRenderbufferStorageMultisampleAdvancedAMD_(renderbuffer, samples, storageSamples, internalformat, width, height); };
#endif //GL_AMD_framebuffer_multisample_advanced

#ifndef GL_AMD_performance_monitor

// Defines
#define GL_COUNTER_TYPE_AMD               0x8BC0 
#define GL_COUNTER_RANGE_AMD              0x8BC1 
#define GL_UNSIGNED_INT64_AMD             0x8BC2 
#define GL_PERCENTAGE_AMD                 0x8BC3 
#define GL_PERFMON_RESULT_AVAILABLE_AMD   0x8BC4 
#define GL_PERFMON_RESULT_SIZE_AMD        0x8BC5 
#define GL_PERFMON_RESULT_AMD             0x8BC6 

// functions typedefs
typedef void (APIENTRYP PFN_GLGETPERFMONITORGROUPSAMD_PROC) (GLint * numGroups, GLsizei groupsSize, GLuint * groups);
typedef void (APIENTRYP PFN_GLGETPERFMONITORCOUNTERSAMD_PROC) (GLuint group, GLint * numCounters, GLint * maxActiveCounters, GLsizei counterSize, GLuint * counters);
typedef void (APIENTRYP PFN_GLGETPERFMONITORGROUPSTRINGAMD_PROC) (GLuint group, GLsizei bufSize, GLsizei * length, GLchar * groupString);
typedef void (APIENTRYP PFN_GLGETPERFMONITORCOUNTERSTRINGAMD_PROC) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei * length, GLchar * counterString);
typedef void (APIENTRYP PFN_GLGETPERFMONITORCOUNTERINFOAMD_PROC) (GLuint group, GLuint counter, GLenum pname, void * data);
typedef void (APIENTRYP PFN_GLGENPERFMONITORSAMD_PROC) (GLsizei n, GLuint * monitors);
typedef void (APIENTRYP PFN_GLDELETEPERFMONITORSAMD_PROC) (GLsizei n, GLuint * monitors);
typedef void (APIENTRYP PFN_GLSELECTPERFMONITORCOUNTERSAMD_PROC) (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint * counterList);
typedef void (APIENTRYP PFN_GLBEGINPERFMONITORAMD_PROC) (GLuint monitor);
typedef void (APIENTRYP PFN_GLENDPERFMONITORAMD_PROC) (GLuint monitor);
typedef void (APIENTRYP PFN_GLGETPERFMONITORCOUNTERDATAAMD_PROC) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint * data, GLint * bytesWritten);

// functions typedefs
GL_FUNC_DEF PFN_GLGETPERFMONITORGROUPSAMD_PROC _glGetPerfMonitorGroupsAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPERFMONITORCOUNTERSAMD_PROC _glGetPerfMonitorCountersAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPERFMONITORGROUPSTRINGAMD_PROC _glGetPerfMonitorGroupStringAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPERFMONITORCOUNTERSTRINGAMD_PROC _glGetPerfMonitorCounterStringAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPERFMONITORCOUNTERINFOAMD_PROC _glGetPerfMonitorCounterInfoAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENPERFMONITORSAMD_PROC _glGenPerfMonitorsAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEPERFMONITORSAMD_PROC _glDeletePerfMonitorsAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSELECTPERFMONITORCOUNTERSAMD_PROC _glSelectPerfMonitorCountersAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBEGINPERFMONITORAMD_PROC _glBeginPerfMonitorAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENDPERFMONITORAMD_PROC _glEndPerfMonitorAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPERFMONITORCOUNTERDATAAMD_PROC _glGetPerfMonitorCounterDataAMD_ GL_FUNC_DEF2;

// functions inline wrap
inline void glGetPerfMonitorGroupsAMD (GLint * numGroups, GLsizei groupsSize, GLuint * groups) { return _glGetPerfMonitorGroupsAMD_(numGroups, groupsSize, groups); };
inline void glGetPerfMonitorCountersAMD (GLuint group, GLint * numCounters, GLint * maxActiveCounters, GLsizei counterSize, GLuint * counters) { return _glGetPerfMonitorCountersAMD_(group, numCounters, maxActiveCounters, counterSize, counters); };
inline void glGetPerfMonitorGroupStringAMD (GLuint group, GLsizei bufSize, GLsizei * length, GLchar * groupString) { return _glGetPerfMonitorGroupStringAMD_(group, bufSize, length, groupString); };
inline void glGetPerfMonitorCounterStringAMD (GLuint group, GLuint counter, GLsizei bufSize, GLsizei * length, GLchar * counterString) { return _glGetPerfMonitorCounterStringAMD_(group, counter, bufSize, length, counterString); };
inline void glGetPerfMonitorCounterInfoAMD (GLuint group, GLuint counter, GLenum pname, void * data) { return _glGetPerfMonitorCounterInfoAMD_(group, counter, pname, data); };
inline void glGenPerfMonitorsAMD (GLsizei n, GLuint * monitors) { return _glGenPerfMonitorsAMD_(n, monitors); };
inline void glDeletePerfMonitorsAMD (GLsizei n, GLuint * monitors) { return _glDeletePerfMonitorsAMD_(n, monitors); };
inline void glSelectPerfMonitorCountersAMD (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint * counterList) { return _glSelectPerfMonitorCountersAMD_(monitor, enable, group, numCounters, counterList); };
inline void glBeginPerfMonitorAMD (GLuint monitor) { return _glBeginPerfMonitorAMD_(monitor); };
inline void glEndPerfMonitorAMD (GLuint monitor) { return _glEndPerfMonitorAMD_(monitor); };
inline void glGetPerfMonitorCounterDataAMD (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint * data, GLint * bytesWritten) { return _glGetPerfMonitorCounterDataAMD_(monitor, pname, dataSize, data, bytesWritten); };
#endif //GL_AMD_performance_monitor

#ifndef GL_APPLE_rgb_422

// Defines
#define GL_RGB_422_APPLE                  0x8A1F 
#define GL_UNSIGNED_SHORT_8_8_APPLE       0x85BA 
#define GL_UNSIGNED_SHORT_8_8_REV_APPLE   0x85BB 
#define GL_RGB_RAW_422_APPLE              0x8A51 
#endif //GL_APPLE_rgb_422

#ifndef GL_EXT_EGL_image_storage

// functions typedefs
typedef void (APIENTRYP PFN_GLEGLIMAGETARGETTEXSTORAGEEXT_PROC) (GLenum target, GLeglImageOES image, const GLint * attrib_list);
typedef void (APIENTRYP PFN_GLEGLIMAGETARGETTEXTURESTORAGEEXT_PROC) (GLuint texture, GLeglImageOES image, const GLint * attrib_list);

// functions typedefs
GL_FUNC_DEF PFN_GLEGLIMAGETARGETTEXSTORAGEEXT_PROC _glEGLImageTargetTexStorageEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEGLIMAGETARGETTEXTURESTORAGEEXT_PROC _glEGLImageTargetTextureStorageEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glEGLImageTargetTexStorageEXT (GLenum target, GLeglImageOES image, const GLint * attrib_list) { return _glEGLImageTargetTexStorageEXT_(target, image, attrib_list); };
inline void glEGLImageTargetTextureStorageEXT (GLuint texture, GLeglImageOES image, const GLint * attrib_list) { return _glEGLImageTargetTextureStorageEXT_(texture, image, attrib_list); };
#endif //GL_EXT_EGL_image_storage

// GL_EXT_EGL_sync

#ifndef GL_EXT_debug_label

// Defines
#define GL_PROGRAM_PIPELINE_OBJECT_EXT    0x8A4F 
#define GL_PROGRAM_OBJECT_EXT             0x8B40 
#define GL_SHADER_OBJECT_EXT              0x8B48 
#define GL_BUFFER_OBJECT_EXT              0x9151 
#define GL_QUERY_OBJECT_EXT               0x9153 
#define GL_VERTEX_ARRAY_OBJECT_EXT        0x9154 

// functions typedefs
typedef void (APIENTRYP PFN_GLLABELOBJECTEXT_PROC) (GLenum type, GLuint object, GLsizei length, const GLchar * label);
typedef void (APIENTRYP PFN_GLGETOBJECTLABELEXT_PROC) (GLenum type, GLuint object, GLsizei bufSize, GLsizei * length, GLchar * label);

// functions typedefs
GL_FUNC_DEF PFN_GLLABELOBJECTEXT_PROC _glLabelObjectEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETOBJECTLABELEXT_PROC _glGetObjectLabelEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glLabelObjectEXT (GLenum type, GLuint object, GLsizei length, const GLchar * label) { return _glLabelObjectEXT_(type, object, length, label); };
inline void glGetObjectLabelEXT (GLenum type, GLuint object, GLsizei bufSize, GLsizei * length, GLchar * label) { return _glGetObjectLabelEXT_(type, object, bufSize, length, label); };
#endif //GL_EXT_debug_label

#ifndef GL_EXT_debug_marker

// functions typedefs
typedef void (APIENTRYP PFN_GLINSERTEVENTMARKEREXT_PROC) (GLsizei length, const GLchar * marker);
typedef void (APIENTRYP PFN_GLPUSHGROUPMARKEREXT_PROC) (GLsizei length, const GLchar * marker);
typedef void (APIENTRYP PFN_GLPOPGROUPMARKEREXT_PROC) (void);

// functions typedefs
GL_FUNC_DEF PFN_GLINSERTEVENTMARKEREXT_PROC _glInsertEventMarkerEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPUSHGROUPMARKEREXT_PROC _glPushGroupMarkerEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOPGROUPMARKEREXT_PROC _glPopGroupMarkerEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glInsertEventMarkerEXT (GLsizei length, const GLchar * marker) { return _glInsertEventMarkerEXT_(length, marker); };
inline void glPushGroupMarkerEXT (GLsizei length, const GLchar * marker) { return _glPushGroupMarkerEXT_(length, marker); };
inline void glPopGroupMarkerEXT (void) { return _glPopGroupMarkerEXT_(); };
#endif //GL_EXT_debug_marker

#ifndef GL_EXT_direct_state_access

// Defines
#define GL_PROGRAM_MATRIX_EXT             0x8E2D 
#define GL_TRANSPOSE_PROGRAM_MATRIX_EXT   0x8E2E 
#define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0x8E2F 

// functions typedefs
typedef void (APIENTRYP PFN_GLMATRIXLOADFEXT_PROC) (GLenum mode, const GLfloat * m);
typedef void (APIENTRYP PFN_GLMATRIXLOADDEXT_PROC) (GLenum mode, const GLdouble * m);
typedef void (APIENTRYP PFN_GLMATRIXMULTFEXT_PROC) (GLenum mode, const GLfloat * m);
typedef void (APIENTRYP PFN_GLMATRIXMULTDEXT_PROC) (GLenum mode, const GLdouble * m);
typedef void (APIENTRYP PFN_GLMATRIXLOADIDENTITYEXT_PROC) (GLenum mode);
typedef void (APIENTRYP PFN_GLMATRIXROTATEFEXT_PROC) (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLMATRIXROTATEDEXT_PROC) (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFN_GLMATRIXSCALEFEXT_PROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLMATRIXSCALEDEXT_PROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFN_GLMATRIXTRANSLATEFEXT_PROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLMATRIXTRANSLATEDEXT_PROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFN_GLMATRIXFRUSTUMEXT_PROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (APIENTRYP PFN_GLMATRIXORTHOEXT_PROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (APIENTRYP PFN_GLMATRIXPOPEXT_PROC) (GLenum mode);
typedef void (APIENTRYP PFN_GLMATRIXPUSHEXT_PROC) (GLenum mode);
typedef void (APIENTRYP PFN_GLCLIENTATTRIBDEFAULTEXT_PROC) (GLbitfield mask);
typedef void (APIENTRYP PFN_GLPUSHCLIENTATTRIBDEFAULTEXT_PROC) (GLbitfield mask);
typedef void (APIENTRYP PFN_GLTEXTUREPARAMETERFEXT_PROC) (GLuint texture, GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLTEXTUREPARAMETERFVEXT_PROC) (GLuint texture, GLenum target, GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLTEXTUREPARAMETERIEXT_PROC) (GLuint texture, GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLTEXTUREPARAMETERIVEXT_PROC) (GLuint texture, GLenum target, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLTEXTUREIMAGE1DEXT_PROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLTEXTUREIMAGE2DEXT_PROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLTEXTURESUBIMAGE1DEXT_PROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLTEXTURESUBIMAGE2DEXT_PROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLCOPYTEXTUREIMAGE1DEXT_PROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (APIENTRYP PFN_GLCOPYTEXTUREIMAGE2DEXT_PROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (APIENTRYP PFN_GLCOPYTEXTURESUBIMAGE1DEXT_PROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (APIENTRYP PFN_GLCOPYTEXTURESUBIMAGE2DEXT_PROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLGETTEXTUREIMAGEEXT_PROC) (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
typedef void (APIENTRYP PFN_GLGETTEXTUREPARAMETERFVEXT_PROC) (GLuint texture, GLenum target, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETTEXTUREPARAMETERIVEXT_PROC) (GLuint texture, GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETTEXTURELEVELPARAMETERFVEXT_PROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETTEXTURELEVELPARAMETERIVEXT_PROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLTEXTUREIMAGE3DEXT_PROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLTEXTURESUBIMAGE3DEXT_PROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLCOPYTEXTURESUBIMAGE3DEXT_PROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLBINDMULTITEXTUREEXT_PROC) (GLenum texunit, GLenum target, GLuint texture);
typedef void (APIENTRYP PFN_GLMULTITEXCOORDPOINTEREXT_PROC) (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (APIENTRYP PFN_GLMULTITEXENVFEXT_PROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLMULTITEXENVFVEXT_PROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLMULTITEXENVIEXT_PROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLMULTITEXENVIVEXT_PROC) (GLenum texunit, GLenum target, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLMULTITEXGENDEXT_PROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
typedef void (APIENTRYP PFN_GLMULTITEXGENDVEXT_PROC) (GLenum texunit, GLenum coord, GLenum pname, const GLdouble * params);
typedef void (APIENTRYP PFN_GLMULTITEXGENFEXT_PROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLMULTITEXGENFVEXT_PROC) (GLenum texunit, GLenum coord, GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLMULTITEXGENIEXT_PROC) (GLenum texunit, GLenum coord, GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLMULTITEXGENIVEXT_PROC) (GLenum texunit, GLenum coord, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLGETMULTITEXENVFVEXT_PROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETMULTITEXENVIVEXT_PROC) (GLenum texunit, GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETMULTITEXGENDVEXT_PROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble * params);
typedef void (APIENTRYP PFN_GLGETMULTITEXGENFVEXT_PROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETMULTITEXGENIVEXT_PROC) (GLenum texunit, GLenum coord, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLMULTITEXPARAMETERIEXT_PROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLMULTITEXPARAMETERIVEXT_PROC) (GLenum texunit, GLenum target, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLMULTITEXPARAMETERFEXT_PROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLMULTITEXPARAMETERFVEXT_PROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLMULTITEXIMAGE1DEXT_PROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLMULTITEXIMAGE2DEXT_PROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLMULTITEXSUBIMAGE1DEXT_PROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLMULTITEXSUBIMAGE2DEXT_PROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLCOPYMULTITEXIMAGE1DEXT_PROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (APIENTRYP PFN_GLCOPYMULTITEXIMAGE2DEXT_PROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (APIENTRYP PFN_GLCOPYMULTITEXSUBIMAGE1DEXT_PROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (APIENTRYP PFN_GLCOPYMULTITEXSUBIMAGE2DEXT_PROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLGETMULTITEXIMAGEEXT_PROC) (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
typedef void (APIENTRYP PFN_GLGETMULTITEXPARAMETERFVEXT_PROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETMULTITEXPARAMETERIVEXT_PROC) (GLenum texunit, GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETMULTITEXLEVELPARAMETERFVEXT_PROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETMULTITEXLEVELPARAMETERIVEXT_PROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLMULTITEXIMAGE3DEXT_PROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLMULTITEXSUBIMAGE3DEXT_PROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLCOPYMULTITEXSUBIMAGE3DEXT_PROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLENABLECLIENTSTATEINDEXEDEXT_PROC) (GLenum array, GLuint index);
typedef void (APIENTRYP PFN_GLDISABLECLIENTSTATEINDEXEDEXT_PROC) (GLenum array, GLuint index);
typedef void (APIENTRYP PFN_GLGETFLOATINDEXEDVEXT_PROC) (GLenum target, GLuint index, GLfloat * data);
typedef void (APIENTRYP PFN_GLGETDOUBLEINDEXEDVEXT_PROC) (GLenum target, GLuint index, GLdouble * data);
typedef void (APIENTRYP PFN_GLGETPOINTERINDEXEDVEXT_PROC) (GLenum target, GLuint index, void * * data);
typedef void (APIENTRYP PFN_GLENABLEINDEXEDEXT_PROC) (GLenum target, GLuint index);
typedef void (APIENTRYP PFN_GLDISABLEINDEXEDEXT_PROC) (GLenum target, GLuint index);
typedef GLboolean (APIENTRYP PFN_GLISENABLEDINDEXEDEXT_PROC) (GLenum target, GLuint index);
typedef void (APIENTRYP PFN_GLGETINTEGERINDEXEDVEXT_PROC) (GLenum target, GLuint index, GLint * data);
typedef void (APIENTRYP PFN_GLGETBOOLEANINDEXEDVEXT_PROC) (GLenum target, GLuint index, GLboolean * data);
typedef void (APIENTRYP PFN_GLCOMPRESSEDTEXTUREIMAGE3DEXT_PROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits);
typedef void (APIENTRYP PFN_GLCOMPRESSEDTEXTUREIMAGE2DEXT_PROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits);
typedef void (APIENTRYP PFN_GLCOMPRESSEDTEXTUREIMAGE1DEXT_PROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits);
typedef void (APIENTRYP PFN_GLCOMPRESSEDTEXTURESUBIMAGE3DEXT_PROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits);
typedef void (APIENTRYP PFN_GLCOMPRESSEDTEXTURESUBIMAGE2DEXT_PROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits);
typedef void (APIENTRYP PFN_GLCOMPRESSEDTEXTURESUBIMAGE1DEXT_PROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits);
typedef void (APIENTRYP PFN_GLGETCOMPRESSEDTEXTUREIMAGEEXT_PROC) (GLuint texture, GLenum target, GLint lod, void * img);
typedef void (APIENTRYP PFN_GLCOMPRESSEDMULTITEXIMAGE3DEXT_PROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits);
typedef void (APIENTRYP PFN_GLCOMPRESSEDMULTITEXIMAGE2DEXT_PROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits);
typedef void (APIENTRYP PFN_GLCOMPRESSEDMULTITEXIMAGE1DEXT_PROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits);
typedef void (APIENTRYP PFN_GLCOMPRESSEDMULTITEXSUBIMAGE3DEXT_PROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits);
typedef void (APIENTRYP PFN_GLCOMPRESSEDMULTITEXSUBIMAGE2DEXT_PROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits);
typedef void (APIENTRYP PFN_GLCOMPRESSEDMULTITEXSUBIMAGE1DEXT_PROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits);
typedef void (APIENTRYP PFN_GLGETCOMPRESSEDMULTITEXIMAGEEXT_PROC) (GLenum texunit, GLenum target, GLint lod, void * img);
typedef void (APIENTRYP PFN_GLMATRIXLOADTRANSPOSEFEXT_PROC) (GLenum mode, const GLfloat * m);
typedef void (APIENTRYP PFN_GLMATRIXLOADTRANSPOSEDEXT_PROC) (GLenum mode, const GLdouble * m);
typedef void (APIENTRYP PFN_GLMATRIXMULTTRANSPOSEFEXT_PROC) (GLenum mode, const GLfloat * m);
typedef void (APIENTRYP PFN_GLMATRIXMULTTRANSPOSEDEXT_PROC) (GLenum mode, const GLdouble * m);
typedef void (APIENTRYP PFN_GLNAMEDBUFFERDATAEXT_PROC) (GLuint buffer, GLsizeiptr size, const void * data, GLenum usage);
typedef void (APIENTRYP PFN_GLNAMEDBUFFERSUBDATAEXT_PROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data);
typedef void * (APIENTRYP PFN_GLMAPNAMEDBUFFEREXT_PROC) (GLuint buffer, GLenum access);
typedef GLboolean (APIENTRYP PFN_GLUNMAPNAMEDBUFFEREXT_PROC) (GLuint buffer);
typedef void (APIENTRYP PFN_GLGETNAMEDBUFFERPARAMETERIVEXT_PROC) (GLuint buffer, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETNAMEDBUFFERPOINTERVEXT_PROC) (GLuint buffer, GLenum pname, void * * params);
typedef void (APIENTRYP PFN_GLGETNAMEDBUFFERSUBDATAEXT_PROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, void * data);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1FEXT_PROC) (GLuint program, GLint location, GLfloat v0);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2FEXT_PROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3FEXT_PROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4FEXT_PROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1IEXT_PROC) (GLuint program, GLint location, GLint v0);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2IEXT_PROC) (GLuint program, GLint location, GLint v0, GLint v1);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3IEXT_PROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4IEXT_PROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1FVEXT_PROC) (GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2FVEXT_PROC) (GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3FVEXT_PROC) (GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4FVEXT_PROC) (GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1IVEXT_PROC) (GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2IVEXT_PROC) (GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3IVEXT_PROC) (GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4IVEXT_PROC) (GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX2FVEXT_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX3FVEXT_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX4FVEXT_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX2X3FVEXT_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX3X2FVEXT_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX2X4FVEXT_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX4X2FVEXT_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX3X4FVEXT_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX4X3FVEXT_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLTEXTUREBUFFEREXT_PROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (APIENTRYP PFN_GLMULTITEXBUFFEREXT_PROC) (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (APIENTRYP PFN_GLTEXTUREPARAMETERIIVEXT_PROC) (GLuint texture, GLenum target, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLTEXTUREPARAMETERIUIVEXT_PROC) (GLuint texture, GLenum target, GLenum pname, const GLuint * params);
typedef void (APIENTRYP PFN_GLGETTEXTUREPARAMETERIIVEXT_PROC) (GLuint texture, GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETTEXTUREPARAMETERIUIVEXT_PROC) (GLuint texture, GLenum target, GLenum pname, GLuint * params);
typedef void (APIENTRYP PFN_GLMULTITEXPARAMETERIIVEXT_PROC) (GLenum texunit, GLenum target, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLMULTITEXPARAMETERIUIVEXT_PROC) (GLenum texunit, GLenum target, GLenum pname, const GLuint * params);
typedef void (APIENTRYP PFN_GLGETMULTITEXPARAMETERIIVEXT_PROC) (GLenum texunit, GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETMULTITEXPARAMETERIUIVEXT_PROC) (GLenum texunit, GLenum target, GLenum pname, GLuint * params);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1UIEXT_PROC) (GLuint program, GLint location, GLuint v0);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2UIEXT_PROC) (GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3UIEXT_PROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4UIEXT_PROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1UIVEXT_PROC) (GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2UIVEXT_PROC) (GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3UIVEXT_PROC) (GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4UIVEXT_PROC) (GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (APIENTRYP PFN_GLNAMEDPROGRAMLOCALPARAMETERS4FVEXT_PROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat * params);
typedef void (APIENTRYP PFN_GLNAMEDPROGRAMLOCALPARAMETERI4IEXT_PROC) (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (APIENTRYP PFN_GLNAMEDPROGRAMLOCALPARAMETERI4IVEXT_PROC) (GLuint program, GLenum target, GLuint index, const GLint * params);
typedef void (APIENTRYP PFN_GLNAMEDPROGRAMLOCALPARAMETERSI4IVEXT_PROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint * params);
typedef void (APIENTRYP PFN_GLNAMEDPROGRAMLOCALPARAMETERI4UIEXT_PROC) (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (APIENTRYP PFN_GLNAMEDPROGRAMLOCALPARAMETERI4UIVEXT_PROC) (GLuint program, GLenum target, GLuint index, const GLuint * params);
typedef void (APIENTRYP PFN_GLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXT_PROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint * params);
typedef void (APIENTRYP PFN_GLGETNAMEDPROGRAMLOCALPARAMETERIIVEXT_PROC) (GLuint program, GLenum target, GLuint index, GLint * params);
typedef void (APIENTRYP PFN_GLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXT_PROC) (GLuint program, GLenum target, GLuint index, GLuint * params);
typedef void (APIENTRYP PFN_GLENABLECLIENTSTATEIEXT_PROC) (GLenum array, GLuint index);
typedef void (APIENTRYP PFN_GLDISABLECLIENTSTATEIEXT_PROC) (GLenum array, GLuint index);
typedef void (APIENTRYP PFN_GLGETFLOATI_VEXT_PROC) (GLenum pname, GLuint index, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETDOUBLEI_VEXT_PROC) (GLenum pname, GLuint index, GLdouble * params);
typedef void (APIENTRYP PFN_GLGETPOINTERI_VEXT_PROC) (GLenum pname, GLuint index, void * * params);
typedef void (APIENTRYP PFN_GLNAMEDPROGRAMSTRINGEXT_PROC) (GLuint program, GLenum target, GLenum format, GLsizei len, const void * string);
typedef void (APIENTRYP PFN_GLNAMEDPROGRAMLOCALPARAMETER4DEXT_PROC) (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFN_GLNAMEDPROGRAMLOCALPARAMETER4DVEXT_PROC) (GLuint program, GLenum target, GLuint index, const GLdouble * params);
typedef void (APIENTRYP PFN_GLNAMEDPROGRAMLOCALPARAMETER4FEXT_PROC) (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRYP PFN_GLNAMEDPROGRAMLOCALPARAMETER4FVEXT_PROC) (GLuint program, GLenum target, GLuint index, const GLfloat * params);
typedef void (APIENTRYP PFN_GLGETNAMEDPROGRAMLOCALPARAMETERDVEXT_PROC) (GLuint program, GLenum target, GLuint index, GLdouble * params);
typedef void (APIENTRYP PFN_GLGETNAMEDPROGRAMLOCALPARAMETERFVEXT_PROC) (GLuint program, GLenum target, GLuint index, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETNAMEDPROGRAMIVEXT_PROC) (GLuint program, GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETNAMEDPROGRAMSTRINGEXT_PROC) (GLuint program, GLenum target, GLenum pname, void * string);
typedef void (APIENTRYP PFN_GLNAMEDRENDERBUFFERSTORAGEEXT_PROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLGETNAMEDRENDERBUFFERPARAMETERIVEXT_PROC) (GLuint renderbuffer, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXT_PROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXT_PROC) (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
typedef GLenum (APIENTRYP PFN_GLCHECKNAMEDFRAMEBUFFERSTATUSEXT_PROC) (GLuint framebuffer, GLenum target);
typedef void (APIENTRYP PFN_GLNAMEDFRAMEBUFFERTEXTURE1DEXT_PROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (APIENTRYP PFN_GLNAMEDFRAMEBUFFERTEXTURE2DEXT_PROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (APIENTRYP PFN_GLNAMEDFRAMEBUFFERTEXTURE3DEXT_PROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (APIENTRYP PFN_GLNAMEDFRAMEBUFFERRENDERBUFFEREXT_PROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (APIENTRYP PFN_GLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXT_PROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGENERATETEXTUREMIPMAPEXT_PROC) (GLuint texture, GLenum target);
typedef void (APIENTRYP PFN_GLGENERATEMULTITEXMIPMAPEXT_PROC) (GLenum texunit, GLenum target);
typedef void (APIENTRYP PFN_GLFRAMEBUFFERDRAWBUFFEREXT_PROC) (GLuint framebuffer, GLenum mode);
typedef void (APIENTRYP PFN_GLFRAMEBUFFERDRAWBUFFERSEXT_PROC) (GLuint framebuffer, GLsizei n, const GLenum * bufs);
typedef void (APIENTRYP PFN_GLFRAMEBUFFERREADBUFFEREXT_PROC) (GLuint framebuffer, GLenum mode);
typedef void (APIENTRYP PFN_GLGETFRAMEBUFFERPARAMETERIVEXT_PROC) (GLuint framebuffer, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLNAMEDCOPYBUFFERSUBDATAEXT_PROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (APIENTRYP PFN_GLNAMEDFRAMEBUFFERTEXTUREEXT_PROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (APIENTRYP PFN_GLNAMEDFRAMEBUFFERTEXTURELAYEREXT_PROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (APIENTRYP PFN_GLNAMEDFRAMEBUFFERTEXTUREFACEEXT_PROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (APIENTRYP PFN_GLTEXTURERENDERBUFFEREXT_PROC) (GLuint texture, GLenum target, GLuint renderbuffer);
typedef void (APIENTRYP PFN_GLMULTITEXRENDERBUFFEREXT_PROC) (GLenum texunit, GLenum target, GLuint renderbuffer);
typedef void (APIENTRYP PFN_GLVERTEXARRAYVERTEXOFFSETEXT_PROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFN_GLVERTEXARRAYCOLOROFFSETEXT_PROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFN_GLVERTEXARRAYEDGEFLAGOFFSETEXT_PROC) (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFN_GLVERTEXARRAYINDEXOFFSETEXT_PROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFN_GLVERTEXARRAYNORMALOFFSETEXT_PROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFN_GLVERTEXARRAYTEXCOORDOFFSETEXT_PROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFN_GLVERTEXARRAYMULTITEXCOORDOFFSETEXT_PROC) (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFN_GLVERTEXARRAYFOGCOORDOFFSETEXT_PROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFN_GLVERTEXARRAYSECONDARYCOLOROFFSETEXT_PROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFN_GLVERTEXARRAYVERTEXATTRIBOFFSETEXT_PROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFN_GLVERTEXARRAYVERTEXATTRIBIOFFSETEXT_PROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFN_GLENABLEVERTEXARRAYEXT_PROC) (GLuint vaobj, GLenum array);
typedef void (APIENTRYP PFN_GLDISABLEVERTEXARRAYEXT_PROC) (GLuint vaobj, GLenum array);
typedef void (APIENTRYP PFN_GLENABLEVERTEXARRAYATTRIBEXT_PROC) (GLuint vaobj, GLuint index);
typedef void (APIENTRYP PFN_GLDISABLEVERTEXARRAYATTRIBEXT_PROC) (GLuint vaobj, GLuint index);
typedef void (APIENTRYP PFN_GLGETVERTEXARRAYINTEGERVEXT_PROC) (GLuint vaobj, GLenum pname, GLint * param);
typedef void (APIENTRYP PFN_GLGETVERTEXARRAYPOINTERVEXT_PROC) (GLuint vaobj, GLenum pname, void * * param);
typedef void (APIENTRYP PFN_GLGETVERTEXARRAYINTEGERI_VEXT_PROC) (GLuint vaobj, GLuint index, GLenum pname, GLint * param);
typedef void (APIENTRYP PFN_GLGETVERTEXARRAYPOINTERI_VEXT_PROC) (GLuint vaobj, GLuint index, GLenum pname, void * * param);
typedef void * (APIENTRYP PFN_GLMAPNAMEDBUFFERRANGEEXT_PROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (APIENTRYP PFN_GLFLUSHMAPPEDNAMEDBUFFERRANGEEXT_PROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (APIENTRYP PFN_GLNAMEDBUFFERSTORAGEEXT_PROC) (GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags);
typedef void (APIENTRYP PFN_GLCLEARNAMEDBUFFERDATAEXT_PROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data);
typedef void (APIENTRYP PFN_GLCLEARNAMEDBUFFERSUBDATAEXT_PROC) (GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
typedef void (APIENTRYP PFN_GLNAMEDFRAMEBUFFERPARAMETERIEXT_PROC) (GLuint framebuffer, GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLGETNAMEDFRAMEBUFFERPARAMETERIVEXT_PROC) (GLuint framebuffer, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1DEXT_PROC) (GLuint program, GLint location, GLdouble x);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2DEXT_PROC) (GLuint program, GLint location, GLdouble x, GLdouble y);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3DEXT_PROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4DEXT_PROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1DVEXT_PROC) (GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2DVEXT_PROC) (GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3DVEXT_PROC) (GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4DVEXT_PROC) (GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX2DVEXT_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX3DVEXT_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX4DVEXT_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX2X3DVEXT_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX2X4DVEXT_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX3X2DVEXT_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX3X4DVEXT_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX4X2DVEXT_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMMATRIX4X3DVEXT_PROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (APIENTRYP PFN_GLTEXTUREBUFFERRANGEEXT_PROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRYP PFN_GLTEXTURESTORAGE1DEXT_PROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (APIENTRYP PFN_GLTEXTURESTORAGE2DEXT_PROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLTEXTURESTORAGE3DEXT_PROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (APIENTRYP PFN_GLTEXTURESTORAGE2DMULTISAMPLEEXT_PROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (APIENTRYP PFN_GLTEXTURESTORAGE3DMULTISAMPLEEXT_PROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (APIENTRYP PFN_GLVERTEXARRAYBINDVERTEXBUFFEREXT_PROC) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (APIENTRYP PFN_GLVERTEXARRAYVERTEXATTRIBFORMATEXT_PROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (APIENTRYP PFN_GLVERTEXARRAYVERTEXATTRIBIFORMATEXT_PROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRYP PFN_GLVERTEXARRAYVERTEXATTRIBLFORMATEXT_PROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRYP PFN_GLVERTEXARRAYVERTEXATTRIBBINDINGEXT_PROC) (GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (APIENTRYP PFN_GLVERTEXARRAYVERTEXBINDINGDIVISOREXT_PROC) (GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (APIENTRYP PFN_GLVERTEXARRAYVERTEXATTRIBLOFFSETEXT_PROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP PFN_GLTEXTUREPAGECOMMITMENTEXT_PROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
typedef void (APIENTRYP PFN_GLVERTEXARRAYVERTEXATTRIBDIVISOREXT_PROC) (GLuint vaobj, GLuint index, GLuint divisor);

// functions typedefs
GL_FUNC_DEF PFN_GLMATRIXLOADFEXT_PROC _glMatrixLoadfEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXLOADDEXT_PROC _glMatrixLoaddEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXMULTFEXT_PROC _glMatrixMultfEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXMULTDEXT_PROC _glMatrixMultdEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXLOADIDENTITYEXT_PROC _glMatrixLoadIdentityEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXROTATEFEXT_PROC _glMatrixRotatefEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXROTATEDEXT_PROC _glMatrixRotatedEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXSCALEFEXT_PROC _glMatrixScalefEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXSCALEDEXT_PROC _glMatrixScaledEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXTRANSLATEFEXT_PROC _glMatrixTranslatefEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXTRANSLATEDEXT_PROC _glMatrixTranslatedEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXFRUSTUMEXT_PROC _glMatrixFrustumEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXORTHOEXT_PROC _glMatrixOrthoEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXPOPEXT_PROC _glMatrixPopEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXPUSHEXT_PROC _glMatrixPushEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLIENTATTRIBDEFAULTEXT_PROC _glClientAttribDefaultEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPUSHCLIENTATTRIBDEFAULTEXT_PROC _glPushClientAttribDefaultEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREPARAMETERFEXT_PROC _glTextureParameterfEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREPARAMETERFVEXT_PROC _glTextureParameterfvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREPARAMETERIEXT_PROC _glTextureParameteriEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREPARAMETERIVEXT_PROC _glTextureParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREIMAGE1DEXT_PROC _glTextureImage1DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREIMAGE2DEXT_PROC _glTextureImage2DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESUBIMAGE1DEXT_PROC _glTextureSubImage1DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESUBIMAGE2DEXT_PROC _glTextureSubImage2DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYTEXTUREIMAGE1DEXT_PROC _glCopyTextureImage1DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYTEXTUREIMAGE2DEXT_PROC _glCopyTextureImage2DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYTEXTURESUBIMAGE1DEXT_PROC _glCopyTextureSubImage1DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYTEXTURESUBIMAGE2DEXT_PROC _glCopyTextureSubImage2DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXTUREIMAGEEXT_PROC _glGetTextureImageEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXTUREPARAMETERFVEXT_PROC _glGetTextureParameterfvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXTUREPARAMETERIVEXT_PROC _glGetTextureParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXTURELEVELPARAMETERFVEXT_PROC _glGetTextureLevelParameterfvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXTURELEVELPARAMETERIVEXT_PROC _glGetTextureLevelParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREIMAGE3DEXT_PROC _glTextureImage3DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESUBIMAGE3DEXT_PROC _glTextureSubImage3DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYTEXTURESUBIMAGE3DEXT_PROC _glCopyTextureSubImage3DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDMULTITEXTUREEXT_PROC _glBindMultiTextureEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORDPOINTEREXT_PROC _glMultiTexCoordPointerEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXENVFEXT_PROC _glMultiTexEnvfEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXENVFVEXT_PROC _glMultiTexEnvfvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXENVIEXT_PROC _glMultiTexEnviEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXENVIVEXT_PROC _glMultiTexEnvivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXGENDEXT_PROC _glMultiTexGendEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXGENDVEXT_PROC _glMultiTexGendvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXGENFEXT_PROC _glMultiTexGenfEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXGENFVEXT_PROC _glMultiTexGenfvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXGENIEXT_PROC _glMultiTexGeniEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXGENIVEXT_PROC _glMultiTexGenivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMULTITEXENVFVEXT_PROC _glGetMultiTexEnvfvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMULTITEXENVIVEXT_PROC _glGetMultiTexEnvivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMULTITEXGENDVEXT_PROC _glGetMultiTexGendvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMULTITEXGENFVEXT_PROC _glGetMultiTexGenfvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMULTITEXGENIVEXT_PROC _glGetMultiTexGenivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXPARAMETERIEXT_PROC _glMultiTexParameteriEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXPARAMETERIVEXT_PROC _glMultiTexParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXPARAMETERFEXT_PROC _glMultiTexParameterfEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXPARAMETERFVEXT_PROC _glMultiTexParameterfvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXIMAGE1DEXT_PROC _glMultiTexImage1DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXIMAGE2DEXT_PROC _glMultiTexImage2DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXSUBIMAGE1DEXT_PROC _glMultiTexSubImage1DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXSUBIMAGE2DEXT_PROC _glMultiTexSubImage2DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYMULTITEXIMAGE1DEXT_PROC _glCopyMultiTexImage1DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYMULTITEXIMAGE2DEXT_PROC _glCopyMultiTexImage2DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYMULTITEXSUBIMAGE1DEXT_PROC _glCopyMultiTexSubImage1DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYMULTITEXSUBIMAGE2DEXT_PROC _glCopyMultiTexSubImage2DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMULTITEXIMAGEEXT_PROC _glGetMultiTexImageEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMULTITEXPARAMETERFVEXT_PROC _glGetMultiTexParameterfvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMULTITEXPARAMETERIVEXT_PROC _glGetMultiTexParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMULTITEXLEVELPARAMETERFVEXT_PROC _glGetMultiTexLevelParameterfvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMULTITEXLEVELPARAMETERIVEXT_PROC _glGetMultiTexLevelParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXIMAGE3DEXT_PROC _glMultiTexImage3DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXSUBIMAGE3DEXT_PROC _glMultiTexSubImage3DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYMULTITEXSUBIMAGE3DEXT_PROC _glCopyMultiTexSubImage3DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENABLECLIENTSTATEINDEXEDEXT_PROC _glEnableClientStateIndexedEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDISABLECLIENTSTATEINDEXEDEXT_PROC _glDisableClientStateIndexedEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFLOATINDEXEDVEXT_PROC _glGetFloatIndexedvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETDOUBLEINDEXEDVEXT_PROC _glGetDoubleIndexedvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPOINTERINDEXEDVEXT_PROC _glGetPointerIndexedvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENABLEINDEXEDEXT_PROC _glEnableIndexedEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDISABLEINDEXEDEXT_PROC _glDisableIndexedEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISENABLEDINDEXEDEXT_PROC _glIsEnabledIndexedEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETINTEGERINDEXEDVEXT_PROC _glGetIntegerIndexedvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETBOOLEANINDEXEDVEXT_PROC _glGetBooleanIndexedvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDTEXTUREIMAGE3DEXT_PROC _glCompressedTextureImage3DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDTEXTUREIMAGE2DEXT_PROC _glCompressedTextureImage2DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDTEXTUREIMAGE1DEXT_PROC _glCompressedTextureImage1DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDTEXTURESUBIMAGE3DEXT_PROC _glCompressedTextureSubImage3DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDTEXTURESUBIMAGE2DEXT_PROC _glCompressedTextureSubImage2DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDTEXTURESUBIMAGE1DEXT_PROC _glCompressedTextureSubImage1DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOMPRESSEDTEXTUREIMAGEEXT_PROC _glGetCompressedTextureImageEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDMULTITEXIMAGE3DEXT_PROC _glCompressedMultiTexImage3DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDMULTITEXIMAGE2DEXT_PROC _glCompressedMultiTexImage2DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDMULTITEXIMAGE1DEXT_PROC _glCompressedMultiTexImage1DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDMULTITEXSUBIMAGE3DEXT_PROC _glCompressedMultiTexSubImage3DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDMULTITEXSUBIMAGE2DEXT_PROC _glCompressedMultiTexSubImage2DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDMULTITEXSUBIMAGE1DEXT_PROC _glCompressedMultiTexSubImage1DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOMPRESSEDMULTITEXIMAGEEXT_PROC _glGetCompressedMultiTexImageEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXLOADTRANSPOSEFEXT_PROC _glMatrixLoadTransposefEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXLOADTRANSPOSEDEXT_PROC _glMatrixLoadTransposedEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXMULTTRANSPOSEFEXT_PROC _glMatrixMultTransposefEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXMULTTRANSPOSEDEXT_PROC _glMatrixMultTransposedEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDBUFFERDATAEXT_PROC _glNamedBufferDataEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDBUFFERSUBDATAEXT_PROC _glNamedBufferSubDataEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAPNAMEDBUFFEREXT_PROC _glMapNamedBufferEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNMAPNAMEDBUFFEREXT_PROC _glUnmapNamedBufferEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDBUFFERPARAMETERIVEXT_PROC _glGetNamedBufferParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDBUFFERPOINTERVEXT_PROC _glGetNamedBufferPointervEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDBUFFERSUBDATAEXT_PROC _glGetNamedBufferSubDataEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1FEXT_PROC _glProgramUniform1fEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2FEXT_PROC _glProgramUniform2fEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3FEXT_PROC _glProgramUniform3fEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4FEXT_PROC _glProgramUniform4fEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1IEXT_PROC _glProgramUniform1iEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2IEXT_PROC _glProgramUniform2iEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3IEXT_PROC _glProgramUniform3iEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4IEXT_PROC _glProgramUniform4iEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1FVEXT_PROC _glProgramUniform1fvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2FVEXT_PROC _glProgramUniform2fvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3FVEXT_PROC _glProgramUniform3fvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4FVEXT_PROC _glProgramUniform4fvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1IVEXT_PROC _glProgramUniform1ivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2IVEXT_PROC _glProgramUniform2ivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3IVEXT_PROC _glProgramUniform3ivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4IVEXT_PROC _glProgramUniform4ivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX2FVEXT_PROC _glProgramUniformMatrix2fvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX3FVEXT_PROC _glProgramUniformMatrix3fvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX4FVEXT_PROC _glProgramUniformMatrix4fvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX2X3FVEXT_PROC _glProgramUniformMatrix2x3fvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX3X2FVEXT_PROC _glProgramUniformMatrix3x2fvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX2X4FVEXT_PROC _glProgramUniformMatrix2x4fvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX4X2FVEXT_PROC _glProgramUniformMatrix4x2fvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX3X4FVEXT_PROC _glProgramUniformMatrix3x4fvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX4X3FVEXT_PROC _glProgramUniformMatrix4x3fvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREBUFFEREXT_PROC _glTextureBufferEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXBUFFEREXT_PROC _glMultiTexBufferEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREPARAMETERIIVEXT_PROC _glTextureParameterIivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREPARAMETERIUIVEXT_PROC _glTextureParameterIuivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXTUREPARAMETERIIVEXT_PROC _glGetTextureParameterIivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXTUREPARAMETERIUIVEXT_PROC _glGetTextureParameterIuivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXPARAMETERIIVEXT_PROC _glMultiTexParameterIivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXPARAMETERIUIVEXT_PROC _glMultiTexParameterIuivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMULTITEXPARAMETERIIVEXT_PROC _glGetMultiTexParameterIivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMULTITEXPARAMETERIUIVEXT_PROC _glGetMultiTexParameterIuivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1UIEXT_PROC _glProgramUniform1uiEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2UIEXT_PROC _glProgramUniform2uiEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3UIEXT_PROC _glProgramUniform3uiEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4UIEXT_PROC _glProgramUniform4uiEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1UIVEXT_PROC _glProgramUniform1uivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2UIVEXT_PROC _glProgramUniform2uivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3UIVEXT_PROC _glProgramUniform3uivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4UIVEXT_PROC _glProgramUniform4uivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDPROGRAMLOCALPARAMETERS4FVEXT_PROC _glNamedProgramLocalParameters4fvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDPROGRAMLOCALPARAMETERI4IEXT_PROC _glNamedProgramLocalParameterI4iEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDPROGRAMLOCALPARAMETERI4IVEXT_PROC _glNamedProgramLocalParameterI4ivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDPROGRAMLOCALPARAMETERSI4IVEXT_PROC _glNamedProgramLocalParametersI4ivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDPROGRAMLOCALPARAMETERI4UIEXT_PROC _glNamedProgramLocalParameterI4uiEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDPROGRAMLOCALPARAMETERI4UIVEXT_PROC _glNamedProgramLocalParameterI4uivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXT_PROC _glNamedProgramLocalParametersI4uivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDPROGRAMLOCALPARAMETERIIVEXT_PROC _glGetNamedProgramLocalParameterIivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXT_PROC _glGetNamedProgramLocalParameterIuivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENABLECLIENTSTATEIEXT_PROC _glEnableClientStateiEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDISABLECLIENTSTATEIEXT_PROC _glDisableClientStateiEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFLOATI_VEXT_PROC _glGetFloati_vEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETDOUBLEI_VEXT_PROC _glGetDoublei_vEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPOINTERI_VEXT_PROC _glGetPointeri_vEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDPROGRAMSTRINGEXT_PROC _glNamedProgramStringEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDPROGRAMLOCALPARAMETER4DEXT_PROC _glNamedProgramLocalParameter4dEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDPROGRAMLOCALPARAMETER4DVEXT_PROC _glNamedProgramLocalParameter4dvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDPROGRAMLOCALPARAMETER4FEXT_PROC _glNamedProgramLocalParameter4fEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDPROGRAMLOCALPARAMETER4FVEXT_PROC _glNamedProgramLocalParameter4fvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDPROGRAMLOCALPARAMETERDVEXT_PROC _glGetNamedProgramLocalParameterdvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDPROGRAMLOCALPARAMETERFVEXT_PROC _glGetNamedProgramLocalParameterfvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDPROGRAMIVEXT_PROC _glGetNamedProgramivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDPROGRAMSTRINGEXT_PROC _glGetNamedProgramStringEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDRENDERBUFFERSTORAGEEXT_PROC _glNamedRenderbufferStorageEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDRENDERBUFFERPARAMETERIVEXT_PROC _glGetNamedRenderbufferParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXT_PROC _glNamedRenderbufferStorageMultisampleEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXT_PROC _glNamedRenderbufferStorageMultisampleCoverageEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCHECKNAMEDFRAMEBUFFERSTATUSEXT_PROC _glCheckNamedFramebufferStatusEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDFRAMEBUFFERTEXTURE1DEXT_PROC _glNamedFramebufferTexture1DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDFRAMEBUFFERTEXTURE2DEXT_PROC _glNamedFramebufferTexture2DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDFRAMEBUFFERTEXTURE3DEXT_PROC _glNamedFramebufferTexture3DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDFRAMEBUFFERRENDERBUFFEREXT_PROC _glNamedFramebufferRenderbufferEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXT_PROC _glGetNamedFramebufferAttachmentParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENERATETEXTUREMIPMAPEXT_PROC _glGenerateTextureMipmapEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENERATEMULTITEXMIPMAPEXT_PROC _glGenerateMultiTexMipmapEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAMEBUFFERDRAWBUFFEREXT_PROC _glFramebufferDrawBufferEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAMEBUFFERDRAWBUFFERSEXT_PROC _glFramebufferDrawBuffersEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAMEBUFFERREADBUFFEREXT_PROC _glFramebufferReadBufferEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFRAMEBUFFERPARAMETERIVEXT_PROC _glGetFramebufferParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDCOPYBUFFERSUBDATAEXT_PROC _glNamedCopyBufferSubDataEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDFRAMEBUFFERTEXTUREEXT_PROC _glNamedFramebufferTextureEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDFRAMEBUFFERTEXTURELAYEREXT_PROC _glNamedFramebufferTextureLayerEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDFRAMEBUFFERTEXTUREFACEEXT_PROC _glNamedFramebufferTextureFaceEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURERENDERBUFFEREXT_PROC _glTextureRenderbufferEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXRENDERBUFFEREXT_PROC _glMultiTexRenderbufferEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYVERTEXOFFSETEXT_PROC _glVertexArrayVertexOffsetEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYCOLOROFFSETEXT_PROC _glVertexArrayColorOffsetEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYEDGEFLAGOFFSETEXT_PROC _glVertexArrayEdgeFlagOffsetEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYINDEXOFFSETEXT_PROC _glVertexArrayIndexOffsetEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYNORMALOFFSETEXT_PROC _glVertexArrayNormalOffsetEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYTEXCOORDOFFSETEXT_PROC _glVertexArrayTexCoordOffsetEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYMULTITEXCOORDOFFSETEXT_PROC _glVertexArrayMultiTexCoordOffsetEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYFOGCOORDOFFSETEXT_PROC _glVertexArrayFogCoordOffsetEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYSECONDARYCOLOROFFSETEXT_PROC _glVertexArraySecondaryColorOffsetEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYVERTEXATTRIBOFFSETEXT_PROC _glVertexArrayVertexAttribOffsetEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYVERTEXATTRIBIOFFSETEXT_PROC _glVertexArrayVertexAttribIOffsetEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENABLEVERTEXARRAYEXT_PROC _glEnableVertexArrayEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDISABLEVERTEXARRAYEXT_PROC _glDisableVertexArrayEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENABLEVERTEXARRAYATTRIBEXT_PROC _glEnableVertexArrayAttribEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDISABLEVERTEXARRAYATTRIBEXT_PROC _glDisableVertexArrayAttribEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXARRAYINTEGERVEXT_PROC _glGetVertexArrayIntegervEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXARRAYPOINTERVEXT_PROC _glGetVertexArrayPointervEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXARRAYINTEGERI_VEXT_PROC _glGetVertexArrayIntegeri_vEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXARRAYPOINTERI_VEXT_PROC _glGetVertexArrayPointeri_vEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAPNAMEDBUFFERRANGEEXT_PROC _glMapNamedBufferRangeEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFLUSHMAPPEDNAMEDBUFFERRANGEEXT_PROC _glFlushMappedNamedBufferRangeEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDBUFFERSTORAGEEXT_PROC _glNamedBufferStorageEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARNAMEDBUFFERDATAEXT_PROC _glClearNamedBufferDataEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARNAMEDBUFFERSUBDATAEXT_PROC _glClearNamedBufferSubDataEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDFRAMEBUFFERPARAMETERIEXT_PROC _glNamedFramebufferParameteriEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDFRAMEBUFFERPARAMETERIVEXT_PROC _glGetNamedFramebufferParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1DEXT_PROC _glProgramUniform1dEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2DEXT_PROC _glProgramUniform2dEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3DEXT_PROC _glProgramUniform3dEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4DEXT_PROC _glProgramUniform4dEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1DVEXT_PROC _glProgramUniform1dvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2DVEXT_PROC _glProgramUniform2dvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3DVEXT_PROC _glProgramUniform3dvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4DVEXT_PROC _glProgramUniform4dvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX2DVEXT_PROC _glProgramUniformMatrix2dvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX3DVEXT_PROC _glProgramUniformMatrix3dvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX4DVEXT_PROC _glProgramUniformMatrix4dvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX2X3DVEXT_PROC _glProgramUniformMatrix2x3dvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX2X4DVEXT_PROC _glProgramUniformMatrix2x4dvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX3X2DVEXT_PROC _glProgramUniformMatrix3x2dvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX3X4DVEXT_PROC _glProgramUniformMatrix3x4dvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX4X2DVEXT_PROC _glProgramUniformMatrix4x2dvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMMATRIX4X3DVEXT_PROC _glProgramUniformMatrix4x3dvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREBUFFERRANGEEXT_PROC _glTextureBufferRangeEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESTORAGE1DEXT_PROC _glTextureStorage1DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESTORAGE2DEXT_PROC _glTextureStorage2DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESTORAGE3DEXT_PROC _glTextureStorage3DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESTORAGE2DMULTISAMPLEEXT_PROC _glTextureStorage2DMultisampleEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESTORAGE3DMULTISAMPLEEXT_PROC _glTextureStorage3DMultisampleEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYBINDVERTEXBUFFEREXT_PROC _glVertexArrayBindVertexBufferEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYVERTEXATTRIBFORMATEXT_PROC _glVertexArrayVertexAttribFormatEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYVERTEXATTRIBIFORMATEXT_PROC _glVertexArrayVertexAttribIFormatEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYVERTEXATTRIBLFORMATEXT_PROC _glVertexArrayVertexAttribLFormatEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYVERTEXATTRIBBINDINGEXT_PROC _glVertexArrayVertexAttribBindingEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYVERTEXBINDINGDIVISOREXT_PROC _glVertexArrayVertexBindingDivisorEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYVERTEXATTRIBLOFFSETEXT_PROC _glVertexArrayVertexAttribLOffsetEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREPAGECOMMITMENTEXT_PROC _glTexturePageCommitmentEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYVERTEXATTRIBDIVISOREXT_PROC _glVertexArrayVertexAttribDivisorEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glMatrixLoadfEXT (GLenum mode, const GLfloat * m) { return _glMatrixLoadfEXT_(mode, m); };
inline void glMatrixLoaddEXT (GLenum mode, const GLdouble * m) { return _glMatrixLoaddEXT_(mode, m); };
inline void glMatrixMultfEXT (GLenum mode, const GLfloat * m) { return _glMatrixMultfEXT_(mode, m); };
inline void glMatrixMultdEXT (GLenum mode, const GLdouble * m) { return _glMatrixMultdEXT_(mode, m); };
inline void glMatrixLoadIdentityEXT (GLenum mode) { return _glMatrixLoadIdentityEXT_(mode); };
inline void glMatrixRotatefEXT (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) { return _glMatrixRotatefEXT_(mode, angle, x, y, z); };
inline void glMatrixRotatedEXT (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) { return _glMatrixRotatedEXT_(mode, angle, x, y, z); };
inline void glMatrixScalefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z) { return _glMatrixScalefEXT_(mode, x, y, z); };
inline void glMatrixScaledEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z) { return _glMatrixScaledEXT_(mode, x, y, z); };
inline void glMatrixTranslatefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z) { return _glMatrixTranslatefEXT_(mode, x, y, z); };
inline void glMatrixTranslatedEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z) { return _glMatrixTranslatedEXT_(mode, x, y, z); };
inline void glMatrixFrustumEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { return _glMatrixFrustumEXT_(mode, left, right, bottom, top, zNear, zFar); };
inline void glMatrixOrthoEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { return _glMatrixOrthoEXT_(mode, left, right, bottom, top, zNear, zFar); };
inline void glMatrixPopEXT (GLenum mode) { return _glMatrixPopEXT_(mode); };
inline void glMatrixPushEXT (GLenum mode) { return _glMatrixPushEXT_(mode); };
inline void glClientAttribDefaultEXT (GLbitfield mask) { return _glClientAttribDefaultEXT_(mask); };
inline void glPushClientAttribDefaultEXT (GLbitfield mask) { return _glPushClientAttribDefaultEXT_(mask); };
inline void glTextureParameterfEXT (GLuint texture, GLenum target, GLenum pname, GLfloat param) { return _glTextureParameterfEXT_(texture, target, pname, param); };
inline void glTextureParameterfvEXT (GLuint texture, GLenum target, GLenum pname, const GLfloat * params) { return _glTextureParameterfvEXT_(texture, target, pname, params); };
inline void glTextureParameteriEXT (GLuint texture, GLenum target, GLenum pname, GLint param) { return _glTextureParameteriEXT_(texture, target, pname, param); };
inline void glTextureParameterivEXT (GLuint texture, GLenum target, GLenum pname, const GLint * params) { return _glTextureParameterivEXT_(texture, target, pname, params); };
inline void glTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) { return _glTextureImage1DEXT_(texture, target, level, internalformat, width, border, format, type, pixels); };
inline void glTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) { return _glTextureImage2DEXT_(texture, target, level, internalformat, width, height, border, format, type, pixels); };
inline void glTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { return _glTextureSubImage1DEXT_(texture, target, level, xoffset, width, format, type, pixels); };
inline void glTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { return _glTextureSubImage2DEXT_(texture, target, level, xoffset, yoffset, width, height, format, type, pixels); };
inline void glCopyTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { return _glCopyTextureImage1DEXT_(texture, target, level, internalformat, x, y, width, border); };
inline void glCopyTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { return _glCopyTextureImage2DEXT_(texture, target, level, internalformat, x, y, width, height, border); };
inline void glCopyTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { return _glCopyTextureSubImage1DEXT_(texture, target, level, xoffset, x, y, width); };
inline void glCopyTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { return _glCopyTextureSubImage2DEXT_(texture, target, level, xoffset, yoffset, x, y, width, height); };
inline void glGetTextureImageEXT (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void * pixels) { return _glGetTextureImageEXT_(texture, target, level, format, type, pixels); };
inline void glGetTextureParameterfvEXT (GLuint texture, GLenum target, GLenum pname, GLfloat * params) { return _glGetTextureParameterfvEXT_(texture, target, pname, params); };
inline void glGetTextureParameterivEXT (GLuint texture, GLenum target, GLenum pname, GLint * params) { return _glGetTextureParameterivEXT_(texture, target, pname, params); };
inline void glGetTextureLevelParameterfvEXT (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat * params) { return _glGetTextureLevelParameterfvEXT_(texture, target, level, pname, params); };
inline void glGetTextureLevelParameterivEXT (GLuint texture, GLenum target, GLint level, GLenum pname, GLint * params) { return _glGetTextureLevelParameterivEXT_(texture, target, level, pname, params); };
inline void glTextureImage3DEXT (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { return _glTextureImage3DEXT_(texture, target, level, internalformat, width, height, depth, border, format, type, pixels); };
inline void glTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { return _glTextureSubImage3DEXT_(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); };
inline void glCopyTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { return _glCopyTextureSubImage3DEXT_(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height); };
inline void glBindMultiTextureEXT (GLenum texunit, GLenum target, GLuint texture) { return _glBindMultiTextureEXT_(texunit, target, texture); };
inline void glMultiTexCoordPointerEXT (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void * pointer) { return _glMultiTexCoordPointerEXT_(texunit, size, type, stride, pointer); };
inline void glMultiTexEnvfEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat param) { return _glMultiTexEnvfEXT_(texunit, target, pname, param); };
inline void glMultiTexEnvfvEXT (GLenum texunit, GLenum target, GLenum pname, const GLfloat * params) { return _glMultiTexEnvfvEXT_(texunit, target, pname, params); };
inline void glMultiTexEnviEXT (GLenum texunit, GLenum target, GLenum pname, GLint param) { return _glMultiTexEnviEXT_(texunit, target, pname, param); };
inline void glMultiTexEnvivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint * params) { return _glMultiTexEnvivEXT_(texunit, target, pname, params); };
inline void glMultiTexGendEXT (GLenum texunit, GLenum coord, GLenum pname, GLdouble param) { return _glMultiTexGendEXT_(texunit, coord, pname, param); };
inline void glMultiTexGendvEXT (GLenum texunit, GLenum coord, GLenum pname, const GLdouble * params) { return _glMultiTexGendvEXT_(texunit, coord, pname, params); };
inline void glMultiTexGenfEXT (GLenum texunit, GLenum coord, GLenum pname, GLfloat param) { return _glMultiTexGenfEXT_(texunit, coord, pname, param); };
inline void glMultiTexGenfvEXT (GLenum texunit, GLenum coord, GLenum pname, const GLfloat * params) { return _glMultiTexGenfvEXT_(texunit, coord, pname, params); };
inline void glMultiTexGeniEXT (GLenum texunit, GLenum coord, GLenum pname, GLint param) { return _glMultiTexGeniEXT_(texunit, coord, pname, param); };
inline void glMultiTexGenivEXT (GLenum texunit, GLenum coord, GLenum pname, const GLint * params) { return _glMultiTexGenivEXT_(texunit, coord, pname, params); };
inline void glGetMultiTexEnvfvEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat * params) { return _glGetMultiTexEnvfvEXT_(texunit, target, pname, params); };
inline void glGetMultiTexEnvivEXT (GLenum texunit, GLenum target, GLenum pname, GLint * params) { return _glGetMultiTexEnvivEXT_(texunit, target, pname, params); };
inline void glGetMultiTexGendvEXT (GLenum texunit, GLenum coord, GLenum pname, GLdouble * params) { return _glGetMultiTexGendvEXT_(texunit, coord, pname, params); };
inline void glGetMultiTexGenfvEXT (GLenum texunit, GLenum coord, GLenum pname, GLfloat * params) { return _glGetMultiTexGenfvEXT_(texunit, coord, pname, params); };
inline void glGetMultiTexGenivEXT (GLenum texunit, GLenum coord, GLenum pname, GLint * params) { return _glGetMultiTexGenivEXT_(texunit, coord, pname, params); };
inline void glMultiTexParameteriEXT (GLenum texunit, GLenum target, GLenum pname, GLint param) { return _glMultiTexParameteriEXT_(texunit, target, pname, param); };
inline void glMultiTexParameterivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint * params) { return _glMultiTexParameterivEXT_(texunit, target, pname, params); };
inline void glMultiTexParameterfEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat param) { return _glMultiTexParameterfEXT_(texunit, target, pname, param); };
inline void glMultiTexParameterfvEXT (GLenum texunit, GLenum target, GLenum pname, const GLfloat * params) { return _glMultiTexParameterfvEXT_(texunit, target, pname, params); };
inline void glMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) { return _glMultiTexImage1DEXT_(texunit, target, level, internalformat, width, border, format, type, pixels); };
inline void glMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) { return _glMultiTexImage2DEXT_(texunit, target, level, internalformat, width, height, border, format, type, pixels); };
inline void glMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { return _glMultiTexSubImage1DEXT_(texunit, target, level, xoffset, width, format, type, pixels); };
inline void glMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { return _glMultiTexSubImage2DEXT_(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels); };
inline void glCopyMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { return _glCopyMultiTexImage1DEXT_(texunit, target, level, internalformat, x, y, width, border); };
inline void glCopyMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { return _glCopyMultiTexImage2DEXT_(texunit, target, level, internalformat, x, y, width, height, border); };
inline void glCopyMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { return _glCopyMultiTexSubImage1DEXT_(texunit, target, level, xoffset, x, y, width); };
inline void glCopyMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { return _glCopyMultiTexSubImage2DEXT_(texunit, target, level, xoffset, yoffset, x, y, width, height); };
inline void glGetMultiTexImageEXT (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void * pixels) { return _glGetMultiTexImageEXT_(texunit, target, level, format, type, pixels); };
inline void glGetMultiTexParameterfvEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat * params) { return _glGetMultiTexParameterfvEXT_(texunit, target, pname, params); };
inline void glGetMultiTexParameterivEXT (GLenum texunit, GLenum target, GLenum pname, GLint * params) { return _glGetMultiTexParameterivEXT_(texunit, target, pname, params); };
inline void glGetMultiTexLevelParameterfvEXT (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat * params) { return _glGetMultiTexLevelParameterfvEXT_(texunit, target, level, pname, params); };
inline void glGetMultiTexLevelParameterivEXT (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint * params) { return _glGetMultiTexLevelParameterivEXT_(texunit, target, level, pname, params); };
inline void glMultiTexImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { return _glMultiTexImage3DEXT_(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels); };
inline void glMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { return _glMultiTexSubImage3DEXT_(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); };
inline void glCopyMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { return _glCopyMultiTexSubImage3DEXT_(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height); };
inline void glEnableClientStateIndexedEXT (GLenum array, GLuint index) { return _glEnableClientStateIndexedEXT_(array, index); };
inline void glDisableClientStateIndexedEXT (GLenum array, GLuint index) { return _glDisableClientStateIndexedEXT_(array, index); };
inline void glGetFloatIndexedvEXT (GLenum target, GLuint index, GLfloat * data) { return _glGetFloatIndexedvEXT_(target, index, data); };
inline void glGetDoubleIndexedvEXT (GLenum target, GLuint index, GLdouble * data) { return _glGetDoubleIndexedvEXT_(target, index, data); };
inline void glGetPointerIndexedvEXT (GLenum target, GLuint index, void * * data) { return _glGetPointerIndexedvEXT_(target, index, data); };
inline void glEnableIndexedEXT (GLenum target, GLuint index) { return _glEnableIndexedEXT_(target, index); };
inline void glDisableIndexedEXT (GLenum target, GLuint index) { return _glDisableIndexedEXT_(target, index); };
inline GLboolean glIsEnabledIndexedEXT (GLenum target, GLuint index) { return _glIsEnabledIndexedEXT_(target, index); };
inline void glGetIntegerIndexedvEXT (GLenum target, GLuint index, GLint * data) { return _glGetIntegerIndexedvEXT_(target, index, data); };
inline void glGetBooleanIndexedvEXT (GLenum target, GLuint index, GLboolean * data) { return _glGetBooleanIndexedvEXT_(target, index, data); };
inline void glCompressedTextureImage3DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits) { return _glCompressedTextureImage3DEXT_(texture, target, level, internalformat, width, height, depth, border, imageSize, bits); };
inline void glCompressedTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits) { return _glCompressedTextureImage2DEXT_(texture, target, level, internalformat, width, height, border, imageSize, bits); };
inline void glCompressedTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits) { return _glCompressedTextureImage1DEXT_(texture, target, level, internalformat, width, border, imageSize, bits); };
inline void glCompressedTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits) { return _glCompressedTextureSubImage3DEXT_(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits); };
inline void glCompressedTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits) { return _glCompressedTextureSubImage2DEXT_(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits); };
inline void glCompressedTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits) { return _glCompressedTextureSubImage1DEXT_(texture, target, level, xoffset, width, format, imageSize, bits); };
inline void glGetCompressedTextureImageEXT (GLuint texture, GLenum target, GLint lod, void * img) { return _glGetCompressedTextureImageEXT_(texture, target, lod, img); };
inline void glCompressedMultiTexImage3DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits) { return _glCompressedMultiTexImage3DEXT_(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits); };
inline void glCompressedMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits) { return _glCompressedMultiTexImage2DEXT_(texunit, target, level, internalformat, width, height, border, imageSize, bits); };
inline void glCompressedMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits) { return _glCompressedMultiTexImage1DEXT_(texunit, target, level, internalformat, width, border, imageSize, bits); };
inline void glCompressedMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits) { return _glCompressedMultiTexSubImage3DEXT_(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits); };
inline void glCompressedMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits) { return _glCompressedMultiTexSubImage2DEXT_(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits); };
inline void glCompressedMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits) { return _glCompressedMultiTexSubImage1DEXT_(texunit, target, level, xoffset, width, format, imageSize, bits); };
inline void glGetCompressedMultiTexImageEXT (GLenum texunit, GLenum target, GLint lod, void * img) { return _glGetCompressedMultiTexImageEXT_(texunit, target, lod, img); };
inline void glMatrixLoadTransposefEXT (GLenum mode, const GLfloat * m) { return _glMatrixLoadTransposefEXT_(mode, m); };
inline void glMatrixLoadTransposedEXT (GLenum mode, const GLdouble * m) { return _glMatrixLoadTransposedEXT_(mode, m); };
inline void glMatrixMultTransposefEXT (GLenum mode, const GLfloat * m) { return _glMatrixMultTransposefEXT_(mode, m); };
inline void glMatrixMultTransposedEXT (GLenum mode, const GLdouble * m) { return _glMatrixMultTransposedEXT_(mode, m); };
inline void glNamedBufferDataEXT (GLuint buffer, GLsizeiptr size, const void * data, GLenum usage) { return _glNamedBufferDataEXT_(buffer, size, data, usage); };
inline void glNamedBufferSubDataEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { return _glNamedBufferSubDataEXT_(buffer, offset, size, data); };
inline void * glMapNamedBufferEXT (GLuint buffer, GLenum access) { return _glMapNamedBufferEXT_(buffer, access); };
inline GLboolean glUnmapNamedBufferEXT (GLuint buffer) { return _glUnmapNamedBufferEXT_(buffer); };
inline void glGetNamedBufferParameterivEXT (GLuint buffer, GLenum pname, GLint * params) { return _glGetNamedBufferParameterivEXT_(buffer, pname, params); };
inline void glGetNamedBufferPointervEXT (GLuint buffer, GLenum pname, void * * params) { return _glGetNamedBufferPointervEXT_(buffer, pname, params); };
inline void glGetNamedBufferSubDataEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, void * data) { return _glGetNamedBufferSubDataEXT_(buffer, offset, size, data); };
inline void glProgramUniform1fEXT (GLuint program, GLint location, GLfloat v0) { return _glProgramUniform1fEXT_(program, location, v0); };
inline void glProgramUniform2fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1) { return _glProgramUniform2fEXT_(program, location, v0, v1); };
inline void glProgramUniform3fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { return _glProgramUniform3fEXT_(program, location, v0, v1, v2); };
inline void glProgramUniform4fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { return _glProgramUniform4fEXT_(program, location, v0, v1, v2, v3); };
inline void glProgramUniform1iEXT (GLuint program, GLint location, GLint v0) { return _glProgramUniform1iEXT_(program, location, v0); };
inline void glProgramUniform2iEXT (GLuint program, GLint location, GLint v0, GLint v1) { return _glProgramUniform2iEXT_(program, location, v0, v1); };
inline void glProgramUniform3iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2) { return _glProgramUniform3iEXT_(program, location, v0, v1, v2); };
inline void glProgramUniform4iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { return _glProgramUniform4iEXT_(program, location, v0, v1, v2, v3); };
inline void glProgramUniform1fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat * value) { return _glProgramUniform1fvEXT_(program, location, count, value); };
inline void glProgramUniform2fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat * value) { return _glProgramUniform2fvEXT_(program, location, count, value); };
inline void glProgramUniform3fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat * value) { return _glProgramUniform3fvEXT_(program, location, count, value); };
inline void glProgramUniform4fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat * value) { return _glProgramUniform4fvEXT_(program, location, count, value); };
inline void glProgramUniform1ivEXT (GLuint program, GLint location, GLsizei count, const GLint * value) { return _glProgramUniform1ivEXT_(program, location, count, value); };
inline void glProgramUniform2ivEXT (GLuint program, GLint location, GLsizei count, const GLint * value) { return _glProgramUniform2ivEXT_(program, location, count, value); };
inline void glProgramUniform3ivEXT (GLuint program, GLint location, GLsizei count, const GLint * value) { return _glProgramUniform3ivEXT_(program, location, count, value); };
inline void glProgramUniform4ivEXT (GLuint program, GLint location, GLsizei count, const GLint * value) { return _glProgramUniform4ivEXT_(program, location, count, value); };
inline void glProgramUniformMatrix2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glProgramUniformMatrix2fvEXT_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glProgramUniformMatrix3fvEXT_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glProgramUniformMatrix4fvEXT_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix2x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glProgramUniformMatrix2x3fvEXT_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix3x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glProgramUniformMatrix3x2fvEXT_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix2x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glProgramUniformMatrix2x4fvEXT_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix4x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glProgramUniformMatrix4x2fvEXT_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix3x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glProgramUniformMatrix3x4fvEXT_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix4x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glProgramUniformMatrix4x3fvEXT_(program, location, count, transpose, value); };
inline void glTextureBufferEXT (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer) { return _glTextureBufferEXT_(texture, target, internalformat, buffer); };
inline void glMultiTexBufferEXT (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) { return _glMultiTexBufferEXT_(texunit, target, internalformat, buffer); };
inline void glTextureParameterIivEXT (GLuint texture, GLenum target, GLenum pname, const GLint * params) { return _glTextureParameterIivEXT_(texture, target, pname, params); };
inline void glTextureParameterIuivEXT (GLuint texture, GLenum target, GLenum pname, const GLuint * params) { return _glTextureParameterIuivEXT_(texture, target, pname, params); };
inline void glGetTextureParameterIivEXT (GLuint texture, GLenum target, GLenum pname, GLint * params) { return _glGetTextureParameterIivEXT_(texture, target, pname, params); };
inline void glGetTextureParameterIuivEXT (GLuint texture, GLenum target, GLenum pname, GLuint * params) { return _glGetTextureParameterIuivEXT_(texture, target, pname, params); };
inline void glMultiTexParameterIivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint * params) { return _glMultiTexParameterIivEXT_(texunit, target, pname, params); };
inline void glMultiTexParameterIuivEXT (GLenum texunit, GLenum target, GLenum pname, const GLuint * params) { return _glMultiTexParameterIuivEXT_(texunit, target, pname, params); };
inline void glGetMultiTexParameterIivEXT (GLenum texunit, GLenum target, GLenum pname, GLint * params) { return _glGetMultiTexParameterIivEXT_(texunit, target, pname, params); };
inline void glGetMultiTexParameterIuivEXT (GLenum texunit, GLenum target, GLenum pname, GLuint * params) { return _glGetMultiTexParameterIuivEXT_(texunit, target, pname, params); };
inline void glProgramUniform1uiEXT (GLuint program, GLint location, GLuint v0) { return _glProgramUniform1uiEXT_(program, location, v0); };
inline void glProgramUniform2uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1) { return _glProgramUniform2uiEXT_(program, location, v0, v1); };
inline void glProgramUniform3uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) { return _glProgramUniform3uiEXT_(program, location, v0, v1, v2); };
inline void glProgramUniform4uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { return _glProgramUniform4uiEXT_(program, location, v0, v1, v2, v3); };
inline void glProgramUniform1uivEXT (GLuint program, GLint location, GLsizei count, const GLuint * value) { return _glProgramUniform1uivEXT_(program, location, count, value); };
inline void glProgramUniform2uivEXT (GLuint program, GLint location, GLsizei count, const GLuint * value) { return _glProgramUniform2uivEXT_(program, location, count, value); };
inline void glProgramUniform3uivEXT (GLuint program, GLint location, GLsizei count, const GLuint * value) { return _glProgramUniform3uivEXT_(program, location, count, value); };
inline void glProgramUniform4uivEXT (GLuint program, GLint location, GLsizei count, const GLuint * value) { return _glProgramUniform4uivEXT_(program, location, count, value); };
inline void glNamedProgramLocalParameters4fvEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat * params) { return _glNamedProgramLocalParameters4fvEXT_(program, target, index, count, params); };
inline void glNamedProgramLocalParameterI4iEXT (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { return _glNamedProgramLocalParameterI4iEXT_(program, target, index, x, y, z, w); };
inline void glNamedProgramLocalParameterI4ivEXT (GLuint program, GLenum target, GLuint index, const GLint * params) { return _glNamedProgramLocalParameterI4ivEXT_(program, target, index, params); };
inline void glNamedProgramLocalParametersI4ivEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint * params) { return _glNamedProgramLocalParametersI4ivEXT_(program, target, index, count, params); };
inline void glNamedProgramLocalParameterI4uiEXT (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { return _glNamedProgramLocalParameterI4uiEXT_(program, target, index, x, y, z, w); };
inline void glNamedProgramLocalParameterI4uivEXT (GLuint program, GLenum target, GLuint index, const GLuint * params) { return _glNamedProgramLocalParameterI4uivEXT_(program, target, index, params); };
inline void glNamedProgramLocalParametersI4uivEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint * params) { return _glNamedProgramLocalParametersI4uivEXT_(program, target, index, count, params); };
inline void glGetNamedProgramLocalParameterIivEXT (GLuint program, GLenum target, GLuint index, GLint * params) { return _glGetNamedProgramLocalParameterIivEXT_(program, target, index, params); };
inline void glGetNamedProgramLocalParameterIuivEXT (GLuint program, GLenum target, GLuint index, GLuint * params) { return _glGetNamedProgramLocalParameterIuivEXT_(program, target, index, params); };
inline void glEnableClientStateiEXT (GLenum array, GLuint index) { return _glEnableClientStateiEXT_(array, index); };
inline void glDisableClientStateiEXT (GLenum array, GLuint index) { return _glDisableClientStateiEXT_(array, index); };
inline void glGetFloati_vEXT (GLenum pname, GLuint index, GLfloat * params) { return _glGetFloati_vEXT_(pname, index, params); };
inline void glGetDoublei_vEXT (GLenum pname, GLuint index, GLdouble * params) { return _glGetDoublei_vEXT_(pname, index, params); };
inline void glGetPointeri_vEXT (GLenum pname, GLuint index, void * * params) { return _glGetPointeri_vEXT_(pname, index, params); };
inline void glNamedProgramStringEXT (GLuint program, GLenum target, GLenum format, GLsizei len, const void * string) { return _glNamedProgramStringEXT_(program, target, format, len, string); };
inline void glNamedProgramLocalParameter4dEXT (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { return _glNamedProgramLocalParameter4dEXT_(program, target, index, x, y, z, w); };
inline void glNamedProgramLocalParameter4dvEXT (GLuint program, GLenum target, GLuint index, const GLdouble * params) { return _glNamedProgramLocalParameter4dvEXT_(program, target, index, params); };
inline void glNamedProgramLocalParameter4fEXT (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { return _glNamedProgramLocalParameter4fEXT_(program, target, index, x, y, z, w); };
inline void glNamedProgramLocalParameter4fvEXT (GLuint program, GLenum target, GLuint index, const GLfloat * params) { return _glNamedProgramLocalParameter4fvEXT_(program, target, index, params); };
inline void glGetNamedProgramLocalParameterdvEXT (GLuint program, GLenum target, GLuint index, GLdouble * params) { return _glGetNamedProgramLocalParameterdvEXT_(program, target, index, params); };
inline void glGetNamedProgramLocalParameterfvEXT (GLuint program, GLenum target, GLuint index, GLfloat * params) { return _glGetNamedProgramLocalParameterfvEXT_(program, target, index, params); };
inline void glGetNamedProgramivEXT (GLuint program, GLenum target, GLenum pname, GLint * params) { return _glGetNamedProgramivEXT_(program, target, pname, params); };
inline void glGetNamedProgramStringEXT (GLuint program, GLenum target, GLenum pname, void * string) { return _glGetNamedProgramStringEXT_(program, target, pname, string); };
inline void glNamedRenderbufferStorageEXT (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) { return _glNamedRenderbufferStorageEXT_(renderbuffer, internalformat, width, height); };
inline void glGetNamedRenderbufferParameterivEXT (GLuint renderbuffer, GLenum pname, GLint * params) { return _glGetNamedRenderbufferParameterivEXT_(renderbuffer, pname, params); };
inline void glNamedRenderbufferStorageMultisampleEXT (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { return _glNamedRenderbufferStorageMultisampleEXT_(renderbuffer, samples, internalformat, width, height); };
inline void glNamedRenderbufferStorageMultisampleCoverageEXT (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) { return _glNamedRenderbufferStorageMultisampleCoverageEXT_(renderbuffer, coverageSamples, colorSamples, internalformat, width, height); };
inline GLenum glCheckNamedFramebufferStatusEXT (GLuint framebuffer, GLenum target) { return _glCheckNamedFramebufferStatusEXT_(framebuffer, target); };
inline void glNamedFramebufferTexture1DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { return _glNamedFramebufferTexture1DEXT_(framebuffer, attachment, textarget, texture, level); };
inline void glNamedFramebufferTexture2DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { return _glNamedFramebufferTexture2DEXT_(framebuffer, attachment, textarget, texture, level); };
inline void glNamedFramebufferTexture3DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { return _glNamedFramebufferTexture3DEXT_(framebuffer, attachment, textarget, texture, level, zoffset); };
inline void glNamedFramebufferRenderbufferEXT (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { return _glNamedFramebufferRenderbufferEXT_(framebuffer, attachment, renderbuffertarget, renderbuffer); };
inline void glGetNamedFramebufferAttachmentParameterivEXT (GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params) { return _glGetNamedFramebufferAttachmentParameterivEXT_(framebuffer, attachment, pname, params); };
inline void glGenerateTextureMipmapEXT (GLuint texture, GLenum target) { return _glGenerateTextureMipmapEXT_(texture, target); };
inline void glGenerateMultiTexMipmapEXT (GLenum texunit, GLenum target) { return _glGenerateMultiTexMipmapEXT_(texunit, target); };
inline void glFramebufferDrawBufferEXT (GLuint framebuffer, GLenum mode) { return _glFramebufferDrawBufferEXT_(framebuffer, mode); };
inline void glFramebufferDrawBuffersEXT (GLuint framebuffer, GLsizei n, const GLenum * bufs) { return _glFramebufferDrawBuffersEXT_(framebuffer, n, bufs); };
inline void glFramebufferReadBufferEXT (GLuint framebuffer, GLenum mode) { return _glFramebufferReadBufferEXT_(framebuffer, mode); };
inline void glGetFramebufferParameterivEXT (GLuint framebuffer, GLenum pname, GLint * params) { return _glGetFramebufferParameterivEXT_(framebuffer, pname, params); };
inline void glNamedCopyBufferSubDataEXT (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { return _glNamedCopyBufferSubDataEXT_(readBuffer, writeBuffer, readOffset, writeOffset, size); };
inline void glNamedFramebufferTextureEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) { return _glNamedFramebufferTextureEXT_(framebuffer, attachment, texture, level); };
inline void glNamedFramebufferTextureLayerEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) { return _glNamedFramebufferTextureLayerEXT_(framebuffer, attachment, texture, level, layer); };
inline void glNamedFramebufferTextureFaceEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) { return _glNamedFramebufferTextureFaceEXT_(framebuffer, attachment, texture, level, face); };
inline void glTextureRenderbufferEXT (GLuint texture, GLenum target, GLuint renderbuffer) { return _glTextureRenderbufferEXT_(texture, target, renderbuffer); };
inline void glMultiTexRenderbufferEXT (GLenum texunit, GLenum target, GLuint renderbuffer) { return _glMultiTexRenderbufferEXT_(texunit, target, renderbuffer); };
inline void glVertexArrayVertexOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { return _glVertexArrayVertexOffsetEXT_(vaobj, buffer, size, type, stride, offset); };
inline void glVertexArrayColorOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { return _glVertexArrayColorOffsetEXT_(vaobj, buffer, size, type, stride, offset); };
inline void glVertexArrayEdgeFlagOffsetEXT (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) { return _glVertexArrayEdgeFlagOffsetEXT_(vaobj, buffer, stride, offset); };
inline void glVertexArrayIndexOffsetEXT (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { return _glVertexArrayIndexOffsetEXT_(vaobj, buffer, type, stride, offset); };
inline void glVertexArrayNormalOffsetEXT (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { return _glVertexArrayNormalOffsetEXT_(vaobj, buffer, type, stride, offset); };
inline void glVertexArrayTexCoordOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { return _glVertexArrayTexCoordOffsetEXT_(vaobj, buffer, size, type, stride, offset); };
inline void glVertexArrayMultiTexCoordOffsetEXT (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) { return _glVertexArrayMultiTexCoordOffsetEXT_(vaobj, buffer, texunit, size, type, stride, offset); };
inline void glVertexArrayFogCoordOffsetEXT (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { return _glVertexArrayFogCoordOffsetEXT_(vaobj, buffer, type, stride, offset); };
inline void glVertexArraySecondaryColorOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { return _glVertexArraySecondaryColorOffsetEXT_(vaobj, buffer, size, type, stride, offset); };
inline void glVertexArrayVertexAttribOffsetEXT (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) { return _glVertexArrayVertexAttribOffsetEXT_(vaobj, buffer, index, size, type, normalized, stride, offset); };
inline void glVertexArrayVertexAttribIOffsetEXT (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) { return _glVertexArrayVertexAttribIOffsetEXT_(vaobj, buffer, index, size, type, stride, offset); };
inline void glEnableVertexArrayEXT (GLuint vaobj, GLenum array) { return _glEnableVertexArrayEXT_(vaobj, array); };
inline void glDisableVertexArrayEXT (GLuint vaobj, GLenum array) { return _glDisableVertexArrayEXT_(vaobj, array); };
inline void glEnableVertexArrayAttribEXT (GLuint vaobj, GLuint index) { return _glEnableVertexArrayAttribEXT_(vaobj, index); };
inline void glDisableVertexArrayAttribEXT (GLuint vaobj, GLuint index) { return _glDisableVertexArrayAttribEXT_(vaobj, index); };
inline void glGetVertexArrayIntegervEXT (GLuint vaobj, GLenum pname, GLint * param) { return _glGetVertexArrayIntegervEXT_(vaobj, pname, param); };
inline void glGetVertexArrayPointervEXT (GLuint vaobj, GLenum pname, void * * param) { return _glGetVertexArrayPointervEXT_(vaobj, pname, param); };
inline void glGetVertexArrayIntegeri_vEXT (GLuint vaobj, GLuint index, GLenum pname, GLint * param) { return _glGetVertexArrayIntegeri_vEXT_(vaobj, index, pname, param); };
inline void glGetVertexArrayPointeri_vEXT (GLuint vaobj, GLuint index, GLenum pname, void * * param) { return _glGetVertexArrayPointeri_vEXT_(vaobj, index, pname, param); };
inline void * glMapNamedBufferRangeEXT (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) { return _glMapNamedBufferRangeEXT_(buffer, offset, length, access); };
inline void glFlushMappedNamedBufferRangeEXT (GLuint buffer, GLintptr offset, GLsizeiptr length) { return _glFlushMappedNamedBufferRangeEXT_(buffer, offset, length); };
inline void glNamedBufferStorageEXT (GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags) { return _glNamedBufferStorageEXT_(buffer, size, data, flags); };
inline void glClearNamedBufferDataEXT (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data) { return _glClearNamedBufferDataEXT_(buffer, internalformat, format, type, data); };
inline void glClearNamedBufferSubDataEXT (GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) { return _glClearNamedBufferSubDataEXT_(buffer, internalformat, offset, size, format, type, data); };
inline void glNamedFramebufferParameteriEXT (GLuint framebuffer, GLenum pname, GLint param) { return _glNamedFramebufferParameteriEXT_(framebuffer, pname, param); };
inline void glGetNamedFramebufferParameterivEXT (GLuint framebuffer, GLenum pname, GLint * params) { return _glGetNamedFramebufferParameterivEXT_(framebuffer, pname, params); };
inline void glProgramUniform1dEXT (GLuint program, GLint location, GLdouble x) { return _glProgramUniform1dEXT_(program, location, x); };
inline void glProgramUniform2dEXT (GLuint program, GLint location, GLdouble x, GLdouble y) { return _glProgramUniform2dEXT_(program, location, x, y); };
inline void glProgramUniform3dEXT (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z) { return _glProgramUniform3dEXT_(program, location, x, y, z); };
inline void glProgramUniform4dEXT (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { return _glProgramUniform4dEXT_(program, location, x, y, z, w); };
inline void glProgramUniform1dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble * value) { return _glProgramUniform1dvEXT_(program, location, count, value); };
inline void glProgramUniform2dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble * value) { return _glProgramUniform2dvEXT_(program, location, count, value); };
inline void glProgramUniform3dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble * value) { return _glProgramUniform3dvEXT_(program, location, count, value); };
inline void glProgramUniform4dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble * value) { return _glProgramUniform4dvEXT_(program, location, count, value); };
inline void glProgramUniformMatrix2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glProgramUniformMatrix2dvEXT_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glProgramUniformMatrix3dvEXT_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glProgramUniformMatrix4dvEXT_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix2x3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glProgramUniformMatrix2x3dvEXT_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix2x4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glProgramUniformMatrix2x4dvEXT_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix3x2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glProgramUniformMatrix3x2dvEXT_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix3x4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glProgramUniformMatrix3x4dvEXT_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix4x2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glProgramUniformMatrix4x2dvEXT_(program, location, count, transpose, value); };
inline void glProgramUniformMatrix4x3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { return _glProgramUniformMatrix4x3dvEXT_(program, location, count, transpose, value); };
inline void glTextureBufferRangeEXT (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { return _glTextureBufferRangeEXT_(texture, target, internalformat, buffer, offset, size); };
inline void glTextureStorage1DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { return _glTextureStorage1DEXT_(texture, target, levels, internalformat, width); };
inline void glTextureStorage2DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { return _glTextureStorage2DEXT_(texture, target, levels, internalformat, width, height); };
inline void glTextureStorage3DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { return _glTextureStorage3DEXT_(texture, target, levels, internalformat, width, height, depth); };
inline void glTextureStorage2DMultisampleEXT (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { return _glTextureStorage2DMultisampleEXT_(texture, target, samples, internalformat, width, height, fixedsamplelocations); };
inline void glTextureStorage3DMultisampleEXT (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { return _glTextureStorage3DMultisampleEXT_(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations); };
inline void glVertexArrayBindVertexBufferEXT (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { return _glVertexArrayBindVertexBufferEXT_(vaobj, bindingindex, buffer, offset, stride); };
inline void glVertexArrayVertexAttribFormatEXT (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { return _glVertexArrayVertexAttribFormatEXT_(vaobj, attribindex, size, type, normalized, relativeoffset); };
inline void glVertexArrayVertexAttribIFormatEXT (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { return _glVertexArrayVertexAttribIFormatEXT_(vaobj, attribindex, size, type, relativeoffset); };
inline void glVertexArrayVertexAttribLFormatEXT (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { return _glVertexArrayVertexAttribLFormatEXT_(vaobj, attribindex, size, type, relativeoffset); };
inline void glVertexArrayVertexAttribBindingEXT (GLuint vaobj, GLuint attribindex, GLuint bindingindex) { return _glVertexArrayVertexAttribBindingEXT_(vaobj, attribindex, bindingindex); };
inline void glVertexArrayVertexBindingDivisorEXT (GLuint vaobj, GLuint bindingindex, GLuint divisor) { return _glVertexArrayVertexBindingDivisorEXT_(vaobj, bindingindex, divisor); };
inline void glVertexArrayVertexAttribLOffsetEXT (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) { return _glVertexArrayVertexAttribLOffsetEXT_(vaobj, buffer, index, size, type, stride, offset); };
inline void glTexturePageCommitmentEXT (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { return _glTexturePageCommitmentEXT_(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit); };
inline void glVertexArrayVertexAttribDivisorEXT (GLuint vaobj, GLuint index, GLuint divisor) { return _glVertexArrayVertexAttribDivisorEXT_(vaobj, index, divisor); };
#endif //GL_EXT_direct_state_access

#ifndef GL_EXT_draw_instanced

// functions typedefs
typedef void (APIENTRYP PFN_GLDRAWARRAYSINSTANCEDEXT_PROC) (GLenum mode, GLint start, GLsizei count, GLsizei primcount);
typedef void (APIENTRYP PFN_GLDRAWELEMENTSINSTANCEDEXT_PROC) (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount);

// functions typedefs
GL_FUNC_DEF PFN_GLDRAWARRAYSINSTANCEDEXT_PROC _glDrawArraysInstancedEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWELEMENTSINSTANCEDEXT_PROC _glDrawElementsInstancedEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDrawArraysInstancedEXT (GLenum mode, GLint start, GLsizei count, GLsizei primcount) { return _glDrawArraysInstancedEXT_(mode, start, count, primcount); };
inline void glDrawElementsInstancedEXT (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { return _glDrawElementsInstancedEXT_(mode, count, type, indices, primcount); };
#endif //GL_EXT_draw_instanced

// GL_EXT_multiview_tessellation_geometry_shader

// GL_EXT_multiview_texture_multisample

// GL_EXT_multiview_timer_query

#ifndef GL_EXT_polygon_offset_clamp

// Defines
#define GL_POLYGON_OFFSET_CLAMP_EXT       0x8E1B 

// functions typedefs
typedef void (APIENTRYP PFN_GLPOLYGONOFFSETCLAMPEXT_PROC) (GLfloat factor, GLfloat units, GLfloat clamp);

// functions typedefs
GL_FUNC_DEF PFN_GLPOLYGONOFFSETCLAMPEXT_PROC _glPolygonOffsetClampEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glPolygonOffsetClampEXT (GLfloat factor, GLfloat units, GLfloat clamp) { return _glPolygonOffsetClampEXT_(factor, units, clamp); };
#endif //GL_EXT_polygon_offset_clamp

// GL_EXT_post_depth_coverage

#ifndef GL_EXT_raster_multisample

// Defines
#define GL_RASTER_MULTISAMPLE_EXT         0x9327 
#define GL_RASTER_SAMPLES_EXT             0x9328 
#define GL_MAX_RASTER_SAMPLES_EXT         0x9329 
#define GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT 0x932A 
#define GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT 0x932B 
#define GL_EFFECTIVE_RASTER_SAMPLES_EXT   0x932C 

// functions typedefs
typedef void (APIENTRYP PFN_GLRASTERSAMPLESEXT_PROC) (GLuint samples, GLboolean fixedsamplelocations);

// functions typedefs
GL_FUNC_DEF PFN_GLRASTERSAMPLESEXT_PROC _glRasterSamplesEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glRasterSamplesEXT (GLuint samples, GLboolean fixedsamplelocations) { return _glRasterSamplesEXT_(samples, fixedsamplelocations); };
#endif //GL_EXT_raster_multisample

#ifndef GL_EXT_separate_shader_objects

// Defines
#define GL_ACTIVE_PROGRAM_EXT             0x8B8D 

// functions typedefs
typedef void (APIENTRYP PFN_GLUSESHADERPROGRAMEXT_PROC) (GLenum type, GLuint program);
typedef void (APIENTRYP PFN_GLACTIVEPROGRAMEXT_PROC) (GLuint program);
typedef GLuint (APIENTRYP PFN_GLCREATESHADERPROGRAMEXT_PROC) (GLenum type, const GLchar * string);

// functions typedefs
GL_FUNC_DEF PFN_GLUSESHADERPROGRAMEXT_PROC _glUseShaderProgramEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLACTIVEPROGRAMEXT_PROC _glActiveProgramEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCREATESHADERPROGRAMEXT_PROC _glCreateShaderProgramEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glUseShaderProgramEXT (GLenum type, GLuint program) { return _glUseShaderProgramEXT_(type, program); };
inline void glActiveProgramEXT (GLuint program) { return _glActiveProgramEXT_(program); };
inline GLuint glCreateShaderProgramEXT (GLenum type, const GLchar * string) { return _glCreateShaderProgramEXT_(type, string); };
#endif //GL_EXT_separate_shader_objects

#ifndef GL_EXT_shader_framebuffer_fetch

// Defines
#define GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT 0x8A52 
#endif //GL_EXT_shader_framebuffer_fetch

#ifndef GL_EXT_shader_framebuffer_fetch_non_coherent

// functions typedefs
typedef void (APIENTRYP PFN_GLFRAMEBUFFERFETCHBARRIEREXT_PROC) (void);

// functions typedefs
GL_FUNC_DEF PFN_GLFRAMEBUFFERFETCHBARRIEREXT_PROC _glFramebufferFetchBarrierEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glFramebufferFetchBarrierEXT (void) { return _glFramebufferFetchBarrierEXT_(); };
#endif //GL_EXT_shader_framebuffer_fetch_non_coherent

// GL_EXT_shader_integer_mix

#ifndef GL_EXT_texture_compression_s3tc

// Defines
#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT   0x83F0 
#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT  0x83F1 
#define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT  0x83F2 
#define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT  0x83F3 
#endif //GL_EXT_texture_compression_s3tc

#ifndef GL_EXT_texture_filter_minmax

// Defines
#define GL_TEXTURE_REDUCTION_MODE_EXT     0x9366 
#define GL_WEIGHTED_AVERAGE_EXT           0x9367 
#endif //GL_EXT_texture_filter_minmax

#ifndef GL_EXT_texture_sRGB_R8

// Defines
#define GL_SR8_EXT                        0x8FBD 
#endif //GL_EXT_texture_sRGB_R8

#ifndef GL_EXT_texture_sRGB_decode

// Defines
#define GL_TEXTURE_SRGB_DECODE_EXT        0x8A48 
#define GL_DECODE_EXT                     0x8A49 
#define GL_SKIP_DECODE_EXT                0x8A4A 
#endif //GL_EXT_texture_sRGB_decode

// GL_EXT_texture_shadow_lod

#ifndef GL_EXT_window_rectangles

// Defines
#define GL_INCLUSIVE_EXT                  0x8F10 
#define GL_EXCLUSIVE_EXT                  0x8F11 
#define GL_WINDOW_RECTANGLE_EXT           0x8F12 
#define GL_WINDOW_RECTANGLE_MODE_EXT      0x8F13 
#define GL_MAX_WINDOW_RECTANGLES_EXT      0x8F14 
#define GL_NUM_WINDOW_RECTANGLES_EXT      0x8F15 

// functions typedefs
typedef void (APIENTRYP PFN_GLWINDOWRECTANGLESEXT_PROC) (GLenum mode, GLsizei count, const GLint * box);

// functions typedefs
GL_FUNC_DEF PFN_GLWINDOWRECTANGLESEXT_PROC _glWindowRectanglesEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glWindowRectanglesEXT (GLenum mode, GLsizei count, const GLint * box) { return _glWindowRectanglesEXT_(mode, count, box); };
#endif //GL_EXT_window_rectangles

#ifndef GL_INTEL_blackhole_render

// Defines
#define GL_BLACKHOLE_RENDER_INTEL         0x83FC 
#endif //GL_INTEL_blackhole_render

#ifndef GL_INTEL_conservative_rasterization

// Defines
#define GL_CONSERVATIVE_RASTERIZATION_INTEL 0x83FE 
#endif //GL_INTEL_conservative_rasterization

#ifndef GL_INTEL_framebuffer_CMAA

// functions typedefs
typedef void (APIENTRYP PFN_GLAPPLYFRAMEBUFFERATTACHMENTCMAAINTEL_PROC) (void);

// functions typedefs
GL_FUNC_DEF PFN_GLAPPLYFRAMEBUFFERATTACHMENTCMAAINTEL_PROC _glApplyFramebufferAttachmentCMAAINTEL_ GL_FUNC_DEF2;

// functions inline wrap
inline void glApplyFramebufferAttachmentCMAAINTEL (void) { return _glApplyFramebufferAttachmentCMAAINTEL_(); };
#endif //GL_INTEL_framebuffer_CMAA

#ifndef GL_INTEL_performance_query

// Defines
#define GL_PERFQUERY_SINGLE_CONTEXT_INTEL 0x00000000 
#define GL_PERFQUERY_GLOBAL_CONTEXT_INTEL 0x00000001 
#define GL_PERFQUERY_WAIT_INTEL           0x83FB 
#define GL_PERFQUERY_FLUSH_INTEL          0x83FA 
#define GL_PERFQUERY_DONOT_FLUSH_INTEL    0x83F9 
#define GL_PERFQUERY_COUNTER_EVENT_INTEL  0x94F0 
#define GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL 0x94F1 
#define GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL 0x94F2 
#define GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL 0x94F3 
#define GL_PERFQUERY_COUNTER_RAW_INTEL    0x94F4 
#define GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL 0x94F5 
#define GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL 0x94F8 
#define GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL 0x94F9 
#define GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL 0x94FA 
#define GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL 0x94FB 
#define GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL 0x94FC 
#define GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL 0x94FD 
#define GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL 0x94FE 
#define GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL 0x94FF 
#define GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL 0x9500 

// functions typedefs
typedef void (APIENTRYP PFN_GLBEGINPERFQUERYINTEL_PROC) (GLuint queryHandle);
typedef void (APIENTRYP PFN_GLCREATEPERFQUERYINTEL_PROC) (GLuint queryId, GLuint * queryHandle);
typedef void (APIENTRYP PFN_GLDELETEPERFQUERYINTEL_PROC) (GLuint queryHandle);
typedef void (APIENTRYP PFN_GLENDPERFQUERYINTEL_PROC) (GLuint queryHandle);
typedef void (APIENTRYP PFN_GLGETFIRSTPERFQUERYIDINTEL_PROC) (GLuint * queryId);
typedef void (APIENTRYP PFN_GLGETNEXTPERFQUERYIDINTEL_PROC) (GLuint queryId, GLuint * nextQueryId);
typedef void (APIENTRYP PFN_GLGETPERFCOUNTERINFOINTEL_PROC) (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar * counterName, GLuint counterDescLength, GLchar * counterDesc, GLuint * counterOffset, GLuint * counterDataSize, GLuint * counterTypeEnum, GLuint * counterDataTypeEnum, GLuint64 * rawCounterMaxValue);
typedef void (APIENTRYP PFN_GLGETPERFQUERYDATAINTEL_PROC) (GLuint queryHandle, GLuint flags, GLsizei dataSize, void * data, GLuint * bytesWritten);
typedef void (APIENTRYP PFN_GLGETPERFQUERYIDBYNAMEINTEL_PROC) (GLchar * queryName, GLuint * queryId);
typedef void (APIENTRYP PFN_GLGETPERFQUERYINFOINTEL_PROC) (GLuint queryId, GLuint queryNameLength, GLchar * queryName, GLuint * dataSize, GLuint * noCounters, GLuint * noInstances, GLuint * capsMask);

// functions typedefs
GL_FUNC_DEF PFN_GLBEGINPERFQUERYINTEL_PROC _glBeginPerfQueryINTEL_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCREATEPERFQUERYINTEL_PROC _glCreatePerfQueryINTEL_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEPERFQUERYINTEL_PROC _glDeletePerfQueryINTEL_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENDPERFQUERYINTEL_PROC _glEndPerfQueryINTEL_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFIRSTPERFQUERYIDINTEL_PROC _glGetFirstPerfQueryIdINTEL_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNEXTPERFQUERYIDINTEL_PROC _glGetNextPerfQueryIdINTEL_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPERFCOUNTERINFOINTEL_PROC _glGetPerfCounterInfoINTEL_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPERFQUERYDATAINTEL_PROC _glGetPerfQueryDataINTEL_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPERFQUERYIDBYNAMEINTEL_PROC _glGetPerfQueryIdByNameINTEL_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPERFQUERYINFOINTEL_PROC _glGetPerfQueryInfoINTEL_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBeginPerfQueryINTEL (GLuint queryHandle) { return _glBeginPerfQueryINTEL_(queryHandle); };
inline void glCreatePerfQueryINTEL (GLuint queryId, GLuint * queryHandle) { return _glCreatePerfQueryINTEL_(queryId, queryHandle); };
inline void glDeletePerfQueryINTEL (GLuint queryHandle) { return _glDeletePerfQueryINTEL_(queryHandle); };
inline void glEndPerfQueryINTEL (GLuint queryHandle) { return _glEndPerfQueryINTEL_(queryHandle); };
inline void glGetFirstPerfQueryIdINTEL (GLuint * queryId) { return _glGetFirstPerfQueryIdINTEL_(queryId); };
inline void glGetNextPerfQueryIdINTEL (GLuint queryId, GLuint * nextQueryId) { return _glGetNextPerfQueryIdINTEL_(queryId, nextQueryId); };
inline void glGetPerfCounterInfoINTEL (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar * counterName, GLuint counterDescLength, GLchar * counterDesc, GLuint * counterOffset, GLuint * counterDataSize, GLuint * counterTypeEnum, GLuint * counterDataTypeEnum, GLuint64 * rawCounterMaxValue) { return _glGetPerfCounterInfoINTEL_(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue); };
inline void glGetPerfQueryDataINTEL (GLuint queryHandle, GLuint flags, GLsizei dataSize, void * data, GLuint * bytesWritten) { return _glGetPerfQueryDataINTEL_(queryHandle, flags, dataSize, data, bytesWritten); };
inline void glGetPerfQueryIdByNameINTEL (GLchar * queryName, GLuint * queryId) { return _glGetPerfQueryIdByNameINTEL_(queryName, queryId); };
inline void glGetPerfQueryInfoINTEL (GLuint queryId, GLuint queryNameLength, GLchar * queryName, GLuint * dataSize, GLuint * noCounters, GLuint * noInstances, GLuint * capsMask) { return _glGetPerfQueryInfoINTEL_(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask); };
#endif //GL_INTEL_performance_query

#ifndef GL_MESA_framebuffer_flip_y

// Defines
#define GL_FRAMEBUFFER_FLIP_Y_MESA        0x8BBB 

// functions typedefs
typedef void (APIENTRYP PFN_GLFRAMEBUFFERPARAMETERIMESA_PROC) (GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLGETFRAMEBUFFERPARAMETERIVMESA_PROC) (GLenum target, GLenum pname, GLint * params);

// functions typedefs
GL_FUNC_DEF PFN_GLFRAMEBUFFERPARAMETERIMESA_PROC _glFramebufferParameteriMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFRAMEBUFFERPARAMETERIVMESA_PROC _glGetFramebufferParameterivMESA_ GL_FUNC_DEF2;

// functions inline wrap
inline void glFramebufferParameteriMESA (GLenum target, GLenum pname, GLint param) { return _glFramebufferParameteriMESA_(target, pname, param); };
inline void glGetFramebufferParameterivMESA (GLenum target, GLenum pname, GLint * params) { return _glGetFramebufferParameterivMESA_(target, pname, params); };
#endif //GL_MESA_framebuffer_flip_y

#ifndef GL_NV_bindless_multi_draw_indirect

// functions typedefs
typedef void (APIENTRYP PFN_GLMULTIDRAWARRAYSINDIRECTBINDLESSNV_PROC) (GLenum mode, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
typedef void (APIENTRYP PFN_GLMULTIDRAWELEMENTSINDIRECTBINDLESSNV_PROC) (GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);

// functions typedefs
GL_FUNC_DEF PFN_GLMULTIDRAWARRAYSINDIRECTBINDLESSNV_PROC _glMultiDrawArraysIndirectBindlessNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTIDRAWELEMENTSINDIRECTBINDLESSNV_PROC _glMultiDrawElementsIndirectBindlessNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glMultiDrawArraysIndirectBindlessNV (GLenum mode, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) { return _glMultiDrawArraysIndirectBindlessNV_(mode, indirect, drawCount, stride, vertexBufferCount); };
inline void glMultiDrawElementsIndirectBindlessNV (GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) { return _glMultiDrawElementsIndirectBindlessNV_(mode, type, indirect, drawCount, stride, vertexBufferCount); };
#endif //GL_NV_bindless_multi_draw_indirect

#ifndef GL_NV_bindless_multi_draw_indirect_count

// functions typedefs
typedef void (APIENTRYP PFN_GLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNV_PROC) (GLenum mode, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
typedef void (APIENTRYP PFN_GLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNV_PROC) (GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);

// functions typedefs
GL_FUNC_DEF PFN_GLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNV_PROC _glMultiDrawArraysIndirectBindlessCountNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNV_PROC _glMultiDrawElementsIndirectBindlessCountNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glMultiDrawArraysIndirectBindlessCountNV (GLenum mode, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) { return _glMultiDrawArraysIndirectBindlessCountNV_(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount); };
inline void glMultiDrawElementsIndirectBindlessCountNV (GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) { return _glMultiDrawElementsIndirectBindlessCountNV_(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount); };
#endif //GL_NV_bindless_multi_draw_indirect_count

#ifndef GL_NV_bindless_texture

// functions typedefs
typedef GLuint64 (APIENTRYP PFN_GLGETTEXTUREHANDLENV_PROC) (GLuint texture);
typedef GLuint64 (APIENTRYP PFN_GLGETTEXTURESAMPLERHANDLENV_PROC) (GLuint texture, GLuint sampler);
typedef void (APIENTRYP PFN_GLMAKETEXTUREHANDLERESIDENTNV_PROC) (GLuint64 handle);
typedef void (APIENTRYP PFN_GLMAKETEXTUREHANDLENONRESIDENTNV_PROC) (GLuint64 handle);
typedef GLuint64 (APIENTRYP PFN_GLGETIMAGEHANDLENV_PROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
typedef void (APIENTRYP PFN_GLMAKEIMAGEHANDLERESIDENTNV_PROC) (GLuint64 handle, GLenum access);
typedef void (APIENTRYP PFN_GLMAKEIMAGEHANDLENONRESIDENTNV_PROC) (GLuint64 handle);
typedef void (APIENTRYP PFN_GLUNIFORMHANDLEUI64NV_PROC) (GLint location, GLuint64 value);
typedef void (APIENTRYP PFN_GLUNIFORMHANDLEUI64VNV_PROC) (GLint location, GLsizei count, const GLuint64 * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMHANDLEUI64NV_PROC) (GLuint program, GLint location, GLuint64 value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMHANDLEUI64VNV_PROC) (GLuint program, GLint location, GLsizei count, const GLuint64 * values);
typedef GLboolean (APIENTRYP PFN_GLISTEXTUREHANDLERESIDENTNV_PROC) (GLuint64 handle);
typedef GLboolean (APIENTRYP PFN_GLISIMAGEHANDLERESIDENTNV_PROC) (GLuint64 handle);

// functions typedefs
GL_FUNC_DEF PFN_GLGETTEXTUREHANDLENV_PROC _glGetTextureHandleNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXTURESAMPLERHANDLENV_PROC _glGetTextureSamplerHandleNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAKETEXTUREHANDLERESIDENTNV_PROC _glMakeTextureHandleResidentNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAKETEXTUREHANDLENONRESIDENTNV_PROC _glMakeTextureHandleNonResidentNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETIMAGEHANDLENV_PROC _glGetImageHandleNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAKEIMAGEHANDLERESIDENTNV_PROC _glMakeImageHandleResidentNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAKEIMAGEHANDLENONRESIDENTNV_PROC _glMakeImageHandleNonResidentNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMHANDLEUI64NV_PROC _glUniformHandleui64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMHANDLEUI64VNV_PROC _glUniformHandleui64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMHANDLEUI64NV_PROC _glProgramUniformHandleui64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMHANDLEUI64VNV_PROC _glProgramUniformHandleui64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISTEXTUREHANDLERESIDENTNV_PROC _glIsTextureHandleResidentNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISIMAGEHANDLERESIDENTNV_PROC _glIsImageHandleResidentNV_ GL_FUNC_DEF2;

// functions inline wrap
inline GLuint64 glGetTextureHandleNV (GLuint texture) { return _glGetTextureHandleNV_(texture); };
inline GLuint64 glGetTextureSamplerHandleNV (GLuint texture, GLuint sampler) { return _glGetTextureSamplerHandleNV_(texture, sampler); };
inline void glMakeTextureHandleResidentNV (GLuint64 handle) { return _glMakeTextureHandleResidentNV_(handle); };
inline void glMakeTextureHandleNonResidentNV (GLuint64 handle) { return _glMakeTextureHandleNonResidentNV_(handle); };
inline GLuint64 glGetImageHandleNV (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) { return _glGetImageHandleNV_(texture, level, layered, layer, format); };
inline void glMakeImageHandleResidentNV (GLuint64 handle, GLenum access) { return _glMakeImageHandleResidentNV_(handle, access); };
inline void glMakeImageHandleNonResidentNV (GLuint64 handle) { return _glMakeImageHandleNonResidentNV_(handle); };
inline void glUniformHandleui64NV (GLint location, GLuint64 value) { return _glUniformHandleui64NV_(location, value); };
inline void glUniformHandleui64vNV (GLint location, GLsizei count, const GLuint64 * value) { return _glUniformHandleui64vNV_(location, count, value); };
inline void glProgramUniformHandleui64NV (GLuint program, GLint location, GLuint64 value) { return _glProgramUniformHandleui64NV_(program, location, value); };
inline void glProgramUniformHandleui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64 * values) { return _glProgramUniformHandleui64vNV_(program, location, count, values); };
inline GLboolean glIsTextureHandleResidentNV (GLuint64 handle) { return _glIsTextureHandleResidentNV_(handle); };
inline GLboolean glIsImageHandleResidentNV (GLuint64 handle) { return _glIsImageHandleResidentNV_(handle); };
#endif //GL_NV_bindless_texture

#ifndef GL_NV_blend_equation_advanced

// Defines
#define GL_BLEND_OVERLAP_NV               0x9281 
#define GL_BLEND_PREMULTIPLIED_SRC_NV     0x9280 
#define GL_BLUE_NV                        0x1905 
#define GL_COLORBURN_NV                   0x929A 
#define GL_COLORDODGE_NV                  0x9299 
#define GL_CONJOINT_NV                    0x9284 
#define GL_CONTRAST_NV                    0x92A1 
#define GL_DARKEN_NV                      0x9297 
#define GL_DIFFERENCE_NV                  0x929E 
#define GL_DISJOINT_NV                    0x9283 
#define GL_DST_ATOP_NV                    0x928F 
#define GL_DST_IN_NV                      0x928B 
#define GL_DST_NV                         0x9287 
#define GL_DST_OUT_NV                     0x928D 
#define GL_DST_OVER_NV                    0x9289 
#define GL_EXCLUSION_NV                   0x92A0 
#define GL_GREEN_NV                       0x1904 
#define GL_HARDLIGHT_NV                   0x929B 
#define GL_HARDMIX_NV                     0x92A9 
#define GL_HSL_COLOR_NV                   0x92AF 
#define GL_HSL_HUE_NV                     0x92AD 
#define GL_HSL_LUMINOSITY_NV              0x92B0 
#define GL_HSL_SATURATION_NV              0x92AE 
#define GL_INVERT_OVG_NV                  0x92B4 
#define GL_INVERT_RGB_NV                  0x92A3 
#define GL_LIGHTEN_NV                     0x9298 
#define GL_LINEARBURN_NV                  0x92A5 
#define GL_LINEARDODGE_NV                 0x92A4 
#define GL_LINEARLIGHT_NV                 0x92A7 
#define GL_MINUS_CLAMPED_NV               0x92B3 
#define GL_MINUS_NV                       0x929F 
#define GL_MULTIPLY_NV                    0x9294 
#define GL_OVERLAY_NV                     0x9296 
#define GL_PINLIGHT_NV                    0x92A8 
#define GL_PLUS_CLAMPED_ALPHA_NV          0x92B2 
#define GL_PLUS_CLAMPED_NV                0x92B1 
#define GL_PLUS_DARKER_NV                 0x9292 
#define GL_PLUS_NV                        0x9291 
#define GL_RED_NV                         0x1903 
#define GL_SCREEN_NV                      0x9295 
#define GL_SOFTLIGHT_NV                   0x929C 
#define GL_SRC_ATOP_NV                    0x928E 
#define GL_SRC_IN_NV                      0x928A 
#define GL_SRC_NV                         0x9286 
#define GL_SRC_OUT_NV                     0x928C 
#define GL_SRC_OVER_NV                    0x9288 
#define GL_UNCORRELATED_NV                0x9282 
#define GL_VIVIDLIGHT_NV                  0x92A6 
#define GL_XOR_NV                         0x1506 

// functions typedefs
typedef void (APIENTRYP PFN_GLBLENDPARAMETERINV_PROC) (GLenum pname, GLint value);
typedef void (APIENTRYP PFN_GLBLENDBARRIERNV_PROC) (void);

// functions typedefs
GL_FUNC_DEF PFN_GLBLENDPARAMETERINV_PROC _glBlendParameteriNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBLENDBARRIERNV_PROC _glBlendBarrierNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBlendParameteriNV (GLenum pname, GLint value) { return _glBlendParameteriNV_(pname, value); };
inline void glBlendBarrierNV (void) { return _glBlendBarrierNV_(); };
#endif //GL_NV_blend_equation_advanced

#ifndef GL_NV_blend_equation_advanced_coherent

// Defines
#define GL_BLEND_ADVANCED_COHERENT_NV     0x9285 
#endif //GL_NV_blend_equation_advanced_coherent

#ifndef GL_NV_blend_minmax_factor

// Defines
#define GL_FACTOR_MIN_AMD                 0x901C 
#define GL_FACTOR_MAX_AMD                 0x901D 
#endif //GL_NV_blend_minmax_factor

#ifndef GL_NV_clip_space_w_scaling

// Defines
#define GL_VIEWPORT_POSITION_W_SCALE_NV   0x937C 
#define GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV 0x937D 
#define GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV 0x937E 

// functions typedefs
typedef void (APIENTRYP PFN_GLVIEWPORTPOSITIONWSCALENV_PROC) (GLuint index, GLfloat xcoeff, GLfloat ycoeff);

// functions typedefs
GL_FUNC_DEF PFN_GLVIEWPORTPOSITIONWSCALENV_PROC _glViewportPositionWScaleNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glViewportPositionWScaleNV (GLuint index, GLfloat xcoeff, GLfloat ycoeff) { return _glViewportPositionWScaleNV_(index, xcoeff, ycoeff); };
#endif //GL_NV_clip_space_w_scaling

#ifndef GL_NV_command_list

// Defines
#define GL_TERMINATE_SEQUENCE_COMMAND_NV  0x0000 
#define GL_NOP_COMMAND_NV                 0x0001 
#define GL_DRAW_ELEMENTS_COMMAND_NV       0x0002 
#define GL_DRAW_ARRAYS_COMMAND_NV         0x0003 
#define GL_DRAW_ELEMENTS_STRIP_COMMAND_NV 0x0004 
#define GL_DRAW_ARRAYS_STRIP_COMMAND_NV   0x0005 
#define GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV 0x0006 
#define GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV 0x0007 
#define GL_ELEMENT_ADDRESS_COMMAND_NV     0x0008 
#define GL_ATTRIBUTE_ADDRESS_COMMAND_NV   0x0009 
#define GL_UNIFORM_ADDRESS_COMMAND_NV     0x000A 
#define GL_BLEND_COLOR_COMMAND_NV         0x000B 
#define GL_STENCIL_REF_COMMAND_NV         0x000C 
#define GL_LINE_WIDTH_COMMAND_NV          0x000D 
#define GL_POLYGON_OFFSET_COMMAND_NV      0x000E 
#define GL_ALPHA_REF_COMMAND_NV           0x000F 
#define GL_VIEWPORT_COMMAND_NV            0x0010 
#define GL_SCISSOR_COMMAND_NV             0x0011 
#define GL_FRONT_FACE_COMMAND_NV          0x0012 

// functions typedefs
typedef void (APIENTRYP PFN_GLCREATESTATESNV_PROC) (GLsizei n, GLuint * states);
typedef void (APIENTRYP PFN_GLDELETESTATESNV_PROC) (GLsizei n, const GLuint * states);
typedef GLboolean (APIENTRYP PFN_GLISSTATENV_PROC) (GLuint state);
typedef void (APIENTRYP PFN_GLSTATECAPTURENV_PROC) (GLuint state, GLenum mode);
typedef GLuint (APIENTRYP PFN_GLGETCOMMANDHEADERNV_PROC) (GLenum tokenID, GLuint size);
typedef GLushort (APIENTRYP PFN_GLGETSTAGEINDEXNV_PROC) (GLenum shadertype);
typedef void (APIENTRYP PFN_GLDRAWCOMMANDSNV_PROC) (GLenum primitiveMode, GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, GLuint count);
typedef void (APIENTRYP PFN_GLDRAWCOMMANDSADDRESSNV_PROC) (GLenum primitiveMode, const GLuint64 * indirects, const GLsizei * sizes, GLuint count);
typedef void (APIENTRYP PFN_GLDRAWCOMMANDSSTATESNV_PROC) (GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count);
typedef void (APIENTRYP PFN_GLDRAWCOMMANDSSTATESADDRESSNV_PROC) (const GLuint64 * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count);
typedef void (APIENTRYP PFN_GLCREATECOMMANDLISTSNV_PROC) (GLsizei n, GLuint * lists);
typedef void (APIENTRYP PFN_GLDELETECOMMANDLISTSNV_PROC) (GLsizei n, const GLuint * lists);
typedef GLboolean (APIENTRYP PFN_GLISCOMMANDLISTNV_PROC) (GLuint list);
typedef void (APIENTRYP PFN_GLLISTDRAWCOMMANDSSTATESCLIENTNV_PROC) (GLuint list, GLuint segment, const void * * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count);
typedef void (APIENTRYP PFN_GLCOMMANDLISTSEGMENTSNV_PROC) (GLuint list, GLuint segments);
typedef void (APIENTRYP PFN_GLCOMPILECOMMANDLISTNV_PROC) (GLuint list);
typedef void (APIENTRYP PFN_GLCALLCOMMANDLISTNV_PROC) (GLuint list);

// functions typedefs
GL_FUNC_DEF PFN_GLCREATESTATESNV_PROC _glCreateStatesNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETESTATESNV_PROC _glDeleteStatesNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISSTATENV_PROC _glIsStateNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSTATECAPTURENV_PROC _glStateCaptureNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOMMANDHEADERNV_PROC _glGetCommandHeaderNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETSTAGEINDEXNV_PROC _glGetStageIndexNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWCOMMANDSNV_PROC _glDrawCommandsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWCOMMANDSADDRESSNV_PROC _glDrawCommandsAddressNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWCOMMANDSSTATESNV_PROC _glDrawCommandsStatesNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWCOMMANDSSTATESADDRESSNV_PROC _glDrawCommandsStatesAddressNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCREATECOMMANDLISTSNV_PROC _glCreateCommandListsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETECOMMANDLISTSNV_PROC _glDeleteCommandListsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISCOMMANDLISTNV_PROC _glIsCommandListNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLISTDRAWCOMMANDSSTATESCLIENTNV_PROC _glListDrawCommandsStatesClientNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMMANDLISTSEGMENTSNV_PROC _glCommandListSegmentsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPILECOMMANDLISTNV_PROC _glCompileCommandListNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCALLCOMMANDLISTNV_PROC _glCallCommandListNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glCreateStatesNV (GLsizei n, GLuint * states) { return _glCreateStatesNV_(n, states); };
inline void glDeleteStatesNV (GLsizei n, const GLuint * states) { return _glDeleteStatesNV_(n, states); };
inline GLboolean glIsStateNV (GLuint state) { return _glIsStateNV_(state); };
inline void glStateCaptureNV (GLuint state, GLenum mode) { return _glStateCaptureNV_(state, mode); };
inline GLuint glGetCommandHeaderNV (GLenum tokenID, GLuint size) { return _glGetCommandHeaderNV_(tokenID, size); };
inline GLushort glGetStageIndexNV (GLenum shadertype) { return _glGetStageIndexNV_(shadertype); };
inline void glDrawCommandsNV (GLenum primitiveMode, GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, GLuint count) { return _glDrawCommandsNV_(primitiveMode, buffer, indirects, sizes, count); };
inline void glDrawCommandsAddressNV (GLenum primitiveMode, const GLuint64 * indirects, const GLsizei * sizes, GLuint count) { return _glDrawCommandsAddressNV_(primitiveMode, indirects, sizes, count); };
inline void glDrawCommandsStatesNV (GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) { return _glDrawCommandsStatesNV_(buffer, indirects, sizes, states, fbos, count); };
inline void glDrawCommandsStatesAddressNV (const GLuint64 * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) { return _glDrawCommandsStatesAddressNV_(indirects, sizes, states, fbos, count); };
inline void glCreateCommandListsNV (GLsizei n, GLuint * lists) { return _glCreateCommandListsNV_(n, lists); };
inline void glDeleteCommandListsNV (GLsizei n, const GLuint * lists) { return _glDeleteCommandListsNV_(n, lists); };
inline GLboolean glIsCommandListNV (GLuint list) { return _glIsCommandListNV_(list); };
inline void glListDrawCommandsStatesClientNV (GLuint list, GLuint segment, const void * * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) { return _glListDrawCommandsStatesClientNV_(list, segment, indirects, sizes, states, fbos, count); };
inline void glCommandListSegmentsNV (GLuint list, GLuint segments) { return _glCommandListSegmentsNV_(list, segments); };
inline void glCompileCommandListNV (GLuint list) { return _glCompileCommandListNV_(list); };
inline void glCallCommandListNV (GLuint list) { return _glCallCommandListNV_(list); };
#endif //GL_NV_command_list

// GL_NV_compute_shader_derivatives

#ifndef GL_NV_conditional_render

// Defines
#define GL_QUERY_WAIT_NV                  0x8E13 
#define GL_QUERY_NO_WAIT_NV               0x8E14 
#define GL_QUERY_BY_REGION_WAIT_NV        0x8E15 
#define GL_QUERY_BY_REGION_NO_WAIT_NV     0x8E16 

// functions typedefs
typedef void (APIENTRYP PFN_GLBEGINCONDITIONALRENDERNV_PROC) (GLuint id, GLenum mode);
typedef void (APIENTRYP PFN_GLENDCONDITIONALRENDERNV_PROC) (void);

// functions typedefs
GL_FUNC_DEF PFN_GLBEGINCONDITIONALRENDERNV_PROC _glBeginConditionalRenderNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENDCONDITIONALRENDERNV_PROC _glEndConditionalRenderNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBeginConditionalRenderNV (GLuint id, GLenum mode) { return _glBeginConditionalRenderNV_(id, mode); };
inline void glEndConditionalRenderNV (void) { return _glEndConditionalRenderNV_(); };
#endif //GL_NV_conditional_render

#ifndef GL_NV_conservative_raster

// Defines
#define GL_CONSERVATIVE_RASTERIZATION_NV  0x9346 
#define GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV 0x9347 
#define GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV 0x9348 
#define GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV 0x9349 

// functions typedefs
typedef void (APIENTRYP PFN_GLSUBPIXELPRECISIONBIASNV_PROC) (GLuint xbits, GLuint ybits);

// functions typedefs
GL_FUNC_DEF PFN_GLSUBPIXELPRECISIONBIASNV_PROC _glSubpixelPrecisionBiasNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glSubpixelPrecisionBiasNV (GLuint xbits, GLuint ybits) { return _glSubpixelPrecisionBiasNV_(xbits, ybits); };
#endif //GL_NV_conservative_raster

#ifndef GL_NV_conservative_raster_dilate

// Defines
#define GL_CONSERVATIVE_RASTER_DILATE_NV  0x9379 
#define GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV 0x937A 
#define GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV 0x937B 

// functions typedefs
typedef void (APIENTRYP PFN_GLCONSERVATIVERASTERPARAMETERFNV_PROC) (GLenum pname, GLfloat value);

// functions typedefs
GL_FUNC_DEF PFN_GLCONSERVATIVERASTERPARAMETERFNV_PROC _glConservativeRasterParameterfNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glConservativeRasterParameterfNV (GLenum pname, GLfloat value) { return _glConservativeRasterParameterfNV_(pname, value); };
#endif //GL_NV_conservative_raster_dilate

#ifndef GL_NV_conservative_raster_pre_snap

// Defines
#define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV 0x9550 
#endif //GL_NV_conservative_raster_pre_snap

#ifndef GL_NV_conservative_raster_pre_snap_triangles

// Defines
#define GL_CONSERVATIVE_RASTER_MODE_NV    0x954D 
#define GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV 0x954E 
#define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV 0x954F 

// functions typedefs
typedef void (APIENTRYP PFN_GLCONSERVATIVERASTERPARAMETERINV_PROC) (GLenum pname, GLint param);

// functions typedefs
GL_FUNC_DEF PFN_GLCONSERVATIVERASTERPARAMETERINV_PROC _glConservativeRasterParameteriNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glConservativeRasterParameteriNV (GLenum pname, GLint param) { return _glConservativeRasterParameteriNV_(pname, param); };
#endif //GL_NV_conservative_raster_pre_snap_triangles

// GL_NV_conservative_raster_underestimation

#ifndef GL_NV_draw_vulkan_image

// functions typedefs
typedef void (APIENTRYP PFN_GLDRAWVKIMAGENV_PROC) (GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
typedef GLVULKANPROCNV (APIENTRYP PFN_GLGETVKPROCADDRNV_PROC) (const GLchar * name);
typedef void (APIENTRYP PFN_GLWAITVKSEMAPHORENV_PROC) (GLuint64 vkSemaphore);
typedef void (APIENTRYP PFN_GLSIGNALVKSEMAPHORENV_PROC) (GLuint64 vkSemaphore);
typedef void (APIENTRYP PFN_GLSIGNALVKFENCENV_PROC) (GLuint64 vkFence);

// functions typedefs
GL_FUNC_DEF PFN_GLDRAWVKIMAGENV_PROC _glDrawVkImageNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVKPROCADDRNV_PROC _glGetVkProcAddrNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWAITVKSEMAPHORENV_PROC _glWaitVkSemaphoreNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSIGNALVKSEMAPHORENV_PROC _glSignalVkSemaphoreNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSIGNALVKFENCENV_PROC _glSignalVkFenceNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDrawVkImageNV (GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) { return _glDrawVkImageNV_(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1); };
inline GLVULKANPROCNV glGetVkProcAddrNV (const GLchar * name) { return _glGetVkProcAddrNV_(name); };
inline void glWaitVkSemaphoreNV (GLuint64 vkSemaphore) { return _glWaitVkSemaphoreNV_(vkSemaphore); };
inline void glSignalVkSemaphoreNV (GLuint64 vkSemaphore) { return _glSignalVkSemaphoreNV_(vkSemaphore); };
inline void glSignalVkFenceNV (GLuint64 vkFence) { return _glSignalVkFenceNV_(vkFence); };
#endif //GL_NV_draw_vulkan_image

#ifndef GL_NV_fill_rectangle

// Defines
#define GL_FILL_RECTANGLE_NV              0x933C 
#endif //GL_NV_fill_rectangle

#ifndef GL_NV_fragment_coverage_to_color

// Defines
#define GL_FRAGMENT_COVERAGE_TO_COLOR_NV  0x92DD 
#define GL_FRAGMENT_COVERAGE_COLOR_NV     0x92DE 

// functions typedefs
typedef void (APIENTRYP PFN_GLFRAGMENTCOVERAGECOLORNV_PROC) (GLuint color);

// functions typedefs
GL_FUNC_DEF PFN_GLFRAGMENTCOVERAGECOLORNV_PROC _glFragmentCoverageColorNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glFragmentCoverageColorNV (GLuint color) { return _glFragmentCoverageColorNV_(color); };
#endif //GL_NV_fragment_coverage_to_color

// GL_NV_fragment_shader_barycentric

// GL_NV_fragment_shader_interlock

#ifndef GL_NV_framebuffer_mixed_samples

// Defines
#define GL_COVERAGE_MODULATION_TABLE_NV   0x9331 
#define GL_COLOR_SAMPLES_NV               0x8E20 
#define GL_DEPTH_SAMPLES_NV               0x932D 
#define GL_STENCIL_SAMPLES_NV             0x932E 
#define GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV 0x932F 
#define GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV 0x9330 
#define GL_COVERAGE_MODULATION_NV         0x9332 
#define GL_COVERAGE_MODULATION_TABLE_SIZE_NV 0x9333 

// functions typedefs
typedef void (APIENTRYP PFN_GLCOVERAGEMODULATIONTABLENV_PROC) (GLsizei n, const GLfloat * v);
typedef void (APIENTRYP PFN_GLGETCOVERAGEMODULATIONTABLENV_PROC) (GLsizei bufSize, GLfloat * v);
typedef void (APIENTRYP PFN_GLCOVERAGEMODULATIONNV_PROC) (GLenum components);

// functions typedefs
GL_FUNC_DEF PFN_GLCOVERAGEMODULATIONTABLENV_PROC _glCoverageModulationTableNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOVERAGEMODULATIONTABLENV_PROC _glGetCoverageModulationTableNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOVERAGEMODULATIONNV_PROC _glCoverageModulationNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glCoverageModulationTableNV (GLsizei n, const GLfloat * v) { return _glCoverageModulationTableNV_(n, v); };
inline void glGetCoverageModulationTableNV (GLsizei bufSize, GLfloat * v) { return _glGetCoverageModulationTableNV_(bufSize, v); };
inline void glCoverageModulationNV (GLenum components) { return _glCoverageModulationNV_(components); };
#endif //GL_NV_framebuffer_mixed_samples

#ifndef GL_NV_framebuffer_multisample_coverage

// Defines
#define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV 0x8CAB 
#define GL_RENDERBUFFER_COLOR_SAMPLES_NV  0x8E10 
#define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV 0x8E11 
#define GL_MULTISAMPLE_COVERAGE_MODES_NV  0x8E12 

// functions typedefs
typedef void (APIENTRYP PFN_GLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENV_PROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);

// functions typedefs
GL_FUNC_DEF PFN_GLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENV_PROC _glRenderbufferStorageMultisampleCoverageNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glRenderbufferStorageMultisampleCoverageNV (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) { return _glRenderbufferStorageMultisampleCoverageNV_(target, coverageSamples, colorSamples, internalformat, width, height); };
#endif //GL_NV_framebuffer_multisample_coverage

// GL_NV_geometry_shader_passthrough

#ifndef GL_NV_gpu_shader5

// Defines
#define GL_INT64_NV                       0x140E 
#define GL_UNSIGNED_INT64_NV              0x140F 
#define GL_INT8_NV                        0x8FE0 
#define GL_INT8_VEC2_NV                   0x8FE1 
#define GL_INT8_VEC3_NV                   0x8FE2 
#define GL_INT8_VEC4_NV                   0x8FE3 
#define GL_INT16_NV                       0x8FE4 
#define GL_INT16_VEC2_NV                  0x8FE5 
#define GL_INT16_VEC3_NV                  0x8FE6 
#define GL_INT16_VEC4_NV                  0x8FE7 
#define GL_INT64_VEC2_NV                  0x8FE9 
#define GL_INT64_VEC3_NV                  0x8FEA 
#define GL_INT64_VEC4_NV                  0x8FEB 
#define GL_UNSIGNED_INT8_NV               0x8FEC 
#define GL_UNSIGNED_INT8_VEC2_NV          0x8FED 
#define GL_UNSIGNED_INT8_VEC3_NV          0x8FEE 
#define GL_UNSIGNED_INT8_VEC4_NV          0x8FEF 
#define GL_UNSIGNED_INT16_NV              0x8FF0 
#define GL_UNSIGNED_INT16_VEC2_NV         0x8FF1 
#define GL_UNSIGNED_INT16_VEC3_NV         0x8FF2 
#define GL_UNSIGNED_INT16_VEC4_NV         0x8FF3 
#define GL_UNSIGNED_INT64_VEC2_NV         0x8FF5 
#define GL_UNSIGNED_INT64_VEC3_NV         0x8FF6 
#define GL_UNSIGNED_INT64_VEC4_NV         0x8FF7 
#define GL_FLOAT16_NV                     0x8FF8 
#define GL_FLOAT16_VEC2_NV                0x8FF9 
#define GL_FLOAT16_VEC3_NV                0x8FFA 
#define GL_FLOAT16_VEC4_NV                0x8FFB 

// functions typedefs
typedef void (APIENTRYP PFN_GLUNIFORM1I64NV_PROC) (GLint location, GLint64EXT x);
typedef void (APIENTRYP PFN_GLUNIFORM2I64NV_PROC) (GLint location, GLint64EXT x, GLint64EXT y);
typedef void (APIENTRYP PFN_GLUNIFORM3I64NV_PROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void (APIENTRYP PFN_GLUNIFORM4I64NV_PROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void (APIENTRYP PFN_GLUNIFORM1I64VNV_PROC) (GLint location, GLsizei count, const GLint64EXT * value);
typedef void (APIENTRYP PFN_GLUNIFORM2I64VNV_PROC) (GLint location, GLsizei count, const GLint64EXT * value);
typedef void (APIENTRYP PFN_GLUNIFORM3I64VNV_PROC) (GLint location, GLsizei count, const GLint64EXT * value);
typedef void (APIENTRYP PFN_GLUNIFORM4I64VNV_PROC) (GLint location, GLsizei count, const GLint64EXT * value);
typedef void (APIENTRYP PFN_GLUNIFORM1UI64NV_PROC) (GLint location, GLuint64EXT x);
typedef void (APIENTRYP PFN_GLUNIFORM2UI64NV_PROC) (GLint location, GLuint64EXT x, GLuint64EXT y);
typedef void (APIENTRYP PFN_GLUNIFORM3UI64NV_PROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void (APIENTRYP PFN_GLUNIFORM4UI64NV_PROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void (APIENTRYP PFN_GLUNIFORM1UI64VNV_PROC) (GLint location, GLsizei count, const GLuint64EXT * value);
typedef void (APIENTRYP PFN_GLUNIFORM2UI64VNV_PROC) (GLint location, GLsizei count, const GLuint64EXT * value);
typedef void (APIENTRYP PFN_GLUNIFORM3UI64VNV_PROC) (GLint location, GLsizei count, const GLuint64EXT * value);
typedef void (APIENTRYP PFN_GLUNIFORM4UI64VNV_PROC) (GLint location, GLsizei count, const GLuint64EXT * value);
typedef void (APIENTRYP PFN_GLGETUNIFORMI64VNV_PROC) (GLuint program, GLint location, GLint64EXT * params);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1I64NV_PROC) (GLuint program, GLint location, GLint64EXT x);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2I64NV_PROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3I64NV_PROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4I64NV_PROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1I64VNV_PROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2I64VNV_PROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3I64VNV_PROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4I64VNV_PROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1UI64NV_PROC) (GLuint program, GLint location, GLuint64EXT x);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2UI64NV_PROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3UI64NV_PROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4UI64NV_PROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM1UI64VNV_PROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM2UI64VNV_PROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM3UI64VNV_PROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT * value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORM4UI64VNV_PROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT * value);

// functions typedefs
GL_FUNC_DEF PFN_GLUNIFORM1I64NV_PROC _glUniform1i64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2I64NV_PROC _glUniform2i64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3I64NV_PROC _glUniform3i64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4I64NV_PROC _glUniform4i64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM1I64VNV_PROC _glUniform1i64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2I64VNV_PROC _glUniform2i64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3I64VNV_PROC _glUniform3i64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4I64VNV_PROC _glUniform4i64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM1UI64NV_PROC _glUniform1ui64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2UI64NV_PROC _glUniform2ui64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3UI64NV_PROC _glUniform3ui64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4UI64NV_PROC _glUniform4ui64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM1UI64VNV_PROC _glUniform1ui64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2UI64VNV_PROC _glUniform2ui64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3UI64VNV_PROC _glUniform3ui64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4UI64VNV_PROC _glUniform4ui64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETUNIFORMI64VNV_PROC _glGetUniformi64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1I64NV_PROC _glProgramUniform1i64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2I64NV_PROC _glProgramUniform2i64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3I64NV_PROC _glProgramUniform3i64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4I64NV_PROC _glProgramUniform4i64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1I64VNV_PROC _glProgramUniform1i64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2I64VNV_PROC _glProgramUniform2i64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3I64VNV_PROC _glProgramUniform3i64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4I64VNV_PROC _glProgramUniform4i64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1UI64NV_PROC _glProgramUniform1ui64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2UI64NV_PROC _glProgramUniform2ui64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3UI64NV_PROC _glProgramUniform3ui64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4UI64NV_PROC _glProgramUniform4ui64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM1UI64VNV_PROC _glProgramUniform1ui64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM2UI64VNV_PROC _glProgramUniform2ui64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM3UI64VNV_PROC _glProgramUniform3ui64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORM4UI64VNV_PROC _glProgramUniform4ui64vNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glUniform1i64NV (GLint location, GLint64EXT x) { return _glUniform1i64NV_(location, x); };
inline void glUniform2i64NV (GLint location, GLint64EXT x, GLint64EXT y) { return _glUniform2i64NV_(location, x, y); };
inline void glUniform3i64NV (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) { return _glUniform3i64NV_(location, x, y, z); };
inline void glUniform4i64NV (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { return _glUniform4i64NV_(location, x, y, z, w); };
inline void glUniform1i64vNV (GLint location, GLsizei count, const GLint64EXT * value) { return _glUniform1i64vNV_(location, count, value); };
inline void glUniform2i64vNV (GLint location, GLsizei count, const GLint64EXT * value) { return _glUniform2i64vNV_(location, count, value); };
inline void glUniform3i64vNV (GLint location, GLsizei count, const GLint64EXT * value) { return _glUniform3i64vNV_(location, count, value); };
inline void glUniform4i64vNV (GLint location, GLsizei count, const GLint64EXT * value) { return _glUniform4i64vNV_(location, count, value); };
inline void glUniform1ui64NV (GLint location, GLuint64EXT x) { return _glUniform1ui64NV_(location, x); };
inline void glUniform2ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y) { return _glUniform2ui64NV_(location, x, y); };
inline void glUniform3ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { return _glUniform3ui64NV_(location, x, y, z); };
inline void glUniform4ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { return _glUniform4ui64NV_(location, x, y, z, w); };
inline void glUniform1ui64vNV (GLint location, GLsizei count, const GLuint64EXT * value) { return _glUniform1ui64vNV_(location, count, value); };
inline void glUniform2ui64vNV (GLint location, GLsizei count, const GLuint64EXT * value) { return _glUniform2ui64vNV_(location, count, value); };
inline void glUniform3ui64vNV (GLint location, GLsizei count, const GLuint64EXT * value) { return _glUniform3ui64vNV_(location, count, value); };
inline void glUniform4ui64vNV (GLint location, GLsizei count, const GLuint64EXT * value) { return _glUniform4ui64vNV_(location, count, value); };
inline void glGetUniformi64vNV (GLuint program, GLint location, GLint64EXT * params) { return _glGetUniformi64vNV_(program, location, params); };
inline void glProgramUniform1i64NV (GLuint program, GLint location, GLint64EXT x) { return _glProgramUniform1i64NV_(program, location, x); };
inline void glProgramUniform2i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y) { return _glProgramUniform2i64NV_(program, location, x, y); };
inline void glProgramUniform3i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) { return _glProgramUniform3i64NV_(program, location, x, y, z); };
inline void glProgramUniform4i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { return _glProgramUniform4i64NV_(program, location, x, y, z, w); };
inline void glProgramUniform1i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { return _glProgramUniform1i64vNV_(program, location, count, value); };
inline void glProgramUniform2i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { return _glProgramUniform2i64vNV_(program, location, count, value); };
inline void glProgramUniform3i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { return _glProgramUniform3i64vNV_(program, location, count, value); };
inline void glProgramUniform4i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { return _glProgramUniform4i64vNV_(program, location, count, value); };
inline void glProgramUniform1ui64NV (GLuint program, GLint location, GLuint64EXT x) { return _glProgramUniform1ui64NV_(program, location, x); };
inline void glProgramUniform2ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y) { return _glProgramUniform2ui64NV_(program, location, x, y); };
inline void glProgramUniform3ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { return _glProgramUniform3ui64NV_(program, location, x, y, z); };
inline void glProgramUniform4ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { return _glProgramUniform4ui64NV_(program, location, x, y, z, w); };
inline void glProgramUniform1ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { return _glProgramUniform1ui64vNV_(program, location, count, value); };
inline void glProgramUniform2ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { return _glProgramUniform2ui64vNV_(program, location, count, value); };
inline void glProgramUniform3ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { return _glProgramUniform3ui64vNV_(program, location, count, value); };
inline void glProgramUniform4ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { return _glProgramUniform4ui64vNV_(program, location, count, value); };
#endif //GL_NV_gpu_shader5

#ifndef GL_NV_internalformat_sample_query

// Defines
#define GL_MULTISAMPLES_NV                0x9371 
#define GL_SUPERSAMPLE_SCALE_X_NV         0x9372 
#define GL_SUPERSAMPLE_SCALE_Y_NV         0x9373 
#define GL_CONFORMANT_NV                  0x9374 

// functions typedefs
typedef void (APIENTRYP PFN_GLGETINTERNALFORMATSAMPLEIVNV_PROC) (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint * params);

// functions typedefs
GL_FUNC_DEF PFN_GLGETINTERNALFORMATSAMPLEIVNV_PROC _glGetInternalformatSampleivNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glGetInternalformatSampleivNV (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint * params) { return _glGetInternalformatSampleivNV_(target, internalformat, samples, pname, count, params); };
#endif //GL_NV_internalformat_sample_query

#ifndef GL_NV_memory_attachment

// Defines
#define GL_ATTACHED_MEMORY_OBJECT_NV      0x95A4 
#define GL_ATTACHED_MEMORY_OFFSET_NV      0x95A5 
#define GL_MEMORY_ATTACHABLE_ALIGNMENT_NV 0x95A6 
#define GL_MEMORY_ATTACHABLE_SIZE_NV      0x95A7 
#define GL_MEMORY_ATTACHABLE_NV           0x95A8 
#define GL_DETACHED_MEMORY_INCARNATION_NV 0x95A9 
#define GL_DETACHED_TEXTURES_NV           0x95AA 
#define GL_DETACHED_BUFFERS_NV            0x95AB 
#define GL_MAX_DETACHED_TEXTURES_NV       0x95AC 
#define GL_MAX_DETACHED_BUFFERS_NV        0x95AD 

// functions typedefs
typedef void (APIENTRYP PFN_GLGETMEMORYOBJECTDETACHEDRESOURCESUIVNV_PROC) (GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint * params);
typedef void (APIENTRYP PFN_GLRESETMEMORYOBJECTPARAMETERNV_PROC) (GLuint memory, GLenum pname);
typedef void (APIENTRYP PFN_GLTEXATTACHMEMORYNV_PROC) (GLenum target, GLuint memory, GLuint64 offset);
typedef void (APIENTRYP PFN_GLBUFFERATTACHMEMORYNV_PROC) (GLenum target, GLuint memory, GLuint64 offset);
typedef void (APIENTRYP PFN_GLTEXTUREATTACHMEMORYNV_PROC) (GLuint texture, GLuint memory, GLuint64 offset);
typedef void (APIENTRYP PFN_GLNAMEDBUFFERATTACHMEMORYNV_PROC) (GLuint buffer, GLuint memory, GLuint64 offset);

// functions typedefs
GL_FUNC_DEF PFN_GLGETMEMORYOBJECTDETACHEDRESOURCESUIVNV_PROC _glGetMemoryObjectDetachedResourcesuivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRESETMEMORYOBJECTPARAMETERNV_PROC _glResetMemoryObjectParameterNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXATTACHMEMORYNV_PROC _glTexAttachMemoryNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBUFFERATTACHMEMORYNV_PROC _glBufferAttachMemoryNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREATTACHMEMORYNV_PROC _glTextureAttachMemoryNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDBUFFERATTACHMEMORYNV_PROC _glNamedBufferAttachMemoryNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glGetMemoryObjectDetachedResourcesuivNV (GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint * params) { return _glGetMemoryObjectDetachedResourcesuivNV_(memory, pname, first, count, params); };
inline void glResetMemoryObjectParameterNV (GLuint memory, GLenum pname) { return _glResetMemoryObjectParameterNV_(memory, pname); };
inline void glTexAttachMemoryNV (GLenum target, GLuint memory, GLuint64 offset) { return _glTexAttachMemoryNV_(target, memory, offset); };
inline void glBufferAttachMemoryNV (GLenum target, GLuint memory, GLuint64 offset) { return _glBufferAttachMemoryNV_(target, memory, offset); };
inline void glTextureAttachMemoryNV (GLuint texture, GLuint memory, GLuint64 offset) { return _glTextureAttachMemoryNV_(texture, memory, offset); };
inline void glNamedBufferAttachMemoryNV (GLuint buffer, GLuint memory, GLuint64 offset) { return _glNamedBufferAttachMemoryNV_(buffer, memory, offset); };
#endif //GL_NV_memory_attachment

#ifndef GL_NV_mesh_shader

// Defines
#define GL_MESH_SHADER_NV                 0x9559 
#define GL_TASK_SHADER_NV                 0x955A 
#define GL_MAX_MESH_UNIFORM_BLOCKS_NV     0x8E60 
#define GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV 0x8E61 
#define GL_MAX_MESH_IMAGE_UNIFORMS_NV     0x8E62 
#define GL_MAX_MESH_UNIFORM_COMPONENTS_NV 0x8E63 
#define GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV 0x8E64 
#define GL_MAX_MESH_ATOMIC_COUNTERS_NV    0x8E65 
#define GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV 0x8E66 
#define GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV 0x8E67 
#define GL_MAX_TASK_UNIFORM_BLOCKS_NV     0x8E68 
#define GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV 0x8E69 
#define GL_MAX_TASK_IMAGE_UNIFORMS_NV     0x8E6A 
#define GL_MAX_TASK_UNIFORM_COMPONENTS_NV 0x8E6B 
#define GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV 0x8E6C 
#define GL_MAX_TASK_ATOMIC_COUNTERS_NV    0x8E6D 
#define GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV 0x8E6E 
#define GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV 0x8E6F 
#define GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV 0x95A2 
#define GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV 0x95A3 
#define GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV  0x9536 
#define GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV  0x9537 
#define GL_MAX_MESH_OUTPUT_VERTICES_NV    0x9538 
#define GL_MAX_MESH_OUTPUT_PRIMITIVES_NV  0x9539 
#define GL_MAX_TASK_OUTPUT_COUNT_NV       0x953A 
#define GL_MAX_DRAW_MESH_TASKS_COUNT_NV   0x953D 
#define GL_MAX_MESH_VIEWS_NV              0x9557 
#define GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV 0x92DF 
#define GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV 0x9543 
#define GL_MAX_MESH_WORK_GROUP_SIZE_NV    0x953B 
#define GL_MAX_TASK_WORK_GROUP_SIZE_NV    0x953C 
#define GL_MESH_WORK_GROUP_SIZE_NV        0x953E 
#define GL_TASK_WORK_GROUP_SIZE_NV        0x953F 
#define GL_MESH_VERTICES_OUT_NV           0x9579 
#define GL_MESH_PRIMITIVES_OUT_NV         0x957A 
#define GL_MESH_OUTPUT_TYPE_NV            0x957B 
#define GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV 0x959C 
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV 0x959D 
#define GL_REFERENCED_BY_MESH_SHADER_NV   0x95A0 
#define GL_REFERENCED_BY_TASK_SHADER_NV   0x95A1 
#define GL_MESH_SHADER_BIT_NV             0x00000040 
#define GL_TASK_SHADER_BIT_NV             0x00000080 
#define GL_MESH_SUBROUTINE_NV             0x957C 
#define GL_TASK_SUBROUTINE_NV             0x957D 
#define GL_MESH_SUBROUTINE_UNIFORM_NV     0x957E 
#define GL_TASK_SUBROUTINE_UNIFORM_NV     0x957F 
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV 0x959E 
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV 0x959F 

// functions typedefs
typedef void (APIENTRYP PFN_GLDRAWMESHTASKSNV_PROC) (GLuint first, GLuint count);
typedef void (APIENTRYP PFN_GLDRAWMESHTASKSINDIRECTNV_PROC) (GLintptr indirect);
typedef void (APIENTRYP PFN_GLMULTIDRAWMESHTASKSINDIRECTNV_PROC) (GLintptr indirect, GLsizei drawcount, GLsizei stride);
typedef void (APIENTRYP PFN_GLMULTIDRAWMESHTASKSINDIRECTCOUNTNV_PROC) (GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);

// functions typedefs
GL_FUNC_DEF PFN_GLDRAWMESHTASKSNV_PROC _glDrawMeshTasksNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWMESHTASKSINDIRECTNV_PROC _glDrawMeshTasksIndirectNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTIDRAWMESHTASKSINDIRECTNV_PROC _glMultiDrawMeshTasksIndirectNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTIDRAWMESHTASKSINDIRECTCOUNTNV_PROC _glMultiDrawMeshTasksIndirectCountNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDrawMeshTasksNV (GLuint first, GLuint count) { return _glDrawMeshTasksNV_(first, count); };
inline void glDrawMeshTasksIndirectNV (GLintptr indirect) { return _glDrawMeshTasksIndirectNV_(indirect); };
inline void glMultiDrawMeshTasksIndirectNV (GLintptr indirect, GLsizei drawcount, GLsizei stride) { return _glMultiDrawMeshTasksIndirectNV_(indirect, drawcount, stride); };
inline void glMultiDrawMeshTasksIndirectCountNV (GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { return _glMultiDrawMeshTasksIndirectCountNV_(indirect, drawcount, maxdrawcount, stride); };
#endif //GL_NV_mesh_shader

#ifndef GL_NV_path_rendering

// Defines
#define GL_PATH_FORMAT_SVG_NV             0x9070 
#define GL_PATH_FORMAT_PS_NV              0x9071 
#define GL_STANDARD_FONT_NAME_NV          0x9072 
#define GL_SYSTEM_FONT_NAME_NV            0x9073 
#define GL_FILE_NAME_NV                   0x9074 
#define GL_PATH_STROKE_WIDTH_NV           0x9075 
#define GL_PATH_END_CAPS_NV               0x9076 
#define GL_PATH_INITIAL_END_CAP_NV        0x9077 
#define GL_PATH_TERMINAL_END_CAP_NV       0x9078 
#define GL_PATH_JOIN_STYLE_NV             0x9079 
#define GL_PATH_MITER_LIMIT_NV            0x907A 
#define GL_PATH_DASH_CAPS_NV              0x907B 
#define GL_PATH_INITIAL_DASH_CAP_NV       0x907C 
#define GL_PATH_TERMINAL_DASH_CAP_NV      0x907D 
#define GL_PATH_DASH_OFFSET_NV            0x907E 
#define GL_PATH_CLIENT_LENGTH_NV          0x907F 
#define GL_PATH_FILL_MODE_NV              0x9080 
#define GL_PATH_FILL_MASK_NV              0x9081 
#define GL_PATH_FILL_COVER_MODE_NV        0x9082 
#define GL_PATH_STROKE_COVER_MODE_NV      0x9083 
#define GL_PATH_STROKE_MASK_NV            0x9084 
#define GL_COUNT_UP_NV                    0x9088 
#define GL_COUNT_DOWN_NV                  0x9089 
#define GL_PATH_OBJECT_BOUNDING_BOX_NV    0x908A 
#define GL_CONVEX_HULL_NV                 0x908B 
#define GL_BOUNDING_BOX_NV                0x908D 
#define GL_TRANSLATE_X_NV                 0x908E 
#define GL_TRANSLATE_Y_NV                 0x908F 
#define GL_TRANSLATE_2D_NV                0x9090 
#define GL_TRANSLATE_3D_NV                0x9091 
#define GL_AFFINE_2D_NV                   0x9092 
#define GL_AFFINE_3D_NV                   0x9094 
#define GL_TRANSPOSE_AFFINE_2D_NV         0x9096 
#define GL_TRANSPOSE_AFFINE_3D_NV         0x9098 
#define GL_UTF8_NV                        0x909A 
#define GL_UTF16_NV                       0x909B 
#define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C 
#define GL_PATH_COMMAND_COUNT_NV          0x909D 
#define GL_PATH_COORD_COUNT_NV            0x909E 
#define GL_PATH_DASH_ARRAY_COUNT_NV       0x909F 
#define GL_PATH_COMPUTED_LENGTH_NV        0x90A0 
#define GL_PATH_FILL_BOUNDING_BOX_NV      0x90A1 
#define GL_PATH_STROKE_BOUNDING_BOX_NV    0x90A2 
#define GL_SQUARE_NV                      0x90A3 
#define GL_ROUND_NV                       0x90A4 
#define GL_TRIANGULAR_NV                  0x90A5 
#define GL_BEVEL_NV                       0x90A6 
#define GL_MITER_REVERT_NV                0x90A7 
#define GL_MITER_TRUNCATE_NV              0x90A8 
#define GL_SKIP_MISSING_GLYPH_NV          0x90A9 
#define GL_USE_MISSING_GLYPH_NV           0x90AA 
#define GL_PATH_ERROR_POSITION_NV         0x90AB 
#define GL_ACCUM_ADJACENT_PAIRS_NV        0x90AD 
#define GL_ADJACENT_PAIRS_NV              0x90AE 
#define GL_FIRST_TO_REST_NV               0x90AF 
#define GL_PATH_GEN_MODE_NV               0x90B0 
#define GL_PATH_GEN_COEFF_NV              0x90B1 
#define GL_PATH_GEN_COMPONENTS_NV         0x90B3 
#define GL_PATH_STENCIL_FUNC_NV           0x90B7 
#define GL_PATH_STENCIL_REF_NV            0x90B8 
#define GL_PATH_STENCIL_VALUE_MASK_NV     0x90B9 
#define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD 
#define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE 
#define GL_PATH_COVER_DEPTH_FUNC_NV       0x90BF 
#define GL_PATH_DASH_OFFSET_RESET_NV      0x90B4 
#define GL_MOVE_TO_RESETS_NV              0x90B5 
#define GL_MOVE_TO_CONTINUES_NV           0x90B6 
#define GL_CLOSE_PATH_NV                  0x00 
#define GL_MOVE_TO_NV                     0x02 
#define GL_RELATIVE_MOVE_TO_NV            0x03 
#define GL_LINE_TO_NV                     0x04 
#define GL_RELATIVE_LINE_TO_NV            0x05 
#define GL_HORIZONTAL_LINE_TO_NV          0x06 
#define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07 
#define GL_VERTICAL_LINE_TO_NV            0x08 
#define GL_RELATIVE_VERTICAL_LINE_TO_NV   0x09 
#define GL_QUADRATIC_CURVE_TO_NV          0x0A 
#define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B 
#define GL_CUBIC_CURVE_TO_NV              0x0C 
#define GL_RELATIVE_CUBIC_CURVE_TO_NV     0x0D 
#define GL_SMOOTH_QUADRATIC_CURVE_TO_NV   0x0E 
#define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F 
#define GL_SMOOTH_CUBIC_CURVE_TO_NV       0x10 
#define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11 
#define GL_SMALL_CCW_ARC_TO_NV            0x12 
#define GL_RELATIVE_SMALL_CCW_ARC_TO_NV   0x13 
#define GL_SMALL_CW_ARC_TO_NV             0x14 
#define GL_RELATIVE_SMALL_CW_ARC_TO_NV    0x15 
#define GL_LARGE_CCW_ARC_TO_NV            0x16 
#define GL_RELATIVE_LARGE_CCW_ARC_TO_NV   0x17 
#define GL_LARGE_CW_ARC_TO_NV             0x18 
#define GL_RELATIVE_LARGE_CW_ARC_TO_NV    0x19 
#define GL_RESTART_PATH_NV                0xF0 
#define GL_DUP_FIRST_CUBIC_CURVE_TO_NV    0xF2 
#define GL_DUP_LAST_CUBIC_CURVE_TO_NV     0xF4 
#define GL_RECT_NV                        0xF6 
#define GL_CIRCULAR_CCW_ARC_TO_NV         0xF8 
#define GL_CIRCULAR_CW_ARC_TO_NV          0xFA 
#define GL_CIRCULAR_TANGENT_ARC_TO_NV     0xFC 
#define GL_ARC_TO_NV                      0xFE 
#define GL_RELATIVE_ARC_TO_NV             0xFF 
#define GL_BOLD_BIT_NV                    0x01 
#define GL_ITALIC_BIT_NV                  0x02 
#define GL_GLYPH_WIDTH_BIT_NV             0x01 
#define GL_GLYPH_HEIGHT_BIT_NV            0x02 
#define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04 
#define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08 
#define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10 
#define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20 
#define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40 
#define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80 
#define GL_GLYPH_HAS_KERNING_BIT_NV       0x100 
#define GL_FONT_X_MIN_BOUNDS_BIT_NV       0x00010000 
#define GL_FONT_Y_MIN_BOUNDS_BIT_NV       0x00020000 
#define GL_FONT_X_MAX_BOUNDS_BIT_NV       0x00040000 
#define GL_FONT_Y_MAX_BOUNDS_BIT_NV       0x00080000 
#define GL_FONT_UNITS_PER_EM_BIT_NV       0x00100000 
#define GL_FONT_ASCENDER_BIT_NV           0x00200000 
#define GL_FONT_DESCENDER_BIT_NV          0x00400000 
#define GL_FONT_HEIGHT_BIT_NV             0x00800000 
#define GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV  0x01000000 
#define GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV 0x02000000 
#define GL_FONT_UNDERLINE_POSITION_BIT_NV 0x04000000 
#define GL_FONT_UNDERLINE_THICKNESS_BIT_NV 0x08000000 
#define GL_FONT_HAS_KERNING_BIT_NV        0x10000000 
#define GL_ROUNDED_RECT_NV                0xE8 
#define GL_RELATIVE_ROUNDED_RECT_NV       0xE9 
#define GL_ROUNDED_RECT2_NV               0xEA 
#define GL_RELATIVE_ROUNDED_RECT2_NV      0xEB 
#define GL_ROUNDED_RECT4_NV               0xEC 
#define GL_RELATIVE_ROUNDED_RECT4_NV      0xED 
#define GL_ROUNDED_RECT8_NV               0xEE 
#define GL_RELATIVE_ROUNDED_RECT8_NV      0xEF 
#define GL_RELATIVE_RECT_NV               0xF7 
#define GL_FONT_GLYPHS_AVAILABLE_NV       0x9368 
#define GL_FONT_TARGET_UNAVAILABLE_NV     0x9369 
#define GL_FONT_UNAVAILABLE_NV            0x936A 
#define GL_FONT_UNINTELLIGIBLE_NV         0x936B 
#define GL_CONIC_CURVE_TO_NV              0x1A 
#define GL_RELATIVE_CONIC_CURVE_TO_NV     0x1B 
#define GL_FONT_NUM_GLYPH_INDICES_BIT_NV  0x20000000 
#define GL_STANDARD_FONT_FORMAT_NV        0x936C 
#define GL_PATH_PROJECTION_NV             0x1701 
#define GL_PATH_MODELVIEW_NV              0x1700 
#define GL_PATH_MODELVIEW_STACK_DEPTH_NV  0x0BA3 
#define GL_PATH_MODELVIEW_MATRIX_NV       0x0BA6 
#define GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV 0x0D36 
#define GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV 0x84E3 
#define GL_PATH_PROJECTION_STACK_DEPTH_NV 0x0BA4 
#define GL_PATH_PROJECTION_MATRIX_NV      0x0BA7 
#define GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV 0x0D38 
#define GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV 0x84E4 
#define GL_FRAGMENT_INPUT_NV              0x936D 
#define GL_2_BYTES_NV                     0x1407 
#define GL_3_BYTES_NV                     0x1408 
#define GL_4_BYTES_NV                     0x1409 
#define GL_EYE_LINEAR_NV                  0x2400 
#define GL_OBJECT_LINEAR_NV               0x2401 
#define GL_CONSTANT_NV                    0x8576 
#define GL_PATH_FOG_GEN_MODE_NV           0x90AC 
#define GL_PRIMARY_COLOR_NV               0x852C 
#define GL_SECONDARY_COLOR_NV             0x852D 
#define GL_PATH_GEN_COLOR_FORMAT_NV       0x90B2 

// functions typedefs
typedef GLuint (APIENTRYP PFN_GLGENPATHSNV_PROC) (GLsizei range);
typedef void (APIENTRYP PFN_GLDELETEPATHSNV_PROC) (GLuint path, GLsizei range);
typedef GLboolean (APIENTRYP PFN_GLISPATHNV_PROC) (GLuint path);
typedef void (APIENTRYP PFN_GLPATHCOMMANDSNV_PROC) (GLuint path, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords);
typedef void (APIENTRYP PFN_GLPATHCOORDSNV_PROC) (GLuint path, GLsizei numCoords, GLenum coordType, const void * coords);
typedef void (APIENTRYP PFN_GLPATHSUBCOMMANDSNV_PROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords);
typedef void (APIENTRYP PFN_GLPATHSUBCOORDSNV_PROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void * coords);
typedef void (APIENTRYP PFN_GLPATHSTRINGNV_PROC) (GLuint path, GLenum format, GLsizei length, const void * pathString);
typedef void (APIENTRYP PFN_GLPATHGLYPHSNV_PROC) (GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void * charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void (APIENTRYP PFN_GLPATHGLYPHRANGENV_PROC) (GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void (APIENTRYP PFN_GLWEIGHTPATHSNV_PROC) (GLuint resultPath, GLsizei numPaths, const GLuint * paths, const GLfloat * weights);
typedef void (APIENTRYP PFN_GLCOPYPATHNV_PROC) (GLuint resultPath, GLuint srcPath);
typedef void (APIENTRYP PFN_GLINTERPOLATEPATHSNV_PROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
typedef void (APIENTRYP PFN_GLTRANSFORMPATHNV_PROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat * transformValues);
typedef void (APIENTRYP PFN_GLPATHPARAMETERIVNV_PROC) (GLuint path, GLenum pname, const GLint * value);
typedef void (APIENTRYP PFN_GLPATHPARAMETERINV_PROC) (GLuint path, GLenum pname, GLint value);
typedef void (APIENTRYP PFN_GLPATHPARAMETERFVNV_PROC) (GLuint path, GLenum pname, const GLfloat * value);
typedef void (APIENTRYP PFN_GLPATHPARAMETERFNV_PROC) (GLuint path, GLenum pname, GLfloat value);
typedef void (APIENTRYP PFN_GLPATHDASHARRAYNV_PROC) (GLuint path, GLsizei dashCount, const GLfloat * dashArray);
typedef void (APIENTRYP PFN_GLPATHSTENCILFUNCNV_PROC) (GLenum func, GLint ref, GLuint mask);
typedef void (APIENTRYP PFN_GLPATHSTENCILDEPTHOFFSETNV_PROC) (GLfloat factor, GLfloat units);
typedef void (APIENTRYP PFN_GLSTENCILFILLPATHNV_PROC) (GLuint path, GLenum fillMode, GLuint mask);
typedef void (APIENTRYP PFN_GLSTENCILSTROKEPATHNV_PROC) (GLuint path, GLint reference, GLuint mask);
typedef void (APIENTRYP PFN_GLSTENCILFILLPATHINSTANCEDNV_PROC) (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat * transformValues);
typedef void (APIENTRYP PFN_GLSTENCILSTROKEPATHINSTANCEDNV_PROC) (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat * transformValues);
typedef void (APIENTRYP PFN_GLPATHCOVERDEPTHFUNCNV_PROC) (GLenum func);
typedef void (APIENTRYP PFN_GLCOVERFILLPATHNV_PROC) (GLuint path, GLenum coverMode);
typedef void (APIENTRYP PFN_GLCOVERSTROKEPATHNV_PROC) (GLuint path, GLenum coverMode);
typedef void (APIENTRYP PFN_GLCOVERFILLPATHINSTANCEDNV_PROC) (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues);
typedef void (APIENTRYP PFN_GLCOVERSTROKEPATHINSTANCEDNV_PROC) (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues);
typedef void (APIENTRYP PFN_GLGETPATHPARAMETERIVNV_PROC) (GLuint path, GLenum pname, GLint * value);
typedef void (APIENTRYP PFN_GLGETPATHPARAMETERFVNV_PROC) (GLuint path, GLenum pname, GLfloat * value);
typedef void (APIENTRYP PFN_GLGETPATHCOMMANDSNV_PROC) (GLuint path, GLubyte * commands);
typedef void (APIENTRYP PFN_GLGETPATHCOORDSNV_PROC) (GLuint path, GLfloat * coords);
typedef void (APIENTRYP PFN_GLGETPATHDASHARRAYNV_PROC) (GLuint path, GLfloat * dashArray);
typedef void (APIENTRYP PFN_GLGETPATHMETRICSNV_PROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLsizei stride, GLfloat * metrics);
typedef void (APIENTRYP PFN_GLGETPATHMETRICRANGENV_PROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat * metrics);
typedef void (APIENTRYP PFN_GLGETPATHSPACINGNV_PROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat * returnedSpacing);
typedef GLboolean (APIENTRYP PFN_GLISPOINTINFILLPATHNV_PROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
typedef GLboolean (APIENTRYP PFN_GLISPOINTINSTROKEPATHNV_PROC) (GLuint path, GLfloat x, GLfloat y);
typedef GLfloat (APIENTRYP PFN_GLGETPATHLENGTHNV_PROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
typedef GLboolean (APIENTRYP PFN_GLPOINTALONGPATHNV_PROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY);
typedef void (APIENTRYP PFN_GLMATRIXLOAD3X2FNV_PROC) (GLenum matrixMode, const GLfloat * m);
typedef void (APIENTRYP PFN_GLMATRIXLOAD3X3FNV_PROC) (GLenum matrixMode, const GLfloat * m);
typedef void (APIENTRYP PFN_GLMATRIXLOADTRANSPOSE3X3FNV_PROC) (GLenum matrixMode, const GLfloat * m);
typedef void (APIENTRYP PFN_GLMATRIXMULT3X2FNV_PROC) (GLenum matrixMode, const GLfloat * m);
typedef void (APIENTRYP PFN_GLMATRIXMULT3X3FNV_PROC) (GLenum matrixMode, const GLfloat * m);
typedef void (APIENTRYP PFN_GLMATRIXMULTTRANSPOSE3X3FNV_PROC) (GLenum matrixMode, const GLfloat * m);
typedef void (APIENTRYP PFN_GLSTENCILTHENCOVERFILLPATHNV_PROC) (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode);
typedef void (APIENTRYP PFN_GLSTENCILTHENCOVERSTROKEPATHNV_PROC) (GLuint path, GLint reference, GLuint mask, GLenum coverMode);
typedef void (APIENTRYP PFN_GLSTENCILTHENCOVERFILLPATHINSTANCEDNV_PROC) (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues);
typedef void (APIENTRYP PFN_GLSTENCILTHENCOVERSTROKEPATHINSTANCEDNV_PROC) (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues);
typedef GLenum (APIENTRYP PFN_GLPATHGLYPHINDEXRANGENV_PROC) (GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]);
typedef GLenum (APIENTRYP PFN_GLPATHGLYPHINDEXARRAYNV_PROC) (GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef GLenum (APIENTRYP PFN_GLPATHMEMORYGLYPHINDEXARRAYNV_PROC) (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void * fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void (APIENTRYP PFN_GLPROGRAMPATHFRAGMENTINPUTGENNV_PROC) (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat * coeffs);
typedef void (APIENTRYP PFN_GLGETPROGRAMRESOURCEFVNV_PROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLfloat * params);
typedef void (APIENTRYP PFN_GLPATHCOLORGENNV_PROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat * coeffs);
typedef void (APIENTRYP PFN_GLPATHTEXGENNV_PROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat * coeffs);
typedef void (APIENTRYP PFN_GLPATHFOGGENNV_PROC) (GLenum genMode);
typedef void (APIENTRYP PFN_GLGETPATHCOLORGENIVNV_PROC) (GLenum color, GLenum pname, GLint * value);
typedef void (APIENTRYP PFN_GLGETPATHCOLORGENFVNV_PROC) (GLenum color, GLenum pname, GLfloat * value);
typedef void (APIENTRYP PFN_GLGETPATHTEXGENIVNV_PROC) (GLenum texCoordSet, GLenum pname, GLint * value);
typedef void (APIENTRYP PFN_GLGETPATHTEXGENFVNV_PROC) (GLenum texCoordSet, GLenum pname, GLfloat * value);

// functions typedefs
GL_FUNC_DEF PFN_GLGENPATHSNV_PROC _glGenPathsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEPATHSNV_PROC _glDeletePathsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISPATHNV_PROC _glIsPathNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATHCOMMANDSNV_PROC _glPathCommandsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATHCOORDSNV_PROC _glPathCoordsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATHSUBCOMMANDSNV_PROC _glPathSubCommandsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATHSUBCOORDSNV_PROC _glPathSubCoordsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATHSTRINGNV_PROC _glPathStringNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATHGLYPHSNV_PROC _glPathGlyphsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATHGLYPHRANGENV_PROC _glPathGlyphRangeNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWEIGHTPATHSNV_PROC _glWeightPathsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYPATHNV_PROC _glCopyPathNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINTERPOLATEPATHSNV_PROC _glInterpolatePathsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTRANSFORMPATHNV_PROC _glTransformPathNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATHPARAMETERIVNV_PROC _glPathParameterivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATHPARAMETERINV_PROC _glPathParameteriNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATHPARAMETERFVNV_PROC _glPathParameterfvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATHPARAMETERFNV_PROC _glPathParameterfNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATHDASHARRAYNV_PROC _glPathDashArrayNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATHSTENCILFUNCNV_PROC _glPathStencilFuncNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATHSTENCILDEPTHOFFSETNV_PROC _glPathStencilDepthOffsetNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSTENCILFILLPATHNV_PROC _glStencilFillPathNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSTENCILSTROKEPATHNV_PROC _glStencilStrokePathNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSTENCILFILLPATHINSTANCEDNV_PROC _glStencilFillPathInstancedNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSTENCILSTROKEPATHINSTANCEDNV_PROC _glStencilStrokePathInstancedNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATHCOVERDEPTHFUNCNV_PROC _glPathCoverDepthFuncNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOVERFILLPATHNV_PROC _glCoverFillPathNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOVERSTROKEPATHNV_PROC _glCoverStrokePathNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOVERFILLPATHINSTANCEDNV_PROC _glCoverFillPathInstancedNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOVERSTROKEPATHINSTANCEDNV_PROC _glCoverStrokePathInstancedNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPATHPARAMETERIVNV_PROC _glGetPathParameterivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPATHPARAMETERFVNV_PROC _glGetPathParameterfvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPATHCOMMANDSNV_PROC _glGetPathCommandsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPATHCOORDSNV_PROC _glGetPathCoordsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPATHDASHARRAYNV_PROC _glGetPathDashArrayNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPATHMETRICSNV_PROC _glGetPathMetricsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPATHMETRICRANGENV_PROC _glGetPathMetricRangeNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPATHSPACINGNV_PROC _glGetPathSpacingNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISPOINTINFILLPATHNV_PROC _glIsPointInFillPathNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISPOINTINSTROKEPATHNV_PROC _glIsPointInStrokePathNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPATHLENGTHNV_PROC _glGetPathLengthNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOINTALONGPATHNV_PROC _glPointAlongPathNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXLOAD3X2FNV_PROC _glMatrixLoad3x2fNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXLOAD3X3FNV_PROC _glMatrixLoad3x3fNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXLOADTRANSPOSE3X3FNV_PROC _glMatrixLoadTranspose3x3fNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXMULT3X2FNV_PROC _glMatrixMult3x2fNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXMULT3X3FNV_PROC _glMatrixMult3x3fNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXMULTTRANSPOSE3X3FNV_PROC _glMatrixMultTranspose3x3fNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSTENCILTHENCOVERFILLPATHNV_PROC _glStencilThenCoverFillPathNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSTENCILTHENCOVERSTROKEPATHNV_PROC _glStencilThenCoverStrokePathNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSTENCILTHENCOVERFILLPATHINSTANCEDNV_PROC _glStencilThenCoverFillPathInstancedNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSTENCILTHENCOVERSTROKEPATHINSTANCEDNV_PROC _glStencilThenCoverStrokePathInstancedNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATHGLYPHINDEXRANGENV_PROC _glPathGlyphIndexRangeNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATHGLYPHINDEXARRAYNV_PROC _glPathGlyphIndexArrayNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATHMEMORYGLYPHINDEXARRAYNV_PROC _glPathMemoryGlyphIndexArrayNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMPATHFRAGMENTINPUTGENNV_PROC _glProgramPathFragmentInputGenNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMRESOURCEFVNV_PROC _glGetProgramResourcefvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATHCOLORGENNV_PROC _glPathColorGenNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATHTEXGENNV_PROC _glPathTexGenNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPATHFOGGENNV_PROC _glPathFogGenNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPATHCOLORGENIVNV_PROC _glGetPathColorGenivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPATHCOLORGENFVNV_PROC _glGetPathColorGenfvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPATHTEXGENIVNV_PROC _glGetPathTexGenivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPATHTEXGENFVNV_PROC _glGetPathTexGenfvNV_ GL_FUNC_DEF2;

// functions inline wrap
inline GLuint glGenPathsNV (GLsizei range) { return _glGenPathsNV_(range); };
inline void glDeletePathsNV (GLuint path, GLsizei range) { return _glDeletePathsNV_(path, range); };
inline GLboolean glIsPathNV (GLuint path) { return _glIsPathNV_(path); };
inline void glPathCommandsNV (GLuint path, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords) { return _glPathCommandsNV_(path, numCommands, commands, numCoords, coordType, coords); };
inline void glPathCoordsNV (GLuint path, GLsizei numCoords, GLenum coordType, const void * coords) { return _glPathCoordsNV_(path, numCoords, coordType, coords); };
inline void glPathSubCommandsNV (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords) { return _glPathSubCommandsNV_(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords); };
inline void glPathSubCoordsNV (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void * coords) { return _glPathSubCoordsNV_(path, coordStart, numCoords, coordType, coords); };
inline void glPathStringNV (GLuint path, GLenum format, GLsizei length, const void * pathString) { return _glPathStringNV_(path, format, length, pathString); };
inline void glPathGlyphsNV (GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void * charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { return _glPathGlyphsNV_(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale); };
inline void glPathGlyphRangeNV (GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { return _glPathGlyphRangeNV_(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale); };
inline void glWeightPathsNV (GLuint resultPath, GLsizei numPaths, const GLuint * paths, const GLfloat * weights) { return _glWeightPathsNV_(resultPath, numPaths, paths, weights); };
inline void glCopyPathNV (GLuint resultPath, GLuint srcPath) { return _glCopyPathNV_(resultPath, srcPath); };
inline void glInterpolatePathsNV (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) { return _glInterpolatePathsNV_(resultPath, pathA, pathB, weight); };
inline void glTransformPathNV (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat * transformValues) { return _glTransformPathNV_(resultPath, srcPath, transformType, transformValues); };
inline void glPathParameterivNV (GLuint path, GLenum pname, const GLint * value) { return _glPathParameterivNV_(path, pname, value); };
inline void glPathParameteriNV (GLuint path, GLenum pname, GLint value) { return _glPathParameteriNV_(path, pname, value); };
inline void glPathParameterfvNV (GLuint path, GLenum pname, const GLfloat * value) { return _glPathParameterfvNV_(path, pname, value); };
inline void glPathParameterfNV (GLuint path, GLenum pname, GLfloat value) { return _glPathParameterfNV_(path, pname, value); };
inline void glPathDashArrayNV (GLuint path, GLsizei dashCount, const GLfloat * dashArray) { return _glPathDashArrayNV_(path, dashCount, dashArray); };
inline void glPathStencilFuncNV (GLenum func, GLint ref, GLuint mask) { return _glPathStencilFuncNV_(func, ref, mask); };
inline void glPathStencilDepthOffsetNV (GLfloat factor, GLfloat units) { return _glPathStencilDepthOffsetNV_(factor, units); };
inline void glStencilFillPathNV (GLuint path, GLenum fillMode, GLuint mask) { return _glStencilFillPathNV_(path, fillMode, mask); };
inline void glStencilStrokePathNV (GLuint path, GLint reference, GLuint mask) { return _glStencilStrokePathNV_(path, reference, mask); };
inline void glStencilFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat * transformValues) { return _glStencilFillPathInstancedNV_(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues); };
inline void glStencilStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat * transformValues) { return _glStencilStrokePathInstancedNV_(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues); };
inline void glPathCoverDepthFuncNV (GLenum func) { return _glPathCoverDepthFuncNV_(func); };
inline void glCoverFillPathNV (GLuint path, GLenum coverMode) { return _glCoverFillPathNV_(path, coverMode); };
inline void glCoverStrokePathNV (GLuint path, GLenum coverMode) { return _glCoverStrokePathNV_(path, coverMode); };
inline void glCoverFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { return _glCoverFillPathInstancedNV_(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues); };
inline void glCoverStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { return _glCoverStrokePathInstancedNV_(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues); };
inline void glGetPathParameterivNV (GLuint path, GLenum pname, GLint * value) { return _glGetPathParameterivNV_(path, pname, value); };
inline void glGetPathParameterfvNV (GLuint path, GLenum pname, GLfloat * value) { return _glGetPathParameterfvNV_(path, pname, value); };
inline void glGetPathCommandsNV (GLuint path, GLubyte * commands) { return _glGetPathCommandsNV_(path, commands); };
inline void glGetPathCoordsNV (GLuint path, GLfloat * coords) { return _glGetPathCoordsNV_(path, coords); };
inline void glGetPathDashArrayNV (GLuint path, GLfloat * dashArray) { return _glGetPathDashArrayNV_(path, dashArray); };
inline void glGetPathMetricsNV (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLsizei stride, GLfloat * metrics) { return _glGetPathMetricsNV_(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics); };
inline void glGetPathMetricRangeNV (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat * metrics) { return _glGetPathMetricRangeNV_(metricQueryMask, firstPathName, numPaths, stride, metrics); };
inline void glGetPathSpacingNV (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat * returnedSpacing) { return _glGetPathSpacingNV_(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing); };
inline GLboolean glIsPointInFillPathNV (GLuint path, GLuint mask, GLfloat x, GLfloat y) { return _glIsPointInFillPathNV_(path, mask, x, y); };
inline GLboolean glIsPointInStrokePathNV (GLuint path, GLfloat x, GLfloat y) { return _glIsPointInStrokePathNV_(path, x, y); };
inline GLfloat glGetPathLengthNV (GLuint path, GLsizei startSegment, GLsizei numSegments) { return _glGetPathLengthNV_(path, startSegment, numSegments); };
inline GLboolean glPointAlongPathNV (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY) { return _glPointAlongPathNV_(path, startSegment, numSegments, distance, x, y, tangentX, tangentY); };
inline void glMatrixLoad3x2fNV (GLenum matrixMode, const GLfloat * m) { return _glMatrixLoad3x2fNV_(matrixMode, m); };
inline void glMatrixLoad3x3fNV (GLenum matrixMode, const GLfloat * m) { return _glMatrixLoad3x3fNV_(matrixMode, m); };
inline void glMatrixLoadTranspose3x3fNV (GLenum matrixMode, const GLfloat * m) { return _glMatrixLoadTranspose3x3fNV_(matrixMode, m); };
inline void glMatrixMult3x2fNV (GLenum matrixMode, const GLfloat * m) { return _glMatrixMult3x2fNV_(matrixMode, m); };
inline void glMatrixMult3x3fNV (GLenum matrixMode, const GLfloat * m) { return _glMatrixMult3x3fNV_(matrixMode, m); };
inline void glMatrixMultTranspose3x3fNV (GLenum matrixMode, const GLfloat * m) { return _glMatrixMultTranspose3x3fNV_(matrixMode, m); };
inline void glStencilThenCoverFillPathNV (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) { return _glStencilThenCoverFillPathNV_(path, fillMode, mask, coverMode); };
inline void glStencilThenCoverStrokePathNV (GLuint path, GLint reference, GLuint mask, GLenum coverMode) { return _glStencilThenCoverStrokePathNV_(path, reference, mask, coverMode); };
inline void glStencilThenCoverFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { return _glStencilThenCoverFillPathInstancedNV_(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues); };
inline void glStencilThenCoverStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { return _glStencilThenCoverStrokePathInstancedNV_(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues); };
inline GLenum glPathGlyphIndexRangeNV (GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]) { return _glPathGlyphIndexRangeNV_(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount); };
inline GLenum glPathGlyphIndexArrayNV (GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { return _glPathGlyphIndexArrayNV_(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale); };
inline GLenum glPathMemoryGlyphIndexArrayNV (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void * fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { return _glPathMemoryGlyphIndexArrayNV_(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale); };
inline void glProgramPathFragmentInputGenNV (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat * coeffs) { return _glProgramPathFragmentInputGenNV_(program, location, genMode, components, coeffs); };
inline void glGetProgramResourcefvNV (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLfloat * params) { return _glGetProgramResourcefvNV_(program, programInterface, index, propCount, props, count, length, params); };
inline void glPathColorGenNV (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat * coeffs) { return _glPathColorGenNV_(color, genMode, colorFormat, coeffs); };
inline void glPathTexGenNV (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat * coeffs) { return _glPathTexGenNV_(texCoordSet, genMode, components, coeffs); };
inline void glPathFogGenNV (GLenum genMode) { return _glPathFogGenNV_(genMode); };
inline void glGetPathColorGenivNV (GLenum color, GLenum pname, GLint * value) { return _glGetPathColorGenivNV_(color, pname, value); };
inline void glGetPathColorGenfvNV (GLenum color, GLenum pname, GLfloat * value) { return _glGetPathColorGenfvNV_(color, pname, value); };
inline void glGetPathTexGenivNV (GLenum texCoordSet, GLenum pname, GLint * value) { return _glGetPathTexGenivNV_(texCoordSet, pname, value); };
inline void glGetPathTexGenfvNV (GLenum texCoordSet, GLenum pname, GLfloat * value) { return _glGetPathTexGenfvNV_(texCoordSet, pname, value); };
#endif //GL_NV_path_rendering

#ifndef GL_NV_path_rendering_shared_edge

// Defines
#define GL_SHARED_EDGE_NV                 0xC0 
#endif //GL_NV_path_rendering_shared_edge

#ifndef GL_NV_representative_fragment_test

// Defines
#define GL_REPRESENTATIVE_FRAGMENT_TEST_NV 0x937F 
#endif //GL_NV_representative_fragment_test

#ifndef GL_NV_sample_locations

// Defines
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV 0x933D 
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV 0x933E 
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV 0x933F 
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV 0x9340 
#define GL_SAMPLE_LOCATION_NV             0x8E50 
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9341 
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV 0x9342 
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV 0x9343 

// functions typedefs
typedef void (APIENTRYP PFN_GLFRAMEBUFFERSAMPLELOCATIONSFVNV_PROC) (GLenum target, GLuint start, GLsizei count, const GLfloat * v);
typedef void (APIENTRYP PFN_GLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNV_PROC) (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v);
typedef void (APIENTRYP PFN_GLRESOLVEDEPTHVALUESNV_PROC) (void);

// functions typedefs
GL_FUNC_DEF PFN_GLFRAMEBUFFERSAMPLELOCATIONSFVNV_PROC _glFramebufferSampleLocationsfvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNV_PROC _glNamedFramebufferSampleLocationsfvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRESOLVEDEPTHVALUESNV_PROC _glResolveDepthValuesNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glFramebufferSampleLocationsfvNV (GLenum target, GLuint start, GLsizei count, const GLfloat * v) { return _glFramebufferSampleLocationsfvNV_(target, start, count, v); };
inline void glNamedFramebufferSampleLocationsfvNV (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) { return _glNamedFramebufferSampleLocationsfvNV_(framebuffer, start, count, v); };
inline void glResolveDepthValuesNV (void) { return _glResolveDepthValuesNV_(); };
#endif //GL_NV_sample_locations

// GL_NV_sample_mask_override_coverage

#ifndef GL_NV_scissor_exclusive

// Defines
#define GL_SCISSOR_TEST_EXCLUSIVE_NV      0x9555 
#define GL_SCISSOR_BOX_EXCLUSIVE_NV       0x9556 

// functions typedefs
typedef void (APIENTRYP PFN_GLSCISSOREXCLUSIVENV_PROC) (GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLSCISSOREXCLUSIVEARRAYVNV_PROC) (GLuint first, GLsizei count, const GLint * v);

// functions typedefs
GL_FUNC_DEF PFN_GLSCISSOREXCLUSIVENV_PROC _glScissorExclusiveNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSCISSOREXCLUSIVEARRAYVNV_PROC _glScissorExclusiveArrayvNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glScissorExclusiveNV (GLint x, GLint y, GLsizei width, GLsizei height) { return _glScissorExclusiveNV_(x, y, width, height); };
inline void glScissorExclusiveArrayvNV (GLuint first, GLsizei count, const GLint * v) { return _glScissorExclusiveArrayvNV_(first, count, v); };
#endif //GL_NV_scissor_exclusive

// GL_NV_shader_atomic_counters

// GL_NV_shader_atomic_float

// GL_NV_shader_atomic_float64

// GL_NV_shader_atomic_fp16_vector

// GL_NV_shader_atomic_int64

#ifndef GL_NV_shader_buffer_load

// Defines
#define GL_BUFFER_GPU_ADDRESS_NV          0x8F1D 
#define GL_GPU_ADDRESS_NV                 0x8F34 
#define GL_MAX_SHADER_BUFFER_ADDRESS_NV   0x8F35 

// functions typedefs
typedef void (APIENTRYP PFN_GLMAKEBUFFERRESIDENTNV_PROC) (GLenum target, GLenum access);
typedef void (APIENTRYP PFN_GLMAKEBUFFERNONRESIDENTNV_PROC) (GLenum target);
typedef GLboolean (APIENTRYP PFN_GLISBUFFERRESIDENTNV_PROC) (GLenum target);
typedef void (APIENTRYP PFN_GLMAKENAMEDBUFFERRESIDENTNV_PROC) (GLuint buffer, GLenum access);
typedef void (APIENTRYP PFN_GLMAKENAMEDBUFFERNONRESIDENTNV_PROC) (GLuint buffer);
typedef GLboolean (APIENTRYP PFN_GLISNAMEDBUFFERRESIDENTNV_PROC) (GLuint buffer);
typedef void (APIENTRYP PFN_GLGETBUFFERPARAMETERUI64VNV_PROC) (GLenum target, GLenum pname, GLuint64EXT * params);
typedef void (APIENTRYP PFN_GLGETNAMEDBUFFERPARAMETERUI64VNV_PROC) (GLuint buffer, GLenum pname, GLuint64EXT * params);
typedef void (APIENTRYP PFN_GLGETINTEGERUI64VNV_PROC) (GLenum value, GLuint64EXT * result);
typedef void (APIENTRYP PFN_GLUNIFORMUI64NV_PROC) (GLint location, GLuint64EXT value);
typedef void (APIENTRYP PFN_GLUNIFORMUI64VNV_PROC) (GLint location, GLsizei count, const GLuint64EXT * value);
typedef void (APIENTRYP PFN_GLGETUNIFORMUI64VNV_PROC) (GLuint program, GLint location, GLuint64EXT * params);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMUI64NV_PROC) (GLuint program, GLint location, GLuint64EXT value);
typedef void (APIENTRYP PFN_GLPROGRAMUNIFORMUI64VNV_PROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT * value);

// functions typedefs
GL_FUNC_DEF PFN_GLMAKEBUFFERRESIDENTNV_PROC _glMakeBufferResidentNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAKEBUFFERNONRESIDENTNV_PROC _glMakeBufferNonResidentNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISBUFFERRESIDENTNV_PROC _glIsBufferResidentNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAKENAMEDBUFFERRESIDENTNV_PROC _glMakeNamedBufferResidentNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAKENAMEDBUFFERNONRESIDENTNV_PROC _glMakeNamedBufferNonResidentNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISNAMEDBUFFERRESIDENTNV_PROC _glIsNamedBufferResidentNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETBUFFERPARAMETERUI64VNV_PROC _glGetBufferParameterui64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDBUFFERPARAMETERUI64VNV_PROC _glGetNamedBufferParameterui64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETINTEGERUI64VNV_PROC _glGetIntegerui64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMUI64NV_PROC _glUniformui64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMUI64VNV_PROC _glUniformui64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETUNIFORMUI64VNV_PROC _glGetUniformui64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMUI64NV_PROC _glProgramUniformui64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMUNIFORMUI64VNV_PROC _glProgramUniformui64vNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glMakeBufferResidentNV (GLenum target, GLenum access) { return _glMakeBufferResidentNV_(target, access); };
inline void glMakeBufferNonResidentNV (GLenum target) { return _glMakeBufferNonResidentNV_(target); };
inline GLboolean glIsBufferResidentNV (GLenum target) { return _glIsBufferResidentNV_(target); };
inline void glMakeNamedBufferResidentNV (GLuint buffer, GLenum access) { return _glMakeNamedBufferResidentNV_(buffer, access); };
inline void glMakeNamedBufferNonResidentNV (GLuint buffer) { return _glMakeNamedBufferNonResidentNV_(buffer); };
inline GLboolean glIsNamedBufferResidentNV (GLuint buffer) { return _glIsNamedBufferResidentNV_(buffer); };
inline void glGetBufferParameterui64vNV (GLenum target, GLenum pname, GLuint64EXT * params) { return _glGetBufferParameterui64vNV_(target, pname, params); };
inline void glGetNamedBufferParameterui64vNV (GLuint buffer, GLenum pname, GLuint64EXT * params) { return _glGetNamedBufferParameterui64vNV_(buffer, pname, params); };
inline void glGetIntegerui64vNV (GLenum value, GLuint64EXT * result) { return _glGetIntegerui64vNV_(value, result); };
inline void glUniformui64NV (GLint location, GLuint64EXT value) { return _glUniformui64NV_(location, value); };
inline void glUniformui64vNV (GLint location, GLsizei count, const GLuint64EXT * value) { return _glUniformui64vNV_(location, count, value); };
inline void glGetUniformui64vNV (GLuint program, GLint location, GLuint64EXT * params) { return _glGetUniformui64vNV_(program, location, params); };
inline void glProgramUniformui64NV (GLuint program, GLint location, GLuint64EXT value) { return _glProgramUniformui64NV_(program, location, value); };
inline void glProgramUniformui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { return _glProgramUniformui64vNV_(program, location, count, value); };
#endif //GL_NV_shader_buffer_load

#ifndef GL_NV_shader_buffer_store

// Defines
#define GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV 0x00000010 
#endif //GL_NV_shader_buffer_store

#ifndef GL_NV_shader_subgroup_partitioned

// Defines
#define GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV 0x00000100 
#endif //GL_NV_shader_subgroup_partitioned

// GL_NV_shader_texture_footprint

#ifndef GL_NV_shader_thread_group

// Defines
#define GL_WARP_SIZE_NV                   0x9339 
#define GL_WARPS_PER_SM_NV                0x933A 
#define GL_SM_COUNT_NV                    0x933B 
#endif //GL_NV_shader_thread_group

// GL_NV_shader_thread_shuffle

#ifndef GL_NV_shading_rate_image

// Defines
#define GL_SHADING_RATE_IMAGE_NV          0x9563 
#define GL_SHADING_RATE_NO_INVOCATIONS_NV 0x9564 
#define GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV 0x9565 
#define GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV 0x9566 
#define GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV 0x9567 
#define GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV 0x9568 
#define GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV 0x9569 
#define GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV 0x956A 
#define GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV 0x956B 
#define GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV 0x956C 
#define GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV 0x956D 
#define GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV 0x956E 
#define GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV 0x956F 
#define GL_SHADING_RATE_IMAGE_BINDING_NV  0x955B 
#define GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV 0x955C 
#define GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV 0x955D 
#define GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV 0x955E 
#define GL_MAX_COARSE_FRAGMENT_SAMPLES_NV 0x955F 
#define GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV 0x95AE 
#define GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV 0x95AF 
#define GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV 0x95B0 

// functions typedefs
typedef void (APIENTRYP PFN_GLBINDSHADINGRATEIMAGENV_PROC) (GLuint texture);
typedef void (APIENTRYP PFN_GLGETSHADINGRATEIMAGEPALETTENV_PROC) (GLuint viewport, GLuint entry, GLenum * rate);
typedef void (APIENTRYP PFN_GLGETSHADINGRATESAMPLELOCATIONIVNV_PROC) (GLenum rate, GLuint samples, GLuint index, GLint * location);
typedef void (APIENTRYP PFN_GLSHADINGRATEIMAGEBARRIERNV_PROC) (GLboolean synchronize);
typedef void (APIENTRYP PFN_GLSHADINGRATEIMAGEPALETTENV_PROC) (GLuint viewport, GLuint first, GLsizei count, const GLenum * rates);
typedef void (APIENTRYP PFN_GLSHADINGRATESAMPLEORDERNV_PROC) (GLenum order);
typedef void (APIENTRYP PFN_GLSHADINGRATESAMPLEORDERCUSTOMNV_PROC) (GLenum rate, GLuint samples, const GLint * locations);

// functions typedefs
GL_FUNC_DEF PFN_GLBINDSHADINGRATEIMAGENV_PROC _glBindShadingRateImageNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETSHADINGRATEIMAGEPALETTENV_PROC _glGetShadingRateImagePaletteNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETSHADINGRATESAMPLELOCATIONIVNV_PROC _glGetShadingRateSampleLocationivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSHADINGRATEIMAGEBARRIERNV_PROC _glShadingRateImageBarrierNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSHADINGRATEIMAGEPALETTENV_PROC _glShadingRateImagePaletteNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSHADINGRATESAMPLEORDERNV_PROC _glShadingRateSampleOrderNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSHADINGRATESAMPLEORDERCUSTOMNV_PROC _glShadingRateSampleOrderCustomNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBindShadingRateImageNV (GLuint texture) { return _glBindShadingRateImageNV_(texture); };
inline void glGetShadingRateImagePaletteNV (GLuint viewport, GLuint entry, GLenum * rate) { return _glGetShadingRateImagePaletteNV_(viewport, entry, rate); };
inline void glGetShadingRateSampleLocationivNV (GLenum rate, GLuint samples, GLuint index, GLint * location) { return _glGetShadingRateSampleLocationivNV_(rate, samples, index, location); };
inline void glShadingRateImageBarrierNV (GLboolean synchronize) { return _glShadingRateImageBarrierNV_(synchronize); };
inline void glShadingRateImagePaletteNV (GLuint viewport, GLuint first, GLsizei count, const GLenum * rates) { return _glShadingRateImagePaletteNV_(viewport, first, count, rates); };
inline void glShadingRateSampleOrderNV (GLenum order) { return _glShadingRateSampleOrderNV_(order); };
inline void glShadingRateSampleOrderCustomNV (GLenum rate, GLuint samples, const GLint * locations) { return _glShadingRateSampleOrderCustomNV_(rate, samples, locations); };
#endif //GL_NV_shading_rate_image

// GL_NV_stereo_view_rendering

#ifndef GL_NV_texture_barrier

// functions typedefs
typedef void (APIENTRYP PFN_GLTEXTUREBARRIERNV_PROC) (void);

// functions typedefs
GL_FUNC_DEF PFN_GLTEXTUREBARRIERNV_PROC _glTextureBarrierNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glTextureBarrierNV (void) { return _glTextureBarrierNV_(); };
#endif //GL_NV_texture_barrier

// GL_NV_texture_rectangle_compressed

#ifndef GL_NV_uniform_buffer_unified_memory

// Defines
#define GL_UNIFORM_BUFFER_UNIFIED_NV      0x936E 
#define GL_UNIFORM_BUFFER_ADDRESS_NV      0x936F 
#define GL_UNIFORM_BUFFER_LENGTH_NV       0x9370 
#endif //GL_NV_uniform_buffer_unified_memory

#ifndef GL_NV_vertex_attrib_integer_64bit

// functions typedefs
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL1I64NV_PROC) (GLuint index, GLint64EXT x);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL2I64NV_PROC) (GLuint index, GLint64EXT x, GLint64EXT y);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL3I64NV_PROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL4I64NV_PROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL1I64VNV_PROC) (GLuint index, const GLint64EXT * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL2I64VNV_PROC) (GLuint index, const GLint64EXT * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL3I64VNV_PROC) (GLuint index, const GLint64EXT * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL4I64VNV_PROC) (GLuint index, const GLint64EXT * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL1UI64NV_PROC) (GLuint index, GLuint64EXT x);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL2UI64NV_PROC) (GLuint index, GLuint64EXT x, GLuint64EXT y);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL3UI64NV_PROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL4UI64NV_PROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL1UI64VNV_PROC) (GLuint index, const GLuint64EXT * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL2UI64VNV_PROC) (GLuint index, const GLuint64EXT * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL3UI64VNV_PROC) (GLuint index, const GLuint64EXT * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL4UI64VNV_PROC) (GLuint index, const GLuint64EXT * v);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBLI64VNV_PROC) (GLuint index, GLenum pname, GLint64EXT * params);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBLUI64VNV_PROC) (GLuint index, GLenum pname, GLuint64EXT * params);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBLFORMATNV_PROC) (GLuint index, GLint size, GLenum type, GLsizei stride);

// functions typedefs
GL_FUNC_DEF PFN_GLVERTEXATTRIBL1I64NV_PROC _glVertexAttribL1i64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL2I64NV_PROC _glVertexAttribL2i64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL3I64NV_PROC _glVertexAttribL3i64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL4I64NV_PROC _glVertexAttribL4i64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL1I64VNV_PROC _glVertexAttribL1i64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL2I64VNV_PROC _glVertexAttribL2i64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL3I64VNV_PROC _glVertexAttribL3i64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL4I64VNV_PROC _glVertexAttribL4i64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL1UI64NV_PROC _glVertexAttribL1ui64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL2UI64NV_PROC _glVertexAttribL2ui64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL3UI64NV_PROC _glVertexAttribL3ui64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL4UI64NV_PROC _glVertexAttribL4ui64NV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL1UI64VNV_PROC _glVertexAttribL1ui64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL2UI64VNV_PROC _glVertexAttribL2ui64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL3UI64VNV_PROC _glVertexAttribL3ui64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL4UI64VNV_PROC _glVertexAttribL4ui64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBLI64VNV_PROC _glGetVertexAttribLi64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBLUI64VNV_PROC _glGetVertexAttribLui64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBLFORMATNV_PROC _glVertexAttribLFormatNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glVertexAttribL1i64NV (GLuint index, GLint64EXT x) { return _glVertexAttribL1i64NV_(index, x); };
inline void glVertexAttribL2i64NV (GLuint index, GLint64EXT x, GLint64EXT y) { return _glVertexAttribL2i64NV_(index, x, y); };
inline void glVertexAttribL3i64NV (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) { return _glVertexAttribL3i64NV_(index, x, y, z); };
inline void glVertexAttribL4i64NV (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { return _glVertexAttribL4i64NV_(index, x, y, z, w); };
inline void glVertexAttribL1i64vNV (GLuint index, const GLint64EXT * v) { return _glVertexAttribL1i64vNV_(index, v); };
inline void glVertexAttribL2i64vNV (GLuint index, const GLint64EXT * v) { return _glVertexAttribL2i64vNV_(index, v); };
inline void glVertexAttribL3i64vNV (GLuint index, const GLint64EXT * v) { return _glVertexAttribL3i64vNV_(index, v); };
inline void glVertexAttribL4i64vNV (GLuint index, const GLint64EXT * v) { return _glVertexAttribL4i64vNV_(index, v); };
inline void glVertexAttribL1ui64NV (GLuint index, GLuint64EXT x) { return _glVertexAttribL1ui64NV_(index, x); };
inline void glVertexAttribL2ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y) { return _glVertexAttribL2ui64NV_(index, x, y); };
inline void glVertexAttribL3ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { return _glVertexAttribL3ui64NV_(index, x, y, z); };
inline void glVertexAttribL4ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { return _glVertexAttribL4ui64NV_(index, x, y, z, w); };
inline void glVertexAttribL1ui64vNV (GLuint index, const GLuint64EXT * v) { return _glVertexAttribL1ui64vNV_(index, v); };
inline void glVertexAttribL2ui64vNV (GLuint index, const GLuint64EXT * v) { return _glVertexAttribL2ui64vNV_(index, v); };
inline void glVertexAttribL3ui64vNV (GLuint index, const GLuint64EXT * v) { return _glVertexAttribL3ui64vNV_(index, v); };
inline void glVertexAttribL4ui64vNV (GLuint index, const GLuint64EXT * v) { return _glVertexAttribL4ui64vNV_(index, v); };
inline void glGetVertexAttribLi64vNV (GLuint index, GLenum pname, GLint64EXT * params) { return _glGetVertexAttribLi64vNV_(index, pname, params); };
inline void glGetVertexAttribLui64vNV (GLuint index, GLenum pname, GLuint64EXT * params) { return _glGetVertexAttribLui64vNV_(index, pname, params); };
inline void glVertexAttribLFormatNV (GLuint index, GLint size, GLenum type, GLsizei stride) { return _glVertexAttribLFormatNV_(index, size, type, stride); };
#endif //GL_NV_vertex_attrib_integer_64bit

#ifndef GL_NV_vertex_buffer_unified_memory

// Defines
#define GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV 0x8F1E 
#define GL_ELEMENT_ARRAY_UNIFIED_NV       0x8F1F 
#define GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV 0x8F20 
#define GL_VERTEX_ARRAY_ADDRESS_NV        0x8F21 
#define GL_NORMAL_ARRAY_ADDRESS_NV        0x8F22 
#define GL_COLOR_ARRAY_ADDRESS_NV         0x8F23 
#define GL_INDEX_ARRAY_ADDRESS_NV         0x8F24 
#define GL_TEXTURE_COORD_ARRAY_ADDRESS_NV 0x8F25 
#define GL_EDGE_FLAG_ARRAY_ADDRESS_NV     0x8F26 
#define GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV 0x8F27 
#define GL_FOG_COORD_ARRAY_ADDRESS_NV     0x8F28 
#define GL_ELEMENT_ARRAY_ADDRESS_NV       0x8F29 
#define GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV  0x8F2A 
#define GL_VERTEX_ARRAY_LENGTH_NV         0x8F2B 
#define GL_NORMAL_ARRAY_LENGTH_NV         0x8F2C 
#define GL_COLOR_ARRAY_LENGTH_NV          0x8F2D 
#define GL_INDEX_ARRAY_LENGTH_NV          0x8F2E 
#define GL_TEXTURE_COORD_ARRAY_LENGTH_NV  0x8F2F 
#define GL_EDGE_FLAG_ARRAY_LENGTH_NV      0x8F30 
#define GL_SECONDARY_COLOR_ARRAY_LENGTH_NV 0x8F31 
#define GL_FOG_COORD_ARRAY_LENGTH_NV      0x8F32 
#define GL_ELEMENT_ARRAY_LENGTH_NV        0x8F33 
#define GL_DRAW_INDIRECT_UNIFIED_NV       0x8F40 
#define GL_DRAW_INDIRECT_ADDRESS_NV       0x8F41 
#define GL_DRAW_INDIRECT_LENGTH_NV        0x8F42 

// functions typedefs
typedef void (APIENTRYP PFN_GLBUFFERADDRESSRANGENV_PROC) (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
typedef void (APIENTRYP PFN_GLVERTEXFORMATNV_PROC) (GLint size, GLenum type, GLsizei stride);
typedef void (APIENTRYP PFN_GLNORMALFORMATNV_PROC) (GLenum type, GLsizei stride);
typedef void (APIENTRYP PFN_GLCOLORFORMATNV_PROC) (GLint size, GLenum type, GLsizei stride);
typedef void (APIENTRYP PFN_GLINDEXFORMATNV_PROC) (GLenum type, GLsizei stride);
typedef void (APIENTRYP PFN_GLTEXCOORDFORMATNV_PROC) (GLint size, GLenum type, GLsizei stride);
typedef void (APIENTRYP PFN_GLEDGEFLAGFORMATNV_PROC) (GLsizei stride);
typedef void (APIENTRYP PFN_GLSECONDARYCOLORFORMATNV_PROC) (GLint size, GLenum type, GLsizei stride);
typedef void (APIENTRYP PFN_GLFOGCOORDFORMATNV_PROC) (GLenum type, GLsizei stride);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBFORMATNV_PROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBIFORMATNV_PROC) (GLuint index, GLint size, GLenum type, GLsizei stride);
typedef void (APIENTRYP PFN_GLGETINTEGERUI64I_VNV_PROC) (GLenum value, GLuint index, GLuint64EXT * result);

// functions typedefs
GL_FUNC_DEF PFN_GLBUFFERADDRESSRANGENV_PROC _glBufferAddressRangeNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXFORMATNV_PROC _glVertexFormatNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMALFORMATNV_PROC _glNormalFormatNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLORFORMATNV_PROC _glColorFormatNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINDEXFORMATNV_PROC _glIndexFormatNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORDFORMATNV_PROC _glTexCoordFormatNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEDGEFLAGFORMATNV_PROC _glEdgeFlagFormatNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLORFORMATNV_PROC _glSecondaryColorFormatNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFOGCOORDFORMATNV_PROC _glFogCoordFormatNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBFORMATNV_PROC _glVertexAttribFormatNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBIFORMATNV_PROC _glVertexAttribIFormatNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETINTEGERUI64I_VNV_PROC _glGetIntegerui64i_vNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBufferAddressRangeNV (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) { return _glBufferAddressRangeNV_(pname, index, address, length); };
inline void glVertexFormatNV (GLint size, GLenum type, GLsizei stride) { return _glVertexFormatNV_(size, type, stride); };
inline void glNormalFormatNV (GLenum type, GLsizei stride) { return _glNormalFormatNV_(type, stride); };
inline void glColorFormatNV (GLint size, GLenum type, GLsizei stride) { return _glColorFormatNV_(size, type, stride); };
inline void glIndexFormatNV (GLenum type, GLsizei stride) { return _glIndexFormatNV_(type, stride); };
inline void glTexCoordFormatNV (GLint size, GLenum type, GLsizei stride) { return _glTexCoordFormatNV_(size, type, stride); };
inline void glEdgeFlagFormatNV (GLsizei stride) { return _glEdgeFlagFormatNV_(stride); };
inline void glSecondaryColorFormatNV (GLint size, GLenum type, GLsizei stride) { return _glSecondaryColorFormatNV_(size, type, stride); };
inline void glFogCoordFormatNV (GLenum type, GLsizei stride) { return _glFogCoordFormatNV_(type, stride); };
inline void glVertexAttribFormatNV (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride) { return _glVertexAttribFormatNV_(index, size, type, normalized, stride); };
inline void glVertexAttribIFormatNV (GLuint index, GLint size, GLenum type, GLsizei stride) { return _glVertexAttribIFormatNV_(index, size, type, stride); };
inline void glGetIntegerui64i_vNV (GLenum value, GLuint index, GLuint64EXT * result) { return _glGetIntegerui64i_vNV_(value, index, result); };
#endif //GL_NV_vertex_buffer_unified_memory

// GL_NV_viewport_array2

#ifndef GL_NV_viewport_swizzle

// Defines
#define GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV 0x9350 
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV 0x9351 
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV 0x9352 
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV 0x9353 
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV 0x9354 
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV 0x9355 
#define GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV 0x9356 
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV 0x9357 
#define GL_VIEWPORT_SWIZZLE_X_NV          0x9358 
#define GL_VIEWPORT_SWIZZLE_Y_NV          0x9359 
#define GL_VIEWPORT_SWIZZLE_Z_NV          0x935A 
#define GL_VIEWPORT_SWIZZLE_W_NV          0x935B 

// functions typedefs
typedef void (APIENTRYP PFN_GLVIEWPORTSWIZZLENV_PROC) (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew);

// functions typedefs
GL_FUNC_DEF PFN_GLVIEWPORTSWIZZLENV_PROC _glViewportSwizzleNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glViewportSwizzleNV (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew) { return _glViewportSwizzleNV_(index, swizzlex, swizzley, swizzlez, swizzlew); };
#endif //GL_NV_viewport_swizzle

#ifndef GL_OVR_multiview

// Defines
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR 0x9630 
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR 0x9632 
#define GL_MAX_VIEWS_OVR                  0x9631 
#define GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR 0x9633 

// functions typedefs
typedef void (APIENTRYP PFN_GLFRAMEBUFFERTEXTUREMULTIVIEWOVR_PROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews);

// functions typedefs
GL_FUNC_DEF PFN_GLFRAMEBUFFERTEXTUREMULTIVIEWOVR_PROC _glFramebufferTextureMultiviewOVR_ GL_FUNC_DEF2;

// functions inline wrap
inline void glFramebufferTextureMultiviewOVR (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) { return _glFramebufferTextureMultiviewOVR_(target, attachment, texture, level, baseViewIndex, numViews); };
#endif //GL_OVR_multiview

// GL_OVR_multiview2

#ifndef GL_VERSION_1_11

// Defines
#define GL_ACCUM                          0x0100 
#define GL_LOAD                           0x0101 
#define GL_RETURN                         0x0102 
#define GL_MULT                           0x0103 
#define GL_ADD                            0x0104 
#define GL_CURRENT_BIT                    0x00000001 
#define GL_POINT_BIT                      0x00000002 
#define GL_LINE_BIT                       0x00000004 
#define GL_POLYGON_BIT                    0x00000008 
#define GL_POLYGON_STIPPLE_BIT            0x00000010 
#define GL_PIXEL_MODE_BIT                 0x00000020 
#define GL_LIGHTING_BIT                   0x00000040 
#define GL_FOG_BIT                        0x00000080 
#define GL_ACCUM_BUFFER_BIT               0x00000200 
#define GL_VIEWPORT_BIT                   0x00000800 
#define GL_TRANSFORM_BIT                  0x00001000 
#define GL_ENABLE_BIT                     0x00002000 
#define GL_HINT_BIT                       0x00008000 
#define GL_EVAL_BIT                       0x00010000 
#define GL_LIST_BIT                       0x00020000 
#define GL_TEXTURE_BIT                    0x00040000 
#define GL_SCISSOR_BIT                    0x00080000 
#define GL_ALL_ATTRIB_BITS                0x000fffff 
#define GL_QUAD_STRIP                     0x0008 
#define GL_POLYGON                        0x0009 
#define GL_CLIP_PLANE0                    0x3000 
#define GL_CLIP_PLANE1                    0x3001 
#define GL_CLIP_PLANE2                    0x3002 
#define GL_CLIP_PLANE3                    0x3003 
#define GL_CLIP_PLANE4                    0x3004 
#define GL_CLIP_PLANE5                    0x3005 
#define GL_2_BYTES                        0x1407 
#define GL_3_BYTES                        0x1408 
#define GL_4_BYTES                        0x1409 
#define GL_AUX0                           0x0409 
#define GL_AUX1                           0x040A 
#define GL_AUX2                           0x040B 
#define GL_AUX3                           0x040C 
#define GL_2D                             0x0600 
#define GL_3D                             0x0601 
#define GL_3D_COLOR                       0x0602 
#define GL_3D_COLOR_TEXTURE               0x0603 
#define GL_4D_COLOR_TEXTURE               0x0604 
#define GL_PASS_THROUGH_TOKEN             0x0700 
#define GL_POINT_TOKEN                    0x0701 
#define GL_LINE_TOKEN                     0x0702 
#define GL_POLYGON_TOKEN                  0x0703 
#define GL_BITMAP_TOKEN                   0x0704 
#define GL_DRAW_PIXEL_TOKEN               0x0705 
#define GL_COPY_PIXEL_TOKEN               0x0706 
#define GL_LINE_RESET_TOKEN               0x0707 
#define GL_EXP                            0x0800 
#define GL_EXP2                           0x0801 
#define GL_COEFF                          0x0A00 
#define GL_ORDER                          0x0A01 
#define GL_DOMAIN                         0x0A02 
#define GL_CURRENT_COLOR                  0x0B00 
#define GL_CURRENT_INDEX                  0x0B01 
#define GL_CURRENT_NORMAL                 0x0B02 
#define GL_CURRENT_TEXTURE_COORDS         0x0B03 
#define GL_CURRENT_RASTER_COLOR           0x0B04 
#define GL_CURRENT_RASTER_INDEX           0x0B05 
#define GL_CURRENT_RASTER_TEXTURE_COORDS  0x0B06 
#define GL_CURRENT_RASTER_POSITION        0x0B07 
#define GL_CURRENT_RASTER_POSITION_VALID  0x0B08 
#define GL_CURRENT_RASTER_DISTANCE        0x0B09 
#define GL_POINT_SMOOTH                   0x0B10 
#define GL_LINE_STIPPLE                   0x0B24 
#define GL_LINE_STIPPLE_PATTERN           0x0B25 
#define GL_LINE_STIPPLE_REPEAT            0x0B26 
#define GL_LIST_MODE                      0x0B30 
#define GL_MAX_LIST_NESTING               0x0B31 
#define GL_LIST_BASE                      0x0B32 
#define GL_LIST_INDEX                     0x0B33 
#define GL_POLYGON_STIPPLE                0x0B42 
#define GL_EDGE_FLAG                      0x0B43 
#define GL_LIGHTING                       0x0B50 
#define GL_LIGHT_MODEL_LOCAL_VIEWER       0x0B51 
#define GL_LIGHT_MODEL_TWO_SIDE           0x0B52 
#define GL_LIGHT_MODEL_AMBIENT            0x0B53 
#define GL_SHADE_MODEL                    0x0B54 
#define GL_COLOR_MATERIAL_FACE            0x0B55 
#define GL_COLOR_MATERIAL_PARAMETER       0x0B56 
#define GL_COLOR_MATERIAL                 0x0B57 
#define GL_FOG                            0x0B60 
#define GL_FOG_INDEX                      0x0B61 
#define GL_FOG_DENSITY                    0x0B62 
#define GL_FOG_START                      0x0B63 
#define GL_FOG_END                        0x0B64 
#define GL_FOG_MODE                       0x0B65 
#define GL_FOG_COLOR                      0x0B66 
#define GL_ACCUM_CLEAR_VALUE              0x0B80 
#define GL_MATRIX_MODE                    0x0BA0 
#define GL_NORMALIZE                      0x0BA1 
#define GL_MODELVIEW_STACK_DEPTH          0x0BA3 
#define GL_PROJECTION_STACK_DEPTH         0x0BA4 
#define GL_TEXTURE_STACK_DEPTH            0x0BA5 
#define GL_MODELVIEW_MATRIX               0x0BA6 
#define GL_PROJECTION_MATRIX              0x0BA7 
#define GL_TEXTURE_MATRIX                 0x0BA8 
#define GL_ATTRIB_STACK_DEPTH             0x0BB0 
#define GL_CLIENT_ATTRIB_STACK_DEPTH      0x0BB1 
#define GL_ALPHA_TEST                     0x0BC0 
#define GL_ALPHA_TEST_FUNC                0x0BC1 
#define GL_ALPHA_TEST_REF                 0x0BC2 
#define GL_INDEX_LOGIC_OP                 0x0BF1 
#define GL_AUX_BUFFERS                    0x0C00 
#define GL_INDEX_CLEAR_VALUE              0x0C20 
#define GL_INDEX_WRITEMASK                0x0C21 
#define GL_INDEX_MODE                     0x0C30 
#define GL_RGBA_MODE                      0x0C31 
#define GL_RENDER_MODE                    0x0C40 
#define GL_PERSPECTIVE_CORRECTION_HINT    0x0C50 
#define GL_POINT_SMOOTH_HINT              0x0C51 
#define GL_FOG_HINT                       0x0C54 
#define GL_TEXTURE_GEN_S                  0x0C60 
#define GL_TEXTURE_GEN_T                  0x0C61 
#define GL_TEXTURE_GEN_R                  0x0C62 
#define GL_TEXTURE_GEN_Q                  0x0C63 
#define GL_PIXEL_MAP_I_TO_I               0x0C70 
#define GL_PIXEL_MAP_S_TO_S               0x0C71 
#define GL_PIXEL_MAP_I_TO_R               0x0C72 
#define GL_PIXEL_MAP_I_TO_G               0x0C73 
#define GL_PIXEL_MAP_I_TO_B               0x0C74 
#define GL_PIXEL_MAP_I_TO_A               0x0C75 
#define GL_PIXEL_MAP_R_TO_R               0x0C76 
#define GL_PIXEL_MAP_G_TO_G               0x0C77 
#define GL_PIXEL_MAP_B_TO_B               0x0C78 
#define GL_PIXEL_MAP_A_TO_A               0x0C79 
#define GL_PIXEL_MAP_I_TO_I_SIZE          0x0CB0 
#define GL_PIXEL_MAP_S_TO_S_SIZE          0x0CB1 
#define GL_PIXEL_MAP_I_TO_R_SIZE          0x0CB2 
#define GL_PIXEL_MAP_I_TO_G_SIZE          0x0CB3 
#define GL_PIXEL_MAP_I_TO_B_SIZE          0x0CB4 
#define GL_PIXEL_MAP_I_TO_A_SIZE          0x0CB5 
#define GL_PIXEL_MAP_R_TO_R_SIZE          0x0CB6 
#define GL_PIXEL_MAP_G_TO_G_SIZE          0x0CB7 
#define GL_PIXEL_MAP_B_TO_B_SIZE          0x0CB8 
#define GL_PIXEL_MAP_A_TO_A_SIZE          0x0CB9 
#define GL_MAP_COLOR                      0x0D10 
#define GL_MAP_STENCIL                    0x0D11 
#define GL_INDEX_SHIFT                    0x0D12 
#define GL_INDEX_OFFSET                   0x0D13 
#define GL_RED_SCALE                      0x0D14 
#define GL_RED_BIAS                       0x0D15 
#define GL_ZOOM_X                         0x0D16 
#define GL_ZOOM_Y                         0x0D17 
#define GL_GREEN_SCALE                    0x0D18 
#define GL_GREEN_BIAS                     0x0D19 
#define GL_BLUE_SCALE                     0x0D1A 
#define GL_BLUE_BIAS                      0x0D1B 
#define GL_ALPHA_SCALE                    0x0D1C 
#define GL_ALPHA_BIAS                     0x0D1D 
#define GL_DEPTH_SCALE                    0x0D1E 
#define GL_DEPTH_BIAS                     0x0D1F 
#define GL_MAX_EVAL_ORDER                 0x0D30 
#define GL_MAX_LIGHTS                     0x0D31 
#define GL_MAX_CLIP_PLANES                0x0D32 
#define GL_MAX_PIXEL_MAP_TABLE            0x0D34 
#define GL_MAX_ATTRIB_STACK_DEPTH         0x0D35 
#define GL_MAX_MODELVIEW_STACK_DEPTH      0x0D36 
#define GL_MAX_NAME_STACK_DEPTH           0x0D37 
#define GL_MAX_PROJECTION_STACK_DEPTH     0x0D38 
#define GL_MAX_TEXTURE_STACK_DEPTH        0x0D39 
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH  0x0D3B 
#define GL_INDEX_BITS                     0x0D51 
#define GL_RED_BITS                       0x0D52 
#define GL_GREEN_BITS                     0x0D53 
#define GL_BLUE_BITS                      0x0D54 
#define GL_ALPHA_BITS                     0x0D55 
#define GL_DEPTH_BITS                     0x0D56 
#define GL_STENCIL_BITS                   0x0D57 
#define GL_ACCUM_RED_BITS                 0x0D58 
#define GL_ACCUM_GREEN_BITS               0x0D59 
#define GL_ACCUM_BLUE_BITS                0x0D5A 
#define GL_ACCUM_ALPHA_BITS               0x0D5B 
#define GL_NAME_STACK_DEPTH               0x0D70 
#define GL_AUTO_NORMAL                    0x0D80 
#define GL_MAP1_COLOR_4                   0x0D90 
#define GL_MAP1_INDEX                     0x0D91 
#define GL_MAP1_NORMAL                    0x0D92 
#define GL_MAP1_TEXTURE_COORD_1           0x0D93 
#define GL_MAP1_TEXTURE_COORD_2           0x0D94 
#define GL_MAP1_TEXTURE_COORD_3           0x0D95 
#define GL_MAP1_TEXTURE_COORD_4           0x0D96 
#define GL_MAP1_VERTEX_3                  0x0D97 
#define GL_MAP1_VERTEX_4                  0x0D98 
#define GL_MAP2_COLOR_4                   0x0DB0 
#define GL_MAP2_INDEX                     0x0DB1 
#define GL_MAP2_NORMAL                    0x0DB2 
#define GL_MAP2_TEXTURE_COORD_1           0x0DB3 
#define GL_MAP2_TEXTURE_COORD_2           0x0DB4 
#define GL_MAP2_TEXTURE_COORD_3           0x0DB5 
#define GL_MAP2_TEXTURE_COORD_4           0x0DB6 
#define GL_MAP2_VERTEX_3                  0x0DB7 
#define GL_MAP2_VERTEX_4                  0x0DB8 
#define GL_MAP1_GRID_DOMAIN               0x0DD0 
#define GL_MAP1_GRID_SEGMENTS             0x0DD1 
#define GL_MAP2_GRID_DOMAIN               0x0DD2 
#define GL_MAP2_GRID_SEGMENTS             0x0DD3 
#define GL_FEEDBACK_BUFFER_POINTER        0x0DF0 
#define GL_FEEDBACK_BUFFER_SIZE           0x0DF1 
#define GL_FEEDBACK_BUFFER_TYPE           0x0DF2 
#define GL_SELECTION_BUFFER_POINTER       0x0DF3 
#define GL_SELECTION_BUFFER_SIZE          0x0DF4 
#define GL_TEXTURE_BORDER                 0x1005 
#define GL_LIGHT0                         0x4000 
#define GL_LIGHT1                         0x4001 
#define GL_LIGHT2                         0x4002 
#define GL_LIGHT3                         0x4003 
#define GL_LIGHT4                         0x4004 
#define GL_LIGHT5                         0x4005 
#define GL_LIGHT6                         0x4006 
#define GL_LIGHT7                         0x4007 
#define GL_AMBIENT                        0x1200 
#define GL_DIFFUSE                        0x1201 
#define GL_SPECULAR                       0x1202 
#define GL_POSITION                       0x1203 
#define GL_SPOT_DIRECTION                 0x1204 
#define GL_SPOT_EXPONENT                  0x1205 
#define GL_SPOT_CUTOFF                    0x1206 
#define GL_CONSTANT_ATTENUATION           0x1207 
#define GL_LINEAR_ATTENUATION             0x1208 
#define GL_QUADRATIC_ATTENUATION          0x1209 
#define GL_COMPILE                        0x1300 
#define GL_COMPILE_AND_EXECUTE            0x1301 
#define GL_EMISSION                       0x1600 
#define GL_SHININESS                      0x1601 
#define GL_AMBIENT_AND_DIFFUSE            0x1602 
#define GL_COLOR_INDEXES                  0x1603 
#define GL_MODELVIEW                      0x1700 
#define GL_PROJECTION                     0x1701 
#define GL_COLOR_INDEX                    0x1900 
#define GL_LUMINANCE                      0x1909 
#define GL_LUMINANCE_ALPHA                0x190A 
#define GL_BITMAP                         0x1A00 
#define GL_RENDER                         0x1C00 
#define GL_FEEDBACK                       0x1C01 
#define GL_SELECT                         0x1C02 
#define GL_FLAT                           0x1D00 
#define GL_SMOOTH                         0x1D01 
#define GL_S                              0x2000 
#define GL_T                              0x2001 
#define GL_R                              0x2002 
#define GL_Q                              0x2003 
#define GL_MODULATE                       0x2100 
#define GL_DECAL                          0x2101 
#define GL_TEXTURE_ENV_MODE               0x2200 
#define GL_TEXTURE_ENV_COLOR              0x2201 
#define GL_TEXTURE_ENV                    0x2300 
#define GL_EYE_LINEAR                     0x2400 
#define GL_OBJECT_LINEAR                  0x2401 
#define GL_SPHERE_MAP                     0x2402 
#define GL_TEXTURE_GEN_MODE               0x2500 
#define GL_OBJECT_PLANE                   0x2501 
#define GL_EYE_PLANE                      0x2502 
#define GL_CLAMP                          0x2900 
#define GL_CLIENT_PIXEL_STORE_BIT         0x00000001 
#define GL_CLIENT_VERTEX_ARRAY_BIT        0x00000002 
#define GL_CLIENT_ALL_ATTRIB_BITS         0xffffffff 
#define GL_ALPHA4                         0x803B 
#define GL_ALPHA8                         0x803C 
#define GL_ALPHA12                        0x803D 
#define GL_ALPHA16                        0x803E 
#define GL_LUMINANCE4                     0x803F 
#define GL_LUMINANCE8                     0x8040 
#define GL_LUMINANCE12                    0x8041 
#define GL_LUMINANCE16                    0x8042 
#define GL_LUMINANCE4_ALPHA4              0x8043 
#define GL_LUMINANCE6_ALPHA2              0x8044 
#define GL_LUMINANCE8_ALPHA8              0x8045 
#define GL_LUMINANCE12_ALPHA4             0x8046 
#define GL_LUMINANCE12_ALPHA12            0x8047 
#define GL_LUMINANCE16_ALPHA16            0x8048 
#define GL_INTENSITY                      0x8049 
#define GL_INTENSITY4                     0x804A 
#define GL_INTENSITY8                     0x804B 
#define GL_INTENSITY12                    0x804C 
#define GL_INTENSITY16                    0x804D 
#define GL_TEXTURE_LUMINANCE_SIZE         0x8060 
#define GL_TEXTURE_INTENSITY_SIZE         0x8061 
#define GL_TEXTURE_PRIORITY               0x8066 
#define GL_TEXTURE_RESIDENT               0x8067 
#define GL_NORMAL_ARRAY                   0x8075 
#define GL_COLOR_ARRAY                    0x8076 
#define GL_INDEX_ARRAY                    0x8077 
#define GL_TEXTURE_COORD_ARRAY            0x8078 
#define GL_EDGE_FLAG_ARRAY                0x8079 
#define GL_VERTEX_ARRAY_SIZE              0x807A 
#define GL_VERTEX_ARRAY_TYPE              0x807B 
#define GL_VERTEX_ARRAY_STRIDE            0x807C 
#define GL_NORMAL_ARRAY_TYPE              0x807E 
#define GL_NORMAL_ARRAY_STRIDE            0x807F 
#define GL_COLOR_ARRAY_SIZE               0x8081 
#define GL_COLOR_ARRAY_TYPE               0x8082 
#define GL_COLOR_ARRAY_STRIDE             0x8083 
#define GL_INDEX_ARRAY_TYPE               0x8085 
#define GL_INDEX_ARRAY_STRIDE             0x8086 
#define GL_TEXTURE_COORD_ARRAY_SIZE       0x8088 
#define GL_TEXTURE_COORD_ARRAY_TYPE       0x8089 
#define GL_TEXTURE_COORD_ARRAY_STRIDE     0x808A 
#define GL_EDGE_FLAG_ARRAY_STRIDE         0x808C 
#define GL_VERTEX_ARRAY_POINTER           0x808E 
#define GL_NORMAL_ARRAY_POINTER           0x808F 
#define GL_COLOR_ARRAY_POINTER            0x8090 
#define GL_INDEX_ARRAY_POINTER            0x8091 
#define GL_TEXTURE_COORD_ARRAY_POINTER    0x8092 
#define GL_EDGE_FLAG_ARRAY_POINTER        0x8093 
#define GL_V2F                            0x2A20 
#define GL_V3F                            0x2A21 
#define GL_C4UB_V2F                       0x2A22 
#define GL_C4UB_V3F                       0x2A23 
#define GL_C3F_V3F                        0x2A24 
#define GL_N3F_V3F                        0x2A25 
#define GL_C4F_N3F_V3F                    0x2A26 
#define GL_T2F_V3F                        0x2A27 
#define GL_T4F_V4F                        0x2A28 
#define GL_T2F_C4UB_V3F                   0x2A29 
#define GL_T2F_C3F_V3F                    0x2A2A 
#define GL_T2F_N3F_V3F                    0x2A2B 
#define GL_T2F_C4F_N3F_V3F                0x2A2C 
#define GL_T4F_C4F_N3F_V4F                0x2A2D 
#define GL_EXT_vertex_array               1 
#define GL_EXT_bgra                       1 
#define GL_EXT_paletted_texture           1 
#define GL_WIN_swap_hint                  1 
#define GL_WIN_draw_range_elements        1 
// #define GL_WIN_phong_shading              1 
#define GL_VERTEX_ARRAY_EXT               0x8074 
#define GL_NORMAL_ARRAY_EXT               0x8075 
#define GL_COLOR_ARRAY_EXT                0x8076 
#define GL_INDEX_ARRAY_EXT                0x8077 
#define GL_TEXTURE_COORD_ARRAY_EXT        0x8078 
#define GL_EDGE_FLAG_ARRAY_EXT            0x8079 
#define GL_VERTEX_ARRAY_SIZE_EXT          0x807A 
#define GL_VERTEX_ARRAY_TYPE_EXT          0x807B 
#define GL_VERTEX_ARRAY_STRIDE_EXT        0x807C 
#define GL_VERTEX_ARRAY_COUNT_EXT         0x807D 
#define GL_NORMAL_ARRAY_TYPE_EXT          0x807E 
#define GL_NORMAL_ARRAY_STRIDE_EXT        0x807F 
#define GL_NORMAL_ARRAY_COUNT_EXT         0x8080 
#define GL_COLOR_ARRAY_SIZE_EXT           0x8081 
#define GL_COLOR_ARRAY_TYPE_EXT           0x8082 
#define GL_COLOR_ARRAY_STRIDE_EXT         0x8083 
#define GL_COLOR_ARRAY_COUNT_EXT          0x8084 
#define GL_INDEX_ARRAY_TYPE_EXT           0x8085 
#define GL_INDEX_ARRAY_STRIDE_EXT         0x8086 
#define GL_INDEX_ARRAY_COUNT_EXT          0x8087 
#define GL_TEXTURE_COORD_ARRAY_SIZE_EXT   0x8088 
#define GL_TEXTURE_COORD_ARRAY_TYPE_EXT   0x8089 
#define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A 
#define GL_TEXTURE_COORD_ARRAY_COUNT_EXT  0x808B 
#define GL_EDGE_FLAG_ARRAY_STRIDE_EXT     0x808C 
#define GL_EDGE_FLAG_ARRAY_COUNT_EXT      0x808D 
#define GL_VERTEX_ARRAY_POINTER_EXT       0x808E 
#define GL_NORMAL_ARRAY_POINTER_EXT       0x808F 
#define GL_COLOR_ARRAY_POINTER_EXT        0x8090 
#define GL_INDEX_ARRAY_POINTER_EXT        0x8091 
#define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092 
#define GL_EDGE_FLAG_ARRAY_POINTER_EXT    0x8093 
#define GL_DOUBLE_EXT                     GL_DOUBLE 
#define GL_BGR_EXT                        0x80E0 
#define GL_BGRA_EXT                       0x80E1 
#define GL_COLOR_TABLE_FORMAT_EXT         0x80D8 
#define GL_COLOR_TABLE_WIDTH_EXT          0x80D9 
#define GL_COLOR_TABLE_RED_SIZE_EXT       0x80DA 
#define GL_COLOR_TABLE_GREEN_SIZE_EXT     0x80DB 
#define GL_COLOR_TABLE_BLUE_SIZE_EXT      0x80DC 
#define GL_COLOR_TABLE_ALPHA_SIZE_EXT     0x80DD 
#define GL_COLOR_TABLE_LUMINANCE_SIZE_EXT 0x80DE 
#define GL_COLOR_TABLE_INTENSITY_SIZE_EXT 0x80DF 
#define GL_COLOR_INDEX1_EXT               0x80E2 
#define GL_COLOR_INDEX2_EXT               0x80E3 
#define GL_COLOR_INDEX4_EXT               0x80E4 
#define GL_COLOR_INDEX8_EXT               0x80E5 
#define GL_COLOR_INDEX12_EXT              0x80E6 
#define GL_COLOR_INDEX16_EXT              0x80E7 
#define GL_MAX_ELEMENTS_VERTICES_WIN      0x80E8 
#define GL_MAX_ELEMENTS_INDICES_WIN       0x80E9 
#define GL_PHONG_WIN                      0x80EA  
#define GL_PHONG_HINT_WIN                 0x80EB  
#define GL_FOG_SPECULAR_TEXTURE_WIN       0x80EC 
#define GL_LOGIC_OP GL_INDEX_LOGIC_OP 
#define GL_TEXTURE_COMPONENTS GL_TEXTURE_INTERNAL_FORMAT 

// functions typedefs
typedef void (APIENTRYP PFN_GLACCUM_PROC) (GLenum op, GLfloat value);
typedef void (APIENTRYP PFN_GLALPHAFUNC_PROC) (GLenum func, GLclampf ref);
typedef GLboolean (APIENTRYP PFN_GLARETEXTURESRESIDENT_PROC) (GLsizei n, const GLuint * textures, GLboolean * residences);
typedef void (APIENTRYP PFN_GLARRAYELEMENT_PROC) (GLint i);
typedef void (APIENTRYP PFN_GLBEGIN_PROC) (GLenum mode);
typedef void (APIENTRYP PFN_GLBITMAP_PROC) (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);
typedef void (APIENTRYP PFN_GLCALLLIST_PROC) (GLuint list);
typedef void (APIENTRYP PFN_GLCALLLISTS_PROC) (GLsizei n, GLenum type, const GLvoid * lists);
typedef void (APIENTRYP PFN_GLCLEARACCUM_PROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (APIENTRYP PFN_GLCLEARINDEX_PROC) (GLfloat c);
typedef void (APIENTRYP PFN_GLCLIPPLANE_PROC) (GLenum plane, const GLdouble * equation);
typedef void (APIENTRYP PFN_GLCOLOR3B_PROC) (GLbyte red, GLbyte green, GLbyte blue);
typedef void (APIENTRYP PFN_GLCOLOR3BV_PROC) (const GLbyte * v);
typedef void (APIENTRYP PFN_GLCOLOR3D_PROC) (GLdouble red, GLdouble green, GLdouble blue);
typedef void (APIENTRYP PFN_GLCOLOR3DV_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLCOLOR3F_PROC) (GLfloat red, GLfloat green, GLfloat blue);
typedef void (APIENTRYP PFN_GLCOLOR3FV_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLCOLOR3I_PROC) (GLint red, GLint green, GLint blue);
typedef void (APIENTRYP PFN_GLCOLOR3IV_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLCOLOR3S_PROC) (GLshort red, GLshort green, GLshort blue);
typedef void (APIENTRYP PFN_GLCOLOR3SV_PROC) (const GLshort * v);
typedef void (APIENTRYP PFN_GLCOLOR3UB_PROC) (GLubyte red, GLubyte green, GLubyte blue);
typedef void (APIENTRYP PFN_GLCOLOR3UBV_PROC) (const GLubyte * v);
typedef void (APIENTRYP PFN_GLCOLOR3UI_PROC) (GLuint red, GLuint green, GLuint blue);
typedef void (APIENTRYP PFN_GLCOLOR3UIV_PROC) (const GLuint * v);
typedef void (APIENTRYP PFN_GLCOLOR3US_PROC) (GLushort red, GLushort green, GLushort blue);
typedef void (APIENTRYP PFN_GLCOLOR3USV_PROC) (const GLushort * v);
typedef void (APIENTRYP PFN_GLCOLOR4B_PROC) (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
typedef void (APIENTRYP PFN_GLCOLOR4BV_PROC) (const GLbyte * v);
typedef void (APIENTRYP PFN_GLCOLOR4D_PROC) (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
typedef void (APIENTRYP PFN_GLCOLOR4DV_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLCOLOR4F_PROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (APIENTRYP PFN_GLCOLOR4FV_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLCOLOR4I_PROC) (GLint red, GLint green, GLint blue, GLint alpha);
typedef void (APIENTRYP PFN_GLCOLOR4IV_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLCOLOR4S_PROC) (GLshort red, GLshort green, GLshort blue, GLshort alpha);
typedef void (APIENTRYP PFN_GLCOLOR4SV_PROC) (const GLshort * v);
typedef void (APIENTRYP PFN_GLCOLOR4UB_PROC) (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
typedef void (APIENTRYP PFN_GLCOLOR4UBV_PROC) (const GLubyte * v);
typedef void (APIENTRYP PFN_GLCOLOR4UI_PROC) (GLuint red, GLuint green, GLuint blue, GLuint alpha);
typedef void (APIENTRYP PFN_GLCOLOR4UIV_PROC) (const GLuint * v);
typedef void (APIENTRYP PFN_GLCOLOR4US_PROC) (GLushort red, GLushort green, GLushort blue, GLushort alpha);
typedef void (APIENTRYP PFN_GLCOLOR4USV_PROC) (const GLushort * v);
typedef void (APIENTRYP PFN_GLCOLORMATERIAL_PROC) (GLenum face, GLenum mode);
typedef void (APIENTRYP PFN_GLCOLORPOINTER_PROC) (GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);
typedef void (APIENTRYP PFN_GLCOPYPIXELS_PROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
typedef void (APIENTRYP PFN_GLDELETELISTS_PROC) (GLuint list, GLsizei range);
typedef void (APIENTRYP PFN_GLDISABLECLIENTSTATE_PROC) (GLenum array);
typedef void (APIENTRYP PFN_GLDRAWPIXELS_PROC) (GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels);
typedef void (APIENTRYP PFN_GLEDGEFLAG_PROC) (GLboolean flag);
typedef void (APIENTRYP PFN_GLEDGEFLAGPOINTER_PROC) (GLsizei stride, const GLvoid * pointer);
typedef void (APIENTRYP PFN_GLEDGEFLAGV_PROC) (const GLboolean * flag);
typedef void (APIENTRYP PFN_GLENABLECLIENTSTATE_PROC) (GLenum array);
typedef void (APIENTRYP PFN_GLEND_PROC) (void);
typedef void (APIENTRYP PFN_GLENDLIST_PROC) (void);
typedef void (APIENTRYP PFN_GLEVALCOORD1D_PROC) (GLdouble u);
typedef void (APIENTRYP PFN_GLEVALCOORD1DV_PROC) (const GLdouble * u);
typedef void (APIENTRYP PFN_GLEVALCOORD1F_PROC) (GLfloat u);
typedef void (APIENTRYP PFN_GLEVALCOORD1FV_PROC) (const GLfloat * u);
typedef void (APIENTRYP PFN_GLEVALCOORD2D_PROC) (GLdouble u, GLdouble v);
typedef void (APIENTRYP PFN_GLEVALCOORD2DV_PROC) (const GLdouble * u);
typedef void (APIENTRYP PFN_GLEVALCOORD2F_PROC) (GLfloat u, GLfloat v);
typedef void (APIENTRYP PFN_GLEVALCOORD2FV_PROC) (const GLfloat * u);
typedef void (APIENTRYP PFN_GLEVALMESH1_PROC) (GLenum mode, GLint i1, GLint i2);
typedef void (APIENTRYP PFN_GLEVALMESH2_PROC) (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
typedef void (APIENTRYP PFN_GLEVALPOINT1_PROC) (GLint i);
typedef void (APIENTRYP PFN_GLEVALPOINT2_PROC) (GLint i, GLint j);
typedef void (APIENTRYP PFN_GLFEEDBACKBUFFER_PROC) (GLsizei size, GLenum type, GLfloat * buffer);
typedef void (APIENTRYP PFN_GLFOGF_PROC) (GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLFOGFV_PROC) (GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLFOGI_PROC) (GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLFOGIV_PROC) (GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLFRUSTUM_PROC) (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef GLuint (APIENTRYP PFN_GLGENLISTS_PROC) (GLsizei range);
typedef void (APIENTRYP PFN_GLGETCLIPPLANE_PROC) (GLenum plane, GLdouble * equation);
typedef void (APIENTRYP PFN_GLGETLIGHTFV_PROC) (GLenum light, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETLIGHTIV_PROC) (GLenum light, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETMAPDV_PROC) (GLenum target, GLenum query, GLdouble * v);
typedef void (APIENTRYP PFN_GLGETMAPFV_PROC) (GLenum target, GLenum query, GLfloat * v);
typedef void (APIENTRYP PFN_GLGETMAPIV_PROC) (GLenum target, GLenum query, GLint * v);
typedef void (APIENTRYP PFN_GLGETMATERIALFV_PROC) (GLenum face, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETMATERIALIV_PROC) (GLenum face, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETPIXELMAPFV_PROC) (GLenum map, GLfloat * values);
typedef void (APIENTRYP PFN_GLGETPIXELMAPUIV_PROC) (GLenum map, GLuint * values);
typedef void (APIENTRYP PFN_GLGETPIXELMAPUSV_PROC) (GLenum map, GLushort * values);
typedef void (APIENTRYP PFN_GLGETPOLYGONSTIPPLE_PROC) (GLubyte * mask);
typedef void (APIENTRYP PFN_GLGETTEXENVFV_PROC) (GLenum target, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETTEXENVIV_PROC) (GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETTEXGENDV_PROC) (GLenum coord, GLenum pname, GLdouble * params);
typedef void (APIENTRYP PFN_GLGETTEXGENFV_PROC) (GLenum coord, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETTEXGENIV_PROC) (GLenum coord, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLINDEXMASK_PROC) (GLuint mask);
typedef void (APIENTRYP PFN_GLINDEXPOINTER_PROC) (GLenum type, GLsizei stride, const GLvoid * pointer);
typedef void (APIENTRYP PFN_GLINDEXD_PROC) (GLdouble c);
typedef void (APIENTRYP PFN_GLINDEXDV_PROC) (const GLdouble * c);
typedef void (APIENTRYP PFN_GLINDEXF_PROC) (GLfloat c);
typedef void (APIENTRYP PFN_GLINDEXFV_PROC) (const GLfloat * c);
typedef void (APIENTRYP PFN_GLINDEXI_PROC) (GLint c);
typedef void (APIENTRYP PFN_GLINDEXIV_PROC) (const GLint * c);
typedef void (APIENTRYP PFN_GLINDEXS_PROC) (GLshort c);
typedef void (APIENTRYP PFN_GLINDEXSV_PROC) (const GLshort * c);
typedef void (APIENTRYP PFN_GLINDEXUB_PROC) (GLubyte c);
typedef void (APIENTRYP PFN_GLINDEXUBV_PROC) (const GLubyte * c);
typedef void (APIENTRYP PFN_GLINITNAMES_PROC) (void);
typedef void (APIENTRYP PFN_GLINTERLEAVEDARRAYS_PROC) (GLenum format, GLsizei stride, const GLvoid * pointer);
typedef GLboolean (APIENTRYP PFN_GLISLIST_PROC) (GLuint list);
typedef void (APIENTRYP PFN_GLLIGHTMODELF_PROC) (GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLLIGHTMODELFV_PROC) (GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLLIGHTMODELI_PROC) (GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLLIGHTMODELIV_PROC) (GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLLIGHTF_PROC) (GLenum light, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLLIGHTFV_PROC) (GLenum light, GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLLIGHTI_PROC) (GLenum light, GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLLIGHTIV_PROC) (GLenum light, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLLINESTIPPLE_PROC) (GLint factor, GLushort pattern);
typedef void (APIENTRYP PFN_GLLISTBASE_PROC) (GLuint base);
typedef void (APIENTRYP PFN_GLLOADIDENTITY_PROC) (void);
typedef void (APIENTRYP PFN_GLLOADMATRIXD_PROC) (const GLdouble * m);
typedef void (APIENTRYP PFN_GLLOADMATRIXF_PROC) (const GLfloat * m);
typedef void (APIENTRYP PFN_GLLOADNAME_PROC) (GLuint name);
typedef void (APIENTRYP PFN_GLMAP1D_PROC) (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);
typedef void (APIENTRYP PFN_GLMAP1F_PROC) (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);
typedef void (APIENTRYP PFN_GLMAP2D_PROC) (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);
typedef void (APIENTRYP PFN_GLMAP2F_PROC) (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);
typedef void (APIENTRYP PFN_GLMAPGRID1D_PROC) (GLint un, GLdouble u1, GLdouble u2);
typedef void (APIENTRYP PFN_GLMAPGRID1F_PROC) (GLint un, GLfloat u1, GLfloat u2);
typedef void (APIENTRYP PFN_GLMAPGRID2D_PROC) (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
typedef void (APIENTRYP PFN_GLMAPGRID2F_PROC) (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
typedef void (APIENTRYP PFN_GLMATERIALF_PROC) (GLenum face, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLMATERIALFV_PROC) (GLenum face, GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLMATERIALI_PROC) (GLenum face, GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLMATERIALIV_PROC) (GLenum face, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLMATRIXMODE_PROC) (GLenum mode);
typedef void (APIENTRYP PFN_GLMULTMATRIXD_PROC) (const GLdouble * m);
typedef void (APIENTRYP PFN_GLMULTMATRIXF_PROC) (const GLfloat * m);
typedef void (APIENTRYP PFN_GLNEWLIST_PROC) (GLuint list, GLenum mode);
typedef void (APIENTRYP PFN_GLNORMAL3B_PROC) (GLbyte nx, GLbyte ny, GLbyte nz);
typedef void (APIENTRYP PFN_GLNORMAL3BV_PROC) (const GLbyte * v);
typedef void (APIENTRYP PFN_GLNORMAL3D_PROC) (GLdouble nx, GLdouble ny, GLdouble nz);
typedef void (APIENTRYP PFN_GLNORMAL3DV_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLNORMAL3F_PROC) (GLfloat nx, GLfloat ny, GLfloat nz);
typedef void (APIENTRYP PFN_GLNORMAL3FV_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLNORMAL3I_PROC) (GLint nx, GLint ny, GLint nz);
typedef void (APIENTRYP PFN_GLNORMAL3IV_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLNORMAL3S_PROC) (GLshort nx, GLshort ny, GLshort nz);
typedef void (APIENTRYP PFN_GLNORMAL3SV_PROC) (const GLshort * v);
typedef void (APIENTRYP PFN_GLNORMALPOINTER_PROC) (GLenum type, GLsizei stride, const GLvoid * pointer);
typedef void (APIENTRYP PFN_GLORTHO_PROC) (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (APIENTRYP PFN_GLPASSTHROUGH_PROC) (GLfloat token);
typedef void (APIENTRYP PFN_GLPIXELMAPFV_PROC) (GLenum map, GLsizei mapsize, const GLfloat * values);
typedef void (APIENTRYP PFN_GLPIXELMAPUIV_PROC) (GLenum map, GLsizei mapsize, const GLuint * values);
typedef void (APIENTRYP PFN_GLPIXELMAPUSV_PROC) (GLenum map, GLsizei mapsize, const GLushort * values);
typedef void (APIENTRYP PFN_GLPIXELTRANSFERF_PROC) (GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLPIXELTRANSFERI_PROC) (GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLPIXELZOOM_PROC) (GLfloat xfactor, GLfloat yfactor);
typedef void (APIENTRYP PFN_GLPOLYGONSTIPPLE_PROC) (const GLubyte * mask);
typedef void (APIENTRYP PFN_GLPOPATTRIB_PROC) (void);
typedef void (APIENTRYP PFN_GLPOPCLIENTATTRIB_PROC) (void);
typedef void (APIENTRYP PFN_GLPOPMATRIX_PROC) (void);
typedef void (APIENTRYP PFN_GLPOPNAME_PROC) (void);
typedef void (APIENTRYP PFN_GLPRIORITIZETEXTURES_PROC) (GLsizei n, const GLuint * textures, const GLclampf * priorities);
typedef void (APIENTRYP PFN_GLPUSHATTRIB_PROC) (GLbitfield mask);
typedef void (APIENTRYP PFN_GLPUSHCLIENTATTRIB_PROC) (GLbitfield mask);
typedef void (APIENTRYP PFN_GLPUSHMATRIX_PROC) (void);
typedef void (APIENTRYP PFN_GLPUSHNAME_PROC) (GLuint name);
typedef void (APIENTRYP PFN_GLRASTERPOS2D_PROC) (GLdouble x, GLdouble y);
typedef void (APIENTRYP PFN_GLRASTERPOS2DV_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLRASTERPOS2F_PROC) (GLfloat x, GLfloat y);
typedef void (APIENTRYP PFN_GLRASTERPOS2FV_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLRASTERPOS2I_PROC) (GLint x, GLint y);
typedef void (APIENTRYP PFN_GLRASTERPOS2IV_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLRASTERPOS2S_PROC) (GLshort x, GLshort y);
typedef void (APIENTRYP PFN_GLRASTERPOS2SV_PROC) (const GLshort * v);
typedef void (APIENTRYP PFN_GLRASTERPOS3D_PROC) (GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFN_GLRASTERPOS3DV_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLRASTERPOS3F_PROC) (GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLRASTERPOS3FV_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLRASTERPOS3I_PROC) (GLint x, GLint y, GLint z);
typedef void (APIENTRYP PFN_GLRASTERPOS3IV_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLRASTERPOS3S_PROC) (GLshort x, GLshort y, GLshort z);
typedef void (APIENTRYP PFN_GLRASTERPOS3SV_PROC) (const GLshort * v);
typedef void (APIENTRYP PFN_GLRASTERPOS4D_PROC) (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFN_GLRASTERPOS4DV_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLRASTERPOS4F_PROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRYP PFN_GLRASTERPOS4FV_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLRASTERPOS4I_PROC) (GLint x, GLint y, GLint z, GLint w);
typedef void (APIENTRYP PFN_GLRASTERPOS4IV_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLRASTERPOS4S_PROC) (GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (APIENTRYP PFN_GLRASTERPOS4SV_PROC) (const GLshort * v);
typedef void (APIENTRYP PFN_GLRECTD_PROC) (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
typedef void (APIENTRYP PFN_GLRECTDV_PROC) (const GLdouble * v1, const GLdouble * v2);
typedef void (APIENTRYP PFN_GLRECTF_PROC) (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
typedef void (APIENTRYP PFN_GLRECTFV_PROC) (const GLfloat * v1, const GLfloat * v2);
typedef void (APIENTRYP PFN_GLRECTI_PROC) (GLint x1, GLint y1, GLint x2, GLint y2);
typedef void (APIENTRYP PFN_GLRECTIV_PROC) (const GLint * v1, const GLint * v2);
typedef void (APIENTRYP PFN_GLRECTS_PROC) (GLshort x1, GLshort y1, GLshort x2, GLshort y2);
typedef void (APIENTRYP PFN_GLRECTSV_PROC) (const GLshort * v1, const GLshort * v2);
typedef GLint (APIENTRYP PFN_GLRENDERMODE_PROC) (GLenum mode);
typedef void (APIENTRYP PFN_GLROTATED_PROC) (GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFN_GLROTATEF_PROC) (GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLSCALED_PROC) (GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFN_GLSCALEF_PROC) (GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLSELECTBUFFER_PROC) (GLsizei size, GLuint * buffer);
typedef void (APIENTRYP PFN_GLSHADEMODEL_PROC) (GLenum mode);
typedef void (APIENTRYP PFN_GLTEXCOORD1D_PROC) (GLdouble s);
typedef void (APIENTRYP PFN_GLTEXCOORD1DV_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLTEXCOORD1F_PROC) (GLfloat s);
typedef void (APIENTRYP PFN_GLTEXCOORD1FV_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLTEXCOORD1I_PROC) (GLint s);
typedef void (APIENTRYP PFN_GLTEXCOORD1IV_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLTEXCOORD1S_PROC) (GLshort s);
typedef void (APIENTRYP PFN_GLTEXCOORD1SV_PROC) (const GLshort * v);
typedef void (APIENTRYP PFN_GLTEXCOORD2D_PROC) (GLdouble s, GLdouble t);
typedef void (APIENTRYP PFN_GLTEXCOORD2DV_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLTEXCOORD2F_PROC) (GLfloat s, GLfloat t);
typedef void (APIENTRYP PFN_GLTEXCOORD2FV_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLTEXCOORD2I_PROC) (GLint s, GLint t);
typedef void (APIENTRYP PFN_GLTEXCOORD2IV_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLTEXCOORD2S_PROC) (GLshort s, GLshort t);
typedef void (APIENTRYP PFN_GLTEXCOORD2SV_PROC) (const GLshort * v);
typedef void (APIENTRYP PFN_GLTEXCOORD3D_PROC) (GLdouble s, GLdouble t, GLdouble r);
typedef void (APIENTRYP PFN_GLTEXCOORD3DV_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLTEXCOORD3F_PROC) (GLfloat s, GLfloat t, GLfloat r);
typedef void (APIENTRYP PFN_GLTEXCOORD3FV_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLTEXCOORD3I_PROC) (GLint s, GLint t, GLint r);
typedef void (APIENTRYP PFN_GLTEXCOORD3IV_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLTEXCOORD3S_PROC) (GLshort s, GLshort t, GLshort r);
typedef void (APIENTRYP PFN_GLTEXCOORD3SV_PROC) (const GLshort * v);
typedef void (APIENTRYP PFN_GLTEXCOORD4D_PROC) (GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (APIENTRYP PFN_GLTEXCOORD4DV_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLTEXCOORD4F_PROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (APIENTRYP PFN_GLTEXCOORD4FV_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLTEXCOORD4I_PROC) (GLint s, GLint t, GLint r, GLint q);
typedef void (APIENTRYP PFN_GLTEXCOORD4IV_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLTEXCOORD4S_PROC) (GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (APIENTRYP PFN_GLTEXCOORD4SV_PROC) (const GLshort * v);
typedef void (APIENTRYP PFN_GLTEXCOORDPOINTER_PROC) (GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);
typedef void (APIENTRYP PFN_GLTEXENVF_PROC) (GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLTEXENVFV_PROC) (GLenum target, GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLTEXENVI_PROC) (GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLTEXENVIV_PROC) (GLenum target, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLTEXGEND_PROC) (GLenum coord, GLenum pname, GLdouble param);
typedef void (APIENTRYP PFN_GLTEXGENDV_PROC) (GLenum coord, GLenum pname, const GLdouble * params);
typedef void (APIENTRYP PFN_GLTEXGENF_PROC) (GLenum coord, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLTEXGENFV_PROC) (GLenum coord, GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLTEXGENI_PROC) (GLenum coord, GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLTEXGENIV_PROC) (GLenum coord, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLTRANSLATED_PROC) (GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFN_GLTRANSLATEF_PROC) (GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLVERTEX2D_PROC) (GLdouble x, GLdouble y);
typedef void (APIENTRYP PFN_GLVERTEX2DV_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEX2F_PROC) (GLfloat x, GLfloat y);
typedef void (APIENTRYP PFN_GLVERTEX2FV_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLVERTEX2I_PROC) (GLint x, GLint y);
typedef void (APIENTRYP PFN_GLVERTEX2IV_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLVERTEX2S_PROC) (GLshort x, GLshort y);
typedef void (APIENTRYP PFN_GLVERTEX2SV_PROC) (const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEX3D_PROC) (GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFN_GLVERTEX3DV_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEX3F_PROC) (GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLVERTEX3FV_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLVERTEX3I_PROC) (GLint x, GLint y, GLint z);
typedef void (APIENTRYP PFN_GLVERTEX3IV_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLVERTEX3S_PROC) (GLshort x, GLshort y, GLshort z);
typedef void (APIENTRYP PFN_GLVERTEX3SV_PROC) (const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEX4D_PROC) (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFN_GLVERTEX4DV_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEX4F_PROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRYP PFN_GLVERTEX4FV_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLVERTEX4I_PROC) (GLint x, GLint y, GLint z, GLint w);
typedef void (APIENTRYP PFN_GLVERTEX4IV_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLVERTEX4S_PROC) (GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (APIENTRYP PFN_GLVERTEX4SV_PROC) (const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEXPOINTER_PROC) (GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);

// functions typedefs
GL_FUNC_DEF PFN_GLACCUM_PROC _glAccum_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLALPHAFUNC_PROC _glAlphaFunc_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLARETEXTURESRESIDENT_PROC _glAreTexturesResident_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLARRAYELEMENT_PROC _glArrayElement_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBEGIN_PROC _glBegin_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBITMAP_PROC _glBitmap_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCALLLIST_PROC _glCallList_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCALLLISTS_PROC _glCallLists_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARACCUM_PROC _glClearAccum_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARINDEX_PROC _glClearIndex_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLIPPLANE_PROC _glClipPlane_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3B_PROC _glColor3b_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3BV_PROC _glColor3bv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3D_PROC _glColor3d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3DV_PROC _glColor3dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3F_PROC _glColor3f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3FV_PROC _glColor3fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3I_PROC _glColor3i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3IV_PROC _glColor3iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3S_PROC _glColor3s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3SV_PROC _glColor3sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3UB_PROC _glColor3ub_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3UBV_PROC _glColor3ubv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3UI_PROC _glColor3ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3UIV_PROC _glColor3uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3US_PROC _glColor3us_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3USV_PROC _glColor3usv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4B_PROC _glColor4b_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4BV_PROC _glColor4bv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4D_PROC _glColor4d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4DV_PROC _glColor4dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4F_PROC _glColor4f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4FV_PROC _glColor4fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4I_PROC _glColor4i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4IV_PROC _glColor4iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4S_PROC _glColor4s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4SV_PROC _glColor4sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4UB_PROC _glColor4ub_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4UBV_PROC _glColor4ubv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4UI_PROC _glColor4ui_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4UIV_PROC _glColor4uiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4US_PROC _glColor4us_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4USV_PROC _glColor4usv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLORMATERIAL_PROC _glColorMaterial_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLORPOINTER_PROC _glColorPointer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYPIXELS_PROC _glCopyPixels_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETELISTS_PROC _glDeleteLists_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDISABLECLIENTSTATE_PROC _glDisableClientState_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWPIXELS_PROC _glDrawPixels_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEDGEFLAG_PROC _glEdgeFlag_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEDGEFLAGPOINTER_PROC _glEdgeFlagPointer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEDGEFLAGV_PROC _glEdgeFlagv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENABLECLIENTSTATE_PROC _glEnableClientState_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEND_PROC _glEnd_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENDLIST_PROC _glEndList_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEVALCOORD1D_PROC _glEvalCoord1d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEVALCOORD1DV_PROC _glEvalCoord1dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEVALCOORD1F_PROC _glEvalCoord1f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEVALCOORD1FV_PROC _glEvalCoord1fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEVALCOORD2D_PROC _glEvalCoord2d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEVALCOORD2DV_PROC _glEvalCoord2dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEVALCOORD2F_PROC _glEvalCoord2f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEVALCOORD2FV_PROC _glEvalCoord2fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEVALMESH1_PROC _glEvalMesh1_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEVALMESH2_PROC _glEvalMesh2_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEVALPOINT1_PROC _glEvalPoint1_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEVALPOINT2_PROC _glEvalPoint2_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFEEDBACKBUFFER_PROC _glFeedbackBuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFOGF_PROC _glFogf_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFOGFV_PROC _glFogfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFOGI_PROC _glFogi_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFOGIV_PROC _glFogiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRUSTUM_PROC _glFrustum_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENLISTS_PROC _glGenLists_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCLIPPLANE_PROC _glGetClipPlane_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETLIGHTFV_PROC _glGetLightfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETLIGHTIV_PROC _glGetLightiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMAPDV_PROC _glGetMapdv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMAPFV_PROC _glGetMapfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMAPIV_PROC _glGetMapiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMATERIALFV_PROC _glGetMaterialfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMATERIALIV_PROC _glGetMaterialiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPIXELMAPFV_PROC _glGetPixelMapfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPIXELMAPUIV_PROC _glGetPixelMapuiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPIXELMAPUSV_PROC _glGetPixelMapusv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPOLYGONSTIPPLE_PROC _glGetPolygonStipple_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXENVFV_PROC _glGetTexEnvfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXENVIV_PROC _glGetTexEnviv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXGENDV_PROC _glGetTexGendv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXGENFV_PROC _glGetTexGenfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXGENIV_PROC _glGetTexGeniv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINDEXMASK_PROC _glIndexMask_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINDEXPOINTER_PROC _glIndexPointer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINDEXD_PROC _glIndexd_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINDEXDV_PROC _glIndexdv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINDEXF_PROC _glIndexf_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINDEXFV_PROC _glIndexfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINDEXI_PROC _glIndexi_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINDEXIV_PROC _glIndexiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINDEXS_PROC _glIndexs_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINDEXSV_PROC _glIndexsv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINDEXUB_PROC _glIndexub_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINDEXUBV_PROC _glIndexubv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINITNAMES_PROC _glInitNames_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINTERLEAVEDARRAYS_PROC _glInterleavedArrays_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISLIST_PROC _glIsList_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLIGHTMODELF_PROC _glLightModelf_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLIGHTMODELFV_PROC _glLightModelfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLIGHTMODELI_PROC _glLightModeli_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLIGHTMODELIV_PROC _glLightModeliv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLIGHTF_PROC _glLightf_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLIGHTFV_PROC _glLightfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLIGHTI_PROC _glLighti_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLIGHTIV_PROC _glLightiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLINESTIPPLE_PROC _glLineStipple_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLISTBASE_PROC _glListBase_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLOADIDENTITY_PROC _glLoadIdentity_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLOADMATRIXD_PROC _glLoadMatrixd_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLOADMATRIXF_PROC _glLoadMatrixf_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLOADNAME_PROC _glLoadName_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAP1D_PROC _glMap1d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAP1F_PROC _glMap1f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAP2D_PROC _glMap2d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAP2F_PROC _glMap2f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAPGRID1D_PROC _glMapGrid1d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAPGRID1F_PROC _glMapGrid1f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAPGRID2D_PROC _glMapGrid2d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAPGRID2F_PROC _glMapGrid2f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATERIALF_PROC _glMaterialf_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATERIALFV_PROC _glMaterialfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATERIALI_PROC _glMateriali_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATERIALIV_PROC _glMaterialiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXMODE_PROC _glMatrixMode_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTMATRIXD_PROC _glMultMatrixd_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTMATRIXF_PROC _glMultMatrixf_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNEWLIST_PROC _glNewList_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMAL3B_PROC _glNormal3b_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMAL3BV_PROC _glNormal3bv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMAL3D_PROC _glNormal3d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMAL3DV_PROC _glNormal3dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMAL3F_PROC _glNormal3f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMAL3FV_PROC _glNormal3fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMAL3I_PROC _glNormal3i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMAL3IV_PROC _glNormal3iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMAL3S_PROC _glNormal3s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMAL3SV_PROC _glNormal3sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMALPOINTER_PROC _glNormalPointer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLORTHO_PROC _glOrtho_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPASSTHROUGH_PROC _glPassThrough_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPIXELMAPFV_PROC _glPixelMapfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPIXELMAPUIV_PROC _glPixelMapuiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPIXELMAPUSV_PROC _glPixelMapusv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPIXELTRANSFERF_PROC _glPixelTransferf_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPIXELTRANSFERI_PROC _glPixelTransferi_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPIXELZOOM_PROC _glPixelZoom_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOLYGONSTIPPLE_PROC _glPolygonStipple_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOPATTRIB_PROC _glPopAttrib_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOPCLIENTATTRIB_PROC _glPopClientAttrib_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOPMATRIX_PROC _glPopMatrix_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOPNAME_PROC _glPopName_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPRIORITIZETEXTURES_PROC _glPrioritizeTextures_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPUSHATTRIB_PROC _glPushAttrib_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPUSHCLIENTATTRIB_PROC _glPushClientAttrib_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPUSHMATRIX_PROC _glPushMatrix_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPUSHNAME_PROC _glPushName_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS2D_PROC _glRasterPos2d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS2DV_PROC _glRasterPos2dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS2F_PROC _glRasterPos2f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS2FV_PROC _glRasterPos2fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS2I_PROC _glRasterPos2i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS2IV_PROC _glRasterPos2iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS2S_PROC _glRasterPos2s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS2SV_PROC _glRasterPos2sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS3D_PROC _glRasterPos3d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS3DV_PROC _glRasterPos3dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS3F_PROC _glRasterPos3f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS3FV_PROC _glRasterPos3fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS3I_PROC _glRasterPos3i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS3IV_PROC _glRasterPos3iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS3S_PROC _glRasterPos3s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS3SV_PROC _glRasterPos3sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS4D_PROC _glRasterPos4d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS4DV_PROC _glRasterPos4dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS4F_PROC _glRasterPos4f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS4FV_PROC _glRasterPos4fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS4I_PROC _glRasterPos4i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS4IV_PROC _glRasterPos4iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS4S_PROC _glRasterPos4s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS4SV_PROC _glRasterPos4sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRECTD_PROC _glRectd_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRECTDV_PROC _glRectdv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRECTF_PROC _glRectf_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRECTFV_PROC _glRectfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRECTI_PROC _glRecti_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRECTIV_PROC _glRectiv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRECTS_PROC _glRects_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRECTSV_PROC _glRectsv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRENDERMODE_PROC _glRenderMode_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLROTATED_PROC _glRotated_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLROTATEF_PROC _glRotatef_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSCALED_PROC _glScaled_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSCALEF_PROC _glScalef_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSELECTBUFFER_PROC _glSelectBuffer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSHADEMODEL_PROC _glShadeModel_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD1D_PROC _glTexCoord1d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD1DV_PROC _glTexCoord1dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD1F_PROC _glTexCoord1f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD1FV_PROC _glTexCoord1fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD1I_PROC _glTexCoord1i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD1IV_PROC _glTexCoord1iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD1S_PROC _glTexCoord1s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD1SV_PROC _glTexCoord1sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2D_PROC _glTexCoord2d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2DV_PROC _glTexCoord2dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2F_PROC _glTexCoord2f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2FV_PROC _glTexCoord2fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2I_PROC _glTexCoord2i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2IV_PROC _glTexCoord2iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2S_PROC _glTexCoord2s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2SV_PROC _glTexCoord2sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD3D_PROC _glTexCoord3d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD3DV_PROC _glTexCoord3dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD3F_PROC _glTexCoord3f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD3FV_PROC _glTexCoord3fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD3I_PROC _glTexCoord3i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD3IV_PROC _glTexCoord3iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD3S_PROC _glTexCoord3s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD3SV_PROC _glTexCoord3sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD4D_PROC _glTexCoord4d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD4DV_PROC _glTexCoord4dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD4F_PROC _glTexCoord4f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD4FV_PROC _glTexCoord4fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD4I_PROC _glTexCoord4i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD4IV_PROC _glTexCoord4iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD4S_PROC _glTexCoord4s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD4SV_PROC _glTexCoord4sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORDPOINTER_PROC _glTexCoordPointer_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXENVF_PROC _glTexEnvf_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXENVFV_PROC _glTexEnvfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXENVI_PROC _glTexEnvi_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXENVIV_PROC _glTexEnviv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXGEND_PROC _glTexGend_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXGENDV_PROC _glTexGendv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXGENF_PROC _glTexGenf_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXGENFV_PROC _glTexGenfv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXGENI_PROC _glTexGeni_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXGENIV_PROC _glTexGeniv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTRANSLATED_PROC _glTranslated_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTRANSLATEF_PROC _glTranslatef_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX2D_PROC _glVertex2d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX2DV_PROC _glVertex2dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX2F_PROC _glVertex2f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX2FV_PROC _glVertex2fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX2I_PROC _glVertex2i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX2IV_PROC _glVertex2iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX2S_PROC _glVertex2s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX2SV_PROC _glVertex2sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX3D_PROC _glVertex3d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX3DV_PROC _glVertex3dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX3F_PROC _glVertex3f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX3FV_PROC _glVertex3fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX3I_PROC _glVertex3i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX3IV_PROC _glVertex3iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX3S_PROC _glVertex3s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX3SV_PROC _glVertex3sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX4D_PROC _glVertex4d_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX4DV_PROC _glVertex4dv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX4F_PROC _glVertex4f_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX4FV_PROC _glVertex4fv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX4I_PROC _glVertex4i_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX4IV_PROC _glVertex4iv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX4S_PROC _glVertex4s_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX4SV_PROC _glVertex4sv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXPOINTER_PROC _glVertexPointer_ GL_FUNC_DEF2;

// functions inline wrap
inline void glAccum (GLenum op, GLfloat value) { return _glAccum_(op, value); };
inline void glAlphaFunc (GLenum func, GLclampf ref) { return _glAlphaFunc_(func, ref); };
inline GLboolean glAreTexturesResident (GLsizei n, const GLuint * textures, GLboolean * residences) { return _glAreTexturesResident_(n, textures, residences); };
inline void glArrayElement (GLint i) { return _glArrayElement_(i); };
inline void glBegin (GLenum mode) { return _glBegin_(mode); };
inline void glBitmap (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap) { return _glBitmap_(width, height, xorig, yorig, xmove, ymove, bitmap); };
inline void glCallList (GLuint list) { return _glCallList_(list); };
inline void glCallLists (GLsizei n, GLenum type, const GLvoid * lists) { return _glCallLists_(n, type, lists); };
inline void glClearAccum (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { return _glClearAccum_(red, green, blue, alpha); };
inline void glClearIndex (GLfloat c) { return _glClearIndex_(c); };
inline void glClipPlane (GLenum plane, const GLdouble * equation) { return _glClipPlane_(plane, equation); };
inline void glColor3b (GLbyte red, GLbyte green, GLbyte blue) { return _glColor3b_(red, green, blue); };
inline void glColor3bv (const GLbyte * v) { return _glColor3bv_(v); };
inline void glColor3d (GLdouble red, GLdouble green, GLdouble blue) { return _glColor3d_(red, green, blue); };
inline void glColor3dv (const GLdouble * v) { return _glColor3dv_(v); };
inline void glColor3f (GLfloat red, GLfloat green, GLfloat blue) { return _glColor3f_(red, green, blue); };
inline void glColor3fv (const GLfloat * v) { return _glColor3fv_(v); };
inline void glColor3i (GLint red, GLint green, GLint blue) { return _glColor3i_(red, green, blue); };
inline void glColor3iv (const GLint * v) { return _glColor3iv_(v); };
inline void glColor3s (GLshort red, GLshort green, GLshort blue) { return _glColor3s_(red, green, blue); };
inline void glColor3sv (const GLshort * v) { return _glColor3sv_(v); };
inline void glColor3ub (GLubyte red, GLubyte green, GLubyte blue) { return _glColor3ub_(red, green, blue); };
inline void glColor3ubv (const GLubyte * v) { return _glColor3ubv_(v); };
inline void glColor3ui (GLuint red, GLuint green, GLuint blue) { return _glColor3ui_(red, green, blue); };
inline void glColor3uiv (const GLuint * v) { return _glColor3uiv_(v); };
inline void glColor3us (GLushort red, GLushort green, GLushort blue) { return _glColor3us_(red, green, blue); };
inline void glColor3usv (const GLushort * v) { return _glColor3usv_(v); };
inline void glColor4b (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) { return _glColor4b_(red, green, blue, alpha); };
inline void glColor4bv (const GLbyte * v) { return _glColor4bv_(v); };
inline void glColor4d (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) { return _glColor4d_(red, green, blue, alpha); };
inline void glColor4dv (const GLdouble * v) { return _glColor4dv_(v); };
inline void glColor4f (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { return _glColor4f_(red, green, blue, alpha); };
inline void glColor4fv (const GLfloat * v) { return _glColor4fv_(v); };
inline void glColor4i (GLint red, GLint green, GLint blue, GLint alpha) { return _glColor4i_(red, green, blue, alpha); };
inline void glColor4iv (const GLint * v) { return _glColor4iv_(v); };
inline void glColor4s (GLshort red, GLshort green, GLshort blue, GLshort alpha) { return _glColor4s_(red, green, blue, alpha); };
inline void glColor4sv (const GLshort * v) { return _glColor4sv_(v); };
inline void glColor4ub (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) { return _glColor4ub_(red, green, blue, alpha); };
inline void glColor4ubv (const GLubyte * v) { return _glColor4ubv_(v); };
inline void glColor4ui (GLuint red, GLuint green, GLuint blue, GLuint alpha) { return _glColor4ui_(red, green, blue, alpha); };
inline void glColor4uiv (const GLuint * v) { return _glColor4uiv_(v); };
inline void glColor4us (GLushort red, GLushort green, GLushort blue, GLushort alpha) { return _glColor4us_(red, green, blue, alpha); };
inline void glColor4usv (const GLushort * v) { return _glColor4usv_(v); };
inline void glColorMaterial (GLenum face, GLenum mode) { return _glColorMaterial_(face, mode); };
inline void glColorPointer (GLint size, GLenum type, GLsizei stride, const GLvoid * pointer) { return _glColorPointer_(size, type, stride, pointer); };
inline void glCopyPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) { return _glCopyPixels_(x, y, width, height, type); };
inline void glDeleteLists (GLuint list, GLsizei range) { return _glDeleteLists_(list, range); };
inline void glDisableClientState (GLenum array) { return _glDisableClientState_(array); };
inline void glDrawPixels (GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels) { return _glDrawPixels_(width, height, format, type, pixels); };
inline void glEdgeFlag (GLboolean flag) { return _glEdgeFlag_(flag); };
inline void glEdgeFlagPointer (GLsizei stride, const GLvoid * pointer) { return _glEdgeFlagPointer_(stride, pointer); };
inline void glEdgeFlagv (const GLboolean * flag) { return _glEdgeFlagv_(flag); };
inline void glEnableClientState (GLenum array) { return _glEnableClientState_(array); };
inline void glEnd (void) { return _glEnd_(); };
inline void glEndList (void) { return _glEndList_(); };
inline void glEvalCoord1d (GLdouble u) { return _glEvalCoord1d_(u); };
inline void glEvalCoord1dv (const GLdouble * u) { return _glEvalCoord1dv_(u); };
inline void glEvalCoord1f (GLfloat u) { return _glEvalCoord1f_(u); };
inline void glEvalCoord1fv (const GLfloat * u) { return _glEvalCoord1fv_(u); };
inline void glEvalCoord2d (GLdouble u, GLdouble v) { return _glEvalCoord2d_(u, v); };
inline void glEvalCoord2dv (const GLdouble * u) { return _glEvalCoord2dv_(u); };
inline void glEvalCoord2f (GLfloat u, GLfloat v) { return _glEvalCoord2f_(u, v); };
inline void glEvalCoord2fv (const GLfloat * u) { return _glEvalCoord2fv_(u); };
inline void glEvalMesh1 (GLenum mode, GLint i1, GLint i2) { return _glEvalMesh1_(mode, i1, i2); };
inline void glEvalMesh2 (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) { return _glEvalMesh2_(mode, i1, i2, j1, j2); };
inline void glEvalPoint1 (GLint i) { return _glEvalPoint1_(i); };
inline void glEvalPoint2 (GLint i, GLint j) { return _glEvalPoint2_(i, j); };
inline void glFeedbackBuffer (GLsizei size, GLenum type, GLfloat * buffer) { return _glFeedbackBuffer_(size, type, buffer); };
inline void glFogf (GLenum pname, GLfloat param) { return _glFogf_(pname, param); };
inline void glFogfv (GLenum pname, const GLfloat * params) { return _glFogfv_(pname, params); };
inline void glFogi (GLenum pname, GLint param) { return _glFogi_(pname, param); };
inline void glFogiv (GLenum pname, const GLint * params) { return _glFogiv_(pname, params); };
inline void glFrustum (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { return _glFrustum_(left, right, bottom, top, zNear, zFar); };
inline GLuint glGenLists (GLsizei range) { return _glGenLists_(range); };
inline void glGetClipPlane (GLenum plane, GLdouble * equation) { return _glGetClipPlane_(plane, equation); };
inline void glGetLightfv (GLenum light, GLenum pname, GLfloat * params) { return _glGetLightfv_(light, pname, params); };
inline void glGetLightiv (GLenum light, GLenum pname, GLint * params) { return _glGetLightiv_(light, pname, params); };
inline void glGetMapdv (GLenum target, GLenum query, GLdouble * v) { return _glGetMapdv_(target, query, v); };
inline void glGetMapfv (GLenum target, GLenum query, GLfloat * v) { return _glGetMapfv_(target, query, v); };
inline void glGetMapiv (GLenum target, GLenum query, GLint * v) { return _glGetMapiv_(target, query, v); };
inline void glGetMaterialfv (GLenum face, GLenum pname, GLfloat * params) { return _glGetMaterialfv_(face, pname, params); };
inline void glGetMaterialiv (GLenum face, GLenum pname, GLint * params) { return _glGetMaterialiv_(face, pname, params); };
inline void glGetPixelMapfv (GLenum map, GLfloat * values) { return _glGetPixelMapfv_(map, values); };
inline void glGetPixelMapuiv (GLenum map, GLuint * values) { return _glGetPixelMapuiv_(map, values); };
inline void glGetPixelMapusv (GLenum map, GLushort * values) { return _glGetPixelMapusv_(map, values); };
inline void glGetPolygonStipple (GLubyte * mask) { return _glGetPolygonStipple_(mask); };
inline void glGetTexEnvfv (GLenum target, GLenum pname, GLfloat * params) { return _glGetTexEnvfv_(target, pname, params); };
inline void glGetTexEnviv (GLenum target, GLenum pname, GLint * params) { return _glGetTexEnviv_(target, pname, params); };
inline void glGetTexGendv (GLenum coord, GLenum pname, GLdouble * params) { return _glGetTexGendv_(coord, pname, params); };
inline void glGetTexGenfv (GLenum coord, GLenum pname, GLfloat * params) { return _glGetTexGenfv_(coord, pname, params); };
inline void glGetTexGeniv (GLenum coord, GLenum pname, GLint * params) { return _glGetTexGeniv_(coord, pname, params); };
inline void glIndexMask (GLuint mask) { return _glIndexMask_(mask); };
inline void glIndexPointer (GLenum type, GLsizei stride, const GLvoid * pointer) { return _glIndexPointer_(type, stride, pointer); };
inline void glIndexd (GLdouble c) { return _glIndexd_(c); };
inline void glIndexdv (const GLdouble * c) { return _glIndexdv_(c); };
inline void glIndexf (GLfloat c) { return _glIndexf_(c); };
inline void glIndexfv (const GLfloat * c) { return _glIndexfv_(c); };
inline void glIndexi (GLint c) { return _glIndexi_(c); };
inline void glIndexiv (const GLint * c) { return _glIndexiv_(c); };
inline void glIndexs (GLshort c) { return _glIndexs_(c); };
inline void glIndexsv (const GLshort * c) { return _glIndexsv_(c); };
inline void glIndexub (GLubyte c) { return _glIndexub_(c); };
inline void glIndexubv (const GLubyte * c) { return _glIndexubv_(c); };
inline void glInitNames (void) { return _glInitNames_(); };
inline void glInterleavedArrays (GLenum format, GLsizei stride, const GLvoid * pointer) { return _glInterleavedArrays_(format, stride, pointer); };
inline GLboolean glIsList (GLuint list) { return _glIsList_(list); };
inline void glLightModelf (GLenum pname, GLfloat param) { return _glLightModelf_(pname, param); };
inline void glLightModelfv (GLenum pname, const GLfloat * params) { return _glLightModelfv_(pname, params); };
inline void glLightModeli (GLenum pname, GLint param) { return _glLightModeli_(pname, param); };
inline void glLightModeliv (GLenum pname, const GLint * params) { return _glLightModeliv_(pname, params); };
inline void glLightf (GLenum light, GLenum pname, GLfloat param) { return _glLightf_(light, pname, param); };
inline void glLightfv (GLenum light, GLenum pname, const GLfloat * params) { return _glLightfv_(light, pname, params); };
inline void glLighti (GLenum light, GLenum pname, GLint param) { return _glLighti_(light, pname, param); };
inline void glLightiv (GLenum light, GLenum pname, const GLint * params) { return _glLightiv_(light, pname, params); };
inline void glLineStipple (GLint factor, GLushort pattern) { return _glLineStipple_(factor, pattern); };
inline void glListBase (GLuint base) { return _glListBase_(base); };
inline void glLoadIdentity (void) { return _glLoadIdentity_(); };
inline void glLoadMatrixd (const GLdouble * m) { return _glLoadMatrixd_(m); };
inline void glLoadMatrixf (const GLfloat * m) { return _glLoadMatrixf_(m); };
inline void glLoadName (GLuint name) { return _glLoadName_(name); };
inline void glMap1d (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) { return _glMap1d_(target, u1, u2, stride, order, points); };
inline void glMap1f (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) { return _glMap1f_(target, u1, u2, stride, order, points); };
inline void glMap2d (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) { return _glMap2d_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); };
inline void glMap2f (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) { return _glMap2f_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); };
inline void glMapGrid1d (GLint un, GLdouble u1, GLdouble u2) { return _glMapGrid1d_(un, u1, u2); };
inline void glMapGrid1f (GLint un, GLfloat u1, GLfloat u2) { return _glMapGrid1f_(un, u1, u2); };
inline void glMapGrid2d (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) { return _glMapGrid2d_(un, u1, u2, vn, v1, v2); };
inline void glMapGrid2f (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) { return _glMapGrid2f_(un, u1, u2, vn, v1, v2); };
inline void glMaterialf (GLenum face, GLenum pname, GLfloat param) { return _glMaterialf_(face, pname, param); };
inline void glMaterialfv (GLenum face, GLenum pname, const GLfloat * params) { return _glMaterialfv_(face, pname, params); };
inline void glMateriali (GLenum face, GLenum pname, GLint param) { return _glMateriali_(face, pname, param); };
inline void glMaterialiv (GLenum face, GLenum pname, const GLint * params) { return _glMaterialiv_(face, pname, params); };
inline void glMatrixMode (GLenum mode) { return _glMatrixMode_(mode); };
inline void glMultMatrixd (const GLdouble * m) { return _glMultMatrixd_(m); };
inline void glMultMatrixf (const GLfloat * m) { return _glMultMatrixf_(m); };
inline void glNewList (GLuint list, GLenum mode) { return _glNewList_(list, mode); };
inline void glNormal3b (GLbyte nx, GLbyte ny, GLbyte nz) { return _glNormal3b_(nx, ny, nz); };
inline void glNormal3bv (const GLbyte * v) { return _glNormal3bv_(v); };
inline void glNormal3d (GLdouble nx, GLdouble ny, GLdouble nz) { return _glNormal3d_(nx, ny, nz); };
inline void glNormal3dv (const GLdouble * v) { return _glNormal3dv_(v); };
inline void glNormal3f (GLfloat nx, GLfloat ny, GLfloat nz) { return _glNormal3f_(nx, ny, nz); };
inline void glNormal3fv (const GLfloat * v) { return _glNormal3fv_(v); };
inline void glNormal3i (GLint nx, GLint ny, GLint nz) { return _glNormal3i_(nx, ny, nz); };
inline void glNormal3iv (const GLint * v) { return _glNormal3iv_(v); };
inline void glNormal3s (GLshort nx, GLshort ny, GLshort nz) { return _glNormal3s_(nx, ny, nz); };
inline void glNormal3sv (const GLshort * v) { return _glNormal3sv_(v); };
inline void glNormalPointer (GLenum type, GLsizei stride, const GLvoid * pointer) { return _glNormalPointer_(type, stride, pointer); };
inline void glOrtho (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { return _glOrtho_(left, right, bottom, top, zNear, zFar); };
inline void glPassThrough (GLfloat token) { return _glPassThrough_(token); };
inline void glPixelMapfv (GLenum map, GLsizei mapsize, const GLfloat * values) { return _glPixelMapfv_(map, mapsize, values); };
inline void glPixelMapuiv (GLenum map, GLsizei mapsize, const GLuint * values) { return _glPixelMapuiv_(map, mapsize, values); };
inline void glPixelMapusv (GLenum map, GLsizei mapsize, const GLushort * values) { return _glPixelMapusv_(map, mapsize, values); };
inline void glPixelTransferf (GLenum pname, GLfloat param) { return _glPixelTransferf_(pname, param); };
inline void glPixelTransferi (GLenum pname, GLint param) { return _glPixelTransferi_(pname, param); };
inline void glPixelZoom (GLfloat xfactor, GLfloat yfactor) { return _glPixelZoom_(xfactor, yfactor); };
inline void glPolygonStipple (const GLubyte * mask) { return _glPolygonStipple_(mask); };
inline void glPopAttrib (void) { return _glPopAttrib_(); };
inline void glPopClientAttrib (void) { return _glPopClientAttrib_(); };
inline void glPopMatrix (void) { return _glPopMatrix_(); };
inline void glPopName (void) { return _glPopName_(); };
inline void glPrioritizeTextures (GLsizei n, const GLuint * textures, const GLclampf * priorities) { return _glPrioritizeTextures_(n, textures, priorities); };
inline void glPushAttrib (GLbitfield mask) { return _glPushAttrib_(mask); };
inline void glPushClientAttrib (GLbitfield mask) { return _glPushClientAttrib_(mask); };
inline void glPushMatrix (void) { return _glPushMatrix_(); };
inline void glPushName (GLuint name) { return _glPushName_(name); };
inline void glRasterPos2d (GLdouble x, GLdouble y) { return _glRasterPos2d_(x, y); };
inline void glRasterPos2dv (const GLdouble * v) { return _glRasterPos2dv_(v); };
inline void glRasterPos2f (GLfloat x, GLfloat y) { return _glRasterPos2f_(x, y); };
inline void glRasterPos2fv (const GLfloat * v) { return _glRasterPos2fv_(v); };
inline void glRasterPos2i (GLint x, GLint y) { return _glRasterPos2i_(x, y); };
inline void glRasterPos2iv (const GLint * v) { return _glRasterPos2iv_(v); };
inline void glRasterPos2s (GLshort x, GLshort y) { return _glRasterPos2s_(x, y); };
inline void glRasterPos2sv (const GLshort * v) { return _glRasterPos2sv_(v); };
inline void glRasterPos3d (GLdouble x, GLdouble y, GLdouble z) { return _glRasterPos3d_(x, y, z); };
inline void glRasterPos3dv (const GLdouble * v) { return _glRasterPos3dv_(v); };
inline void glRasterPos3f (GLfloat x, GLfloat y, GLfloat z) { return _glRasterPos3f_(x, y, z); };
inline void glRasterPos3fv (const GLfloat * v) { return _glRasterPos3fv_(v); };
inline void glRasterPos3i (GLint x, GLint y, GLint z) { return _glRasterPos3i_(x, y, z); };
inline void glRasterPos3iv (const GLint * v) { return _glRasterPos3iv_(v); };
inline void glRasterPos3s (GLshort x, GLshort y, GLshort z) { return _glRasterPos3s_(x, y, z); };
inline void glRasterPos3sv (const GLshort * v) { return _glRasterPos3sv_(v); };
inline void glRasterPos4d (GLdouble x, GLdouble y, GLdouble z, GLdouble w) { return _glRasterPos4d_(x, y, z, w); };
inline void glRasterPos4dv (const GLdouble * v) { return _glRasterPos4dv_(v); };
inline void glRasterPos4f (GLfloat x, GLfloat y, GLfloat z, GLfloat w) { return _glRasterPos4f_(x, y, z, w); };
inline void glRasterPos4fv (const GLfloat * v) { return _glRasterPos4fv_(v); };
inline void glRasterPos4i (GLint x, GLint y, GLint z, GLint w) { return _glRasterPos4i_(x, y, z, w); };
inline void glRasterPos4iv (const GLint * v) { return _glRasterPos4iv_(v); };
inline void glRasterPos4s (GLshort x, GLshort y, GLshort z, GLshort w) { return _glRasterPos4s_(x, y, z, w); };
inline void glRasterPos4sv (const GLshort * v) { return _glRasterPos4sv_(v); };
inline void glRectd (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) { return _glRectd_(x1, y1, x2, y2); };
inline void glRectdv (const GLdouble * v1, const GLdouble * v2) { return _glRectdv_(v1, v2); };
inline void glRectf (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) { return _glRectf_(x1, y1, x2, y2); };
inline void glRectfv (const GLfloat * v1, const GLfloat * v2) { return _glRectfv_(v1, v2); };
inline void glRecti (GLint x1, GLint y1, GLint x2, GLint y2) { return _glRecti_(x1, y1, x2, y2); };
inline void glRectiv (const GLint * v1, const GLint * v2) { return _glRectiv_(v1, v2); };
inline void glRects (GLshort x1, GLshort y1, GLshort x2, GLshort y2) { return _glRects_(x1, y1, x2, y2); };
inline void glRectsv (const GLshort * v1, const GLshort * v2) { return _glRectsv_(v1, v2); };
inline GLint glRenderMode (GLenum mode) { return _glRenderMode_(mode); };
inline void glRotated (GLdouble angle, GLdouble x, GLdouble y, GLdouble z) { return _glRotated_(angle, x, y, z); };
inline void glRotatef (GLfloat angle, GLfloat x, GLfloat y, GLfloat z) { return _glRotatef_(angle, x, y, z); };
inline void glScaled (GLdouble x, GLdouble y, GLdouble z) { return _glScaled_(x, y, z); };
inline void glScalef (GLfloat x, GLfloat y, GLfloat z) { return _glScalef_(x, y, z); };
inline void glSelectBuffer (GLsizei size, GLuint * buffer) { return _glSelectBuffer_(size, buffer); };
inline void glShadeModel (GLenum mode) { return _glShadeModel_(mode); };
inline void glTexCoord1d (GLdouble s) { return _glTexCoord1d_(s); };
inline void glTexCoord1dv (const GLdouble * v) { return _glTexCoord1dv_(v); };
inline void glTexCoord1f (GLfloat s) { return _glTexCoord1f_(s); };
inline void glTexCoord1fv (const GLfloat * v) { return _glTexCoord1fv_(v); };
inline void glTexCoord1i (GLint s) { return _glTexCoord1i_(s); };
inline void glTexCoord1iv (const GLint * v) { return _glTexCoord1iv_(v); };
inline void glTexCoord1s (GLshort s) { return _glTexCoord1s_(s); };
inline void glTexCoord1sv (const GLshort * v) { return _glTexCoord1sv_(v); };
inline void glTexCoord2d (GLdouble s, GLdouble t) { return _glTexCoord2d_(s, t); };
inline void glTexCoord2dv (const GLdouble * v) { return _glTexCoord2dv_(v); };
inline void glTexCoord2f (GLfloat s, GLfloat t) { return _glTexCoord2f_(s, t); };
inline void glTexCoord2fv (const GLfloat * v) { return _glTexCoord2fv_(v); };
inline void glTexCoord2i (GLint s, GLint t) { return _glTexCoord2i_(s, t); };
inline void glTexCoord2iv (const GLint * v) { return _glTexCoord2iv_(v); };
inline void glTexCoord2s (GLshort s, GLshort t) { return _glTexCoord2s_(s, t); };
inline void glTexCoord2sv (const GLshort * v) { return _glTexCoord2sv_(v); };
inline void glTexCoord3d (GLdouble s, GLdouble t, GLdouble r) { return _glTexCoord3d_(s, t, r); };
inline void glTexCoord3dv (const GLdouble * v) { return _glTexCoord3dv_(v); };
inline void glTexCoord3f (GLfloat s, GLfloat t, GLfloat r) { return _glTexCoord3f_(s, t, r); };
inline void glTexCoord3fv (const GLfloat * v) { return _glTexCoord3fv_(v); };
inline void glTexCoord3i (GLint s, GLint t, GLint r) { return _glTexCoord3i_(s, t, r); };
inline void glTexCoord3iv (const GLint * v) { return _glTexCoord3iv_(v); };
inline void glTexCoord3s (GLshort s, GLshort t, GLshort r) { return _glTexCoord3s_(s, t, r); };
inline void glTexCoord3sv (const GLshort * v) { return _glTexCoord3sv_(v); };
inline void glTexCoord4d (GLdouble s, GLdouble t, GLdouble r, GLdouble q) { return _glTexCoord4d_(s, t, r, q); };
inline void glTexCoord4dv (const GLdouble * v) { return _glTexCoord4dv_(v); };
inline void glTexCoord4f (GLfloat s, GLfloat t, GLfloat r, GLfloat q) { return _glTexCoord4f_(s, t, r, q); };
inline void glTexCoord4fv (const GLfloat * v) { return _glTexCoord4fv_(v); };
inline void glTexCoord4i (GLint s, GLint t, GLint r, GLint q) { return _glTexCoord4i_(s, t, r, q); };
inline void glTexCoord4iv (const GLint * v) { return _glTexCoord4iv_(v); };
inline void glTexCoord4s (GLshort s, GLshort t, GLshort r, GLshort q) { return _glTexCoord4s_(s, t, r, q); };
inline void glTexCoord4sv (const GLshort * v) { return _glTexCoord4sv_(v); };
inline void glTexCoordPointer (GLint size, GLenum type, GLsizei stride, const GLvoid * pointer) { return _glTexCoordPointer_(size, type, stride, pointer); };
inline void glTexEnvf (GLenum target, GLenum pname, GLfloat param) { return _glTexEnvf_(target, pname, param); };
inline void glTexEnvfv (GLenum target, GLenum pname, const GLfloat * params) { return _glTexEnvfv_(target, pname, params); };
inline void glTexEnvi (GLenum target, GLenum pname, GLint param) { return _glTexEnvi_(target, pname, param); };
inline void glTexEnviv (GLenum target, GLenum pname, const GLint * params) { return _glTexEnviv_(target, pname, params); };
inline void glTexGend (GLenum coord, GLenum pname, GLdouble param) { return _glTexGend_(coord, pname, param); };
inline void glTexGendv (GLenum coord, GLenum pname, const GLdouble * params) { return _glTexGendv_(coord, pname, params); };
inline void glTexGenf (GLenum coord, GLenum pname, GLfloat param) { return _glTexGenf_(coord, pname, param); };
inline void glTexGenfv (GLenum coord, GLenum pname, const GLfloat * params) { return _glTexGenfv_(coord, pname, params); };
inline void glTexGeni (GLenum coord, GLenum pname, GLint param) { return _glTexGeni_(coord, pname, param); };
inline void glTexGeniv (GLenum coord, GLenum pname, const GLint * params) { return _glTexGeniv_(coord, pname, params); };
inline void glTranslated (GLdouble x, GLdouble y, GLdouble z) { return _glTranslated_(x, y, z); };
inline void glTranslatef (GLfloat x, GLfloat y, GLfloat z) { return _glTranslatef_(x, y, z); };
inline void glVertex2d (GLdouble x, GLdouble y) { return _glVertex2d_(x, y); };
inline void glVertex2dv (const GLdouble * v) { return _glVertex2dv_(v); };
inline void glVertex2f (GLfloat x, GLfloat y) { return _glVertex2f_(x, y); };
inline void glVertex2fv (const GLfloat * v) { return _glVertex2fv_(v); };
inline void glVertex2i (GLint x, GLint y) { return _glVertex2i_(x, y); };
inline void glVertex2iv (const GLint * v) { return _glVertex2iv_(v); };
inline void glVertex2s (GLshort x, GLshort y) { return _glVertex2s_(x, y); };
inline void glVertex2sv (const GLshort * v) { return _glVertex2sv_(v); };
inline void glVertex3d (GLdouble x, GLdouble y, GLdouble z) { return _glVertex3d_(x, y, z); };
inline void glVertex3dv (const GLdouble * v) { return _glVertex3dv_(v); };
inline void glVertex3f (GLfloat x, GLfloat y, GLfloat z) { return _glVertex3f_(x, y, z); };
inline void glVertex3fv (const GLfloat * v) { return _glVertex3fv_(v); };
inline void glVertex3i (GLint x, GLint y, GLint z) { return _glVertex3i_(x, y, z); };
inline void glVertex3iv (const GLint * v) { return _glVertex3iv_(v); };
inline void glVertex3s (GLshort x, GLshort y, GLshort z) { return _glVertex3s_(x, y, z); };
inline void glVertex3sv (const GLshort * v) { return _glVertex3sv_(v); };
inline void glVertex4d (GLdouble x, GLdouble y, GLdouble z, GLdouble w) { return _glVertex4d_(x, y, z, w); };
inline void glVertex4dv (const GLdouble * v) { return _glVertex4dv_(v); };
inline void glVertex4f (GLfloat x, GLfloat y, GLfloat z, GLfloat w) { return _glVertex4f_(x, y, z, w); };
inline void glVertex4fv (const GLfloat * v) { return _glVertex4fv_(v); };
inline void glVertex4i (GLint x, GLint y, GLint z, GLint w) { return _glVertex4i_(x, y, z, w); };
inline void glVertex4iv (const GLint * v) { return _glVertex4iv_(v); };
inline void glVertex4s (GLshort x, GLshort y, GLshort z, GLshort w) { return _glVertex4s_(x, y, z, w); };
inline void glVertex4sv (const GLshort * v) { return _glVertex4sv_(v); };
inline void glVertexPointer (GLint size, GLenum type, GLsizei stride, const GLvoid * pointer) { return _glVertexPointer_(size, type, stride, pointer); };
#endif //GL_VERSION_1_11

#ifndef GL_ARB_color_buffer_float

// Defines
#define GL_RGBA_FLOAT_MODE_ARB            0x8820 
#define GL_CLAMP_VERTEX_COLOR_ARB         0x891A 
#define GL_CLAMP_FRAGMENT_COLOR_ARB       0x891B 
#define GL_CLAMP_READ_COLOR_ARB           0x891C 
#define GL_FIXED_ONLY_ARB                 0x891D 

// functions typedefs
typedef void (APIENTRYP PFN_GLCLAMPCOLORARB_PROC) (GLenum target, GLenum clamp);

// functions typedefs
GL_FUNC_DEF PFN_GLCLAMPCOLORARB_PROC _glClampColorARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glClampColorARB (GLenum target, GLenum clamp) { return _glClampColorARB_(target, clamp); };
#endif //GL_ARB_color_buffer_float

// GL_ARB_compatibility

#ifndef GL_ARB_depth_texture

// Defines
#define GL_DEPTH_COMPONENT16_ARB          0x81A5 
#define GL_DEPTH_COMPONENT24_ARB          0x81A6 
#define GL_DEPTH_COMPONENT32_ARB          0x81A7 
#define GL_TEXTURE_DEPTH_SIZE_ARB         0x884A 
#define GL_DEPTH_TEXTURE_MODE_ARB         0x884B 
#endif //GL_ARB_depth_texture

#ifndef GL_ARB_draw_buffers

// Defines
#define GL_MAX_DRAW_BUFFERS_ARB           0x8824 
#define GL_DRAW_BUFFER0_ARB               0x8825 
#define GL_DRAW_BUFFER1_ARB               0x8826 
#define GL_DRAW_BUFFER2_ARB               0x8827 
#define GL_DRAW_BUFFER3_ARB               0x8828 
#define GL_DRAW_BUFFER4_ARB               0x8829 
#define GL_DRAW_BUFFER5_ARB               0x882A 
#define GL_DRAW_BUFFER6_ARB               0x882B 
#define GL_DRAW_BUFFER7_ARB               0x882C 
#define GL_DRAW_BUFFER8_ARB               0x882D 
#define GL_DRAW_BUFFER9_ARB               0x882E 
#define GL_DRAW_BUFFER10_ARB              0x882F 
#define GL_DRAW_BUFFER11_ARB              0x8830 
#define GL_DRAW_BUFFER12_ARB              0x8831 
#define GL_DRAW_BUFFER13_ARB              0x8832 
#define GL_DRAW_BUFFER14_ARB              0x8833 
#define GL_DRAW_BUFFER15_ARB              0x8834 

// functions typedefs
typedef void (APIENTRYP PFN_GLDRAWBUFFERSARB_PROC) (GLsizei n, const GLenum * bufs);

// functions typedefs
GL_FUNC_DEF PFN_GLDRAWBUFFERSARB_PROC _glDrawBuffersARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDrawBuffersARB (GLsizei n, const GLenum * bufs) { return _glDrawBuffersARB_(n, bufs); };
#endif //GL_ARB_draw_buffers

#ifndef GL_ARB_fragment_program

// Defines
#define GL_FRAGMENT_PROGRAM_ARB           0x8804 
#define GL_PROGRAM_FORMAT_ASCII_ARB       0x8875 
#define GL_PROGRAM_LENGTH_ARB             0x8627 
#define GL_PROGRAM_FORMAT_ARB             0x8876 
#define GL_PROGRAM_BINDING_ARB            0x8677 
#define GL_PROGRAM_INSTRUCTIONS_ARB       0x88A0 
#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB   0x88A1 
#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2 
#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3 
#define GL_PROGRAM_TEMPORARIES_ARB        0x88A4 
#define GL_MAX_PROGRAM_TEMPORARIES_ARB    0x88A5 
#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6 
#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7 
#define GL_PROGRAM_PARAMETERS_ARB         0x88A8 
#define GL_MAX_PROGRAM_PARAMETERS_ARB     0x88A9 
#define GL_PROGRAM_NATIVE_PARAMETERS_ARB  0x88AA 
#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB 
#define GL_PROGRAM_ATTRIBS_ARB            0x88AC 
#define GL_MAX_PROGRAM_ATTRIBS_ARB        0x88AD 
#define GL_PROGRAM_NATIVE_ATTRIBS_ARB     0x88AE 
#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF 
#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4 
#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5 
#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6 
#define GL_PROGRAM_ALU_INSTRUCTIONS_ARB   0x8805 
#define GL_PROGRAM_TEX_INSTRUCTIONS_ARB   0x8806 
#define GL_PROGRAM_TEX_INDIRECTIONS_ARB   0x8807 
#define GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x8808 
#define GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x8809 
#define GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x880A 
#define GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB 0x880B 
#define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB 0x880C 
#define GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB 0x880D 
#define GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x880E 
#define GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x880F 
#define GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x8810 
#define GL_PROGRAM_STRING_ARB             0x8628 
#define GL_PROGRAM_ERROR_POSITION_ARB     0x864B 
#define GL_CURRENT_MATRIX_ARB             0x8641 
#define GL_TRANSPOSE_CURRENT_MATRIX_ARB   0x88B7 
#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640 
#define GL_MAX_PROGRAM_MATRICES_ARB       0x862F 
#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E 
#define GL_MAX_TEXTURE_COORDS_ARB         0x8871 
#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB    0x8872 
#define GL_PROGRAM_ERROR_STRING_ARB       0x8874 
#define GL_MATRIX0_ARB                    0x88C0 
#define GL_MATRIX1_ARB                    0x88C1 
#define GL_MATRIX2_ARB                    0x88C2 
#define GL_MATRIX3_ARB                    0x88C3 
#define GL_MATRIX4_ARB                    0x88C4 
#define GL_MATRIX5_ARB                    0x88C5 
#define GL_MATRIX6_ARB                    0x88C6 
#define GL_MATRIX7_ARB                    0x88C7 
#define GL_MATRIX8_ARB                    0x88C8 
#define GL_MATRIX9_ARB                    0x88C9 
#define GL_MATRIX10_ARB                   0x88CA 
#define GL_MATRIX11_ARB                   0x88CB 
#define GL_MATRIX12_ARB                   0x88CC 
#define GL_MATRIX13_ARB                   0x88CD 
#define GL_MATRIX14_ARB                   0x88CE 
#define GL_MATRIX15_ARB                   0x88CF 
#define GL_MATRIX16_ARB                   0x88D0 
#define GL_MATRIX17_ARB                   0x88D1 
#define GL_MATRIX18_ARB                   0x88D2 
#define GL_MATRIX19_ARB                   0x88D3 
#define GL_MATRIX20_ARB                   0x88D4 
#define GL_MATRIX21_ARB                   0x88D5 
#define GL_MATRIX22_ARB                   0x88D6 
#define GL_MATRIX23_ARB                   0x88D7 
#define GL_MATRIX24_ARB                   0x88D8 
#define GL_MATRIX25_ARB                   0x88D9 
#define GL_MATRIX26_ARB                   0x88DA 
#define GL_MATRIX27_ARB                   0x88DB 
#define GL_MATRIX28_ARB                   0x88DC 
#define GL_MATRIX29_ARB                   0x88DD 
#define GL_MATRIX30_ARB                   0x88DE 
#define GL_MATRIX31_ARB                   0x88DF 

// functions typedefs
typedef void (APIENTRYP PFN_GLPROGRAMSTRINGARB_PROC) (GLenum target, GLenum format, GLsizei len, const void * string);
typedef void (APIENTRYP PFN_GLBINDPROGRAMARB_PROC) (GLenum target, GLuint program);
typedef void (APIENTRYP PFN_GLDELETEPROGRAMSARB_PROC) (GLsizei n, const GLuint * programs);
typedef void (APIENTRYP PFN_GLGENPROGRAMSARB_PROC) (GLsizei n, GLuint * programs);
typedef void (APIENTRYP PFN_GLPROGRAMENVPARAMETER4DARB_PROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFN_GLPROGRAMENVPARAMETER4DVARB_PROC) (GLenum target, GLuint index, const GLdouble * params);
typedef void (APIENTRYP PFN_GLPROGRAMENVPARAMETER4FARB_PROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRYP PFN_GLPROGRAMENVPARAMETER4FVARB_PROC) (GLenum target, GLuint index, const GLfloat * params);
typedef void (APIENTRYP PFN_GLPROGRAMLOCALPARAMETER4DARB_PROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFN_GLPROGRAMLOCALPARAMETER4DVARB_PROC) (GLenum target, GLuint index, const GLdouble * params);
typedef void (APIENTRYP PFN_GLPROGRAMLOCALPARAMETER4FARB_PROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRYP PFN_GLPROGRAMLOCALPARAMETER4FVARB_PROC) (GLenum target, GLuint index, const GLfloat * params);
typedef void (APIENTRYP PFN_GLGETPROGRAMENVPARAMETERDVARB_PROC) (GLenum target, GLuint index, GLdouble * params);
typedef void (APIENTRYP PFN_GLGETPROGRAMENVPARAMETERFVARB_PROC) (GLenum target, GLuint index, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETPROGRAMLOCALPARAMETERDVARB_PROC) (GLenum target, GLuint index, GLdouble * params);
typedef void (APIENTRYP PFN_GLGETPROGRAMLOCALPARAMETERFVARB_PROC) (GLenum target, GLuint index, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETPROGRAMIVARB_PROC) (GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETPROGRAMSTRINGARB_PROC) (GLenum target, GLenum pname, void * string);
typedef GLboolean (APIENTRYP PFN_GLISPROGRAMARB_PROC) (GLuint program);

// functions typedefs
GL_FUNC_DEF PFN_GLPROGRAMSTRINGARB_PROC _glProgramStringARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDPROGRAMARB_PROC _glBindProgramARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEPROGRAMSARB_PROC _glDeleteProgramsARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENPROGRAMSARB_PROC _glGenProgramsARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMENVPARAMETER4DARB_PROC _glProgramEnvParameter4dARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMENVPARAMETER4DVARB_PROC _glProgramEnvParameter4dvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMENVPARAMETER4FARB_PROC _glProgramEnvParameter4fARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMENVPARAMETER4FVARB_PROC _glProgramEnvParameter4fvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMLOCALPARAMETER4DARB_PROC _glProgramLocalParameter4dARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMLOCALPARAMETER4DVARB_PROC _glProgramLocalParameter4dvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMLOCALPARAMETER4FARB_PROC _glProgramLocalParameter4fARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMLOCALPARAMETER4FVARB_PROC _glProgramLocalParameter4fvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMENVPARAMETERDVARB_PROC _glGetProgramEnvParameterdvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMENVPARAMETERFVARB_PROC _glGetProgramEnvParameterfvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMLOCALPARAMETERDVARB_PROC _glGetProgramLocalParameterdvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMLOCALPARAMETERFVARB_PROC _glGetProgramLocalParameterfvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMIVARB_PROC _glGetProgramivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMSTRINGARB_PROC _glGetProgramStringARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISPROGRAMARB_PROC _glIsProgramARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glProgramStringARB (GLenum target, GLenum format, GLsizei len, const void * string) { return _glProgramStringARB_(target, format, len, string); };
inline void glBindProgramARB (GLenum target, GLuint program) { return _glBindProgramARB_(target, program); };
inline void glDeleteProgramsARB (GLsizei n, const GLuint * programs) { return _glDeleteProgramsARB_(n, programs); };
inline void glGenProgramsARB (GLsizei n, GLuint * programs) { return _glGenProgramsARB_(n, programs); };
inline void glProgramEnvParameter4dARB (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { return _glProgramEnvParameter4dARB_(target, index, x, y, z, w); };
inline void glProgramEnvParameter4dvARB (GLenum target, GLuint index, const GLdouble * params) { return _glProgramEnvParameter4dvARB_(target, index, params); };
inline void glProgramEnvParameter4fARB (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { return _glProgramEnvParameter4fARB_(target, index, x, y, z, w); };
inline void glProgramEnvParameter4fvARB (GLenum target, GLuint index, const GLfloat * params) { return _glProgramEnvParameter4fvARB_(target, index, params); };
inline void glProgramLocalParameter4dARB (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { return _glProgramLocalParameter4dARB_(target, index, x, y, z, w); };
inline void glProgramLocalParameter4dvARB (GLenum target, GLuint index, const GLdouble * params) { return _glProgramLocalParameter4dvARB_(target, index, params); };
inline void glProgramLocalParameter4fARB (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { return _glProgramLocalParameter4fARB_(target, index, x, y, z, w); };
inline void glProgramLocalParameter4fvARB (GLenum target, GLuint index, const GLfloat * params) { return _glProgramLocalParameter4fvARB_(target, index, params); };
inline void glGetProgramEnvParameterdvARB (GLenum target, GLuint index, GLdouble * params) { return _glGetProgramEnvParameterdvARB_(target, index, params); };
inline void glGetProgramEnvParameterfvARB (GLenum target, GLuint index, GLfloat * params) { return _glGetProgramEnvParameterfvARB_(target, index, params); };
inline void glGetProgramLocalParameterdvARB (GLenum target, GLuint index, GLdouble * params) { return _glGetProgramLocalParameterdvARB_(target, index, params); };
inline void glGetProgramLocalParameterfvARB (GLenum target, GLuint index, GLfloat * params) { return _glGetProgramLocalParameterfvARB_(target, index, params); };
inline void glGetProgramivARB (GLenum target, GLenum pname, GLint * params) { return _glGetProgramivARB_(target, pname, params); };
inline void glGetProgramStringARB (GLenum target, GLenum pname, void * string) { return _glGetProgramStringARB_(target, pname, string); };
inline GLboolean glIsProgramARB (GLuint program) { return _glIsProgramARB_(program); };
#endif //GL_ARB_fragment_program

// GL_ARB_fragment_program_shadow

#ifndef GL_ARB_fragment_shader

// Defines
#define GL_FRAGMENT_SHADER_ARB            0x8B30 
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0x8B49 
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB 0x8B8B 
#endif //GL_ARB_fragment_shader

#ifndef GL_ARB_half_float_pixel

// Defines
#define GL_HALF_FLOAT_ARB                 0x140B 
#endif //GL_ARB_half_float_pixel

#ifndef GL_ARB_matrix_palette

// Defines
#define GL_MATRIX_PALETTE_ARB             0x8840 
#define GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB 0x8841 
#define GL_MAX_PALETTE_MATRICES_ARB       0x8842 
#define GL_CURRENT_PALETTE_MATRIX_ARB     0x8843 
#define GL_MATRIX_INDEX_ARRAY_ARB         0x8844 
#define GL_CURRENT_MATRIX_INDEX_ARB       0x8845 
#define GL_MATRIX_INDEX_ARRAY_SIZE_ARB    0x8846 
#define GL_MATRIX_INDEX_ARRAY_TYPE_ARB    0x8847 
#define GL_MATRIX_INDEX_ARRAY_STRIDE_ARB  0x8848 
#define GL_MATRIX_INDEX_ARRAY_POINTER_ARB 0x8849 

// functions typedefs
typedef void (APIENTRYP PFN_GLCURRENTPALETTEMATRIXARB_PROC) (GLint index);
typedef void (APIENTRYP PFN_GLMATRIXINDEXUBVARB_PROC) (GLint size, const GLubyte * indices);
typedef void (APIENTRYP PFN_GLMATRIXINDEXUSVARB_PROC) (GLint size, const GLushort * indices);
typedef void (APIENTRYP PFN_GLMATRIXINDEXUIVARB_PROC) (GLint size, const GLuint * indices);
typedef void (APIENTRYP PFN_GLMATRIXINDEXPOINTERARB_PROC) (GLint size, GLenum type, GLsizei stride, const void * pointer);

// functions typedefs
GL_FUNC_DEF PFN_GLCURRENTPALETTEMATRIXARB_PROC _glCurrentPaletteMatrixARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXINDEXUBVARB_PROC _glMatrixIndexubvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXINDEXUSVARB_PROC _glMatrixIndexusvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXINDEXUIVARB_PROC _glMatrixIndexuivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATRIXINDEXPOINTERARB_PROC _glMatrixIndexPointerARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glCurrentPaletteMatrixARB (GLint index) { return _glCurrentPaletteMatrixARB_(index); };
inline void glMatrixIndexubvARB (GLint size, const GLubyte * indices) { return _glMatrixIndexubvARB_(size, indices); };
inline void glMatrixIndexusvARB (GLint size, const GLushort * indices) { return _glMatrixIndexusvARB_(size, indices); };
inline void glMatrixIndexuivARB (GLint size, const GLuint * indices) { return _glMatrixIndexuivARB_(size, indices); };
inline void glMatrixIndexPointerARB (GLint size, GLenum type, GLsizei stride, const void * pointer) { return _glMatrixIndexPointerARB_(size, type, stride, pointer); };
#endif //GL_ARB_matrix_palette

#ifndef GL_ARB_multisample

// Defines
#define GL_MULTISAMPLE_ARB                0x809D 
#define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB   0x809E 
#define GL_SAMPLE_ALPHA_TO_ONE_ARB        0x809F 
#define GL_SAMPLE_COVERAGE_ARB            0x80A0 
#define GL_SAMPLE_BUFFERS_ARB             0x80A8 
#define GL_SAMPLES_ARB                    0x80A9 
#define GL_SAMPLE_COVERAGE_VALUE_ARB      0x80AA 
#define GL_SAMPLE_COVERAGE_INVERT_ARB     0x80AB 
#define GL_MULTISAMPLE_BIT_ARB            0x20000000 

// functions typedefs
typedef void (APIENTRYP PFN_GLSAMPLECOVERAGEARB_PROC) (GLfloat value, GLboolean invert);

// functions typedefs
GL_FUNC_DEF PFN_GLSAMPLECOVERAGEARB_PROC _glSampleCoverageARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glSampleCoverageARB (GLfloat value, GLboolean invert) { return _glSampleCoverageARB_(value, invert); };
#endif //GL_ARB_multisample

#ifndef GL_ARB_multitexture

// Defines
#define GL_TEXTURE0_ARB                   0x84C0 
#define GL_TEXTURE1_ARB                   0x84C1 
#define GL_TEXTURE2_ARB                   0x84C2 
#define GL_TEXTURE3_ARB                   0x84C3 
#define GL_TEXTURE4_ARB                   0x84C4 
#define GL_TEXTURE5_ARB                   0x84C5 
#define GL_TEXTURE6_ARB                   0x84C6 
#define GL_TEXTURE7_ARB                   0x84C7 
#define GL_TEXTURE8_ARB                   0x84C8 
#define GL_TEXTURE9_ARB                   0x84C9 
#define GL_TEXTURE10_ARB                  0x84CA 
#define GL_TEXTURE11_ARB                  0x84CB 
#define GL_TEXTURE12_ARB                  0x84CC 
#define GL_TEXTURE13_ARB                  0x84CD 
#define GL_TEXTURE14_ARB                  0x84CE 
#define GL_TEXTURE15_ARB                  0x84CF 
#define GL_TEXTURE16_ARB                  0x84D0 
#define GL_TEXTURE17_ARB                  0x84D1 
#define GL_TEXTURE18_ARB                  0x84D2 
#define GL_TEXTURE19_ARB                  0x84D3 
#define GL_TEXTURE20_ARB                  0x84D4 
#define GL_TEXTURE21_ARB                  0x84D5 
#define GL_TEXTURE22_ARB                  0x84D6 
#define GL_TEXTURE23_ARB                  0x84D7 
#define GL_TEXTURE24_ARB                  0x84D8 
#define GL_TEXTURE25_ARB                  0x84D9 
#define GL_TEXTURE26_ARB                  0x84DA 
#define GL_TEXTURE27_ARB                  0x84DB 
#define GL_TEXTURE28_ARB                  0x84DC 
#define GL_TEXTURE29_ARB                  0x84DD 
#define GL_TEXTURE30_ARB                  0x84DE 
#define GL_TEXTURE31_ARB                  0x84DF 
#define GL_ACTIVE_TEXTURE_ARB             0x84E0 
#define GL_CLIENT_ACTIVE_TEXTURE_ARB      0x84E1 
#define GL_MAX_TEXTURE_UNITS_ARB          0x84E2 

// functions typedefs
typedef void (APIENTRYP PFN_GLACTIVETEXTUREARB_PROC) (GLenum texture);
typedef void (APIENTRYP PFN_GLCLIENTACTIVETEXTUREARB_PROC) (GLenum texture);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1DARB_PROC) (GLenum target, GLdouble s);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1DVARB_PROC) (GLenum target, const GLdouble * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1FARB_PROC) (GLenum target, GLfloat s);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1FVARB_PROC) (GLenum target, const GLfloat * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1IARB_PROC) (GLenum target, GLint s);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1IVARB_PROC) (GLenum target, const GLint * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1SARB_PROC) (GLenum target, GLshort s);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1SVARB_PROC) (GLenum target, const GLshort * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2DARB_PROC) (GLenum target, GLdouble s, GLdouble t);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2DVARB_PROC) (GLenum target, const GLdouble * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2FARB_PROC) (GLenum target, GLfloat s, GLfloat t);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2FVARB_PROC) (GLenum target, const GLfloat * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2IARB_PROC) (GLenum target, GLint s, GLint t);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2IVARB_PROC) (GLenum target, const GLint * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2SARB_PROC) (GLenum target, GLshort s, GLshort t);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2SVARB_PROC) (GLenum target, const GLshort * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3DARB_PROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3DVARB_PROC) (GLenum target, const GLdouble * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3FARB_PROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3FVARB_PROC) (GLenum target, const GLfloat * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3IARB_PROC) (GLenum target, GLint s, GLint t, GLint r);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3IVARB_PROC) (GLenum target, const GLint * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3SARB_PROC) (GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3SVARB_PROC) (GLenum target, const GLshort * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4DARB_PROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4DVARB_PROC) (GLenum target, const GLdouble * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4FARB_PROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4FVARB_PROC) (GLenum target, const GLfloat * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4IARB_PROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4IVARB_PROC) (GLenum target, const GLint * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4SARB_PROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4SVARB_PROC) (GLenum target, const GLshort * v);

// functions typedefs
GL_FUNC_DEF PFN_GLACTIVETEXTUREARB_PROC _glActiveTextureARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLIENTACTIVETEXTUREARB_PROC _glClientActiveTextureARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD1DARB_PROC _glMultiTexCoord1dARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD1DVARB_PROC _glMultiTexCoord1dvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD1FARB_PROC _glMultiTexCoord1fARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD1FVARB_PROC _glMultiTexCoord1fvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD1IARB_PROC _glMultiTexCoord1iARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD1IVARB_PROC _glMultiTexCoord1ivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD1SARB_PROC _glMultiTexCoord1sARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD1SVARB_PROC _glMultiTexCoord1svARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2DARB_PROC _glMultiTexCoord2dARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2DVARB_PROC _glMultiTexCoord2dvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2FARB_PROC _glMultiTexCoord2fARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2FVARB_PROC _glMultiTexCoord2fvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2IARB_PROC _glMultiTexCoord2iARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2IVARB_PROC _glMultiTexCoord2ivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2SARB_PROC _glMultiTexCoord2sARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2SVARB_PROC _glMultiTexCoord2svARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3DARB_PROC _glMultiTexCoord3dARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3DVARB_PROC _glMultiTexCoord3dvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3FARB_PROC _glMultiTexCoord3fARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3FVARB_PROC _glMultiTexCoord3fvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3IARB_PROC _glMultiTexCoord3iARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3IVARB_PROC _glMultiTexCoord3ivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3SARB_PROC _glMultiTexCoord3sARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3SVARB_PROC _glMultiTexCoord3svARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4DARB_PROC _glMultiTexCoord4dARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4DVARB_PROC _glMultiTexCoord4dvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4FARB_PROC _glMultiTexCoord4fARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4FVARB_PROC _glMultiTexCoord4fvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4IARB_PROC _glMultiTexCoord4iARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4IVARB_PROC _glMultiTexCoord4ivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4SARB_PROC _glMultiTexCoord4sARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4SVARB_PROC _glMultiTexCoord4svARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glActiveTextureARB (GLenum texture) { return _glActiveTextureARB_(texture); };
inline void glClientActiveTextureARB (GLenum texture) { return _glClientActiveTextureARB_(texture); };
inline void glMultiTexCoord1dARB (GLenum target, GLdouble s) { return _glMultiTexCoord1dARB_(target, s); };
inline void glMultiTexCoord1dvARB (GLenum target, const GLdouble * v) { return _glMultiTexCoord1dvARB_(target, v); };
inline void glMultiTexCoord1fARB (GLenum target, GLfloat s) { return _glMultiTexCoord1fARB_(target, s); };
inline void glMultiTexCoord1fvARB (GLenum target, const GLfloat * v) { return _glMultiTexCoord1fvARB_(target, v); };
inline void glMultiTexCoord1iARB (GLenum target, GLint s) { return _glMultiTexCoord1iARB_(target, s); };
inline void glMultiTexCoord1ivARB (GLenum target, const GLint * v) { return _glMultiTexCoord1ivARB_(target, v); };
inline void glMultiTexCoord1sARB (GLenum target, GLshort s) { return _glMultiTexCoord1sARB_(target, s); };
inline void glMultiTexCoord1svARB (GLenum target, const GLshort * v) { return _glMultiTexCoord1svARB_(target, v); };
inline void glMultiTexCoord2dARB (GLenum target, GLdouble s, GLdouble t) { return _glMultiTexCoord2dARB_(target, s, t); };
inline void glMultiTexCoord2dvARB (GLenum target, const GLdouble * v) { return _glMultiTexCoord2dvARB_(target, v); };
inline void glMultiTexCoord2fARB (GLenum target, GLfloat s, GLfloat t) { return _glMultiTexCoord2fARB_(target, s, t); };
inline void glMultiTexCoord2fvARB (GLenum target, const GLfloat * v) { return _glMultiTexCoord2fvARB_(target, v); };
inline void glMultiTexCoord2iARB (GLenum target, GLint s, GLint t) { return _glMultiTexCoord2iARB_(target, s, t); };
inline void glMultiTexCoord2ivARB (GLenum target, const GLint * v) { return _glMultiTexCoord2ivARB_(target, v); };
inline void glMultiTexCoord2sARB (GLenum target, GLshort s, GLshort t) { return _glMultiTexCoord2sARB_(target, s, t); };
inline void glMultiTexCoord2svARB (GLenum target, const GLshort * v) { return _glMultiTexCoord2svARB_(target, v); };
inline void glMultiTexCoord3dARB (GLenum target, GLdouble s, GLdouble t, GLdouble r) { return _glMultiTexCoord3dARB_(target, s, t, r); };
inline void glMultiTexCoord3dvARB (GLenum target, const GLdouble * v) { return _glMultiTexCoord3dvARB_(target, v); };
inline void glMultiTexCoord3fARB (GLenum target, GLfloat s, GLfloat t, GLfloat r) { return _glMultiTexCoord3fARB_(target, s, t, r); };
inline void glMultiTexCoord3fvARB (GLenum target, const GLfloat * v) { return _glMultiTexCoord3fvARB_(target, v); };
inline void glMultiTexCoord3iARB (GLenum target, GLint s, GLint t, GLint r) { return _glMultiTexCoord3iARB_(target, s, t, r); };
inline void glMultiTexCoord3ivARB (GLenum target, const GLint * v) { return _glMultiTexCoord3ivARB_(target, v); };
inline void glMultiTexCoord3sARB (GLenum target, GLshort s, GLshort t, GLshort r) { return _glMultiTexCoord3sARB_(target, s, t, r); };
inline void glMultiTexCoord3svARB (GLenum target, const GLshort * v) { return _glMultiTexCoord3svARB_(target, v); };
inline void glMultiTexCoord4dARB (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) { return _glMultiTexCoord4dARB_(target, s, t, r, q); };
inline void glMultiTexCoord4dvARB (GLenum target, const GLdouble * v) { return _glMultiTexCoord4dvARB_(target, v); };
inline void glMultiTexCoord4fARB (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) { return _glMultiTexCoord4fARB_(target, s, t, r, q); };
inline void glMultiTexCoord4fvARB (GLenum target, const GLfloat * v) { return _glMultiTexCoord4fvARB_(target, v); };
inline void glMultiTexCoord4iARB (GLenum target, GLint s, GLint t, GLint r, GLint q) { return _glMultiTexCoord4iARB_(target, s, t, r, q); };
inline void glMultiTexCoord4ivARB (GLenum target, const GLint * v) { return _glMultiTexCoord4ivARB_(target, v); };
inline void glMultiTexCoord4sARB (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) { return _glMultiTexCoord4sARB_(target, s, t, r, q); };
inline void glMultiTexCoord4svARB (GLenum target, const GLshort * v) { return _glMultiTexCoord4svARB_(target, v); };
#endif //GL_ARB_multitexture

#ifndef GL_ARB_occlusion_query

// Defines
#define GL_QUERY_COUNTER_BITS_ARB         0x8864 
#define GL_CURRENT_QUERY_ARB              0x8865 
#define GL_QUERY_RESULT_ARB               0x8866 
#define GL_QUERY_RESULT_AVAILABLE_ARB     0x8867 
#define GL_SAMPLES_PASSED_ARB             0x8914 

// functions typedefs
typedef void (APIENTRYP PFN_GLGENQUERIESARB_PROC) (GLsizei n, GLuint * ids);
typedef void (APIENTRYP PFN_GLDELETEQUERIESARB_PROC) (GLsizei n, const GLuint * ids);
typedef GLboolean (APIENTRYP PFN_GLISQUERYARB_PROC) (GLuint id);
typedef void (APIENTRYP PFN_GLBEGINQUERYARB_PROC) (GLenum target, GLuint id);
typedef void (APIENTRYP PFN_GLENDQUERYARB_PROC) (GLenum target);
typedef void (APIENTRYP PFN_GLGETQUERYIVARB_PROC) (GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETQUERYOBJECTIVARB_PROC) (GLuint id, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETQUERYOBJECTUIVARB_PROC) (GLuint id, GLenum pname, GLuint * params);

// functions typedefs
GL_FUNC_DEF PFN_GLGENQUERIESARB_PROC _glGenQueriesARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEQUERIESARB_PROC _glDeleteQueriesARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISQUERYARB_PROC _glIsQueryARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBEGINQUERYARB_PROC _glBeginQueryARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENDQUERYARB_PROC _glEndQueryARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETQUERYIVARB_PROC _glGetQueryivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETQUERYOBJECTIVARB_PROC _glGetQueryObjectivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETQUERYOBJECTUIVARB_PROC _glGetQueryObjectuivARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glGenQueriesARB (GLsizei n, GLuint * ids) { return _glGenQueriesARB_(n, ids); };
inline void glDeleteQueriesARB (GLsizei n, const GLuint * ids) { return _glDeleteQueriesARB_(n, ids); };
inline GLboolean glIsQueryARB (GLuint id) { return _glIsQueryARB_(id); };
inline void glBeginQueryARB (GLenum target, GLuint id) { return _glBeginQueryARB_(target, id); };
inline void glEndQueryARB (GLenum target) { return _glEndQueryARB_(target); };
inline void glGetQueryivARB (GLenum target, GLenum pname, GLint * params) { return _glGetQueryivARB_(target, pname, params); };
inline void glGetQueryObjectivARB (GLuint id, GLenum pname, GLint * params) { return _glGetQueryObjectivARB_(id, pname, params); };
inline void glGetQueryObjectuivARB (GLuint id, GLenum pname, GLuint * params) { return _glGetQueryObjectuivARB_(id, pname, params); };
#endif //GL_ARB_occlusion_query

#ifndef GL_ARB_point_parameters

// Defines
#define GL_POINT_SIZE_MIN_ARB             0x8126 
#define GL_POINT_SIZE_MAX_ARB             0x8127 
#define GL_POINT_FADE_THRESHOLD_SIZE_ARB  0x8128 
#define GL_POINT_DISTANCE_ATTENUATION_ARB 0x8129 

// functions typedefs
typedef void (APIENTRYP PFN_GLPOINTPARAMETERFARB_PROC) (GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLPOINTPARAMETERFVARB_PROC) (GLenum pname, const GLfloat * params);

// functions typedefs
GL_FUNC_DEF PFN_GLPOINTPARAMETERFARB_PROC _glPointParameterfARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOINTPARAMETERFVARB_PROC _glPointParameterfvARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glPointParameterfARB (GLenum pname, GLfloat param) { return _glPointParameterfARB_(pname, param); };
inline void glPointParameterfvARB (GLenum pname, const GLfloat * params) { return _glPointParameterfvARB_(pname, params); };
#endif //GL_ARB_point_parameters

#ifndef GL_ARB_point_sprite

// Defines
#define GL_POINT_SPRITE_ARB               0x8861 
#define GL_COORD_REPLACE_ARB              0x8862 
#endif //GL_ARB_point_sprite

#ifndef GL_ARB_shader_objects

// Defines
#define GL_PROGRAM_OBJECT_ARB             0x8B40 
#define GL_SHADER_OBJECT_ARB              0x8B48 
#define GL_OBJECT_TYPE_ARB                0x8B4E 
#define GL_OBJECT_SUBTYPE_ARB             0x8B4F 
#define GL_FLOAT_VEC2_ARB                 0x8B50 
#define GL_FLOAT_VEC3_ARB                 0x8B51 
#define GL_FLOAT_VEC4_ARB                 0x8B52 
#define GL_INT_VEC2_ARB                   0x8B53 
#define GL_INT_VEC3_ARB                   0x8B54 
#define GL_INT_VEC4_ARB                   0x8B55 
#define GL_BOOL_ARB                       0x8B56 
#define GL_BOOL_VEC2_ARB                  0x8B57 
#define GL_BOOL_VEC3_ARB                  0x8B58 
#define GL_BOOL_VEC4_ARB                  0x8B59 
#define GL_FLOAT_MAT2_ARB                 0x8B5A 
#define GL_FLOAT_MAT3_ARB                 0x8B5B 
#define GL_FLOAT_MAT4_ARB                 0x8B5C 
#define GL_SAMPLER_1D_ARB                 0x8B5D 
#define GL_SAMPLER_2D_ARB                 0x8B5E 
#define GL_SAMPLER_3D_ARB                 0x8B5F 
#define GL_SAMPLER_CUBE_ARB               0x8B60 
#define GL_SAMPLER_1D_SHADOW_ARB          0x8B61 
#define GL_SAMPLER_2D_SHADOW_ARB          0x8B62 
#define GL_SAMPLER_2D_RECT_ARB            0x8B63 
#define GL_SAMPLER_2D_RECT_SHADOW_ARB     0x8B64 
#define GL_OBJECT_DELETE_STATUS_ARB       0x8B80 
#define GL_OBJECT_COMPILE_STATUS_ARB      0x8B81 
#define GL_OBJECT_LINK_STATUS_ARB         0x8B82 
#define GL_OBJECT_VALIDATE_STATUS_ARB     0x8B83 
#define GL_OBJECT_INFO_LOG_LENGTH_ARB     0x8B84 
#define GL_OBJECT_ATTACHED_OBJECTS_ARB    0x8B85 
#define GL_OBJECT_ACTIVE_UNIFORMS_ARB     0x8B86 
#define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87 
#define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88 

// functions typedefs
typedef void (APIENTRYP PFN_GLDELETEOBJECTARB_PROC) (GLhandleARB obj);
typedef GLhandleARB (APIENTRYP PFN_GLGETHANDLEARB_PROC) (GLenum pname);
typedef void (APIENTRYP PFN_GLDETACHOBJECTARB_PROC) (GLhandleARB containerObj, GLhandleARB attachedObj);
typedef GLhandleARB (APIENTRYP PFN_GLCREATESHADEROBJECTARB_PROC) (GLenum shaderType);
typedef void (APIENTRYP PFN_GLSHADERSOURCEARB_PROC) (GLhandleARB shaderObj, GLsizei count, const GLcharARB * * string, const GLint * length);
typedef void (APIENTRYP PFN_GLCOMPILESHADERARB_PROC) (GLhandleARB shaderObj);
typedef GLhandleARB (APIENTRYP PFN_GLCREATEPROGRAMOBJECTARB_PROC) (void);
typedef void (APIENTRYP PFN_GLATTACHOBJECTARB_PROC) (GLhandleARB containerObj, GLhandleARB obj);
typedef void (APIENTRYP PFN_GLLINKPROGRAMARB_PROC) (GLhandleARB programObj);
typedef void (APIENTRYP PFN_GLUSEPROGRAMOBJECTARB_PROC) (GLhandleARB programObj);
typedef void (APIENTRYP PFN_GLVALIDATEPROGRAMARB_PROC) (GLhandleARB programObj);
typedef void (APIENTRYP PFN_GLUNIFORM1FARB_PROC) (GLint location, GLfloat v0);
typedef void (APIENTRYP PFN_GLUNIFORM2FARB_PROC) (GLint location, GLfloat v0, GLfloat v1);
typedef void (APIENTRYP PFN_GLUNIFORM3FARB_PROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (APIENTRYP PFN_GLUNIFORM4FARB_PROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (APIENTRYP PFN_GLUNIFORM1IARB_PROC) (GLint location, GLint v0);
typedef void (APIENTRYP PFN_GLUNIFORM2IARB_PROC) (GLint location, GLint v0, GLint v1);
typedef void (APIENTRYP PFN_GLUNIFORM3IARB_PROC) (GLint location, GLint v0, GLint v1, GLint v2);
typedef void (APIENTRYP PFN_GLUNIFORM4IARB_PROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (APIENTRYP PFN_GLUNIFORM1FVARB_PROC) (GLint location, GLsizei count, const GLfloat * value);
typedef void (APIENTRYP PFN_GLUNIFORM2FVARB_PROC) (GLint location, GLsizei count, const GLfloat * value);
typedef void (APIENTRYP PFN_GLUNIFORM3FVARB_PROC) (GLint location, GLsizei count, const GLfloat * value);
typedef void (APIENTRYP PFN_GLUNIFORM4FVARB_PROC) (GLint location, GLsizei count, const GLfloat * value);
typedef void (APIENTRYP PFN_GLUNIFORM1IVARB_PROC) (GLint location, GLsizei count, const GLint * value);
typedef void (APIENTRYP PFN_GLUNIFORM2IVARB_PROC) (GLint location, GLsizei count, const GLint * value);
typedef void (APIENTRYP PFN_GLUNIFORM3IVARB_PROC) (GLint location, GLsizei count, const GLint * value);
typedef void (APIENTRYP PFN_GLUNIFORM4IVARB_PROC) (GLint location, GLsizei count, const GLint * value);
typedef void (APIENTRYP PFN_GLUNIFORMMATRIX2FVARB_PROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLUNIFORMMATRIX3FVARB_PROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLUNIFORMMATRIX4FVARB_PROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (APIENTRYP PFN_GLGETOBJECTPARAMETERFVARB_PROC) (GLhandleARB obj, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETOBJECTPARAMETERIVARB_PROC) (GLhandleARB obj, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETINFOLOGARB_PROC) (GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog);
typedef void (APIENTRYP PFN_GLGETATTACHEDOBJECTSARB_PROC) (GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj);
typedef GLint (APIENTRYP PFN_GLGETUNIFORMLOCATIONARB_PROC) (GLhandleARB programObj, const GLcharARB * name);
typedef void (APIENTRYP PFN_GLGETACTIVEUNIFORMARB_PROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
typedef void (APIENTRYP PFN_GLGETUNIFORMFVARB_PROC) (GLhandleARB programObj, GLint location, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETUNIFORMIVARB_PROC) (GLhandleARB programObj, GLint location, GLint * params);
typedef void (APIENTRYP PFN_GLGETSHADERSOURCEARB_PROC) (GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * source);

// functions typedefs
GL_FUNC_DEF PFN_GLDELETEOBJECTARB_PROC _glDeleteObjectARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETHANDLEARB_PROC _glGetHandleARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDETACHOBJECTARB_PROC _glDetachObjectARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCREATESHADEROBJECTARB_PROC _glCreateShaderObjectARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSHADERSOURCEARB_PROC _glShaderSourceARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPILESHADERARB_PROC _glCompileShaderARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCREATEPROGRAMOBJECTARB_PROC _glCreateProgramObjectARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLATTACHOBJECTARB_PROC _glAttachObjectARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLINKPROGRAMARB_PROC _glLinkProgramARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUSEPROGRAMOBJECTARB_PROC _glUseProgramObjectARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVALIDATEPROGRAMARB_PROC _glValidateProgramARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM1FARB_PROC _glUniform1fARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2FARB_PROC _glUniform2fARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3FARB_PROC _glUniform3fARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4FARB_PROC _glUniform4fARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM1IARB_PROC _glUniform1iARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2IARB_PROC _glUniform2iARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3IARB_PROC _glUniform3iARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4IARB_PROC _glUniform4iARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM1FVARB_PROC _glUniform1fvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2FVARB_PROC _glUniform2fvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3FVARB_PROC _glUniform3fvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4FVARB_PROC _glUniform4fvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM1IVARB_PROC _glUniform1ivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2IVARB_PROC _glUniform2ivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3IVARB_PROC _glUniform3ivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4IVARB_PROC _glUniform4ivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMMATRIX2FVARB_PROC _glUniformMatrix2fvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMMATRIX3FVARB_PROC _glUniformMatrix3fvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORMMATRIX4FVARB_PROC _glUniformMatrix4fvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETOBJECTPARAMETERFVARB_PROC _glGetObjectParameterfvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETOBJECTPARAMETERIVARB_PROC _glGetObjectParameterivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETINFOLOGARB_PROC _glGetInfoLogARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETATTACHEDOBJECTSARB_PROC _glGetAttachedObjectsARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETUNIFORMLOCATIONARB_PROC _glGetUniformLocationARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETACTIVEUNIFORMARB_PROC _glGetActiveUniformARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETUNIFORMFVARB_PROC _glGetUniformfvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETUNIFORMIVARB_PROC _glGetUniformivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETSHADERSOURCEARB_PROC _glGetShaderSourceARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDeleteObjectARB (GLhandleARB obj) { return _glDeleteObjectARB_(obj); };
inline GLhandleARB glGetHandleARB (GLenum pname) { return _glGetHandleARB_(pname); };
inline void glDetachObjectARB (GLhandleARB containerObj, GLhandleARB attachedObj) { return _glDetachObjectARB_(containerObj, attachedObj); };
inline GLhandleARB glCreateShaderObjectARB (GLenum shaderType) { return _glCreateShaderObjectARB_(shaderType); };
inline void glShaderSourceARB (GLhandleARB shaderObj, GLsizei count, const GLcharARB * * string, const GLint * length) { return _glShaderSourceARB_(shaderObj, count, string, length); };
inline void glCompileShaderARB (GLhandleARB shaderObj) { return _glCompileShaderARB_(shaderObj); };
inline GLhandleARB glCreateProgramObjectARB (void) { return _glCreateProgramObjectARB_(); };
inline void glAttachObjectARB (GLhandleARB containerObj, GLhandleARB obj) { return _glAttachObjectARB_(containerObj, obj); };
inline void glLinkProgramARB (GLhandleARB programObj) { return _glLinkProgramARB_(programObj); };
inline void glUseProgramObjectARB (GLhandleARB programObj) { return _glUseProgramObjectARB_(programObj); };
inline void glValidateProgramARB (GLhandleARB programObj) { return _glValidateProgramARB_(programObj); };
inline void glUniform1fARB (GLint location, GLfloat v0) { return _glUniform1fARB_(location, v0); };
inline void glUniform2fARB (GLint location, GLfloat v0, GLfloat v1) { return _glUniform2fARB_(location, v0, v1); };
inline void glUniform3fARB (GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { return _glUniform3fARB_(location, v0, v1, v2); };
inline void glUniform4fARB (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { return _glUniform4fARB_(location, v0, v1, v2, v3); };
inline void glUniform1iARB (GLint location, GLint v0) { return _glUniform1iARB_(location, v0); };
inline void glUniform2iARB (GLint location, GLint v0, GLint v1) { return _glUniform2iARB_(location, v0, v1); };
inline void glUniform3iARB (GLint location, GLint v0, GLint v1, GLint v2) { return _glUniform3iARB_(location, v0, v1, v2); };
inline void glUniform4iARB (GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { return _glUniform4iARB_(location, v0, v1, v2, v3); };
inline void glUniform1fvARB (GLint location, GLsizei count, const GLfloat * value) { return _glUniform1fvARB_(location, count, value); };
inline void glUniform2fvARB (GLint location, GLsizei count, const GLfloat * value) { return _glUniform2fvARB_(location, count, value); };
inline void glUniform3fvARB (GLint location, GLsizei count, const GLfloat * value) { return _glUniform3fvARB_(location, count, value); };
inline void glUniform4fvARB (GLint location, GLsizei count, const GLfloat * value) { return _glUniform4fvARB_(location, count, value); };
inline void glUniform1ivARB (GLint location, GLsizei count, const GLint * value) { return _glUniform1ivARB_(location, count, value); };
inline void glUniform2ivARB (GLint location, GLsizei count, const GLint * value) { return _glUniform2ivARB_(location, count, value); };
inline void glUniform3ivARB (GLint location, GLsizei count, const GLint * value) { return _glUniform3ivARB_(location, count, value); };
inline void glUniform4ivARB (GLint location, GLsizei count, const GLint * value) { return _glUniform4ivARB_(location, count, value); };
inline void glUniformMatrix2fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glUniformMatrix2fvARB_(location, count, transpose, value); };
inline void glUniformMatrix3fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glUniformMatrix3fvARB_(location, count, transpose, value); };
inline void glUniformMatrix4fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { return _glUniformMatrix4fvARB_(location, count, transpose, value); };
inline void glGetObjectParameterfvARB (GLhandleARB obj, GLenum pname, GLfloat * params) { return _glGetObjectParameterfvARB_(obj, pname, params); };
inline void glGetObjectParameterivARB (GLhandleARB obj, GLenum pname, GLint * params) { return _glGetObjectParameterivARB_(obj, pname, params); };
inline void glGetInfoLogARB (GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog) { return _glGetInfoLogARB_(obj, maxLength, length, infoLog); };
inline void glGetAttachedObjectsARB (GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj) { return _glGetAttachedObjectsARB_(containerObj, maxCount, count, obj); };
inline GLint glGetUniformLocationARB (GLhandleARB programObj, const GLcharARB * name) { return _glGetUniformLocationARB_(programObj, name); };
inline void glGetActiveUniformARB (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) { return _glGetActiveUniformARB_(programObj, index, maxLength, length, size, type, name); };
inline void glGetUniformfvARB (GLhandleARB programObj, GLint location, GLfloat * params) { return _glGetUniformfvARB_(programObj, location, params); };
inline void glGetUniformivARB (GLhandleARB programObj, GLint location, GLint * params) { return _glGetUniformivARB_(programObj, location, params); };
inline void glGetShaderSourceARB (GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * source) { return _glGetShaderSourceARB_(obj, maxLength, length, source); };
#endif //GL_ARB_shader_objects

// GL_ARB_shader_texture_lod

#ifndef GL_ARB_shading_language_100

// Defines
#define GL_SHADING_LANGUAGE_VERSION_ARB   0x8B8C 
#endif //GL_ARB_shading_language_100

#ifndef GL_ARB_shadow

// Defines
#define GL_TEXTURE_COMPARE_MODE_ARB       0x884C 
#define GL_TEXTURE_COMPARE_FUNC_ARB       0x884D 
#define GL_COMPARE_R_TO_TEXTURE_ARB       0x884E 
#endif //GL_ARB_shadow

#ifndef GL_ARB_shadow_ambient

// Defines
#define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB 0x80BF 
#endif //GL_ARB_shadow_ambient

#ifndef GL_ARB_texture_compression

// Defines
#define GL_COMPRESSED_ALPHA_ARB           0x84E9 
#define GL_COMPRESSED_LUMINANCE_ARB       0x84EA 
#define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0x84EB 
#define GL_COMPRESSED_INTENSITY_ARB       0x84EC 
#define GL_COMPRESSED_RGB_ARB             0x84ED 
#define GL_COMPRESSED_RGBA_ARB            0x84EE 
#define GL_TEXTURE_COMPRESSION_HINT_ARB   0x84EF 
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0x86A0 
#define GL_TEXTURE_COMPRESSED_ARB         0x86A1 
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A2 
#define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A3 

// functions typedefs
typedef void (APIENTRYP PFN_GLCOMPRESSEDTEXIMAGE3DARB_PROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
typedef void (APIENTRYP PFN_GLCOMPRESSEDTEXIMAGE2DARB_PROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
typedef void (APIENTRYP PFN_GLCOMPRESSEDTEXIMAGE1DARB_PROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
typedef void (APIENTRYP PFN_GLCOMPRESSEDTEXSUBIMAGE3DARB_PROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void (APIENTRYP PFN_GLCOMPRESSEDTEXSUBIMAGE2DARB_PROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void (APIENTRYP PFN_GLCOMPRESSEDTEXSUBIMAGE1DARB_PROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
typedef void (APIENTRYP PFN_GLGETCOMPRESSEDTEXIMAGEARB_PROC) (GLenum target, GLint level, void * img);

// functions typedefs
GL_FUNC_DEF PFN_GLCOMPRESSEDTEXIMAGE3DARB_PROC _glCompressedTexImage3DARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDTEXIMAGE2DARB_PROC _glCompressedTexImage2DARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDTEXIMAGE1DARB_PROC _glCompressedTexImage1DARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDTEXSUBIMAGE3DARB_PROC _glCompressedTexSubImage3DARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDTEXSUBIMAGE2DARB_PROC _glCompressedTexSubImage2DARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMPRESSEDTEXSUBIMAGE1DARB_PROC _glCompressedTexSubImage1DARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOMPRESSEDTEXIMAGEARB_PROC _glGetCompressedTexImageARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glCompressedTexImage3DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) { return _glCompressedTexImage3DARB_(target, level, internalformat, width, height, depth, border, imageSize, data); };
inline void glCompressedTexImage2DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) { return _glCompressedTexImage2DARB_(target, level, internalformat, width, height, border, imageSize, data); };
inline void glCompressedTexImage1DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) { return _glCompressedTexImage1DARB_(target, level, internalformat, width, border, imageSize, data); };
inline void glCompressedTexSubImage3DARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { return _glCompressedTexSubImage3DARB_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); };
inline void glCompressedTexSubImage2DARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) { return _glCompressedTexSubImage2DARB_(target, level, xoffset, yoffset, width, height, format, imageSize, data); };
inline void glCompressedTexSubImage1DARB (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) { return _glCompressedTexSubImage1DARB_(target, level, xoffset, width, format, imageSize, data); };
inline void glGetCompressedTexImageARB (GLenum target, GLint level, void * img) { return _glGetCompressedTexImageARB_(target, level, img); };
#endif //GL_ARB_texture_compression

#ifndef GL_ARB_texture_cube_map

// Defines
#define GL_NORMAL_MAP_ARB                 0x8511 
#define GL_REFLECTION_MAP_ARB             0x8512 
#define GL_TEXTURE_CUBE_MAP_ARB           0x8513 
#define GL_TEXTURE_BINDING_CUBE_MAP_ARB   0x8514 
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0x8515 
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0x8516 
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0x8517 
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0x8518 
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0x8519 
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0x851A 
#define GL_PROXY_TEXTURE_CUBE_MAP_ARB     0x851B 
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB  0x851C 
#endif //GL_ARB_texture_cube_map

// GL_ARB_texture_env_add

#ifndef GL_ARB_texture_env_combine

// Defines
#define GL_COMBINE_ARB                    0x8570 
#define GL_COMBINE_RGB_ARB                0x8571 
#define GL_COMBINE_ALPHA_ARB              0x8572 
#define GL_SOURCE0_RGB_ARB                0x8580 
#define GL_SOURCE1_RGB_ARB                0x8581 
#define GL_SOURCE2_RGB_ARB                0x8582 
#define GL_SOURCE0_ALPHA_ARB              0x8588 
#define GL_SOURCE1_ALPHA_ARB              0x8589 
#define GL_SOURCE2_ALPHA_ARB              0x858A 
#define GL_OPERAND0_RGB_ARB               0x8590 
#define GL_OPERAND1_RGB_ARB               0x8591 
#define GL_OPERAND2_RGB_ARB               0x8592 
#define GL_OPERAND0_ALPHA_ARB             0x8598 
#define GL_OPERAND1_ALPHA_ARB             0x8599 
#define GL_OPERAND2_ALPHA_ARB             0x859A 
#define GL_RGB_SCALE_ARB                  0x8573 
#define GL_ADD_SIGNED_ARB                 0x8574 
#define GL_INTERPOLATE_ARB                0x8575 
#define GL_SUBTRACT_ARB                   0x84E7 
#define GL_CONSTANT_ARB                   0x8576 
#define GL_PRIMARY_COLOR_ARB              0x8577 
#define GL_PREVIOUS_ARB                   0x8578 
#endif //GL_ARB_texture_env_combine

// GL_ARB_texture_env_crossbar

#ifndef GL_ARB_texture_env_dot3

// Defines
#define GL_DOT3_RGB_ARB                   0x86AE 
#define GL_DOT3_RGBA_ARB                  0x86AF 
#endif //GL_ARB_texture_env_dot3

#ifndef GL_ARB_texture_float

// Defines
#define GL_TEXTURE_RED_TYPE_ARB           0x8C10 
#define GL_TEXTURE_GREEN_TYPE_ARB         0x8C11 
#define GL_TEXTURE_BLUE_TYPE_ARB          0x8C12 
#define GL_TEXTURE_ALPHA_TYPE_ARB         0x8C13 
#define GL_TEXTURE_LUMINANCE_TYPE_ARB     0x8C14 
#define GL_TEXTURE_INTENSITY_TYPE_ARB     0x8C15 
#define GL_TEXTURE_DEPTH_TYPE_ARB         0x8C16 
#define GL_UNSIGNED_NORMALIZED_ARB        0x8C17 
#define GL_RGBA32F_ARB                    0x8814 
#define GL_RGB32F_ARB                     0x8815 
#define GL_ALPHA32F_ARB                   0x8816 
#define GL_INTENSITY32F_ARB               0x8817 
#define GL_LUMINANCE32F_ARB               0x8818 
#define GL_LUMINANCE_ALPHA32F_ARB         0x8819 
#define GL_RGBA16F_ARB                    0x881A 
#define GL_RGB16F_ARB                     0x881B 
#define GL_ALPHA16F_ARB                   0x881C 
#define GL_INTENSITY16F_ARB               0x881D 
#define GL_LUMINANCE16F_ARB               0x881E 
#define GL_LUMINANCE_ALPHA16F_ARB         0x881F 
#endif //GL_ARB_texture_float

#ifndef GL_ARB_texture_rectangle

// Defines
#define GL_TEXTURE_RECTANGLE_ARB          0x84F5 
#define GL_TEXTURE_BINDING_RECTANGLE_ARB  0x84F6 
#define GL_PROXY_TEXTURE_RECTANGLE_ARB    0x84F7 
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 0x84F8 
#endif //GL_ARB_texture_rectangle

#ifndef GL_ARB_transpose_matrix

// Defines
#define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB 0x84E3 
#define GL_TRANSPOSE_PROJECTION_MATRIX_ARB 0x84E4 
#define GL_TRANSPOSE_TEXTURE_MATRIX_ARB   0x84E5 
#define GL_TRANSPOSE_COLOR_MATRIX_ARB     0x84E6 

// functions typedefs
typedef void (APIENTRYP PFN_GLLOADTRANSPOSEMATRIXFARB_PROC) (const GLfloat * m);
typedef void (APIENTRYP PFN_GLLOADTRANSPOSEMATRIXDARB_PROC) (const GLdouble * m);
typedef void (APIENTRYP PFN_GLMULTTRANSPOSEMATRIXFARB_PROC) (const GLfloat * m);
typedef void (APIENTRYP PFN_GLMULTTRANSPOSEMATRIXDARB_PROC) (const GLdouble * m);

// functions typedefs
GL_FUNC_DEF PFN_GLLOADTRANSPOSEMATRIXFARB_PROC _glLoadTransposeMatrixfARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLOADTRANSPOSEMATRIXDARB_PROC _glLoadTransposeMatrixdARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTTRANSPOSEMATRIXFARB_PROC _glMultTransposeMatrixfARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTTRANSPOSEMATRIXDARB_PROC _glMultTransposeMatrixdARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glLoadTransposeMatrixfARB (const GLfloat * m) { return _glLoadTransposeMatrixfARB_(m); };
inline void glLoadTransposeMatrixdARB (const GLdouble * m) { return _glLoadTransposeMatrixdARB_(m); };
inline void glMultTransposeMatrixfARB (const GLfloat * m) { return _glMultTransposeMatrixfARB_(m); };
inline void glMultTransposeMatrixdARB (const GLdouble * m) { return _glMultTransposeMatrixdARB_(m); };
#endif //GL_ARB_transpose_matrix

#ifndef GL_ARB_vertex_blend

// Defines
#define GL_MAX_VERTEX_UNITS_ARB           0x86A4 
#define GL_ACTIVE_VERTEX_UNITS_ARB        0x86A5 
#define GL_WEIGHT_SUM_UNITY_ARB           0x86A6 
#define GL_VERTEX_BLEND_ARB               0x86A7 
#define GL_CURRENT_WEIGHT_ARB             0x86A8 
#define GL_WEIGHT_ARRAY_TYPE_ARB          0x86A9 
#define GL_WEIGHT_ARRAY_STRIDE_ARB        0x86AA 
#define GL_WEIGHT_ARRAY_SIZE_ARB          0x86AB 
#define GL_WEIGHT_ARRAY_POINTER_ARB       0x86AC 
#define GL_WEIGHT_ARRAY_ARB               0x86AD 
#define GL_MODELVIEW0_ARB                 0x1700 
#define GL_MODELVIEW1_ARB                 0x850A 
#define GL_MODELVIEW2_ARB                 0x8722 
#define GL_MODELVIEW3_ARB                 0x8723 
#define GL_MODELVIEW4_ARB                 0x8724 
#define GL_MODELVIEW5_ARB                 0x8725 
#define GL_MODELVIEW6_ARB                 0x8726 
#define GL_MODELVIEW7_ARB                 0x8727 
#define GL_MODELVIEW8_ARB                 0x8728 
#define GL_MODELVIEW9_ARB                 0x8729 
#define GL_MODELVIEW10_ARB                0x872A 
#define GL_MODELVIEW11_ARB                0x872B 
#define GL_MODELVIEW12_ARB                0x872C 
#define GL_MODELVIEW13_ARB                0x872D 
#define GL_MODELVIEW14_ARB                0x872E 
#define GL_MODELVIEW15_ARB                0x872F 
#define GL_MODELVIEW16_ARB                0x8730 
#define GL_MODELVIEW17_ARB                0x8731 
#define GL_MODELVIEW18_ARB                0x8732 
#define GL_MODELVIEW19_ARB                0x8733 
#define GL_MODELVIEW20_ARB                0x8734 
#define GL_MODELVIEW21_ARB                0x8735 
#define GL_MODELVIEW22_ARB                0x8736 
#define GL_MODELVIEW23_ARB                0x8737 
#define GL_MODELVIEW24_ARB                0x8738 
#define GL_MODELVIEW25_ARB                0x8739 
#define GL_MODELVIEW26_ARB                0x873A 
#define GL_MODELVIEW27_ARB                0x873B 
#define GL_MODELVIEW28_ARB                0x873C 
#define GL_MODELVIEW29_ARB                0x873D 
#define GL_MODELVIEW30_ARB                0x873E 
#define GL_MODELVIEW31_ARB                0x873F 

// functions typedefs
typedef void (APIENTRYP PFN_GLWEIGHTBVARB_PROC) (GLint size, const GLbyte * weights);
typedef void (APIENTRYP PFN_GLWEIGHTSVARB_PROC) (GLint size, const GLshort * weights);
typedef void (APIENTRYP PFN_GLWEIGHTIVARB_PROC) (GLint size, const GLint * weights);
typedef void (APIENTRYP PFN_GLWEIGHTFVARB_PROC) (GLint size, const GLfloat * weights);
typedef void (APIENTRYP PFN_GLWEIGHTDVARB_PROC) (GLint size, const GLdouble * weights);
typedef void (APIENTRYP PFN_GLWEIGHTUBVARB_PROC) (GLint size, const GLubyte * weights);
typedef void (APIENTRYP PFN_GLWEIGHTUSVARB_PROC) (GLint size, const GLushort * weights);
typedef void (APIENTRYP PFN_GLWEIGHTUIVARB_PROC) (GLint size, const GLuint * weights);
typedef void (APIENTRYP PFN_GLWEIGHTPOINTERARB_PROC) (GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (APIENTRYP PFN_GLVERTEXBLENDARB_PROC) (GLint count);

// functions typedefs
GL_FUNC_DEF PFN_GLWEIGHTBVARB_PROC _glWeightbvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWEIGHTSVARB_PROC _glWeightsvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWEIGHTIVARB_PROC _glWeightivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWEIGHTFVARB_PROC _glWeightfvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWEIGHTDVARB_PROC _glWeightdvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWEIGHTUBVARB_PROC _glWeightubvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWEIGHTUSVARB_PROC _glWeightusvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWEIGHTUIVARB_PROC _glWeightuivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWEIGHTPOINTERARB_PROC _glWeightPointerARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXBLENDARB_PROC _glVertexBlendARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glWeightbvARB (GLint size, const GLbyte * weights) { return _glWeightbvARB_(size, weights); };
inline void glWeightsvARB (GLint size, const GLshort * weights) { return _glWeightsvARB_(size, weights); };
inline void glWeightivARB (GLint size, const GLint * weights) { return _glWeightivARB_(size, weights); };
inline void glWeightfvARB (GLint size, const GLfloat * weights) { return _glWeightfvARB_(size, weights); };
inline void glWeightdvARB (GLint size, const GLdouble * weights) { return _glWeightdvARB_(size, weights); };
inline void glWeightubvARB (GLint size, const GLubyte * weights) { return _glWeightubvARB_(size, weights); };
inline void glWeightusvARB (GLint size, const GLushort * weights) { return _glWeightusvARB_(size, weights); };
inline void glWeightuivARB (GLint size, const GLuint * weights) { return _glWeightuivARB_(size, weights); };
inline void glWeightPointerARB (GLint size, GLenum type, GLsizei stride, const void * pointer) { return _glWeightPointerARB_(size, type, stride, pointer); };
inline void glVertexBlendARB (GLint count) { return _glVertexBlendARB_(count); };
#endif //GL_ARB_vertex_blend

#ifndef GL_ARB_vertex_buffer_object

// Defines
#define GL_BUFFER_SIZE_ARB                0x8764 
#define GL_BUFFER_USAGE_ARB               0x8765 
#define GL_ARRAY_BUFFER_ARB               0x8892 
#define GL_ELEMENT_ARRAY_BUFFER_ARB       0x8893 
#define GL_ARRAY_BUFFER_BINDING_ARB       0x8894 
#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895 
#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896 
#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897 
#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898 
#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899 
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A 
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B 
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C 
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D 
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E 
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F 
#define GL_READ_ONLY_ARB                  0x88B8 
#define GL_WRITE_ONLY_ARB                 0x88B9 
#define GL_READ_WRITE_ARB                 0x88BA 
#define GL_BUFFER_ACCESS_ARB              0x88BB 
#define GL_BUFFER_MAPPED_ARB              0x88BC 
#define GL_BUFFER_MAP_POINTER_ARB         0x88BD 
#define GL_STREAM_DRAW_ARB                0x88E0 
#define GL_STREAM_READ_ARB                0x88E1 
#define GL_STREAM_COPY_ARB                0x88E2 
#define GL_STATIC_DRAW_ARB                0x88E4 
#define GL_STATIC_READ_ARB                0x88E5 
#define GL_STATIC_COPY_ARB                0x88E6 
#define GL_DYNAMIC_DRAW_ARB               0x88E8 
#define GL_DYNAMIC_READ_ARB               0x88E9 
#define GL_DYNAMIC_COPY_ARB               0x88EA 

// functions typedefs
typedef void (APIENTRYP PFN_GLBINDBUFFERARB_PROC) (GLenum target, GLuint buffer);
typedef void (APIENTRYP PFN_GLDELETEBUFFERSARB_PROC) (GLsizei n, const GLuint * buffers);
typedef void (APIENTRYP PFN_GLGENBUFFERSARB_PROC) (GLsizei n, GLuint * buffers);
typedef GLboolean (APIENTRYP PFN_GLISBUFFERARB_PROC) (GLuint buffer);
typedef void (APIENTRYP PFN_GLBUFFERDATAARB_PROC) (GLenum target, GLsizeiptrARB size, const void * data, GLenum usage);
typedef void (APIENTRYP PFN_GLBUFFERSUBDATAARB_PROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void * data);
typedef void (APIENTRYP PFN_GLGETBUFFERSUBDATAARB_PROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data);
typedef void * (APIENTRYP PFN_GLMAPBUFFERARB_PROC) (GLenum target, GLenum access);
typedef GLboolean (APIENTRYP PFN_GLUNMAPBUFFERARB_PROC) (GLenum target);
typedef void (APIENTRYP PFN_GLGETBUFFERPARAMETERIVARB_PROC) (GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETBUFFERPOINTERVARB_PROC) (GLenum target, GLenum pname, void * * params);

// functions typedefs
GL_FUNC_DEF PFN_GLBINDBUFFERARB_PROC _glBindBufferARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEBUFFERSARB_PROC _glDeleteBuffersARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENBUFFERSARB_PROC _glGenBuffersARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISBUFFERARB_PROC _glIsBufferARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBUFFERDATAARB_PROC _glBufferDataARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBUFFERSUBDATAARB_PROC _glBufferSubDataARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETBUFFERSUBDATAARB_PROC _glGetBufferSubDataARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAPBUFFERARB_PROC _glMapBufferARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNMAPBUFFERARB_PROC _glUnmapBufferARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETBUFFERPARAMETERIVARB_PROC _glGetBufferParameterivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETBUFFERPOINTERVARB_PROC _glGetBufferPointervARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBindBufferARB (GLenum target, GLuint buffer) { return _glBindBufferARB_(target, buffer); };
inline void glDeleteBuffersARB (GLsizei n, const GLuint * buffers) { return _glDeleteBuffersARB_(n, buffers); };
inline void glGenBuffersARB (GLsizei n, GLuint * buffers) { return _glGenBuffersARB_(n, buffers); };
inline GLboolean glIsBufferARB (GLuint buffer) { return _glIsBufferARB_(buffer); };
inline void glBufferDataARB (GLenum target, GLsizeiptrARB size, const void * data, GLenum usage) { return _glBufferDataARB_(target, size, data, usage); };
inline void glBufferSubDataARB (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void * data) { return _glBufferSubDataARB_(target, offset, size, data); };
inline void glGetBufferSubDataARB (GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data) { return _glGetBufferSubDataARB_(target, offset, size, data); };
inline void * glMapBufferARB (GLenum target, GLenum access) { return _glMapBufferARB_(target, access); };
inline GLboolean glUnmapBufferARB (GLenum target) { return _glUnmapBufferARB_(target); };
inline void glGetBufferParameterivARB (GLenum target, GLenum pname, GLint * params) { return _glGetBufferParameterivARB_(target, pname, params); };
inline void glGetBufferPointervARB (GLenum target, GLenum pname, void * * params) { return _glGetBufferPointervARB_(target, pname, params); };
#endif //GL_ARB_vertex_buffer_object

#ifndef GL_ARB_vertex_program

// Defines
#define GL_COLOR_SUM_ARB                  0x8458 
#define GL_VERTEX_PROGRAM_ARB             0x8620 
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622 
#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB   0x8623 
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624 
#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB   0x8625 
#define GL_CURRENT_VERTEX_ATTRIB_ARB      0x8626 
#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB  0x8642 
#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB    0x8643 
#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645 
#define GL_MAX_VERTEX_ATTRIBS_ARB         0x8869 
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A 
#define GL_PROGRAM_ADDRESS_REGISTERS_ARB  0x88B0 
#define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1 
#define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2 
#define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3 

// functions typedefs
typedef void (APIENTRYP PFN_GLVERTEXATTRIB1DARB_PROC) (GLuint index, GLdouble x);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB1DVARB_PROC) (GLuint index, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB1FARB_PROC) (GLuint index, GLfloat x);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB1FVARB_PROC) (GLuint index, const GLfloat * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB1SARB_PROC) (GLuint index, GLshort x);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB1SVARB_PROC) (GLuint index, const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB2DARB_PROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB2DVARB_PROC) (GLuint index, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB2FARB_PROC) (GLuint index, GLfloat x, GLfloat y);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB2FVARB_PROC) (GLuint index, const GLfloat * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB2SARB_PROC) (GLuint index, GLshort x, GLshort y);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB2SVARB_PROC) (GLuint index, const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB3DARB_PROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB3DVARB_PROC) (GLuint index, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB3FARB_PROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB3FVARB_PROC) (GLuint index, const GLfloat * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB3SARB_PROC) (GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB3SVARB_PROC) (GLuint index, const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4NBVARB_PROC) (GLuint index, const GLbyte * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4NIVARB_PROC) (GLuint index, const GLint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4NSVARB_PROC) (GLuint index, const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4NUBARB_PROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4NUBVARB_PROC) (GLuint index, const GLubyte * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4NUIVARB_PROC) (GLuint index, const GLuint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4NUSVARB_PROC) (GLuint index, const GLushort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4BVARB_PROC) (GLuint index, const GLbyte * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4DARB_PROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4DVARB_PROC) (GLuint index, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4FARB_PROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4FVARB_PROC) (GLuint index, const GLfloat * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4IVARB_PROC) (GLuint index, const GLint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4SARB_PROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4SVARB_PROC) (GLuint index, const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4UBVARB_PROC) (GLuint index, const GLubyte * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4UIVARB_PROC) (GLuint index, const GLuint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4USVARB_PROC) (GLuint index, const GLushort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBPOINTERARB_PROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
typedef void (APIENTRYP PFN_GLENABLEVERTEXATTRIBARRAYARB_PROC) (GLuint index);
typedef void (APIENTRYP PFN_GLDISABLEVERTEXATTRIBARRAYARB_PROC) (GLuint index);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBDVARB_PROC) (GLuint index, GLenum pname, GLdouble * params);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBFVARB_PROC) (GLuint index, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBIVARB_PROC) (GLuint index, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBPOINTERVARB_PROC) (GLuint index, GLenum pname, void * * pointer);

// functions typedefs
GL_FUNC_DEF PFN_GLVERTEXATTRIB1DARB_PROC _glVertexAttrib1dARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB1DVARB_PROC _glVertexAttrib1dvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB1FARB_PROC _glVertexAttrib1fARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB1FVARB_PROC _glVertexAttrib1fvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB1SARB_PROC _glVertexAttrib1sARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB1SVARB_PROC _glVertexAttrib1svARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB2DARB_PROC _glVertexAttrib2dARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB2DVARB_PROC _glVertexAttrib2dvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB2FARB_PROC _glVertexAttrib2fARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB2FVARB_PROC _glVertexAttrib2fvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB2SARB_PROC _glVertexAttrib2sARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB2SVARB_PROC _glVertexAttrib2svARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB3DARB_PROC _glVertexAttrib3dARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB3DVARB_PROC _glVertexAttrib3dvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB3FARB_PROC _glVertexAttrib3fARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB3FVARB_PROC _glVertexAttrib3fvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB3SARB_PROC _glVertexAttrib3sARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB3SVARB_PROC _glVertexAttrib3svARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4NBVARB_PROC _glVertexAttrib4NbvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4NIVARB_PROC _glVertexAttrib4NivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4NSVARB_PROC _glVertexAttrib4NsvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4NUBARB_PROC _glVertexAttrib4NubARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4NUBVARB_PROC _glVertexAttrib4NubvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4NUIVARB_PROC _glVertexAttrib4NuivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4NUSVARB_PROC _glVertexAttrib4NusvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4BVARB_PROC _glVertexAttrib4bvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4DARB_PROC _glVertexAttrib4dARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4DVARB_PROC _glVertexAttrib4dvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4FARB_PROC _glVertexAttrib4fARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4FVARB_PROC _glVertexAttrib4fvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4IVARB_PROC _glVertexAttrib4ivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4SARB_PROC _glVertexAttrib4sARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4SVARB_PROC _glVertexAttrib4svARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4UBVARB_PROC _glVertexAttrib4ubvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4UIVARB_PROC _glVertexAttrib4uivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4USVARB_PROC _glVertexAttrib4usvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBPOINTERARB_PROC _glVertexAttribPointerARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENABLEVERTEXATTRIBARRAYARB_PROC _glEnableVertexAttribArrayARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDISABLEVERTEXATTRIBARRAYARB_PROC _glDisableVertexAttribArrayARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBDVARB_PROC _glGetVertexAttribdvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBFVARB_PROC _glGetVertexAttribfvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBIVARB_PROC _glGetVertexAttribivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBPOINTERVARB_PROC _glGetVertexAttribPointervARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glVertexAttrib1dARB (GLuint index, GLdouble x) { return _glVertexAttrib1dARB_(index, x); };
inline void glVertexAttrib1dvARB (GLuint index, const GLdouble * v) { return _glVertexAttrib1dvARB_(index, v); };
inline void glVertexAttrib1fARB (GLuint index, GLfloat x) { return _glVertexAttrib1fARB_(index, x); };
inline void glVertexAttrib1fvARB (GLuint index, const GLfloat * v) { return _glVertexAttrib1fvARB_(index, v); };
inline void glVertexAttrib1sARB (GLuint index, GLshort x) { return _glVertexAttrib1sARB_(index, x); };
inline void glVertexAttrib1svARB (GLuint index, const GLshort * v) { return _glVertexAttrib1svARB_(index, v); };
inline void glVertexAttrib2dARB (GLuint index, GLdouble x, GLdouble y) { return _glVertexAttrib2dARB_(index, x, y); };
inline void glVertexAttrib2dvARB (GLuint index, const GLdouble * v) { return _glVertexAttrib2dvARB_(index, v); };
inline void glVertexAttrib2fARB (GLuint index, GLfloat x, GLfloat y) { return _glVertexAttrib2fARB_(index, x, y); };
inline void glVertexAttrib2fvARB (GLuint index, const GLfloat * v) { return _glVertexAttrib2fvARB_(index, v); };
inline void glVertexAttrib2sARB (GLuint index, GLshort x, GLshort y) { return _glVertexAttrib2sARB_(index, x, y); };
inline void glVertexAttrib2svARB (GLuint index, const GLshort * v) { return _glVertexAttrib2svARB_(index, v); };
inline void glVertexAttrib3dARB (GLuint index, GLdouble x, GLdouble y, GLdouble z) { return _glVertexAttrib3dARB_(index, x, y, z); };
inline void glVertexAttrib3dvARB (GLuint index, const GLdouble * v) { return _glVertexAttrib3dvARB_(index, v); };
inline void glVertexAttrib3fARB (GLuint index, GLfloat x, GLfloat y, GLfloat z) { return _glVertexAttrib3fARB_(index, x, y, z); };
inline void glVertexAttrib3fvARB (GLuint index, const GLfloat * v) { return _glVertexAttrib3fvARB_(index, v); };
inline void glVertexAttrib3sARB (GLuint index, GLshort x, GLshort y, GLshort z) { return _glVertexAttrib3sARB_(index, x, y, z); };
inline void glVertexAttrib3svARB (GLuint index, const GLshort * v) { return _glVertexAttrib3svARB_(index, v); };
inline void glVertexAttrib4NbvARB (GLuint index, const GLbyte * v) { return _glVertexAttrib4NbvARB_(index, v); };
inline void glVertexAttrib4NivARB (GLuint index, const GLint * v) { return _glVertexAttrib4NivARB_(index, v); };
inline void glVertexAttrib4NsvARB (GLuint index, const GLshort * v) { return _glVertexAttrib4NsvARB_(index, v); };
inline void glVertexAttrib4NubARB (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { return _glVertexAttrib4NubARB_(index, x, y, z, w); };
inline void glVertexAttrib4NubvARB (GLuint index, const GLubyte * v) { return _glVertexAttrib4NubvARB_(index, v); };
inline void glVertexAttrib4NuivARB (GLuint index, const GLuint * v) { return _glVertexAttrib4NuivARB_(index, v); };
inline void glVertexAttrib4NusvARB (GLuint index, const GLushort * v) { return _glVertexAttrib4NusvARB_(index, v); };
inline void glVertexAttrib4bvARB (GLuint index, const GLbyte * v) { return _glVertexAttrib4bvARB_(index, v); };
inline void glVertexAttrib4dARB (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { return _glVertexAttrib4dARB_(index, x, y, z, w); };
inline void glVertexAttrib4dvARB (GLuint index, const GLdouble * v) { return _glVertexAttrib4dvARB_(index, v); };
inline void glVertexAttrib4fARB (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { return _glVertexAttrib4fARB_(index, x, y, z, w); };
inline void glVertexAttrib4fvARB (GLuint index, const GLfloat * v) { return _glVertexAttrib4fvARB_(index, v); };
inline void glVertexAttrib4ivARB (GLuint index, const GLint * v) { return _glVertexAttrib4ivARB_(index, v); };
inline void glVertexAttrib4sARB (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { return _glVertexAttrib4sARB_(index, x, y, z, w); };
inline void glVertexAttrib4svARB (GLuint index, const GLshort * v) { return _glVertexAttrib4svARB_(index, v); };
inline void glVertexAttrib4ubvARB (GLuint index, const GLubyte * v) { return _glVertexAttrib4ubvARB_(index, v); };
inline void glVertexAttrib4uivARB (GLuint index, const GLuint * v) { return _glVertexAttrib4uivARB_(index, v); };
inline void glVertexAttrib4usvARB (GLuint index, const GLushort * v) { return _glVertexAttrib4usvARB_(index, v); };
inline void glVertexAttribPointerARB (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) { return _glVertexAttribPointerARB_(index, size, type, normalized, stride, pointer); };
inline void glEnableVertexAttribArrayARB (GLuint index) { return _glEnableVertexAttribArrayARB_(index); };
inline void glDisableVertexAttribArrayARB (GLuint index) { return _glDisableVertexAttribArrayARB_(index); };
inline void glGetVertexAttribdvARB (GLuint index, GLenum pname, GLdouble * params) { return _glGetVertexAttribdvARB_(index, pname, params); };
inline void glGetVertexAttribfvARB (GLuint index, GLenum pname, GLfloat * params) { return _glGetVertexAttribfvARB_(index, pname, params); };
inline void glGetVertexAttribivARB (GLuint index, GLenum pname, GLint * params) { return _glGetVertexAttribivARB_(index, pname, params); };
inline void glGetVertexAttribPointervARB (GLuint index, GLenum pname, void * * pointer) { return _glGetVertexAttribPointervARB_(index, pname, pointer); };
#endif //GL_ARB_vertex_program

#ifndef GL_ARB_vertex_shader

// Defines
#define GL_VERTEX_SHADER_ARB              0x8B31 
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A 
#define GL_MAX_VARYING_FLOATS_ARB         0x8B4B 
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C 
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D 
#define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB   0x8B89 
#define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A 

// functions typedefs
typedef void (APIENTRYP PFN_GLBINDATTRIBLOCATIONARB_PROC) (GLhandleARB programObj, GLuint index, const GLcharARB * name);
typedef void (APIENTRYP PFN_GLGETACTIVEATTRIBARB_PROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
typedef GLint (APIENTRYP PFN_GLGETATTRIBLOCATIONARB_PROC) (GLhandleARB programObj, const GLcharARB * name);

// functions typedefs
GL_FUNC_DEF PFN_GLBINDATTRIBLOCATIONARB_PROC _glBindAttribLocationARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETACTIVEATTRIBARB_PROC _glGetActiveAttribARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETATTRIBLOCATIONARB_PROC _glGetAttribLocationARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBindAttribLocationARB (GLhandleARB programObj, GLuint index, const GLcharARB * name) { return _glBindAttribLocationARB_(programObj, index, name); };
inline void glGetActiveAttribARB (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) { return _glGetActiveAttribARB_(programObj, index, maxLength, length, size, type, name); };
inline GLint glGetAttribLocationARB (GLhandleARB programObj, const GLcharARB * name) { return _glGetAttribLocationARB_(programObj, name); };
#endif //GL_ARB_vertex_shader

#ifndef GL_ARB_window_pos

// functions typedefs
typedef void (APIENTRYP PFN_GLWINDOWPOS2DARB_PROC) (GLdouble x, GLdouble y);
typedef void (APIENTRYP PFN_GLWINDOWPOS2DVARB_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS2FARB_PROC) (GLfloat x, GLfloat y);
typedef void (APIENTRYP PFN_GLWINDOWPOS2FVARB_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS2IARB_PROC) (GLint x, GLint y);
typedef void (APIENTRYP PFN_GLWINDOWPOS2IVARB_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS2SARB_PROC) (GLshort x, GLshort y);
typedef void (APIENTRYP PFN_GLWINDOWPOS2SVARB_PROC) (const GLshort * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS3DARB_PROC) (GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFN_GLWINDOWPOS3DVARB_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS3FARB_PROC) (GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLWINDOWPOS3FVARB_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS3IARB_PROC) (GLint x, GLint y, GLint z);
typedef void (APIENTRYP PFN_GLWINDOWPOS3IVARB_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS3SARB_PROC) (GLshort x, GLshort y, GLshort z);
typedef void (APIENTRYP PFN_GLWINDOWPOS3SVARB_PROC) (const GLshort * v);

// functions typedefs
GL_FUNC_DEF PFN_GLWINDOWPOS2DARB_PROC _glWindowPos2dARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2DVARB_PROC _glWindowPos2dvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2FARB_PROC _glWindowPos2fARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2FVARB_PROC _glWindowPos2fvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2IARB_PROC _glWindowPos2iARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2IVARB_PROC _glWindowPos2ivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2SARB_PROC _glWindowPos2sARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2SVARB_PROC _glWindowPos2svARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3DARB_PROC _glWindowPos3dARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3DVARB_PROC _glWindowPos3dvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3FARB_PROC _glWindowPos3fARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3FVARB_PROC _glWindowPos3fvARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3IARB_PROC _glWindowPos3iARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3IVARB_PROC _glWindowPos3ivARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3SARB_PROC _glWindowPos3sARB_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3SVARB_PROC _glWindowPos3svARB_ GL_FUNC_DEF2;

// functions inline wrap
inline void glWindowPos2dARB (GLdouble x, GLdouble y) { return _glWindowPos2dARB_(x, y); };
inline void glWindowPos2dvARB (const GLdouble * v) { return _glWindowPos2dvARB_(v); };
inline void glWindowPos2fARB (GLfloat x, GLfloat y) { return _glWindowPos2fARB_(x, y); };
inline void glWindowPos2fvARB (const GLfloat * v) { return _glWindowPos2fvARB_(v); };
inline void glWindowPos2iARB (GLint x, GLint y) { return _glWindowPos2iARB_(x, y); };
inline void glWindowPos2ivARB (const GLint * v) { return _glWindowPos2ivARB_(v); };
inline void glWindowPos2sARB (GLshort x, GLshort y) { return _glWindowPos2sARB_(x, y); };
inline void glWindowPos2svARB (const GLshort * v) { return _glWindowPos2svARB_(v); };
inline void glWindowPos3dARB (GLdouble x, GLdouble y, GLdouble z) { return _glWindowPos3dARB_(x, y, z); };
inline void glWindowPos3dvARB (const GLdouble * v) { return _glWindowPos3dvARB_(v); };
inline void glWindowPos3fARB (GLfloat x, GLfloat y, GLfloat z) { return _glWindowPos3fARB_(x, y, z); };
inline void glWindowPos3fvARB (const GLfloat * v) { return _glWindowPos3fvARB_(v); };
inline void glWindowPos3iARB (GLint x, GLint y, GLint z) { return _glWindowPos3iARB_(x, y, z); };
inline void glWindowPos3ivARB (const GLint * v) { return _glWindowPos3ivARB_(v); };
inline void glWindowPos3sARB (GLshort x, GLshort y, GLshort z) { return _glWindowPos3sARB_(x, y, z); };
inline void glWindowPos3svARB (const GLshort * v) { return _glWindowPos3svARB_(v); };
#endif //GL_ARB_window_pos

#ifndef GL_OES_byte_coordinates

// functions typedefs
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1BOES_PROC) (GLenum texture, GLbyte s);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1BVOES_PROC) (GLenum texture, const GLbyte * coords);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2BOES_PROC) (GLenum texture, GLbyte s, GLbyte t);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2BVOES_PROC) (GLenum texture, const GLbyte * coords);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3BOES_PROC) (GLenum texture, GLbyte s, GLbyte t, GLbyte r);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3BVOES_PROC) (GLenum texture, const GLbyte * coords);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4BOES_PROC) (GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4BVOES_PROC) (GLenum texture, const GLbyte * coords);
typedef void (APIENTRYP PFN_GLTEXCOORD1BOES_PROC) (GLbyte s);
typedef void (APIENTRYP PFN_GLTEXCOORD1BVOES_PROC) (const GLbyte * coords);
typedef void (APIENTRYP PFN_GLTEXCOORD2BOES_PROC) (GLbyte s, GLbyte t);
typedef void (APIENTRYP PFN_GLTEXCOORD2BVOES_PROC) (const GLbyte * coords);
typedef void (APIENTRYP PFN_GLTEXCOORD3BOES_PROC) (GLbyte s, GLbyte t, GLbyte r);
typedef void (APIENTRYP PFN_GLTEXCOORD3BVOES_PROC) (const GLbyte * coords);
typedef void (APIENTRYP PFN_GLTEXCOORD4BOES_PROC) (GLbyte s, GLbyte t, GLbyte r, GLbyte q);
typedef void (APIENTRYP PFN_GLTEXCOORD4BVOES_PROC) (const GLbyte * coords);
typedef void (APIENTRYP PFN_GLVERTEX2BOES_PROC) (GLbyte x, GLbyte y);
typedef void (APIENTRYP PFN_GLVERTEX2BVOES_PROC) (const GLbyte * coords);
typedef void (APIENTRYP PFN_GLVERTEX3BOES_PROC) (GLbyte x, GLbyte y, GLbyte z);
typedef void (APIENTRYP PFN_GLVERTEX3BVOES_PROC) (const GLbyte * coords);
typedef void (APIENTRYP PFN_GLVERTEX4BOES_PROC) (GLbyte x, GLbyte y, GLbyte z, GLbyte w);
typedef void (APIENTRYP PFN_GLVERTEX4BVOES_PROC) (const GLbyte * coords);

// functions typedefs
GL_FUNC_DEF PFN_GLMULTITEXCOORD1BOES_PROC _glMultiTexCoord1bOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD1BVOES_PROC _glMultiTexCoord1bvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2BOES_PROC _glMultiTexCoord2bOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2BVOES_PROC _glMultiTexCoord2bvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3BOES_PROC _glMultiTexCoord3bOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3BVOES_PROC _glMultiTexCoord3bvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4BOES_PROC _glMultiTexCoord4bOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4BVOES_PROC _glMultiTexCoord4bvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD1BOES_PROC _glTexCoord1bOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD1BVOES_PROC _glTexCoord1bvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2BOES_PROC _glTexCoord2bOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2BVOES_PROC _glTexCoord2bvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD3BOES_PROC _glTexCoord3bOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD3BVOES_PROC _glTexCoord3bvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD4BOES_PROC _glTexCoord4bOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD4BVOES_PROC _glTexCoord4bvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX2BOES_PROC _glVertex2bOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX2BVOES_PROC _glVertex2bvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX3BOES_PROC _glVertex3bOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX3BVOES_PROC _glVertex3bvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX4BOES_PROC _glVertex4bOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX4BVOES_PROC _glVertex4bvOES_ GL_FUNC_DEF2;

// functions inline wrap
inline void glMultiTexCoord1bOES (GLenum texture, GLbyte s) { return _glMultiTexCoord1bOES_(texture, s); };
inline void glMultiTexCoord1bvOES (GLenum texture, const GLbyte * coords) { return _glMultiTexCoord1bvOES_(texture, coords); };
inline void glMultiTexCoord2bOES (GLenum texture, GLbyte s, GLbyte t) { return _glMultiTexCoord2bOES_(texture, s, t); };
inline void glMultiTexCoord2bvOES (GLenum texture, const GLbyte * coords) { return _glMultiTexCoord2bvOES_(texture, coords); };
inline void glMultiTexCoord3bOES (GLenum texture, GLbyte s, GLbyte t, GLbyte r) { return _glMultiTexCoord3bOES_(texture, s, t, r); };
inline void glMultiTexCoord3bvOES (GLenum texture, const GLbyte * coords) { return _glMultiTexCoord3bvOES_(texture, coords); };
inline void glMultiTexCoord4bOES (GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q) { return _glMultiTexCoord4bOES_(texture, s, t, r, q); };
inline void glMultiTexCoord4bvOES (GLenum texture, const GLbyte * coords) { return _glMultiTexCoord4bvOES_(texture, coords); };
inline void glTexCoord1bOES (GLbyte s) { return _glTexCoord1bOES_(s); };
inline void glTexCoord1bvOES (const GLbyte * coords) { return _glTexCoord1bvOES_(coords); };
inline void glTexCoord2bOES (GLbyte s, GLbyte t) { return _glTexCoord2bOES_(s, t); };
inline void glTexCoord2bvOES (const GLbyte * coords) { return _glTexCoord2bvOES_(coords); };
inline void glTexCoord3bOES (GLbyte s, GLbyte t, GLbyte r) { return _glTexCoord3bOES_(s, t, r); };
inline void glTexCoord3bvOES (const GLbyte * coords) { return _glTexCoord3bvOES_(coords); };
inline void glTexCoord4bOES (GLbyte s, GLbyte t, GLbyte r, GLbyte q) { return _glTexCoord4bOES_(s, t, r, q); };
inline void glTexCoord4bvOES (const GLbyte * coords) { return _glTexCoord4bvOES_(coords); };
inline void glVertex2bOES (GLbyte x, GLbyte y) { return _glVertex2bOES_(x, y); };
inline void glVertex2bvOES (const GLbyte * coords) { return _glVertex2bvOES_(coords); };
inline void glVertex3bOES (GLbyte x, GLbyte y, GLbyte z) { return _glVertex3bOES_(x, y, z); };
inline void glVertex3bvOES (const GLbyte * coords) { return _glVertex3bvOES_(coords); };
inline void glVertex4bOES (GLbyte x, GLbyte y, GLbyte z, GLbyte w) { return _glVertex4bOES_(x, y, z, w); };
inline void glVertex4bvOES (const GLbyte * coords) { return _glVertex4bvOES_(coords); };
#endif //GL_OES_byte_coordinates

#ifndef GL_OES_compressed_paletted_texture

// Defines
#define GL_PALETTE4_RGB8_OES              0x8B90 
#define GL_PALETTE4_RGBA8_OES             0x8B91 
#define GL_PALETTE4_R5_G6_B5_OES          0x8B92 
#define GL_PALETTE4_RGBA4_OES             0x8B93 
#define GL_PALETTE4_RGB5_A1_OES           0x8B94 
#define GL_PALETTE8_RGB8_OES              0x8B95 
#define GL_PALETTE8_RGBA8_OES             0x8B96 
#define GL_PALETTE8_R5_G6_B5_OES          0x8B97 
#define GL_PALETTE8_RGBA4_OES             0x8B98 
#define GL_PALETTE8_RGB5_A1_OES           0x8B99 
#endif //GL_OES_compressed_paletted_texture

#ifndef GL_OES_fixed_point

// Defines
#define GL_FIXED_OES                      0x140C 

// functions typedefs
typedef void (APIENTRYP PFN_GLALPHAFUNCXOES_PROC) (GLenum func, GLfixed ref);
typedef void (APIENTRYP PFN_GLCLEARCOLORXOES_PROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (APIENTRYP PFN_GLCLEARDEPTHXOES_PROC) (GLfixed depth);
typedef void (APIENTRYP PFN_GLCLIPPLANEXOES_PROC) (GLenum plane, const GLfixed * equation);
typedef void (APIENTRYP PFN_GLCOLOR4XOES_PROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (APIENTRYP PFN_GLDEPTHRANGEXOES_PROC) (GLfixed n, GLfixed f);
typedef void (APIENTRYP PFN_GLFOGXOES_PROC) (GLenum pname, GLfixed param);
typedef void (APIENTRYP PFN_GLFOGXVOES_PROC) (GLenum pname, const GLfixed * param);
typedef void (APIENTRYP PFN_GLFRUSTUMXOES_PROC) (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
typedef void (APIENTRYP PFN_GLGETCLIPPLANEXOES_PROC) (GLenum plane, GLfixed * equation);
typedef void (APIENTRYP PFN_GLGETFIXEDVOES_PROC) (GLenum pname, GLfixed * params);
typedef void (APIENTRYP PFN_GLGETTEXENVXVOES_PROC) (GLenum target, GLenum pname, GLfixed * params);
typedef void (APIENTRYP PFN_GLGETTEXPARAMETERXVOES_PROC) (GLenum target, GLenum pname, GLfixed * params);
typedef void (APIENTRYP PFN_GLLIGHTMODELXOES_PROC) (GLenum pname, GLfixed param);
typedef void (APIENTRYP PFN_GLLIGHTMODELXVOES_PROC) (GLenum pname, const GLfixed * param);
typedef void (APIENTRYP PFN_GLLIGHTXOES_PROC) (GLenum light, GLenum pname, GLfixed param);
typedef void (APIENTRYP PFN_GLLIGHTXVOES_PROC) (GLenum light, GLenum pname, const GLfixed * params);
typedef void (APIENTRYP PFN_GLLINEWIDTHXOES_PROC) (GLfixed width);
typedef void (APIENTRYP PFN_GLLOADMATRIXXOES_PROC) (const GLfixed * m);
typedef void (APIENTRYP PFN_GLMATERIALXOES_PROC) (GLenum face, GLenum pname, GLfixed param);
typedef void (APIENTRYP PFN_GLMATERIALXVOES_PROC) (GLenum face, GLenum pname, const GLfixed * param);
typedef void (APIENTRYP PFN_GLMULTMATRIXXOES_PROC) (const GLfixed * m);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4XOES_PROC) (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
typedef void (APIENTRYP PFN_GLNORMAL3XOES_PROC) (GLfixed nx, GLfixed ny, GLfixed nz);
typedef void (APIENTRYP PFN_GLORTHOXOES_PROC) (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
typedef void (APIENTRYP PFN_GLPOINTPARAMETERXVOES_PROC) (GLenum pname, const GLfixed * params);
typedef void (APIENTRYP PFN_GLPOINTSIZEXOES_PROC) (GLfixed size);
typedef void (APIENTRYP PFN_GLPOLYGONOFFSETXOES_PROC) (GLfixed factor, GLfixed units);
typedef void (APIENTRYP PFN_GLROTATEXOES_PROC) (GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
typedef void (APIENTRYP PFN_GLSCALEXOES_PROC) (GLfixed x, GLfixed y, GLfixed z);
typedef void (APIENTRYP PFN_GLTEXENVXOES_PROC) (GLenum target, GLenum pname, GLfixed param);
typedef void (APIENTRYP PFN_GLTEXENVXVOES_PROC) (GLenum target, GLenum pname, const GLfixed * params);
typedef void (APIENTRYP PFN_GLTEXPARAMETERXOES_PROC) (GLenum target, GLenum pname, GLfixed param);
typedef void (APIENTRYP PFN_GLTEXPARAMETERXVOES_PROC) (GLenum target, GLenum pname, const GLfixed * params);
typedef void (APIENTRYP PFN_GLTRANSLATEXOES_PROC) (GLfixed x, GLfixed y, GLfixed z);
typedef void (APIENTRYP PFN_GLACCUMXOES_PROC) (GLenum op, GLfixed value);
typedef void (APIENTRYP PFN_GLBITMAPXOES_PROC) (GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte * bitmap);
typedef void (APIENTRYP PFN_GLBLENDCOLORXOES_PROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (APIENTRYP PFN_GLCLEARACCUMXOES_PROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void (APIENTRYP PFN_GLCOLOR3XOES_PROC) (GLfixed red, GLfixed green, GLfixed blue);
typedef void (APIENTRYP PFN_GLCOLOR3XVOES_PROC) (const GLfixed * components);
typedef void (APIENTRYP PFN_GLCOLOR4XVOES_PROC) (const GLfixed * components);
typedef void (APIENTRYP PFN_GLCONVOLUTIONPARAMETERXOES_PROC) (GLenum target, GLenum pname, GLfixed param);
typedef void (APIENTRYP PFN_GLCONVOLUTIONPARAMETERXVOES_PROC) (GLenum target, GLenum pname, const GLfixed * params);
typedef void (APIENTRYP PFN_GLEVALCOORD1XOES_PROC) (GLfixed u);
typedef void (APIENTRYP PFN_GLEVALCOORD1XVOES_PROC) (const GLfixed * coords);
typedef void (APIENTRYP PFN_GLEVALCOORD2XOES_PROC) (GLfixed u, GLfixed v);
typedef void (APIENTRYP PFN_GLEVALCOORD2XVOES_PROC) (const GLfixed * coords);
typedef void (APIENTRYP PFN_GLFEEDBACKBUFFERXOES_PROC) (GLsizei n, GLenum type, const GLfixed * buffer);
typedef void (APIENTRYP PFN_GLGETCONVOLUTIONPARAMETERXVOES_PROC) (GLenum target, GLenum pname, GLfixed * params);
typedef void (APIENTRYP PFN_GLGETHISTOGRAMPARAMETERXVOES_PROC) (GLenum target, GLenum pname, GLfixed * params);
typedef void (APIENTRYP PFN_GLGETLIGHTXOES_PROC) (GLenum light, GLenum pname, GLfixed * params);
typedef void (APIENTRYP PFN_GLGETMAPXVOES_PROC) (GLenum target, GLenum query, GLfixed * v);
typedef void (APIENTRYP PFN_GLGETMATERIALXOES_PROC) (GLenum face, GLenum pname, GLfixed param);
typedef void (APIENTRYP PFN_GLGETPIXELMAPXV_PROC) (GLenum map, GLint size, GLfixed * values);
typedef void (APIENTRYP PFN_GLGETTEXGENXVOES_PROC) (GLenum coord, GLenum pname, GLfixed * params);
typedef void (APIENTRYP PFN_GLGETTEXLEVELPARAMETERXVOES_PROC) (GLenum target, GLint level, GLenum pname, GLfixed * params);
typedef void (APIENTRYP PFN_GLINDEXXOES_PROC) (GLfixed component);
typedef void (APIENTRYP PFN_GLINDEXXVOES_PROC) (const GLfixed * component);
typedef void (APIENTRYP PFN_GLLOADTRANSPOSEMATRIXXOES_PROC) (const GLfixed * m);
typedef void (APIENTRYP PFN_GLMAP1XOES_PROC) (GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points);
typedef void (APIENTRYP PFN_GLMAP2XOES_PROC) (GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points);
typedef void (APIENTRYP PFN_GLMAPGRID1XOES_PROC) (GLint n, GLfixed u1, GLfixed u2);
typedef void (APIENTRYP PFN_GLMAPGRID2XOES_PROC) (GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2);
typedef void (APIENTRYP PFN_GLMULTTRANSPOSEMATRIXXOES_PROC) (const GLfixed * m);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1XOES_PROC) (GLenum texture, GLfixed s);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1XVOES_PROC) (GLenum texture, const GLfixed * coords);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2XOES_PROC) (GLenum texture, GLfixed s, GLfixed t);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2XVOES_PROC) (GLenum texture, const GLfixed * coords);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3XOES_PROC) (GLenum texture, GLfixed s, GLfixed t, GLfixed r);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3XVOES_PROC) (GLenum texture, const GLfixed * coords);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4XVOES_PROC) (GLenum texture, const GLfixed * coords);
typedef void (APIENTRYP PFN_GLNORMAL3XVOES_PROC) (const GLfixed * coords);
typedef void (APIENTRYP PFN_GLPASSTHROUGHXOES_PROC) (GLfixed token);
typedef void (APIENTRYP PFN_GLPIXELMAPX_PROC) (GLenum map, GLint size, const GLfixed * values);
typedef void (APIENTRYP PFN_GLPIXELSTOREX_PROC) (GLenum pname, GLfixed param);
typedef void (APIENTRYP PFN_GLPIXELTRANSFERXOES_PROC) (GLenum pname, GLfixed param);
typedef void (APIENTRYP PFN_GLPIXELZOOMXOES_PROC) (GLfixed xfactor, GLfixed yfactor);
typedef void (APIENTRYP PFN_GLPRIORITIZETEXTURESXOES_PROC) (GLsizei n, const GLuint * textures, const GLfixed * priorities);
typedef void (APIENTRYP PFN_GLRASTERPOS2XOES_PROC) (GLfixed x, GLfixed y);
typedef void (APIENTRYP PFN_GLRASTERPOS2XVOES_PROC) (const GLfixed * coords);
typedef void (APIENTRYP PFN_GLRASTERPOS3XOES_PROC) (GLfixed x, GLfixed y, GLfixed z);
typedef void (APIENTRYP PFN_GLRASTERPOS3XVOES_PROC) (const GLfixed * coords);
typedef void (APIENTRYP PFN_GLRASTERPOS4XOES_PROC) (GLfixed x, GLfixed y, GLfixed z, GLfixed w);
typedef void (APIENTRYP PFN_GLRASTERPOS4XVOES_PROC) (const GLfixed * coords);
typedef void (APIENTRYP PFN_GLRECTXOES_PROC) (GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2);
typedef void (APIENTRYP PFN_GLRECTXVOES_PROC) (const GLfixed * v1, const GLfixed * v2);
typedef void (APIENTRYP PFN_GLTEXCOORD1XOES_PROC) (GLfixed s);
typedef void (APIENTRYP PFN_GLTEXCOORD1XVOES_PROC) (const GLfixed * coords);
typedef void (APIENTRYP PFN_GLTEXCOORD2XOES_PROC) (GLfixed s, GLfixed t);
typedef void (APIENTRYP PFN_GLTEXCOORD2XVOES_PROC) (const GLfixed * coords);
typedef void (APIENTRYP PFN_GLTEXCOORD3XOES_PROC) (GLfixed s, GLfixed t, GLfixed r);
typedef void (APIENTRYP PFN_GLTEXCOORD3XVOES_PROC) (const GLfixed * coords);
typedef void (APIENTRYP PFN_GLTEXCOORD4XOES_PROC) (GLfixed s, GLfixed t, GLfixed r, GLfixed q);
typedef void (APIENTRYP PFN_GLTEXCOORD4XVOES_PROC) (const GLfixed * coords);
typedef void (APIENTRYP PFN_GLTEXGENXOES_PROC) (GLenum coord, GLenum pname, GLfixed param);
typedef void (APIENTRYP PFN_GLTEXGENXVOES_PROC) (GLenum coord, GLenum pname, const GLfixed * params);
typedef void (APIENTRYP PFN_GLVERTEX2XOES_PROC) (GLfixed x);
typedef void (APIENTRYP PFN_GLVERTEX2XVOES_PROC) (const GLfixed * coords);
typedef void (APIENTRYP PFN_GLVERTEX3XOES_PROC) (GLfixed x, GLfixed y);
typedef void (APIENTRYP PFN_GLVERTEX3XVOES_PROC) (const GLfixed * coords);
typedef void (APIENTRYP PFN_GLVERTEX4XOES_PROC) (GLfixed x, GLfixed y, GLfixed z);
typedef void (APIENTRYP PFN_GLVERTEX4XVOES_PROC) (const GLfixed * coords);

// functions typedefs
GL_FUNC_DEF PFN_GLALPHAFUNCXOES_PROC _glAlphaFuncxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARCOLORXOES_PROC _glClearColorxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARDEPTHXOES_PROC _glClearDepthxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLIPPLANEXOES_PROC _glClipPlanexOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4XOES_PROC _glColor4xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDEPTHRANGEXOES_PROC _glDepthRangexOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFOGXOES_PROC _glFogxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFOGXVOES_PROC _glFogxvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRUSTUMXOES_PROC _glFrustumxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCLIPPLANEXOES_PROC _glGetClipPlanexOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFIXEDVOES_PROC _glGetFixedvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXENVXVOES_PROC _glGetTexEnvxvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXPARAMETERXVOES_PROC _glGetTexParameterxvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLIGHTMODELXOES_PROC _glLightModelxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLIGHTMODELXVOES_PROC _glLightModelxvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLIGHTXOES_PROC _glLightxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLIGHTXVOES_PROC _glLightxvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLINEWIDTHXOES_PROC _glLineWidthxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLOADMATRIXXOES_PROC _glLoadMatrixxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATERIALXOES_PROC _glMaterialxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMATERIALXVOES_PROC _glMaterialxvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTMATRIXXOES_PROC _glMultMatrixxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4XOES_PROC _glMultiTexCoord4xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMAL3XOES_PROC _glNormal3xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLORTHOXOES_PROC _glOrthoxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOINTPARAMETERXVOES_PROC _glPointParameterxvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOINTSIZEXOES_PROC _glPointSizexOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOLYGONOFFSETXOES_PROC _glPolygonOffsetxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLROTATEXOES_PROC _glRotatexOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSCALEXOES_PROC _glScalexOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXENVXOES_PROC _glTexEnvxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXENVXVOES_PROC _glTexEnvxvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXPARAMETERXOES_PROC _glTexParameterxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXPARAMETERXVOES_PROC _glTexParameterxvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTRANSLATEXOES_PROC _glTranslatexOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLACCUMXOES_PROC _glAccumxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBITMAPXOES_PROC _glBitmapxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBLENDCOLORXOES_PROC _glBlendColorxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARACCUMXOES_PROC _glClearAccumxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3XOES_PROC _glColor3xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3XVOES_PROC _glColor3xvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4XVOES_PROC _glColor4xvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCONVOLUTIONPARAMETERXOES_PROC _glConvolutionParameterxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCONVOLUTIONPARAMETERXVOES_PROC _glConvolutionParameterxvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEVALCOORD1XOES_PROC _glEvalCoord1xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEVALCOORD1XVOES_PROC _glEvalCoord1xvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEVALCOORD2XOES_PROC _glEvalCoord2xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEVALCOORD2XVOES_PROC _glEvalCoord2xvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFEEDBACKBUFFERXOES_PROC _glFeedbackBufferxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCONVOLUTIONPARAMETERXVOES_PROC _glGetConvolutionParameterxvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETHISTOGRAMPARAMETERXVOES_PROC _glGetHistogramParameterxvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETLIGHTXOES_PROC _glGetLightxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMAPXVOES_PROC _glGetMapxvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMATERIALXOES_PROC _glGetMaterialxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPIXELMAPXV_PROC _glGetPixelMapxv_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXGENXVOES_PROC _glGetTexGenxvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXLEVELPARAMETERXVOES_PROC _glGetTexLevelParameterxvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINDEXXOES_PROC _glIndexxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINDEXXVOES_PROC _glIndexxvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLOADTRANSPOSEMATRIXXOES_PROC _glLoadTransposeMatrixxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAP1XOES_PROC _glMap1xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAP2XOES_PROC _glMap2xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAPGRID1XOES_PROC _glMapGrid1xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAPGRID2XOES_PROC _glMapGrid2xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTTRANSPOSEMATRIXXOES_PROC _glMultTransposeMatrixxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD1XOES_PROC _glMultiTexCoord1xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD1XVOES_PROC _glMultiTexCoord1xvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2XOES_PROC _glMultiTexCoord2xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2XVOES_PROC _glMultiTexCoord2xvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3XOES_PROC _glMultiTexCoord3xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3XVOES_PROC _glMultiTexCoord3xvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4XVOES_PROC _glMultiTexCoord4xvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMAL3XVOES_PROC _glNormal3xvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPASSTHROUGHXOES_PROC _glPassThroughxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPIXELMAPX_PROC _glPixelMapx_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPIXELSTOREX_PROC _glPixelStorex_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPIXELTRANSFERXOES_PROC _glPixelTransferxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPIXELZOOMXOES_PROC _glPixelZoomxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPRIORITIZETEXTURESXOES_PROC _glPrioritizeTexturesxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS2XOES_PROC _glRasterPos2xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS2XVOES_PROC _glRasterPos2xvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS3XOES_PROC _glRasterPos3xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS3XVOES_PROC _glRasterPos3xvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS4XOES_PROC _glRasterPos4xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRASTERPOS4XVOES_PROC _glRasterPos4xvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRECTXOES_PROC _glRectxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRECTXVOES_PROC _glRectxvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD1XOES_PROC _glTexCoord1xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD1XVOES_PROC _glTexCoord1xvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2XOES_PROC _glTexCoord2xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2XVOES_PROC _glTexCoord2xvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD3XOES_PROC _glTexCoord3xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD3XVOES_PROC _glTexCoord3xvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD4XOES_PROC _glTexCoord4xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD4XVOES_PROC _glTexCoord4xvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXGENXOES_PROC _glTexGenxOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXGENXVOES_PROC _glTexGenxvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX2XOES_PROC _glVertex2xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX2XVOES_PROC _glVertex2xvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX3XOES_PROC _glVertex3xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX3XVOES_PROC _glVertex3xvOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX4XOES_PROC _glVertex4xOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX4XVOES_PROC _glVertex4xvOES_ GL_FUNC_DEF2;

// functions inline wrap
inline void glAlphaFuncxOES (GLenum func, GLfixed ref) { return _glAlphaFuncxOES_(func, ref); };
inline void glClearColorxOES (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { return _glClearColorxOES_(red, green, blue, alpha); };
inline void glClearDepthxOES (GLfixed depth) { return _glClearDepthxOES_(depth); };
inline void glClipPlanexOES (GLenum plane, const GLfixed * equation) { return _glClipPlanexOES_(plane, equation); };
inline void glColor4xOES (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { return _glColor4xOES_(red, green, blue, alpha); };
inline void glDepthRangexOES (GLfixed n, GLfixed f) { return _glDepthRangexOES_(n, f); };
inline void glFogxOES (GLenum pname, GLfixed param) { return _glFogxOES_(pname, param); };
inline void glFogxvOES (GLenum pname, const GLfixed * param) { return _glFogxvOES_(pname, param); };
inline void glFrustumxOES (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { return _glFrustumxOES_(l, r, b, t, n, f); };
inline void glGetClipPlanexOES (GLenum plane, GLfixed * equation) { return _glGetClipPlanexOES_(plane, equation); };
inline void glGetFixedvOES (GLenum pname, GLfixed * params) { return _glGetFixedvOES_(pname, params); };
inline void glGetTexEnvxvOES (GLenum target, GLenum pname, GLfixed * params) { return _glGetTexEnvxvOES_(target, pname, params); };
inline void glGetTexParameterxvOES (GLenum target, GLenum pname, GLfixed * params) { return _glGetTexParameterxvOES_(target, pname, params); };
inline void glLightModelxOES (GLenum pname, GLfixed param) { return _glLightModelxOES_(pname, param); };
inline void glLightModelxvOES (GLenum pname, const GLfixed * param) { return _glLightModelxvOES_(pname, param); };
inline void glLightxOES (GLenum light, GLenum pname, GLfixed param) { return _glLightxOES_(light, pname, param); };
inline void glLightxvOES (GLenum light, GLenum pname, const GLfixed * params) { return _glLightxvOES_(light, pname, params); };
inline void glLineWidthxOES (GLfixed width) { return _glLineWidthxOES_(width); };
inline void glLoadMatrixxOES (const GLfixed * m) { return _glLoadMatrixxOES_(m); };
inline void glMaterialxOES (GLenum face, GLenum pname, GLfixed param) { return _glMaterialxOES_(face, pname, param); };
inline void glMaterialxvOES (GLenum face, GLenum pname, const GLfixed * param) { return _glMaterialxvOES_(face, pname, param); };
inline void glMultMatrixxOES (const GLfixed * m) { return _glMultMatrixxOES_(m); };
inline void glMultiTexCoord4xOES (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) { return _glMultiTexCoord4xOES_(texture, s, t, r, q); };
inline void glNormal3xOES (GLfixed nx, GLfixed ny, GLfixed nz) { return _glNormal3xOES_(nx, ny, nz); };
inline void glOrthoxOES (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { return _glOrthoxOES_(l, r, b, t, n, f); };
inline void glPointParameterxvOES (GLenum pname, const GLfixed * params) { return _glPointParameterxvOES_(pname, params); };
inline void glPointSizexOES (GLfixed size) { return _glPointSizexOES_(size); };
inline void glPolygonOffsetxOES (GLfixed factor, GLfixed units) { return _glPolygonOffsetxOES_(factor, units); };
inline void glRotatexOES (GLfixed angle, GLfixed x, GLfixed y, GLfixed z) { return _glRotatexOES_(angle, x, y, z); };
inline void glScalexOES (GLfixed x, GLfixed y, GLfixed z) { return _glScalexOES_(x, y, z); };
inline void glTexEnvxOES (GLenum target, GLenum pname, GLfixed param) { return _glTexEnvxOES_(target, pname, param); };
inline void glTexEnvxvOES (GLenum target, GLenum pname, const GLfixed * params) { return _glTexEnvxvOES_(target, pname, params); };
inline void glTexParameterxOES (GLenum target, GLenum pname, GLfixed param) { return _glTexParameterxOES_(target, pname, param); };
inline void glTexParameterxvOES (GLenum target, GLenum pname, const GLfixed * params) { return _glTexParameterxvOES_(target, pname, params); };
inline void glTranslatexOES (GLfixed x, GLfixed y, GLfixed z) { return _glTranslatexOES_(x, y, z); };
inline void glAccumxOES (GLenum op, GLfixed value) { return _glAccumxOES_(op, value); };
inline void glBitmapxOES (GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte * bitmap) { return _glBitmapxOES_(width, height, xorig, yorig, xmove, ymove, bitmap); };
inline void glBlendColorxOES (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { return _glBlendColorxOES_(red, green, blue, alpha); };
inline void glClearAccumxOES (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { return _glClearAccumxOES_(red, green, blue, alpha); };
inline void glColor3xOES (GLfixed red, GLfixed green, GLfixed blue) { return _glColor3xOES_(red, green, blue); };
inline void glColor3xvOES (const GLfixed * components) { return _glColor3xvOES_(components); };
inline void glColor4xvOES (const GLfixed * components) { return _glColor4xvOES_(components); };
inline void glConvolutionParameterxOES (GLenum target, GLenum pname, GLfixed param) { return _glConvolutionParameterxOES_(target, pname, param); };
inline void glConvolutionParameterxvOES (GLenum target, GLenum pname, const GLfixed * params) { return _glConvolutionParameterxvOES_(target, pname, params); };
inline void glEvalCoord1xOES (GLfixed u) { return _glEvalCoord1xOES_(u); };
inline void glEvalCoord1xvOES (const GLfixed * coords) { return _glEvalCoord1xvOES_(coords); };
inline void glEvalCoord2xOES (GLfixed u, GLfixed v) { return _glEvalCoord2xOES_(u, v); };
inline void glEvalCoord2xvOES (const GLfixed * coords) { return _glEvalCoord2xvOES_(coords); };
inline void glFeedbackBufferxOES (GLsizei n, GLenum type, const GLfixed * buffer) { return _glFeedbackBufferxOES_(n, type, buffer); };
inline void glGetConvolutionParameterxvOES (GLenum target, GLenum pname, GLfixed * params) { return _glGetConvolutionParameterxvOES_(target, pname, params); };
inline void glGetHistogramParameterxvOES (GLenum target, GLenum pname, GLfixed * params) { return _glGetHistogramParameterxvOES_(target, pname, params); };
inline void glGetLightxOES (GLenum light, GLenum pname, GLfixed * params) { return _glGetLightxOES_(light, pname, params); };
inline void glGetMapxvOES (GLenum target, GLenum query, GLfixed * v) { return _glGetMapxvOES_(target, query, v); };
inline void glGetMaterialxOES (GLenum face, GLenum pname, GLfixed param) { return _glGetMaterialxOES_(face, pname, param); };
inline void glGetPixelMapxv (GLenum map, GLint size, GLfixed * values) { return _glGetPixelMapxv_(map, size, values); };
inline void glGetTexGenxvOES (GLenum coord, GLenum pname, GLfixed * params) { return _glGetTexGenxvOES_(coord, pname, params); };
inline void glGetTexLevelParameterxvOES (GLenum target, GLint level, GLenum pname, GLfixed * params) { return _glGetTexLevelParameterxvOES_(target, level, pname, params); };
inline void glIndexxOES (GLfixed component) { return _glIndexxOES_(component); };
inline void glIndexxvOES (const GLfixed * component) { return _glIndexxvOES_(component); };
inline void glLoadTransposeMatrixxOES (const GLfixed * m) { return _glLoadTransposeMatrixxOES_(m); };
inline void glMap1xOES (GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points) { return _glMap1xOES_(target, u1, u2, stride, order, points); };
inline void glMap2xOES (GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points) { return _glMap2xOES_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); };
inline void glMapGrid1xOES (GLint n, GLfixed u1, GLfixed u2) { return _glMapGrid1xOES_(n, u1, u2); };
inline void glMapGrid2xOES (GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2) { return _glMapGrid2xOES_(n, u1, u2, v1, v2); };
inline void glMultTransposeMatrixxOES (const GLfixed * m) { return _glMultTransposeMatrixxOES_(m); };
inline void glMultiTexCoord1xOES (GLenum texture, GLfixed s) { return _glMultiTexCoord1xOES_(texture, s); };
inline void glMultiTexCoord1xvOES (GLenum texture, const GLfixed * coords) { return _glMultiTexCoord1xvOES_(texture, coords); };
inline void glMultiTexCoord2xOES (GLenum texture, GLfixed s, GLfixed t) { return _glMultiTexCoord2xOES_(texture, s, t); };
inline void glMultiTexCoord2xvOES (GLenum texture, const GLfixed * coords) { return _glMultiTexCoord2xvOES_(texture, coords); };
inline void glMultiTexCoord3xOES (GLenum texture, GLfixed s, GLfixed t, GLfixed r) { return _glMultiTexCoord3xOES_(texture, s, t, r); };
inline void glMultiTexCoord3xvOES (GLenum texture, const GLfixed * coords) { return _glMultiTexCoord3xvOES_(texture, coords); };
inline void glMultiTexCoord4xvOES (GLenum texture, const GLfixed * coords) { return _glMultiTexCoord4xvOES_(texture, coords); };
inline void glNormal3xvOES (const GLfixed * coords) { return _glNormal3xvOES_(coords); };
inline void glPassThroughxOES (GLfixed token) { return _glPassThroughxOES_(token); };
inline void glPixelMapx (GLenum map, GLint size, const GLfixed * values) { return _glPixelMapx_(map, size, values); };
inline void glPixelStorex (GLenum pname, GLfixed param) { return _glPixelStorex_(pname, param); };
inline void glPixelTransferxOES (GLenum pname, GLfixed param) { return _glPixelTransferxOES_(pname, param); };
inline void glPixelZoomxOES (GLfixed xfactor, GLfixed yfactor) { return _glPixelZoomxOES_(xfactor, yfactor); };
inline void glPrioritizeTexturesxOES (GLsizei n, const GLuint * textures, const GLfixed * priorities) { return _glPrioritizeTexturesxOES_(n, textures, priorities); };
inline void glRasterPos2xOES (GLfixed x, GLfixed y) { return _glRasterPos2xOES_(x, y); };
inline void glRasterPos2xvOES (const GLfixed * coords) { return _glRasterPos2xvOES_(coords); };
inline void glRasterPos3xOES (GLfixed x, GLfixed y, GLfixed z) { return _glRasterPos3xOES_(x, y, z); };
inline void glRasterPos3xvOES (const GLfixed * coords) { return _glRasterPos3xvOES_(coords); };
inline void glRasterPos4xOES (GLfixed x, GLfixed y, GLfixed z, GLfixed w) { return _glRasterPos4xOES_(x, y, z, w); };
inline void glRasterPos4xvOES (const GLfixed * coords) { return _glRasterPos4xvOES_(coords); };
inline void glRectxOES (GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2) { return _glRectxOES_(x1, y1, x2, y2); };
inline void glRectxvOES (const GLfixed * v1, const GLfixed * v2) { return _glRectxvOES_(v1, v2); };
inline void glTexCoord1xOES (GLfixed s) { return _glTexCoord1xOES_(s); };
inline void glTexCoord1xvOES (const GLfixed * coords) { return _glTexCoord1xvOES_(coords); };
inline void glTexCoord2xOES (GLfixed s, GLfixed t) { return _glTexCoord2xOES_(s, t); };
inline void glTexCoord2xvOES (const GLfixed * coords) { return _glTexCoord2xvOES_(coords); };
inline void glTexCoord3xOES (GLfixed s, GLfixed t, GLfixed r) { return _glTexCoord3xOES_(s, t, r); };
inline void glTexCoord3xvOES (const GLfixed * coords) { return _glTexCoord3xvOES_(coords); };
inline void glTexCoord4xOES (GLfixed s, GLfixed t, GLfixed r, GLfixed q) { return _glTexCoord4xOES_(s, t, r, q); };
inline void glTexCoord4xvOES (const GLfixed * coords) { return _glTexCoord4xvOES_(coords); };
inline void glTexGenxOES (GLenum coord, GLenum pname, GLfixed param) { return _glTexGenxOES_(coord, pname, param); };
inline void glTexGenxvOES (GLenum coord, GLenum pname, const GLfixed * params) { return _glTexGenxvOES_(coord, pname, params); };
inline void glVertex2xOES (GLfixed x) { return _glVertex2xOES_(x); };
inline void glVertex2xvOES (const GLfixed * coords) { return _glVertex2xvOES_(coords); };
inline void glVertex3xOES (GLfixed x, GLfixed y) { return _glVertex3xOES_(x, y); };
inline void glVertex3xvOES (const GLfixed * coords) { return _glVertex3xvOES_(coords); };
inline void glVertex4xOES (GLfixed x, GLfixed y, GLfixed z) { return _glVertex4xOES_(x, y, z); };
inline void glVertex4xvOES (const GLfixed * coords) { return _glVertex4xvOES_(coords); };
#endif //GL_OES_fixed_point

#ifndef GL_OES_query_matrix

// functions typedefs
typedef GLbitfield (APIENTRYP PFN_GLQUERYMATRIXXOES_PROC) (GLfixed * mantissa, GLint * exponent);

// functions typedefs
GL_FUNC_DEF PFN_GLQUERYMATRIXXOES_PROC _glQueryMatrixxOES_ GL_FUNC_DEF2;

// functions inline wrap
inline GLbitfield glQueryMatrixxOES (GLfixed * mantissa, GLint * exponent) { return _glQueryMatrixxOES_(mantissa, exponent); };
#endif //GL_OES_query_matrix

#ifndef GL_OES_read_format

// Defines
#define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES 0x8B9A 
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES 0x8B9B 
#endif //GL_OES_read_format

#ifndef GL_OES_single_precision

// functions typedefs
typedef void (APIENTRYP PFN_GLCLEARDEPTHFOES_PROC) (GLclampf depth);
typedef void (APIENTRYP PFN_GLCLIPPLANEFOES_PROC) (GLenum plane, const GLfloat * equation);
typedef void (APIENTRYP PFN_GLDEPTHRANGEFOES_PROC) (GLclampf n, GLclampf f);
typedef void (APIENTRYP PFN_GLFRUSTUMFOES_PROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
typedef void (APIENTRYP PFN_GLGETCLIPPLANEFOES_PROC) (GLenum plane, GLfloat * equation);
typedef void (APIENTRYP PFN_GLORTHOFOES_PROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);

// functions typedefs
GL_FUNC_DEF PFN_GLCLEARDEPTHFOES_PROC _glClearDepthfOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLIPPLANEFOES_PROC _glClipPlanefOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDEPTHRANGEFOES_PROC _glDepthRangefOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRUSTUMFOES_PROC _glFrustumfOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCLIPPLANEFOES_PROC _glGetClipPlanefOES_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLORTHOFOES_PROC _glOrthofOES_ GL_FUNC_DEF2;

// functions inline wrap
inline void glClearDepthfOES (GLclampf depth) { return _glClearDepthfOES_(depth); };
inline void glClipPlanefOES (GLenum plane, const GLfloat * equation) { return _glClipPlanefOES_(plane, equation); };
inline void glDepthRangefOES (GLclampf n, GLclampf f) { return _glDepthRangefOES_(n, f); };
inline void glFrustumfOES (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { return _glFrustumfOES_(l, r, b, t, n, f); };
inline void glGetClipPlanefOES (GLenum plane, GLfloat * equation) { return _glGetClipPlanefOES_(plane, equation); };
inline void glOrthofOES (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { return _glOrthofOES_(l, r, b, t, n, f); };
#endif //GL_OES_single_precision

#ifndef GL_3DFX_multisample

// Defines
#define GL_MULTISAMPLE_3DFX               0x86B2 
#define GL_SAMPLE_BUFFERS_3DFX            0x86B3 
#define GL_SAMPLES_3DFX                   0x86B4 
#define GL_MULTISAMPLE_BIT_3DFX           0x20000000 
#endif //GL_3DFX_multisample

#ifndef GL_3DFX_tbuffer

// functions typedefs
typedef void (APIENTRYP PFN_GLTBUFFERMASK3DFX_PROC) (GLuint mask);

// functions typedefs
GL_FUNC_DEF PFN_GLTBUFFERMASK3DFX_PROC _glTbufferMask3DFX_ GL_FUNC_DEF2;

// functions inline wrap
inline void glTbufferMask3DFX (GLuint mask) { return _glTbufferMask3DFX_(mask); };
#endif //GL_3DFX_tbuffer

#ifndef GL_3DFX_texture_compression_FXT1

// Defines
#define GL_COMPRESSED_RGB_FXT1_3DFX       0x86B0 
#define GL_COMPRESSED_RGBA_FXT1_3DFX      0x86B1 
#endif //GL_3DFX_texture_compression_FXT1

// GL_AMD_blend_minmax_factor

// GL_AMD_conservative_depth

#ifndef GL_AMD_debug_output

// Defines
#define GL_MAX_DEBUG_MESSAGE_LENGTH_AMD   0x9143 
#define GL_MAX_DEBUG_LOGGED_MESSAGES_AMD  0x9144 
#define GL_DEBUG_LOGGED_MESSAGES_AMD      0x9145 
#define GL_DEBUG_SEVERITY_HIGH_AMD        0x9146 
#define GL_DEBUG_SEVERITY_MEDIUM_AMD      0x9147 
#define GL_DEBUG_SEVERITY_LOW_AMD         0x9148 
#define GL_DEBUG_CATEGORY_API_ERROR_AMD   0x9149 
#define GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD 0x914A 
#define GL_DEBUG_CATEGORY_DEPRECATION_AMD 0x914B 
#define GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD 0x914C 
#define GL_DEBUG_CATEGORY_PERFORMANCE_AMD 0x914D 
#define GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD 0x914E 
#define GL_DEBUG_CATEGORY_APPLICATION_AMD 0x914F 
#define GL_DEBUG_CATEGORY_OTHER_AMD       0x9150 

// functions typedefs
typedef void (APIENTRYP PFN_GLDEBUGMESSAGEENABLEAMD_PROC) (GLenum category, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
typedef void (APIENTRYP PFN_GLDEBUGMESSAGEINSERTAMD_PROC) (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar * buf);
typedef void (APIENTRYP PFN_GLDEBUGMESSAGECALLBACKAMD_PROC) (GLDEBUGPROCAMD callback, void * userParam);
typedef GLuint (APIENTRYP PFN_GLGETDEBUGMESSAGELOGAMD_PROC) (GLuint count, GLsizei bufSize, GLenum * categories, GLuint * severities, GLuint * ids, GLsizei * lengths, GLchar * message);

// functions typedefs
GL_FUNC_DEF PFN_GLDEBUGMESSAGEENABLEAMD_PROC _glDebugMessageEnableAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDEBUGMESSAGEINSERTAMD_PROC _glDebugMessageInsertAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDEBUGMESSAGECALLBACKAMD_PROC _glDebugMessageCallbackAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETDEBUGMESSAGELOGAMD_PROC _glGetDebugMessageLogAMD_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDebugMessageEnableAMD (GLenum category, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { return _glDebugMessageEnableAMD_(category, severity, count, ids, enabled); };
inline void glDebugMessageInsertAMD (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar * buf) { return _glDebugMessageInsertAMD_(category, severity, id, length, buf); };
inline void glDebugMessageCallbackAMD (GLDEBUGPROCAMD callback, void * userParam) { return _glDebugMessageCallbackAMD_(callback, userParam); };
inline GLuint glGetDebugMessageLogAMD (GLuint count, GLsizei bufSize, GLenum * categories, GLuint * severities, GLuint * ids, GLsizei * lengths, GLchar * message) { return _glGetDebugMessageLogAMD_(count, bufSize, categories, severities, ids, lengths, message); };
#endif //GL_AMD_debug_output

#ifndef GL_AMD_depth_clamp_separate

// Defines
#define GL_DEPTH_CLAMP_NEAR_AMD           0x901E 
#define GL_DEPTH_CLAMP_FAR_AMD            0x901F 
#endif //GL_AMD_depth_clamp_separate

#ifndef GL_AMD_draw_buffers_blend

// functions typedefs
typedef void (APIENTRYP PFN_GLBLENDFUNCINDEXEDAMD_PROC) (GLuint buf, GLenum src, GLenum dst);
typedef void (APIENTRYP PFN_GLBLENDFUNCSEPARATEINDEXEDAMD_PROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (APIENTRYP PFN_GLBLENDEQUATIONINDEXEDAMD_PROC) (GLuint buf, GLenum mode);
typedef void (APIENTRYP PFN_GLBLENDEQUATIONSEPARATEINDEXEDAMD_PROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);

// functions typedefs
GL_FUNC_DEF PFN_GLBLENDFUNCINDEXEDAMD_PROC _glBlendFuncIndexedAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBLENDFUNCSEPARATEINDEXEDAMD_PROC _glBlendFuncSeparateIndexedAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBLENDEQUATIONINDEXEDAMD_PROC _glBlendEquationIndexedAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBLENDEQUATIONSEPARATEINDEXEDAMD_PROC _glBlendEquationSeparateIndexedAMD_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBlendFuncIndexedAMD (GLuint buf, GLenum src, GLenum dst) { return _glBlendFuncIndexedAMD_(buf, src, dst); };
inline void glBlendFuncSeparateIndexedAMD (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { return _glBlendFuncSeparateIndexedAMD_(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); };
inline void glBlendEquationIndexedAMD (GLuint buf, GLenum mode) { return _glBlendEquationIndexedAMD_(buf, mode); };
inline void glBlendEquationSeparateIndexedAMD (GLuint buf, GLenum modeRGB, GLenum modeAlpha) { return _glBlendEquationSeparateIndexedAMD_(buf, modeRGB, modeAlpha); };
#endif //GL_AMD_draw_buffers_blend

#ifndef GL_AMD_framebuffer_sample_positions

// Defines
#define GL_SUBSAMPLE_DISTANCE_AMD         0x883F 
#define GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD 0x91AE 
#define GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD 0x91AF 
#define GL_ALL_PIXELS_AMD                 0xFFFFFFFF 

// functions typedefs
typedef void (APIENTRYP PFN_GLFRAMEBUFFERSAMPLEPOSITIONSFVAMD_PROC) (GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat * values);
typedef void (APIENTRYP PFN_GLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMD_PROC) (GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat * values);
typedef void (APIENTRYP PFN_GLGETFRAMEBUFFERPARAMETERFVAMD_PROC) (GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat * values);
typedef void (APIENTRYP PFN_GLGETNAMEDFRAMEBUFFERPARAMETERFVAMD_PROC) (GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat * values);

// functions typedefs
GL_FUNC_DEF PFN_GLFRAMEBUFFERSAMPLEPOSITIONSFVAMD_PROC _glFramebufferSamplePositionsfvAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMD_PROC _glNamedFramebufferSamplePositionsfvAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFRAMEBUFFERPARAMETERFVAMD_PROC _glGetFramebufferParameterfvAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETNAMEDFRAMEBUFFERPARAMETERFVAMD_PROC _glGetNamedFramebufferParameterfvAMD_ GL_FUNC_DEF2;

// functions inline wrap
inline void glFramebufferSamplePositionsfvAMD (GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat * values) { return _glFramebufferSamplePositionsfvAMD_(target, numsamples, pixelindex, values); };
inline void glNamedFramebufferSamplePositionsfvAMD (GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat * values) { return _glNamedFramebufferSamplePositionsfvAMD_(framebuffer, numsamples, pixelindex, values); };
inline void glGetFramebufferParameterfvAMD (GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat * values) { return _glGetFramebufferParameterfvAMD_(target, pname, numsamples, pixelindex, size, values); };
inline void glGetNamedFramebufferParameterfvAMD (GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat * values) { return _glGetNamedFramebufferParameterfvAMD_(framebuffer, pname, numsamples, pixelindex, size, values); };
#endif //GL_AMD_framebuffer_sample_positions

// GL_AMD_gcn_shader

#ifndef GL_AMD_gpu_shader_half_float

// Defines
#define GL_FLOAT16_MAT2_AMD               0x91C5 
#define GL_FLOAT16_MAT3_AMD               0x91C6 
#define GL_FLOAT16_MAT4_AMD               0x91C7 
#define GL_FLOAT16_MAT2x3_AMD             0x91C8 
#define GL_FLOAT16_MAT2x4_AMD             0x91C9 
#define GL_FLOAT16_MAT3x2_AMD             0x91CA 
#define GL_FLOAT16_MAT3x4_AMD             0x91CB 
#define GL_FLOAT16_MAT4x2_AMD             0x91CC 
#define GL_FLOAT16_MAT4x3_AMD             0x91CD 
#endif //GL_AMD_gpu_shader_half_float

// GL_AMD_gpu_shader_int16

// GL_AMD_gpu_shader_int64

#ifndef GL_AMD_interleaved_elements

// Defines
#define GL_VERTEX_ELEMENT_SWIZZLE_AMD     0x91A4 
#define GL_VERTEX_ID_SWIZZLE_AMD          0x91A5 

// functions typedefs
typedef void (APIENTRYP PFN_GLVERTEXATTRIBPARAMETERIAMD_PROC) (GLuint index, GLenum pname, GLint param);

// functions typedefs
GL_FUNC_DEF PFN_GLVERTEXATTRIBPARAMETERIAMD_PROC _glVertexAttribParameteriAMD_ GL_FUNC_DEF2;

// functions inline wrap
inline void glVertexAttribParameteriAMD (GLuint index, GLenum pname, GLint param) { return _glVertexAttribParameteriAMD_(index, pname, param); };
#endif //GL_AMD_interleaved_elements

#ifndef GL_AMD_multi_draw_indirect

// functions typedefs
typedef void (APIENTRYP PFN_GLMULTIDRAWARRAYSINDIRECTAMD_PROC) (GLenum mode, const void * indirect, GLsizei primcount, GLsizei stride);
typedef void (APIENTRYP PFN_GLMULTIDRAWELEMENTSINDIRECTAMD_PROC) (GLenum mode, GLenum type, const void * indirect, GLsizei primcount, GLsizei stride);

// functions typedefs
GL_FUNC_DEF PFN_GLMULTIDRAWARRAYSINDIRECTAMD_PROC _glMultiDrawArraysIndirectAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTIDRAWELEMENTSINDIRECTAMD_PROC _glMultiDrawElementsIndirectAMD_ GL_FUNC_DEF2;

// functions inline wrap
inline void glMultiDrawArraysIndirectAMD (GLenum mode, const void * indirect, GLsizei primcount, GLsizei stride) { return _glMultiDrawArraysIndirectAMD_(mode, indirect, primcount, stride); };
inline void glMultiDrawElementsIndirectAMD (GLenum mode, GLenum type, const void * indirect, GLsizei primcount, GLsizei stride) { return _glMultiDrawElementsIndirectAMD_(mode, type, indirect, primcount, stride); };
#endif //GL_AMD_multi_draw_indirect

#ifndef GL_AMD_name_gen_delete

// Defines
#define GL_DATA_BUFFER_AMD                0x9151 
#define GL_PERFORMANCE_MONITOR_AMD        0x9152 
#define GL_QUERY_OBJECT_AMD               0x9153 
#define GL_VERTEX_ARRAY_OBJECT_AMD        0x9154 
#define GL_SAMPLER_OBJECT_AMD             0x9155 

// functions typedefs
typedef void (APIENTRYP PFN_GLGENNAMESAMD_PROC) (GLenum identifier, GLuint num, GLuint * names);
typedef void (APIENTRYP PFN_GLDELETENAMESAMD_PROC) (GLenum identifier, GLuint num, const GLuint * names);
typedef GLboolean (APIENTRYP PFN_GLISNAMEAMD_PROC) (GLenum identifier, GLuint name);

// functions typedefs
GL_FUNC_DEF PFN_GLGENNAMESAMD_PROC _glGenNamesAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETENAMESAMD_PROC _glDeleteNamesAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISNAMEAMD_PROC _glIsNameAMD_ GL_FUNC_DEF2;

// functions inline wrap
inline void glGenNamesAMD (GLenum identifier, GLuint num, GLuint * names) { return _glGenNamesAMD_(identifier, num, names); };
inline void glDeleteNamesAMD (GLenum identifier, GLuint num, const GLuint * names) { return _glDeleteNamesAMD_(identifier, num, names); };
inline GLboolean glIsNameAMD (GLenum identifier, GLuint name) { return _glIsNameAMD_(identifier, name); };
#endif //GL_AMD_name_gen_delete

#ifndef GL_AMD_occlusion_query_event

// Defines
#define GL_OCCLUSION_QUERY_EVENT_MASK_AMD 0x874F 
#define GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD 0x00000001 
#define GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD 0x00000002 
#define GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD 0x00000004 
#define GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD 0x00000008 
#define GL_QUERY_ALL_EVENT_BITS_AMD       0xFFFFFFFF 

// functions typedefs
typedef void (APIENTRYP PFN_GLQUERYOBJECTPARAMETERUIAMD_PROC) (GLenum target, GLuint id, GLenum pname, GLuint param);

// functions typedefs
GL_FUNC_DEF PFN_GLQUERYOBJECTPARAMETERUIAMD_PROC _glQueryObjectParameteruiAMD_ GL_FUNC_DEF2;

// functions inline wrap
inline void glQueryObjectParameteruiAMD (GLenum target, GLuint id, GLenum pname, GLuint param) { return _glQueryObjectParameteruiAMD_(target, id, pname, param); };
#endif //GL_AMD_occlusion_query_event

#ifndef GL_AMD_pinned_memory

// Defines
#define GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD 0x9160 
#endif //GL_AMD_pinned_memory

#ifndef GL_AMD_query_buffer_object

// Defines
#define GL_QUERY_BUFFER_AMD               0x9192 
#define GL_QUERY_BUFFER_BINDING_AMD       0x9193 
#define GL_QUERY_RESULT_NO_WAIT_AMD       0x9194 
#endif //GL_AMD_query_buffer_object

#ifndef GL_AMD_sample_positions

// functions typedefs
typedef void (APIENTRYP PFN_GLSETMULTISAMPLEFVAMD_PROC) (GLenum pname, GLuint index, const GLfloat * val);

// functions typedefs
GL_FUNC_DEF PFN_GLSETMULTISAMPLEFVAMD_PROC _glSetMultisamplefvAMD_ GL_FUNC_DEF2;

// functions inline wrap
inline void glSetMultisamplefvAMD (GLenum pname, GLuint index, const GLfloat * val) { return _glSetMultisamplefvAMD_(pname, index, val); };
#endif //GL_AMD_sample_positions

// GL_AMD_seamless_cubemap_per_texture

// GL_AMD_shader_atomic_counter_ops

// GL_AMD_shader_ballot

// GL_AMD_shader_explicit_vertex_parameter

// GL_AMD_shader_gpu_shader_half_float_fetch

// GL_AMD_shader_image_load_store_lod

// GL_AMD_shader_stencil_export

// GL_AMD_shader_trinary_minmax

#ifndef GL_AMD_sparse_texture

// Defines
#define GL_VIRTUAL_PAGE_SIZE_X_AMD        0x9195 
#define GL_VIRTUAL_PAGE_SIZE_Y_AMD        0x9196 
#define GL_VIRTUAL_PAGE_SIZE_Z_AMD        0x9197 
#define GL_MAX_SPARSE_TEXTURE_SIZE_AMD    0x9198 
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD 0x9199 
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS 0x919A 
#define GL_MIN_SPARSE_LEVEL_AMD           0x919B 
#define GL_MIN_LOD_WARNING_AMD            0x919C 
#define GL_TEXTURE_STORAGE_SPARSE_BIT_AMD 0x00000001 

// functions typedefs
typedef void (APIENTRYP PFN_GLTEXSTORAGESPARSEAMD_PROC) (GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
typedef void (APIENTRYP PFN_GLTEXTURESTORAGESPARSEAMD_PROC) (GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);

// functions typedefs
GL_FUNC_DEF PFN_GLTEXSTORAGESPARSEAMD_PROC _glTexStorageSparseAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESTORAGESPARSEAMD_PROC _glTextureStorageSparseAMD_ GL_FUNC_DEF2;

// functions inline wrap
inline void glTexStorageSparseAMD (GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) { return _glTexStorageSparseAMD_(target, internalFormat, width, height, depth, layers, flags); };
inline void glTextureStorageSparseAMD (GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) { return _glTextureStorageSparseAMD_(texture, target, internalFormat, width, height, depth, layers, flags); };
#endif //GL_AMD_sparse_texture

#ifndef GL_AMD_stencil_operation_extended

// Defines
#define GL_SET_AMD                        0x874A 
#define GL_REPLACE_VALUE_AMD              0x874B 
#define GL_STENCIL_OP_VALUE_AMD           0x874C 
#define GL_STENCIL_BACK_OP_VALUE_AMD      0x874D 

// functions typedefs
typedef void (APIENTRYP PFN_GLSTENCILOPVALUEAMD_PROC) (GLenum face, GLuint value);

// functions typedefs
GL_FUNC_DEF PFN_GLSTENCILOPVALUEAMD_PROC _glStencilOpValueAMD_ GL_FUNC_DEF2;

// functions inline wrap
inline void glStencilOpValueAMD (GLenum face, GLuint value) { return _glStencilOpValueAMD_(face, value); };
#endif //GL_AMD_stencil_operation_extended

// GL_AMD_texture_gather_bias_lod

// GL_AMD_texture_texture4

// GL_AMD_transform_feedback3_lines_triangles

#ifndef GL_AMD_transform_feedback4

// Defines
#define GL_STREAM_RASTERIZATION_AMD       0x91A0 
#endif //GL_AMD_transform_feedback4

// GL_AMD_vertex_shader_layer

#ifndef GL_AMD_vertex_shader_tessellator

// Defines
#define GL_SAMPLER_BUFFER_AMD             0x9001 
#define GL_INT_SAMPLER_BUFFER_AMD         0x9002 
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD 0x9003 
#define GL_TESSELLATION_MODE_AMD          0x9004 
#define GL_TESSELLATION_FACTOR_AMD        0x9005 
#define GL_DISCRETE_AMD                   0x9006 
#define GL_CONTINUOUS_AMD                 0x9007 

// functions typedefs
typedef void (APIENTRYP PFN_GLTESSELLATIONFACTORAMD_PROC) (GLfloat factor);
typedef void (APIENTRYP PFN_GLTESSELLATIONMODEAMD_PROC) (GLenum mode);

// functions typedefs
GL_FUNC_DEF PFN_GLTESSELLATIONFACTORAMD_PROC _glTessellationFactorAMD_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTESSELLATIONMODEAMD_PROC _glTessellationModeAMD_ GL_FUNC_DEF2;

// functions inline wrap
inline void glTessellationFactorAMD (GLfloat factor) { return _glTessellationFactorAMD_(factor); };
inline void glTessellationModeAMD (GLenum mode) { return _glTessellationModeAMD_(mode); };
#endif //GL_AMD_vertex_shader_tessellator

// GL_AMD_vertex_shader_viewport_index

#ifndef GL_APPLE_aux_depth_stencil

// Defines
#define GL_AUX_DEPTH_STENCIL_APPLE        0x8A14 
#endif //GL_APPLE_aux_depth_stencil

#ifndef GL_APPLE_client_storage

// Defines
#define GL_UNPACK_CLIENT_STORAGE_APPLE    0x85B2 
#endif //GL_APPLE_client_storage

#ifndef GL_APPLE_element_array

// Defines
#define GL_ELEMENT_ARRAY_APPLE            0x8A0C 
#define GL_ELEMENT_ARRAY_TYPE_APPLE       0x8A0D 
#define GL_ELEMENT_ARRAY_POINTER_APPLE    0x8A0E 

// functions typedefs
typedef void (APIENTRYP PFN_GLELEMENTPOINTERAPPLE_PROC) (GLenum type, const void * pointer);
typedef void (APIENTRYP PFN_GLDRAWELEMENTARRAYAPPLE_PROC) (GLenum mode, GLint first, GLsizei count);
typedef void (APIENTRYP PFN_GLDRAWRANGEELEMENTARRAYAPPLE_PROC) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
typedef void (APIENTRYP PFN_GLMULTIDRAWELEMENTARRAYAPPLE_PROC) (GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount);
typedef void (APIENTRYP PFN_GLMULTIDRAWRANGEELEMENTARRAYAPPLE_PROC) (GLenum mode, GLuint start, GLuint end, const GLint * first, const GLsizei * count, GLsizei primcount);

// functions typedefs
GL_FUNC_DEF PFN_GLELEMENTPOINTERAPPLE_PROC _glElementPointerAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWELEMENTARRAYAPPLE_PROC _glDrawElementArrayAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWRANGEELEMENTARRAYAPPLE_PROC _glDrawRangeElementArrayAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTIDRAWELEMENTARRAYAPPLE_PROC _glMultiDrawElementArrayAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTIDRAWRANGEELEMENTARRAYAPPLE_PROC _glMultiDrawRangeElementArrayAPPLE_ GL_FUNC_DEF2;

// functions inline wrap
inline void glElementPointerAPPLE (GLenum type, const void * pointer) { return _glElementPointerAPPLE_(type, pointer); };
inline void glDrawElementArrayAPPLE (GLenum mode, GLint first, GLsizei count) { return _glDrawElementArrayAPPLE_(mode, first, count); };
inline void glDrawRangeElementArrayAPPLE (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count) { return _glDrawRangeElementArrayAPPLE_(mode, start, end, first, count); };
inline void glMultiDrawElementArrayAPPLE (GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount) { return _glMultiDrawElementArrayAPPLE_(mode, first, count, primcount); };
inline void glMultiDrawRangeElementArrayAPPLE (GLenum mode, GLuint start, GLuint end, const GLint * first, const GLsizei * count, GLsizei primcount) { return _glMultiDrawRangeElementArrayAPPLE_(mode, start, end, first, count, primcount); };
#endif //GL_APPLE_element_array

#ifndef GL_APPLE_fence

// Defines
#define GL_DRAW_PIXELS_APPLE              0x8A0A 
#define GL_FENCE_APPLE                    0x8A0B 

// functions typedefs
typedef void (APIENTRYP PFN_GLGENFENCESAPPLE_PROC) (GLsizei n, GLuint * fences);
typedef void (APIENTRYP PFN_GLDELETEFENCESAPPLE_PROC) (GLsizei n, const GLuint * fences);
typedef void (APIENTRYP PFN_GLSETFENCEAPPLE_PROC) (GLuint fence);
typedef GLboolean (APIENTRYP PFN_GLISFENCEAPPLE_PROC) (GLuint fence);
typedef GLboolean (APIENTRYP PFN_GLTESTFENCEAPPLE_PROC) (GLuint fence);
typedef void (APIENTRYP PFN_GLFINISHFENCEAPPLE_PROC) (GLuint fence);
typedef GLboolean (APIENTRYP PFN_GLTESTOBJECTAPPLE_PROC) (GLenum object, GLuint name);
typedef void (APIENTRYP PFN_GLFINISHOBJECTAPPLE_PROC) (GLenum object, GLint name);

// functions typedefs
GL_FUNC_DEF PFN_GLGENFENCESAPPLE_PROC _glGenFencesAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEFENCESAPPLE_PROC _glDeleteFencesAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSETFENCEAPPLE_PROC _glSetFenceAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISFENCEAPPLE_PROC _glIsFenceAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTESTFENCEAPPLE_PROC _glTestFenceAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFINISHFENCEAPPLE_PROC _glFinishFenceAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTESTOBJECTAPPLE_PROC _glTestObjectAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFINISHOBJECTAPPLE_PROC _glFinishObjectAPPLE_ GL_FUNC_DEF2;

// functions inline wrap
inline void glGenFencesAPPLE (GLsizei n, GLuint * fences) { return _glGenFencesAPPLE_(n, fences); };
inline void glDeleteFencesAPPLE (GLsizei n, const GLuint * fences) { return _glDeleteFencesAPPLE_(n, fences); };
inline void glSetFenceAPPLE (GLuint fence) { return _glSetFenceAPPLE_(fence); };
inline GLboolean glIsFenceAPPLE (GLuint fence) { return _glIsFenceAPPLE_(fence); };
inline GLboolean glTestFenceAPPLE (GLuint fence) { return _glTestFenceAPPLE_(fence); };
inline void glFinishFenceAPPLE (GLuint fence) { return _glFinishFenceAPPLE_(fence); };
inline GLboolean glTestObjectAPPLE (GLenum object, GLuint name) { return _glTestObjectAPPLE_(object, name); };
inline void glFinishObjectAPPLE (GLenum object, GLint name) { return _glFinishObjectAPPLE_(object, name); };
#endif //GL_APPLE_fence

#ifndef GL_APPLE_float_pixels

// Defines
#define GL_HALF_APPLE                     0x140B 
#define GL_RGBA_FLOAT32_APPLE             0x8814 
#define GL_RGB_FLOAT32_APPLE              0x8815 
#define GL_ALPHA_FLOAT32_APPLE            0x8816 
#define GL_INTENSITY_FLOAT32_APPLE        0x8817 
#define GL_LUMINANCE_FLOAT32_APPLE        0x8818 
#define GL_LUMINANCE_ALPHA_FLOAT32_APPLE  0x8819 
#define GL_RGBA_FLOAT16_APPLE             0x881A 
#define GL_RGB_FLOAT16_APPLE              0x881B 
#define GL_ALPHA_FLOAT16_APPLE            0x881C 
#define GL_INTENSITY_FLOAT16_APPLE        0x881D 
#define GL_LUMINANCE_FLOAT16_APPLE        0x881E 
#define GL_LUMINANCE_ALPHA_FLOAT16_APPLE  0x881F 
#define GL_COLOR_FLOAT_APPLE              0x8A0F 
#endif //GL_APPLE_float_pixels

#ifndef GL_APPLE_flush_buffer_range

// Defines
#define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0x8A12 
#define GL_BUFFER_FLUSHING_UNMAP_APPLE    0x8A13 

// functions typedefs
typedef void (APIENTRYP PFN_GLBUFFERPARAMETERIAPPLE_PROC) (GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLFLUSHMAPPEDBUFFERRANGEAPPLE_PROC) (GLenum target, GLintptr offset, GLsizeiptr size);

// functions typedefs
GL_FUNC_DEF PFN_GLBUFFERPARAMETERIAPPLE_PROC _glBufferParameteriAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFLUSHMAPPEDBUFFERRANGEAPPLE_PROC _glFlushMappedBufferRangeAPPLE_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBufferParameteriAPPLE (GLenum target, GLenum pname, GLint param) { return _glBufferParameteriAPPLE_(target, pname, param); };
inline void glFlushMappedBufferRangeAPPLE (GLenum target, GLintptr offset, GLsizeiptr size) { return _glFlushMappedBufferRangeAPPLE_(target, offset, size); };
#endif //GL_APPLE_flush_buffer_range

#ifndef GL_APPLE_object_purgeable

// Defines
#define GL_BUFFER_OBJECT_APPLE            0x85B3 
#define GL_RELEASED_APPLE                 0x8A19 
#define GL_VOLATILE_APPLE                 0x8A1A 
#define GL_RETAINED_APPLE                 0x8A1B 
#define GL_UNDEFINED_APPLE                0x8A1C 
#define GL_PURGEABLE_APPLE                0x8A1D 

// functions typedefs
typedef GLenum (APIENTRYP PFN_GLOBJECTPURGEABLEAPPLE_PROC) (GLenum objectType, GLuint name, GLenum option);
typedef GLenum (APIENTRYP PFN_GLOBJECTUNPURGEABLEAPPLE_PROC) (GLenum objectType, GLuint name, GLenum option);
typedef void (APIENTRYP PFN_GLGETOBJECTPARAMETERIVAPPLE_PROC) (GLenum objectType, GLuint name, GLenum pname, GLint * params);

// functions typedefs
GL_FUNC_DEF PFN_GLOBJECTPURGEABLEAPPLE_PROC _glObjectPurgeableAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLOBJECTUNPURGEABLEAPPLE_PROC _glObjectUnpurgeableAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETOBJECTPARAMETERIVAPPLE_PROC _glGetObjectParameterivAPPLE_ GL_FUNC_DEF2;

// functions inline wrap
inline GLenum glObjectPurgeableAPPLE (GLenum objectType, GLuint name, GLenum option) { return _glObjectPurgeableAPPLE_(objectType, name, option); };
inline GLenum glObjectUnpurgeableAPPLE (GLenum objectType, GLuint name, GLenum option) { return _glObjectUnpurgeableAPPLE_(objectType, name, option); };
inline void glGetObjectParameterivAPPLE (GLenum objectType, GLuint name, GLenum pname, GLint * params) { return _glGetObjectParameterivAPPLE_(objectType, name, pname, params); };
#endif //GL_APPLE_object_purgeable

#ifndef GL_APPLE_row_bytes

// Defines
#define GL_PACK_ROW_BYTES_APPLE           0x8A15 
#define GL_UNPACK_ROW_BYTES_APPLE         0x8A16 
#endif //GL_APPLE_row_bytes

#ifndef GL_APPLE_specular_vector

// Defines
#define GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE 0x85B0 
#endif //GL_APPLE_specular_vector

#ifndef GL_APPLE_texture_range

// Defines
#define GL_TEXTURE_RANGE_LENGTH_APPLE     0x85B7 
#define GL_TEXTURE_RANGE_POINTER_APPLE    0x85B8 
#define GL_TEXTURE_STORAGE_HINT_APPLE     0x85BC 
#define GL_STORAGE_PRIVATE_APPLE          0x85BD 
#define GL_STORAGE_CACHED_APPLE           0x85BE 
#define GL_STORAGE_SHARED_APPLE           0x85BF 

// functions typedefs
typedef void (APIENTRYP PFN_GLTEXTURERANGEAPPLE_PROC) (GLenum target, GLsizei length, const void * pointer);
typedef void (APIENTRYP PFN_GLGETTEXPARAMETERPOINTERVAPPLE_PROC) (GLenum target, GLenum pname, void * * params);

// functions typedefs
GL_FUNC_DEF PFN_GLTEXTURERANGEAPPLE_PROC _glTextureRangeAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXPARAMETERPOINTERVAPPLE_PROC _glGetTexParameterPointervAPPLE_ GL_FUNC_DEF2;

// functions inline wrap
inline void glTextureRangeAPPLE (GLenum target, GLsizei length, const void * pointer) { return _glTextureRangeAPPLE_(target, length, pointer); };
inline void glGetTexParameterPointervAPPLE (GLenum target, GLenum pname, void * * params) { return _glGetTexParameterPointervAPPLE_(target, pname, params); };
#endif //GL_APPLE_texture_range

#ifndef GL_APPLE_transform_hint

// Defines
#define GL_TRANSFORM_HINT_APPLE           0x85B1 
#endif //GL_APPLE_transform_hint

#ifndef GL_APPLE_vertex_array_object

// Defines
#define GL_VERTEX_ARRAY_BINDING_APPLE     0x85B5 

// functions typedefs
typedef void (APIENTRYP PFN_GLBINDVERTEXARRAYAPPLE_PROC) (GLuint array);
typedef void (APIENTRYP PFN_GLDELETEVERTEXARRAYSAPPLE_PROC) (GLsizei n, const GLuint * arrays);
typedef void (APIENTRYP PFN_GLGENVERTEXARRAYSAPPLE_PROC) (GLsizei n, GLuint * arrays);
typedef GLboolean (APIENTRYP PFN_GLISVERTEXARRAYAPPLE_PROC) (GLuint array);

// functions typedefs
GL_FUNC_DEF PFN_GLBINDVERTEXARRAYAPPLE_PROC _glBindVertexArrayAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEVERTEXARRAYSAPPLE_PROC _glDeleteVertexArraysAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENVERTEXARRAYSAPPLE_PROC _glGenVertexArraysAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISVERTEXARRAYAPPLE_PROC _glIsVertexArrayAPPLE_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBindVertexArrayAPPLE (GLuint array) { return _glBindVertexArrayAPPLE_(array); };
inline void glDeleteVertexArraysAPPLE (GLsizei n, const GLuint * arrays) { return _glDeleteVertexArraysAPPLE_(n, arrays); };
inline void glGenVertexArraysAPPLE (GLsizei n, GLuint * arrays) { return _glGenVertexArraysAPPLE_(n, arrays); };
inline GLboolean glIsVertexArrayAPPLE (GLuint array) { return _glIsVertexArrayAPPLE_(array); };
#endif //GL_APPLE_vertex_array_object

#ifndef GL_APPLE_vertex_array_range

// Defines
#define GL_VERTEX_ARRAY_RANGE_APPLE       0x851D 
#define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE 0x851E 
#define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE 0x851F 
#define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE 0x8521 
#define GL_STORAGE_CLIENT_APPLE           0x85B4 

// functions typedefs
typedef void (APIENTRYP PFN_GLVERTEXARRAYRANGEAPPLE_PROC) (GLsizei length, void * pointer);
typedef void (APIENTRYP PFN_GLFLUSHVERTEXARRAYRANGEAPPLE_PROC) (GLsizei length, void * pointer);
typedef void (APIENTRYP PFN_GLVERTEXARRAYPARAMETERIAPPLE_PROC) (GLenum pname, GLint param);

// functions typedefs
GL_FUNC_DEF PFN_GLVERTEXARRAYRANGEAPPLE_PROC _glVertexArrayRangeAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFLUSHVERTEXARRAYRANGEAPPLE_PROC _glFlushVertexArrayRangeAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYPARAMETERIAPPLE_PROC _glVertexArrayParameteriAPPLE_ GL_FUNC_DEF2;

// functions inline wrap
inline void glVertexArrayRangeAPPLE (GLsizei length, void * pointer) { return _glVertexArrayRangeAPPLE_(length, pointer); };
inline void glFlushVertexArrayRangeAPPLE (GLsizei length, void * pointer) { return _glFlushVertexArrayRangeAPPLE_(length, pointer); };
inline void glVertexArrayParameteriAPPLE (GLenum pname, GLint param) { return _glVertexArrayParameteriAPPLE_(pname, param); };
#endif //GL_APPLE_vertex_array_range

#ifndef GL_APPLE_vertex_program_evaluators

// Defines
#define GL_VERTEX_ATTRIB_MAP1_APPLE       0x8A00 
#define GL_VERTEX_ATTRIB_MAP2_APPLE       0x8A01 
#define GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE  0x8A02 
#define GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE 0x8A03 
#define GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE 0x8A04 
#define GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE 0x8A05 
#define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE  0x8A06 
#define GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE 0x8A07 
#define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE 0x8A08 
#define GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE 0x8A09 

// functions typedefs
typedef void (APIENTRYP PFN_GLENABLEVERTEXATTRIBAPPLE_PROC) (GLuint index, GLenum pname);
typedef void (APIENTRYP PFN_GLDISABLEVERTEXATTRIBAPPLE_PROC) (GLuint index, GLenum pname);
typedef GLboolean (APIENTRYP PFN_GLISVERTEXATTRIBENABLEDAPPLE_PROC) (GLuint index, GLenum pname);
typedef void (APIENTRYP PFN_GLMAPVERTEXATTRIB1DAPPLE_PROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);
typedef void (APIENTRYP PFN_GLMAPVERTEXATTRIB1FAPPLE_PROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);
typedef void (APIENTRYP PFN_GLMAPVERTEXATTRIB2DAPPLE_PROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);
typedef void (APIENTRYP PFN_GLMAPVERTEXATTRIB2FAPPLE_PROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);

// functions typedefs
GL_FUNC_DEF PFN_GLENABLEVERTEXATTRIBAPPLE_PROC _glEnableVertexAttribAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDISABLEVERTEXATTRIBAPPLE_PROC _glDisableVertexAttribAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISVERTEXATTRIBENABLEDAPPLE_PROC _glIsVertexAttribEnabledAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAPVERTEXATTRIB1DAPPLE_PROC _glMapVertexAttrib1dAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAPVERTEXATTRIB1FAPPLE_PROC _glMapVertexAttrib1fAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAPVERTEXATTRIB2DAPPLE_PROC _glMapVertexAttrib2dAPPLE_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAPVERTEXATTRIB2FAPPLE_PROC _glMapVertexAttrib2fAPPLE_ GL_FUNC_DEF2;

// functions inline wrap
inline void glEnableVertexAttribAPPLE (GLuint index, GLenum pname) { return _glEnableVertexAttribAPPLE_(index, pname); };
inline void glDisableVertexAttribAPPLE (GLuint index, GLenum pname) { return _glDisableVertexAttribAPPLE_(index, pname); };
inline GLboolean glIsVertexAttribEnabledAPPLE (GLuint index, GLenum pname) { return _glIsVertexAttribEnabledAPPLE_(index, pname); };
inline void glMapVertexAttrib1dAPPLE (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) { return _glMapVertexAttrib1dAPPLE_(index, size, u1, u2, stride, order, points); };
inline void glMapVertexAttrib1fAPPLE (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) { return _glMapVertexAttrib1fAPPLE_(index, size, u1, u2, stride, order, points); };
inline void glMapVertexAttrib2dAPPLE (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) { return _glMapVertexAttrib2dAPPLE_(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); };
inline void glMapVertexAttrib2fAPPLE (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) { return _glMapVertexAttrib2fAPPLE_(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); };
#endif //GL_APPLE_vertex_program_evaluators

#ifndef GL_APPLE_ycbcr_422

// Defines
#define GL_YCBCR_422_APPLE                0x85B9 
#endif //GL_APPLE_ycbcr_422

#ifndef GL_ATI_draw_buffers

// Defines
#define GL_MAX_DRAW_BUFFERS_ATI           0x8824 
#define GL_DRAW_BUFFER0_ATI               0x8825 
#define GL_DRAW_BUFFER1_ATI               0x8826 
#define GL_DRAW_BUFFER2_ATI               0x8827 
#define GL_DRAW_BUFFER3_ATI               0x8828 
#define GL_DRAW_BUFFER4_ATI               0x8829 
#define GL_DRAW_BUFFER5_ATI               0x882A 
#define GL_DRAW_BUFFER6_ATI               0x882B 
#define GL_DRAW_BUFFER7_ATI               0x882C 
#define GL_DRAW_BUFFER8_ATI               0x882D 
#define GL_DRAW_BUFFER9_ATI               0x882E 
#define GL_DRAW_BUFFER10_ATI              0x882F 
#define GL_DRAW_BUFFER11_ATI              0x8830 
#define GL_DRAW_BUFFER12_ATI              0x8831 
#define GL_DRAW_BUFFER13_ATI              0x8832 
#define GL_DRAW_BUFFER14_ATI              0x8833 
#define GL_DRAW_BUFFER15_ATI              0x8834 

// functions typedefs
typedef void (APIENTRYP PFN_GLDRAWBUFFERSATI_PROC) (GLsizei n, const GLenum * bufs);

// functions typedefs
GL_FUNC_DEF PFN_GLDRAWBUFFERSATI_PROC _glDrawBuffersATI_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDrawBuffersATI (GLsizei n, const GLenum * bufs) { return _glDrawBuffersATI_(n, bufs); };
#endif //GL_ATI_draw_buffers

#ifndef GL_ATI_element_array

// Defines
#define GL_ELEMENT_ARRAY_ATI              0x8768 
#define GL_ELEMENT_ARRAY_TYPE_ATI         0x8769 
#define GL_ELEMENT_ARRAY_POINTER_ATI      0x876A 

// functions typedefs
typedef void (APIENTRYP PFN_GLELEMENTPOINTERATI_PROC) (GLenum type, const void * pointer);
typedef void (APIENTRYP PFN_GLDRAWELEMENTARRAYATI_PROC) (GLenum mode, GLsizei count);
typedef void (APIENTRYP PFN_GLDRAWRANGEELEMENTARRAYATI_PROC) (GLenum mode, GLuint start, GLuint end, GLsizei count);

// functions typedefs
GL_FUNC_DEF PFN_GLELEMENTPOINTERATI_PROC _glElementPointerATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWELEMENTARRAYATI_PROC _glDrawElementArrayATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWRANGEELEMENTARRAYATI_PROC _glDrawRangeElementArrayATI_ GL_FUNC_DEF2;

// functions inline wrap
inline void glElementPointerATI (GLenum type, const void * pointer) { return _glElementPointerATI_(type, pointer); };
inline void glDrawElementArrayATI (GLenum mode, GLsizei count) { return _glDrawElementArrayATI_(mode, count); };
inline void glDrawRangeElementArrayATI (GLenum mode, GLuint start, GLuint end, GLsizei count) { return _glDrawRangeElementArrayATI_(mode, start, end, count); };
#endif //GL_ATI_element_array

#ifndef GL_ATI_envmap_bumpmap

// Defines
#define GL_BUMP_ROT_MATRIX_ATI            0x8775 
#define GL_BUMP_ROT_MATRIX_SIZE_ATI       0x8776 
#define GL_BUMP_NUM_TEX_UNITS_ATI         0x8777 
#define GL_BUMP_TEX_UNITS_ATI             0x8778 
#define GL_DUDV_ATI                       0x8779 
#define GL_DU8DV8_ATI                     0x877A 
#define GL_BUMP_ENVMAP_ATI                0x877B 
#define GL_BUMP_TARGET_ATI                0x877C 

// functions typedefs
typedef void (APIENTRYP PFN_GLTEXBUMPPARAMETERIVATI_PROC) (GLenum pname, const GLint * param);
typedef void (APIENTRYP PFN_GLTEXBUMPPARAMETERFVATI_PROC) (GLenum pname, const GLfloat * param);
typedef void (APIENTRYP PFN_GLGETTEXBUMPPARAMETERIVATI_PROC) (GLenum pname, GLint * param);
typedef void (APIENTRYP PFN_GLGETTEXBUMPPARAMETERFVATI_PROC) (GLenum pname, GLfloat * param);

// functions typedefs
GL_FUNC_DEF PFN_GLTEXBUMPPARAMETERIVATI_PROC _glTexBumpParameterivATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXBUMPPARAMETERFVATI_PROC _glTexBumpParameterfvATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXBUMPPARAMETERIVATI_PROC _glGetTexBumpParameterivATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXBUMPPARAMETERFVATI_PROC _glGetTexBumpParameterfvATI_ GL_FUNC_DEF2;

// functions inline wrap
inline void glTexBumpParameterivATI (GLenum pname, const GLint * param) { return _glTexBumpParameterivATI_(pname, param); };
inline void glTexBumpParameterfvATI (GLenum pname, const GLfloat * param) { return _glTexBumpParameterfvATI_(pname, param); };
inline void glGetTexBumpParameterivATI (GLenum pname, GLint * param) { return _glGetTexBumpParameterivATI_(pname, param); };
inline void glGetTexBumpParameterfvATI (GLenum pname, GLfloat * param) { return _glGetTexBumpParameterfvATI_(pname, param); };
#endif //GL_ATI_envmap_bumpmap

#ifndef GL_ATI_fragment_shader

// Defines
#define GL_FRAGMENT_SHADER_ATI            0x8920 
#define GL_REG_0_ATI                      0x8921 
#define GL_REG_1_ATI                      0x8922 
#define GL_REG_2_ATI                      0x8923 
#define GL_REG_3_ATI                      0x8924 
#define GL_REG_4_ATI                      0x8925 
#define GL_REG_5_ATI                      0x8926 
#define GL_REG_6_ATI                      0x8927 
#define GL_REG_7_ATI                      0x8928 
#define GL_REG_8_ATI                      0x8929 
#define GL_REG_9_ATI                      0x892A 
#define GL_REG_10_ATI                     0x892B 
#define GL_REG_11_ATI                     0x892C 
#define GL_REG_12_ATI                     0x892D 
#define GL_REG_13_ATI                     0x892E 
#define GL_REG_14_ATI                     0x892F 
#define GL_REG_15_ATI                     0x8930 
#define GL_REG_16_ATI                     0x8931 
#define GL_REG_17_ATI                     0x8932 
#define GL_REG_18_ATI                     0x8933 
#define GL_REG_19_ATI                     0x8934 
#define GL_REG_20_ATI                     0x8935 
#define GL_REG_21_ATI                     0x8936 
#define GL_REG_22_ATI                     0x8937 
#define GL_REG_23_ATI                     0x8938 
#define GL_REG_24_ATI                     0x8939 
#define GL_REG_25_ATI                     0x893A 
#define GL_REG_26_ATI                     0x893B 
#define GL_REG_27_ATI                     0x893C 
#define GL_REG_28_ATI                     0x893D 
#define GL_REG_29_ATI                     0x893E 
#define GL_REG_30_ATI                     0x893F 
#define GL_REG_31_ATI                     0x8940 
#define GL_CON_0_ATI                      0x8941 
#define GL_CON_1_ATI                      0x8942 
#define GL_CON_2_ATI                      0x8943 
#define GL_CON_3_ATI                      0x8944 
#define GL_CON_4_ATI                      0x8945 
#define GL_CON_5_ATI                      0x8946 
#define GL_CON_6_ATI                      0x8947 
#define GL_CON_7_ATI                      0x8948 
#define GL_CON_8_ATI                      0x8949 
#define GL_CON_9_ATI                      0x894A 
#define GL_CON_10_ATI                     0x894B 
#define GL_CON_11_ATI                     0x894C 
#define GL_CON_12_ATI                     0x894D 
#define GL_CON_13_ATI                     0x894E 
#define GL_CON_14_ATI                     0x894F 
#define GL_CON_15_ATI                     0x8950 
#define GL_CON_16_ATI                     0x8951 
#define GL_CON_17_ATI                     0x8952 
#define GL_CON_18_ATI                     0x8953 
#define GL_CON_19_ATI                     0x8954 
#define GL_CON_20_ATI                     0x8955 
#define GL_CON_21_ATI                     0x8956 
#define GL_CON_22_ATI                     0x8957 
#define GL_CON_23_ATI                     0x8958 
#define GL_CON_24_ATI                     0x8959 
#define GL_CON_25_ATI                     0x895A 
#define GL_CON_26_ATI                     0x895B 
#define GL_CON_27_ATI                     0x895C 
#define GL_CON_28_ATI                     0x895D 
#define GL_CON_29_ATI                     0x895E 
#define GL_CON_30_ATI                     0x895F 
#define GL_CON_31_ATI                     0x8960 
#define GL_MOV_ATI                        0x8961 
#define GL_ADD_ATI                        0x8963 
#define GL_MUL_ATI                        0x8964 
#define GL_SUB_ATI                        0x8965 
#define GL_DOT3_ATI                       0x8966 
#define GL_DOT4_ATI                       0x8967 
#define GL_MAD_ATI                        0x8968 
#define GL_LERP_ATI                       0x8969 
#define GL_CND_ATI                        0x896A 
#define GL_CND0_ATI                       0x896B 
#define GL_DOT2_ADD_ATI                   0x896C 
#define GL_SECONDARY_INTERPOLATOR_ATI     0x896D 
#define GL_NUM_FRAGMENT_REGISTERS_ATI     0x896E 
#define GL_NUM_FRAGMENT_CONSTANTS_ATI     0x896F 
#define GL_NUM_PASSES_ATI                 0x8970 
#define GL_NUM_INSTRUCTIONS_PER_PASS_ATI  0x8971 
#define GL_NUM_INSTRUCTIONS_TOTAL_ATI     0x8972 
#define GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI 0x8973 
#define GL_NUM_LOOPBACK_COMPONENTS_ATI    0x8974 
#define GL_COLOR_ALPHA_PAIRING_ATI        0x8975 
#define GL_SWIZZLE_STR_ATI                0x8976 
#define GL_SWIZZLE_STQ_ATI                0x8977 
#define GL_SWIZZLE_STR_DR_ATI             0x8978 
#define GL_SWIZZLE_STQ_DQ_ATI             0x8979 
#define GL_SWIZZLE_STRQ_ATI               0x897A 
#define GL_SWIZZLE_STRQ_DQ_ATI            0x897B 
#define GL_RED_BIT_ATI                    0x00000001 
#define GL_GREEN_BIT_ATI                  0x00000002 
#define GL_BLUE_BIT_ATI                   0x00000004 
#define GL_2X_BIT_ATI                     0x00000001 
#define GL_4X_BIT_ATI                     0x00000002 
#define GL_8X_BIT_ATI                     0x00000004 
#define GL_HALF_BIT_ATI                   0x00000008 
#define GL_QUARTER_BIT_ATI                0x00000010 
#define GL_EIGHTH_BIT_ATI                 0x00000020 
#define GL_SATURATE_BIT_ATI               0x00000040 
#define GL_COMP_BIT_ATI                   0x00000002 
#define GL_NEGATE_BIT_ATI                 0x00000004 
#define GL_BIAS_BIT_ATI                   0x00000008 

// functions typedefs
typedef GLuint (APIENTRYP PFN_GLGENFRAGMENTSHADERSATI_PROC) (GLuint range);
typedef void (APIENTRYP PFN_GLBINDFRAGMENTSHADERATI_PROC) (GLuint id);
typedef void (APIENTRYP PFN_GLDELETEFRAGMENTSHADERATI_PROC) (GLuint id);
typedef void (APIENTRYP PFN_GLBEGINFRAGMENTSHADERATI_PROC) (void);
typedef void (APIENTRYP PFN_GLENDFRAGMENTSHADERATI_PROC) (void);
typedef void (APIENTRYP PFN_GLPASSTEXCOORDATI_PROC) (GLuint dst, GLuint coord, GLenum swizzle);
typedef void (APIENTRYP PFN_GLSAMPLEMAPATI_PROC) (GLuint dst, GLuint interp, GLenum swizzle);
typedef void (APIENTRYP PFN_GLCOLORFRAGMENTOP1ATI_PROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
typedef void (APIENTRYP PFN_GLCOLORFRAGMENTOP2ATI_PROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
typedef void (APIENTRYP PFN_GLCOLORFRAGMENTOP3ATI_PROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
typedef void (APIENTRYP PFN_GLALPHAFRAGMENTOP1ATI_PROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
typedef void (APIENTRYP PFN_GLALPHAFRAGMENTOP2ATI_PROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
typedef void (APIENTRYP PFN_GLALPHAFRAGMENTOP3ATI_PROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
typedef void (APIENTRYP PFN_GLSETFRAGMENTSHADERCONSTANTATI_PROC) (GLuint dst, const GLfloat * value);

// functions typedefs
GL_FUNC_DEF PFN_GLGENFRAGMENTSHADERSATI_PROC _glGenFragmentShadersATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDFRAGMENTSHADERATI_PROC _glBindFragmentShaderATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEFRAGMENTSHADERATI_PROC _glDeleteFragmentShaderATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBEGINFRAGMENTSHADERATI_PROC _glBeginFragmentShaderATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENDFRAGMENTSHADERATI_PROC _glEndFragmentShaderATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPASSTEXCOORDATI_PROC _glPassTexCoordATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSAMPLEMAPATI_PROC _glSampleMapATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLORFRAGMENTOP1ATI_PROC _glColorFragmentOp1ATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLORFRAGMENTOP2ATI_PROC _glColorFragmentOp2ATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLORFRAGMENTOP3ATI_PROC _glColorFragmentOp3ATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLALPHAFRAGMENTOP1ATI_PROC _glAlphaFragmentOp1ATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLALPHAFRAGMENTOP2ATI_PROC _glAlphaFragmentOp2ATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLALPHAFRAGMENTOP3ATI_PROC _glAlphaFragmentOp3ATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSETFRAGMENTSHADERCONSTANTATI_PROC _glSetFragmentShaderConstantATI_ GL_FUNC_DEF2;

// functions inline wrap
inline GLuint glGenFragmentShadersATI (GLuint range) { return _glGenFragmentShadersATI_(range); };
inline void glBindFragmentShaderATI (GLuint id) { return _glBindFragmentShaderATI_(id); };
inline void glDeleteFragmentShaderATI (GLuint id) { return _glDeleteFragmentShaderATI_(id); };
inline void glBeginFragmentShaderATI (void) { return _glBeginFragmentShaderATI_(); };
inline void glEndFragmentShaderATI (void) { return _glEndFragmentShaderATI_(); };
inline void glPassTexCoordATI (GLuint dst, GLuint coord, GLenum swizzle) { return _glPassTexCoordATI_(dst, coord, swizzle); };
inline void glSampleMapATI (GLuint dst, GLuint interp, GLenum swizzle) { return _glSampleMapATI_(dst, interp, swizzle); };
inline void glColorFragmentOp1ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) { return _glColorFragmentOp1ATI_(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod); };
inline void glColorFragmentOp2ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) { return _glColorFragmentOp2ATI_(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod); };
inline void glColorFragmentOp3ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) { return _glColorFragmentOp3ATI_(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod); };
inline void glAlphaFragmentOp1ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) { return _glAlphaFragmentOp1ATI_(op, dst, dstMod, arg1, arg1Rep, arg1Mod); };
inline void glAlphaFragmentOp2ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) { return _glAlphaFragmentOp2ATI_(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod); };
inline void glAlphaFragmentOp3ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) { return _glAlphaFragmentOp3ATI_(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod); };
inline void glSetFragmentShaderConstantATI (GLuint dst, const GLfloat * value) { return _glSetFragmentShaderConstantATI_(dst, value); };
#endif //GL_ATI_fragment_shader

#ifndef GL_ATI_map_object_buffer

// functions typedefs
typedef void * (APIENTRYP PFN_GLMAPOBJECTBUFFERATI_PROC) (GLuint buffer);
typedef void (APIENTRYP PFN_GLUNMAPOBJECTBUFFERATI_PROC) (GLuint buffer);

// functions typedefs
GL_FUNC_DEF PFN_GLMAPOBJECTBUFFERATI_PROC _glMapObjectBufferATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNMAPOBJECTBUFFERATI_PROC _glUnmapObjectBufferATI_ GL_FUNC_DEF2;

// functions inline wrap
inline void * glMapObjectBufferATI (GLuint buffer) { return _glMapObjectBufferATI_(buffer); };
inline void glUnmapObjectBufferATI (GLuint buffer) { return _glUnmapObjectBufferATI_(buffer); };
#endif //GL_ATI_map_object_buffer

#ifndef GL_ATI_meminfo

// Defines
#define GL_VBO_FREE_MEMORY_ATI            0x87FB 
#define GL_TEXTURE_FREE_MEMORY_ATI        0x87FC 
#define GL_RENDERBUFFER_FREE_MEMORY_ATI   0x87FD 
#endif //GL_ATI_meminfo

#ifndef GL_ATI_pixel_format_float

// Defines
#define GL_RGBA_FLOAT_MODE_ATI            0x8820 
#define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI 0x8835 
#endif //GL_ATI_pixel_format_float

#ifndef GL_ATI_pn_triangles

// Defines
#define GL_PN_TRIANGLES_ATI               0x87F0 
#define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F1 
#define GL_PN_TRIANGLES_POINT_MODE_ATI    0x87F2 
#define GL_PN_TRIANGLES_NORMAL_MODE_ATI   0x87F3 
#define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F4 
#define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI 0x87F5 
#define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI 0x87F6 
#define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI 0x87F7 
#define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 0x87F8 

// functions typedefs
typedef void (APIENTRYP PFN_GLPNTRIANGLESIATI_PROC) (GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLPNTRIANGLESFATI_PROC) (GLenum pname, GLfloat param);

// functions typedefs
GL_FUNC_DEF PFN_GLPNTRIANGLESIATI_PROC _glPNTrianglesiATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPNTRIANGLESFATI_PROC _glPNTrianglesfATI_ GL_FUNC_DEF2;

// functions inline wrap
inline void glPNTrianglesiATI (GLenum pname, GLint param) { return _glPNTrianglesiATI_(pname, param); };
inline void glPNTrianglesfATI (GLenum pname, GLfloat param) { return _glPNTrianglesfATI_(pname, param); };
#endif //GL_ATI_pn_triangles

#ifndef GL_ATI_separate_stencil

// Defines
#define GL_STENCIL_BACK_FUNC_ATI          0x8800 
#define GL_STENCIL_BACK_FAIL_ATI          0x8801 
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI 0x8802 
#define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI 0x8803 

// functions typedefs
typedef void (APIENTRYP PFN_GLSTENCILOPSEPARATEATI_PROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (APIENTRYP PFN_GLSTENCILFUNCSEPARATEATI_PROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);

// functions typedefs
GL_FUNC_DEF PFN_GLSTENCILOPSEPARATEATI_PROC _glStencilOpSeparateATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSTENCILFUNCSEPARATEATI_PROC _glStencilFuncSeparateATI_ GL_FUNC_DEF2;

// functions inline wrap
inline void glStencilOpSeparateATI (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) { return _glStencilOpSeparateATI_(face, sfail, dpfail, dppass); };
inline void glStencilFuncSeparateATI (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask) { return _glStencilFuncSeparateATI_(frontfunc, backfunc, ref, mask); };
#endif //GL_ATI_separate_stencil

#ifndef GL_ATI_text_fragment_shader

// Defines
#define GL_TEXT_FRAGMENT_SHADER_ATI       0x8200 
#endif //GL_ATI_text_fragment_shader

#ifndef GL_ATI_texture_env_combine3

// Defines
#define GL_MODULATE_ADD_ATI               0x8744 
#define GL_MODULATE_SIGNED_ADD_ATI        0x8745 
#define GL_MODULATE_SUBTRACT_ATI          0x8746 
#endif //GL_ATI_texture_env_combine3

#ifndef GL_ATI_texture_float

// Defines
#define GL_RGBA_FLOAT32_ATI               0x8814 
#define GL_RGB_FLOAT32_ATI                0x8815 
#define GL_ALPHA_FLOAT32_ATI              0x8816 
#define GL_INTENSITY_FLOAT32_ATI          0x8817 
#define GL_LUMINANCE_FLOAT32_ATI          0x8818 
#define GL_LUMINANCE_ALPHA_FLOAT32_ATI    0x8819 
#define GL_RGBA_FLOAT16_ATI               0x881A 
#define GL_RGB_FLOAT16_ATI                0x881B 
#define GL_ALPHA_FLOAT16_ATI              0x881C 
#define GL_INTENSITY_FLOAT16_ATI          0x881D 
#define GL_LUMINANCE_FLOAT16_ATI          0x881E 
#define GL_LUMINANCE_ALPHA_FLOAT16_ATI    0x881F 
#endif //GL_ATI_texture_float

#ifndef GL_ATI_texture_mirror_once

// Defines
#define GL_MIRROR_CLAMP_ATI               0x8742 
#define GL_MIRROR_CLAMP_TO_EDGE_ATI       0x8743 
#endif //GL_ATI_texture_mirror_once

#ifndef GL_ATI_vertex_array_object

// Defines
#define GL_STATIC_ATI                     0x8760 
#define GL_DYNAMIC_ATI                    0x8761 
#define GL_PRESERVE_ATI                   0x8762 
#define GL_DISCARD_ATI                    0x8763 
#define GL_OBJECT_BUFFER_SIZE_ATI         0x8764 
#define GL_OBJECT_BUFFER_USAGE_ATI        0x8765 
#define GL_ARRAY_OBJECT_BUFFER_ATI        0x8766 
#define GL_ARRAY_OBJECT_OFFSET_ATI        0x8767 

// functions typedefs
typedef GLuint (APIENTRYP PFN_GLNEWOBJECTBUFFERATI_PROC) (GLsizei size, const void * pointer, GLenum usage);
typedef GLboolean (APIENTRYP PFN_GLISOBJECTBUFFERATI_PROC) (GLuint buffer);
typedef void (APIENTRYP PFN_GLUPDATEOBJECTBUFFERATI_PROC) (GLuint buffer, GLuint offset, GLsizei size, const void * pointer, GLenum preserve);
typedef void (APIENTRYP PFN_GLGETOBJECTBUFFERFVATI_PROC) (GLuint buffer, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETOBJECTBUFFERIVATI_PROC) (GLuint buffer, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLFREEOBJECTBUFFERATI_PROC) (GLuint buffer);
typedef void (APIENTRYP PFN_GLARRAYOBJECTATI_PROC) (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
typedef void (APIENTRYP PFN_GLGETARRAYOBJECTFVATI_PROC) (GLenum array, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETARRAYOBJECTIVATI_PROC) (GLenum array, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLVARIANTARRAYOBJECTATI_PROC) (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
typedef void (APIENTRYP PFN_GLGETVARIANTARRAYOBJECTFVATI_PROC) (GLuint id, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETVARIANTARRAYOBJECTIVATI_PROC) (GLuint id, GLenum pname, GLint * params);

// functions typedefs
GL_FUNC_DEF PFN_GLNEWOBJECTBUFFERATI_PROC _glNewObjectBufferATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISOBJECTBUFFERATI_PROC _glIsObjectBufferATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUPDATEOBJECTBUFFERATI_PROC _glUpdateObjectBufferATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETOBJECTBUFFERFVATI_PROC _glGetObjectBufferfvATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETOBJECTBUFFERIVATI_PROC _glGetObjectBufferivATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFREEOBJECTBUFFERATI_PROC _glFreeObjectBufferATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLARRAYOBJECTATI_PROC _glArrayObjectATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETARRAYOBJECTFVATI_PROC _glGetArrayObjectfvATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETARRAYOBJECTIVATI_PROC _glGetArrayObjectivATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVARIANTARRAYOBJECTATI_PROC _glVariantArrayObjectATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVARIANTARRAYOBJECTFVATI_PROC _glGetVariantArrayObjectfvATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVARIANTARRAYOBJECTIVATI_PROC _glGetVariantArrayObjectivATI_ GL_FUNC_DEF2;

// functions inline wrap
inline GLuint glNewObjectBufferATI (GLsizei size, const void * pointer, GLenum usage) { return _glNewObjectBufferATI_(size, pointer, usage); };
inline GLboolean glIsObjectBufferATI (GLuint buffer) { return _glIsObjectBufferATI_(buffer); };
inline void glUpdateObjectBufferATI (GLuint buffer, GLuint offset, GLsizei size, const void * pointer, GLenum preserve) { return _glUpdateObjectBufferATI_(buffer, offset, size, pointer, preserve); };
inline void glGetObjectBufferfvATI (GLuint buffer, GLenum pname, GLfloat * params) { return _glGetObjectBufferfvATI_(buffer, pname, params); };
inline void glGetObjectBufferivATI (GLuint buffer, GLenum pname, GLint * params) { return _glGetObjectBufferivATI_(buffer, pname, params); };
inline void glFreeObjectBufferATI (GLuint buffer) { return _glFreeObjectBufferATI_(buffer); };
inline void glArrayObjectATI (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) { return _glArrayObjectATI_(array, size, type, stride, buffer, offset); };
inline void glGetArrayObjectfvATI (GLenum array, GLenum pname, GLfloat * params) { return _glGetArrayObjectfvATI_(array, pname, params); };
inline void glGetArrayObjectivATI (GLenum array, GLenum pname, GLint * params) { return _glGetArrayObjectivATI_(array, pname, params); };
inline void glVariantArrayObjectATI (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) { return _glVariantArrayObjectATI_(id, type, stride, buffer, offset); };
inline void glGetVariantArrayObjectfvATI (GLuint id, GLenum pname, GLfloat * params) { return _glGetVariantArrayObjectfvATI_(id, pname, params); };
inline void glGetVariantArrayObjectivATI (GLuint id, GLenum pname, GLint * params) { return _glGetVariantArrayObjectivATI_(id, pname, params); };
#endif //GL_ATI_vertex_array_object

#ifndef GL_ATI_vertex_attrib_array_object

// functions typedefs
typedef void (APIENTRYP PFN_GLVERTEXATTRIBARRAYOBJECTATI_PROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBARRAYOBJECTFVATI_PROC) (GLuint index, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBARRAYOBJECTIVATI_PROC) (GLuint index, GLenum pname, GLint * params);

// functions typedefs
GL_FUNC_DEF PFN_GLVERTEXATTRIBARRAYOBJECTATI_PROC _glVertexAttribArrayObjectATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBARRAYOBJECTFVATI_PROC _glGetVertexAttribArrayObjectfvATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBARRAYOBJECTIVATI_PROC _glGetVertexAttribArrayObjectivATI_ GL_FUNC_DEF2;

// functions inline wrap
inline void glVertexAttribArrayObjectATI (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset) { return _glVertexAttribArrayObjectATI_(index, size, type, normalized, stride, buffer, offset); };
inline void glGetVertexAttribArrayObjectfvATI (GLuint index, GLenum pname, GLfloat * params) { return _glGetVertexAttribArrayObjectfvATI_(index, pname, params); };
inline void glGetVertexAttribArrayObjectivATI (GLuint index, GLenum pname, GLint * params) { return _glGetVertexAttribArrayObjectivATI_(index, pname, params); };
#endif //GL_ATI_vertex_attrib_array_object

#ifndef GL_ATI_vertex_streams

// Defines
#define GL_MAX_VERTEX_STREAMS_ATI         0x876B 
#define GL_VERTEX_STREAM0_ATI             0x876C 
#define GL_VERTEX_STREAM1_ATI             0x876D 
#define GL_VERTEX_STREAM2_ATI             0x876E 
#define GL_VERTEX_STREAM3_ATI             0x876F 
#define GL_VERTEX_STREAM4_ATI             0x8770 
#define GL_VERTEX_STREAM5_ATI             0x8771 
#define GL_VERTEX_STREAM6_ATI             0x8772 
#define GL_VERTEX_STREAM7_ATI             0x8773 
#define GL_VERTEX_SOURCE_ATI              0x8774 

// functions typedefs
typedef void (APIENTRYP PFN_GLVERTEXSTREAM1SATI_PROC) (GLenum stream, GLshort x);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM1SVATI_PROC) (GLenum stream, const GLshort * coords);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM1IATI_PROC) (GLenum stream, GLint x);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM1IVATI_PROC) (GLenum stream, const GLint * coords);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM1FATI_PROC) (GLenum stream, GLfloat x);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM1FVATI_PROC) (GLenum stream, const GLfloat * coords);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM1DATI_PROC) (GLenum stream, GLdouble x);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM1DVATI_PROC) (GLenum stream, const GLdouble * coords);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM2SATI_PROC) (GLenum stream, GLshort x, GLshort y);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM2SVATI_PROC) (GLenum stream, const GLshort * coords);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM2IATI_PROC) (GLenum stream, GLint x, GLint y);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM2IVATI_PROC) (GLenum stream, const GLint * coords);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM2FATI_PROC) (GLenum stream, GLfloat x, GLfloat y);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM2FVATI_PROC) (GLenum stream, const GLfloat * coords);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM2DATI_PROC) (GLenum stream, GLdouble x, GLdouble y);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM2DVATI_PROC) (GLenum stream, const GLdouble * coords);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM3SATI_PROC) (GLenum stream, GLshort x, GLshort y, GLshort z);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM3SVATI_PROC) (GLenum stream, const GLshort * coords);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM3IATI_PROC) (GLenum stream, GLint x, GLint y, GLint z);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM3IVATI_PROC) (GLenum stream, const GLint * coords);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM3FATI_PROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM3FVATI_PROC) (GLenum stream, const GLfloat * coords);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM3DATI_PROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM3DVATI_PROC) (GLenum stream, const GLdouble * coords);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM4SATI_PROC) (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM4SVATI_PROC) (GLenum stream, const GLshort * coords);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM4IATI_PROC) (GLenum stream, GLint x, GLint y, GLint z, GLint w);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM4IVATI_PROC) (GLenum stream, const GLint * coords);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM4FATI_PROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM4FVATI_PROC) (GLenum stream, const GLfloat * coords);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM4DATI_PROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFN_GLVERTEXSTREAM4DVATI_PROC) (GLenum stream, const GLdouble * coords);
typedef void (APIENTRYP PFN_GLNORMALSTREAM3BATI_PROC) (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
typedef void (APIENTRYP PFN_GLNORMALSTREAM3BVATI_PROC) (GLenum stream, const GLbyte * coords);
typedef void (APIENTRYP PFN_GLNORMALSTREAM3SATI_PROC) (GLenum stream, GLshort nx, GLshort ny, GLshort nz);
typedef void (APIENTRYP PFN_GLNORMALSTREAM3SVATI_PROC) (GLenum stream, const GLshort * coords);
typedef void (APIENTRYP PFN_GLNORMALSTREAM3IATI_PROC) (GLenum stream, GLint nx, GLint ny, GLint nz);
typedef void (APIENTRYP PFN_GLNORMALSTREAM3IVATI_PROC) (GLenum stream, const GLint * coords);
typedef void (APIENTRYP PFN_GLNORMALSTREAM3FATI_PROC) (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
typedef void (APIENTRYP PFN_GLNORMALSTREAM3FVATI_PROC) (GLenum stream, const GLfloat * coords);
typedef void (APIENTRYP PFN_GLNORMALSTREAM3DATI_PROC) (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
typedef void (APIENTRYP PFN_GLNORMALSTREAM3DVATI_PROC) (GLenum stream, const GLdouble * coords);
typedef void (APIENTRYP PFN_GLCLIENTACTIVEVERTEXSTREAMATI_PROC) (GLenum stream);
typedef void (APIENTRYP PFN_GLVERTEXBLENDENVIATI_PROC) (GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLVERTEXBLENDENVFATI_PROC) (GLenum pname, GLfloat param);

// functions typedefs
GL_FUNC_DEF PFN_GLVERTEXSTREAM1SATI_PROC _glVertexStream1sATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM1SVATI_PROC _glVertexStream1svATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM1IATI_PROC _glVertexStream1iATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM1IVATI_PROC _glVertexStream1ivATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM1FATI_PROC _glVertexStream1fATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM1FVATI_PROC _glVertexStream1fvATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM1DATI_PROC _glVertexStream1dATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM1DVATI_PROC _glVertexStream1dvATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM2SATI_PROC _glVertexStream2sATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM2SVATI_PROC _glVertexStream2svATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM2IATI_PROC _glVertexStream2iATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM2IVATI_PROC _glVertexStream2ivATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM2FATI_PROC _glVertexStream2fATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM2FVATI_PROC _glVertexStream2fvATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM2DATI_PROC _glVertexStream2dATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM2DVATI_PROC _glVertexStream2dvATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM3SATI_PROC _glVertexStream3sATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM3SVATI_PROC _glVertexStream3svATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM3IATI_PROC _glVertexStream3iATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM3IVATI_PROC _glVertexStream3ivATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM3FATI_PROC _glVertexStream3fATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM3FVATI_PROC _glVertexStream3fvATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM3DATI_PROC _glVertexStream3dATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM3DVATI_PROC _glVertexStream3dvATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM4SATI_PROC _glVertexStream4sATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM4SVATI_PROC _glVertexStream4svATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM4IATI_PROC _glVertexStream4iATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM4IVATI_PROC _glVertexStream4ivATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM4FATI_PROC _glVertexStream4fATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM4FVATI_PROC _glVertexStream4fvATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM4DATI_PROC _glVertexStream4dATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXSTREAM4DVATI_PROC _glVertexStream4dvATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMALSTREAM3BATI_PROC _glNormalStream3bATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMALSTREAM3BVATI_PROC _glNormalStream3bvATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMALSTREAM3SATI_PROC _glNormalStream3sATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMALSTREAM3SVATI_PROC _glNormalStream3svATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMALSTREAM3IATI_PROC _glNormalStream3iATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMALSTREAM3IVATI_PROC _glNormalStream3ivATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMALSTREAM3FATI_PROC _glNormalStream3fATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMALSTREAM3FVATI_PROC _glNormalStream3fvATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMALSTREAM3DATI_PROC _glNormalStream3dATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMALSTREAM3DVATI_PROC _glNormalStream3dvATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLIENTACTIVEVERTEXSTREAMATI_PROC _glClientActiveVertexStreamATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXBLENDENVIATI_PROC _glVertexBlendEnviATI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXBLENDENVFATI_PROC _glVertexBlendEnvfATI_ GL_FUNC_DEF2;

// functions inline wrap
inline void glVertexStream1sATI (GLenum stream, GLshort x) { return _glVertexStream1sATI_(stream, x); };
inline void glVertexStream1svATI (GLenum stream, const GLshort * coords) { return _glVertexStream1svATI_(stream, coords); };
inline void glVertexStream1iATI (GLenum stream, GLint x) { return _glVertexStream1iATI_(stream, x); };
inline void glVertexStream1ivATI (GLenum stream, const GLint * coords) { return _glVertexStream1ivATI_(stream, coords); };
inline void glVertexStream1fATI (GLenum stream, GLfloat x) { return _glVertexStream1fATI_(stream, x); };
inline void glVertexStream1fvATI (GLenum stream, const GLfloat * coords) { return _glVertexStream1fvATI_(stream, coords); };
inline void glVertexStream1dATI (GLenum stream, GLdouble x) { return _glVertexStream1dATI_(stream, x); };
inline void glVertexStream1dvATI (GLenum stream, const GLdouble * coords) { return _glVertexStream1dvATI_(stream, coords); };
inline void glVertexStream2sATI (GLenum stream, GLshort x, GLshort y) { return _glVertexStream2sATI_(stream, x, y); };
inline void glVertexStream2svATI (GLenum stream, const GLshort * coords) { return _glVertexStream2svATI_(stream, coords); };
inline void glVertexStream2iATI (GLenum stream, GLint x, GLint y) { return _glVertexStream2iATI_(stream, x, y); };
inline void glVertexStream2ivATI (GLenum stream, const GLint * coords) { return _glVertexStream2ivATI_(stream, coords); };
inline void glVertexStream2fATI (GLenum stream, GLfloat x, GLfloat y) { return _glVertexStream2fATI_(stream, x, y); };
inline void glVertexStream2fvATI (GLenum stream, const GLfloat * coords) { return _glVertexStream2fvATI_(stream, coords); };
inline void glVertexStream2dATI (GLenum stream, GLdouble x, GLdouble y) { return _glVertexStream2dATI_(stream, x, y); };
inline void glVertexStream2dvATI (GLenum stream, const GLdouble * coords) { return _glVertexStream2dvATI_(stream, coords); };
inline void glVertexStream3sATI (GLenum stream, GLshort x, GLshort y, GLshort z) { return _glVertexStream3sATI_(stream, x, y, z); };
inline void glVertexStream3svATI (GLenum stream, const GLshort * coords) { return _glVertexStream3svATI_(stream, coords); };
inline void glVertexStream3iATI (GLenum stream, GLint x, GLint y, GLint z) { return _glVertexStream3iATI_(stream, x, y, z); };
inline void glVertexStream3ivATI (GLenum stream, const GLint * coords) { return _glVertexStream3ivATI_(stream, coords); };
inline void glVertexStream3fATI (GLenum stream, GLfloat x, GLfloat y, GLfloat z) { return _glVertexStream3fATI_(stream, x, y, z); };
inline void glVertexStream3fvATI (GLenum stream, const GLfloat * coords) { return _glVertexStream3fvATI_(stream, coords); };
inline void glVertexStream3dATI (GLenum stream, GLdouble x, GLdouble y, GLdouble z) { return _glVertexStream3dATI_(stream, x, y, z); };
inline void glVertexStream3dvATI (GLenum stream, const GLdouble * coords) { return _glVertexStream3dvATI_(stream, coords); };
inline void glVertexStream4sATI (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w) { return _glVertexStream4sATI_(stream, x, y, z, w); };
inline void glVertexStream4svATI (GLenum stream, const GLshort * coords) { return _glVertexStream4svATI_(stream, coords); };
inline void glVertexStream4iATI (GLenum stream, GLint x, GLint y, GLint z, GLint w) { return _glVertexStream4iATI_(stream, x, y, z, w); };
inline void glVertexStream4ivATI (GLenum stream, const GLint * coords) { return _glVertexStream4ivATI_(stream, coords); };
inline void glVertexStream4fATI (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { return _glVertexStream4fATI_(stream, x, y, z, w); };
inline void glVertexStream4fvATI (GLenum stream, const GLfloat * coords) { return _glVertexStream4fvATI_(stream, coords); };
inline void glVertexStream4dATI (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { return _glVertexStream4dATI_(stream, x, y, z, w); };
inline void glVertexStream4dvATI (GLenum stream, const GLdouble * coords) { return _glVertexStream4dvATI_(stream, coords); };
inline void glNormalStream3bATI (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz) { return _glNormalStream3bATI_(stream, nx, ny, nz); };
inline void glNormalStream3bvATI (GLenum stream, const GLbyte * coords) { return _glNormalStream3bvATI_(stream, coords); };
inline void glNormalStream3sATI (GLenum stream, GLshort nx, GLshort ny, GLshort nz) { return _glNormalStream3sATI_(stream, nx, ny, nz); };
inline void glNormalStream3svATI (GLenum stream, const GLshort * coords) { return _glNormalStream3svATI_(stream, coords); };
inline void glNormalStream3iATI (GLenum stream, GLint nx, GLint ny, GLint nz) { return _glNormalStream3iATI_(stream, nx, ny, nz); };
inline void glNormalStream3ivATI (GLenum stream, const GLint * coords) { return _glNormalStream3ivATI_(stream, coords); };
inline void glNormalStream3fATI (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz) { return _glNormalStream3fATI_(stream, nx, ny, nz); };
inline void glNormalStream3fvATI (GLenum stream, const GLfloat * coords) { return _glNormalStream3fvATI_(stream, coords); };
inline void glNormalStream3dATI (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz) { return _glNormalStream3dATI_(stream, nx, ny, nz); };
inline void glNormalStream3dvATI (GLenum stream, const GLdouble * coords) { return _glNormalStream3dvATI_(stream, coords); };
inline void glClientActiveVertexStreamATI (GLenum stream) { return _glClientActiveVertexStreamATI_(stream); };
inline void glVertexBlendEnviATI (GLenum pname, GLint param) { return _glVertexBlendEnviATI_(pname, param); };
inline void glVertexBlendEnvfATI (GLenum pname, GLfloat param) { return _glVertexBlendEnvfATI_(pname, param); };
#endif //GL_ATI_vertex_streams

#ifndef GL_EXT_422_pixels

// Defines
#define GL_422_EXT                        0x80CC 
#define GL_422_REV_EXT                    0x80CD 
#define GL_422_AVERAGE_EXT                0x80CE 
#define GL_422_REV_AVERAGE_EXT            0x80CF 
#endif //GL_EXT_422_pixels

#ifndef GL_EXT_abgr

// Defines
#define GL_ABGR_EXT                       0x8000 
#endif //GL_EXT_abgr

// GL_EXT_bgra

#ifndef GL_EXT_bindable_uniform

// Defines
#define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 0x8DE2 
#define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 0x8DE3 
#define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 0x8DE4 
#define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT  0x8DED 
#define GL_UNIFORM_BUFFER_EXT             0x8DEE 
#define GL_UNIFORM_BUFFER_BINDING_EXT     0x8DEF 

// functions typedefs
typedef void (APIENTRYP PFN_GLUNIFORMBUFFEREXT_PROC) (GLuint program, GLint location, GLuint buffer);
typedef GLint (APIENTRYP PFN_GLGETUNIFORMBUFFERSIZEEXT_PROC) (GLuint program, GLint location);
typedef GLintptr (APIENTRYP PFN_GLGETUNIFORMOFFSETEXT_PROC) (GLuint program, GLint location);

// functions typedefs
GL_FUNC_DEF PFN_GLUNIFORMBUFFEREXT_PROC _glUniformBufferEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETUNIFORMBUFFERSIZEEXT_PROC _glGetUniformBufferSizeEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETUNIFORMOFFSETEXT_PROC _glGetUniformOffsetEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glUniformBufferEXT (GLuint program, GLint location, GLuint buffer) { return _glUniformBufferEXT_(program, location, buffer); };
inline GLint glGetUniformBufferSizeEXT (GLuint program, GLint location) { return _glGetUniformBufferSizeEXT_(program, location); };
inline GLintptr glGetUniformOffsetEXT (GLuint program, GLint location) { return _glGetUniformOffsetEXT_(program, location); };
#endif //GL_EXT_bindable_uniform

#ifndef GL_EXT_blend_color

// Defines
#define GL_CONSTANT_COLOR_EXT             0x8001 
#define GL_ONE_MINUS_CONSTANT_COLOR_EXT   0x8002 
#define GL_CONSTANT_ALPHA_EXT             0x8003 
#define GL_ONE_MINUS_CONSTANT_ALPHA_EXT   0x8004 
#define GL_BLEND_COLOR_EXT                0x8005 

// functions typedefs
typedef void (APIENTRYP PFN_GLBLENDCOLOREXT_PROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);

// functions typedefs
GL_FUNC_DEF PFN_GLBLENDCOLOREXT_PROC _glBlendColorEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBlendColorEXT (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { return _glBlendColorEXT_(red, green, blue, alpha); };
#endif //GL_EXT_blend_color

#ifndef GL_EXT_blend_equation_separate

// Defines
#define GL_BLEND_EQUATION_RGB_EXT         0x8009 
#define GL_BLEND_EQUATION_ALPHA_EXT       0x883D 

// functions typedefs
typedef void (APIENTRYP PFN_GLBLENDEQUATIONSEPARATEEXT_PROC) (GLenum modeRGB, GLenum modeAlpha);

// functions typedefs
GL_FUNC_DEF PFN_GLBLENDEQUATIONSEPARATEEXT_PROC _glBlendEquationSeparateEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBlendEquationSeparateEXT (GLenum modeRGB, GLenum modeAlpha) { return _glBlendEquationSeparateEXT_(modeRGB, modeAlpha); };
#endif //GL_EXT_blend_equation_separate

#ifndef GL_EXT_blend_func_separate

// Defines
#define GL_BLEND_DST_RGB_EXT              0x80C8 
#define GL_BLEND_SRC_RGB_EXT              0x80C9 
#define GL_BLEND_DST_ALPHA_EXT            0x80CA 
#define GL_BLEND_SRC_ALPHA_EXT            0x80CB 

// functions typedefs
typedef void (APIENTRYP PFN_GLBLENDFUNCSEPARATEEXT_PROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);

// functions typedefs
GL_FUNC_DEF PFN_GLBLENDFUNCSEPARATEEXT_PROC _glBlendFuncSeparateEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBlendFuncSeparateEXT (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { return _glBlendFuncSeparateEXT_(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); };
#endif //GL_EXT_blend_func_separate

// GL_EXT_blend_logic_op

#ifndef GL_EXT_blend_minmax

// Defines
#define GL_MIN_EXT                        0x8007 
#define GL_MAX_EXT                        0x8008 
#define GL_FUNC_ADD_EXT                   0x8006 
#define GL_BLEND_EQUATION_EXT             0x8009 

// functions typedefs
typedef void (APIENTRYP PFN_GLBLENDEQUATIONEXT_PROC) (GLenum mode);

// functions typedefs
GL_FUNC_DEF PFN_GLBLENDEQUATIONEXT_PROC _glBlendEquationEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBlendEquationEXT (GLenum mode) { return _glBlendEquationEXT_(mode); };
#endif //GL_EXT_blend_minmax

#ifndef GL_EXT_blend_subtract

// Defines
#define GL_FUNC_SUBTRACT_EXT              0x800A 
#define GL_FUNC_REVERSE_SUBTRACT_EXT      0x800B 
#endif //GL_EXT_blend_subtract

#ifndef GL_EXT_clip_volume_hint

// Defines
#define GL_CLIP_VOLUME_CLIPPING_HINT_EXT  0x80F0 
#endif //GL_EXT_clip_volume_hint

#ifndef GL_EXT_cmyka

// Defines
#define GL_CMYK_EXT                       0x800C 
#define GL_CMYKA_EXT                      0x800D 
#define GL_PACK_CMYK_HINT_EXT             0x800E 
#define GL_UNPACK_CMYK_HINT_EXT           0x800F 
#endif //GL_EXT_cmyka

#ifndef GL_EXT_color_subtable

// functions typedefs
typedef void (APIENTRYP PFN_GLCOLORSUBTABLEEXT_PROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data);
typedef void (APIENTRYP PFN_GLCOPYCOLORSUBTABLEEXT_PROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);

// functions typedefs
GL_FUNC_DEF PFN_GLCOLORSUBTABLEEXT_PROC _glColorSubTableEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYCOLORSUBTABLEEXT_PROC _glCopyColorSubTableEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glColorSubTableEXT (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data) { return _glColorSubTableEXT_(target, start, count, format, type, data); };
inline void glCopyColorSubTableEXT (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) { return _glCopyColorSubTableEXT_(target, start, x, y, width); };
#endif //GL_EXT_color_subtable

#ifndef GL_EXT_compiled_vertex_array

// Defines
#define GL_ARRAY_ELEMENT_LOCK_FIRST_EXT   0x81A8 
#define GL_ARRAY_ELEMENT_LOCK_COUNT_EXT   0x81A9 

// functions typedefs
typedef void (APIENTRYP PFN_GLLOCKARRAYSEXT_PROC) (GLint first, GLsizei count);
typedef void (APIENTRYP PFN_GLUNLOCKARRAYSEXT_PROC) (void);

// functions typedefs
GL_FUNC_DEF PFN_GLLOCKARRAYSEXT_PROC _glLockArraysEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNLOCKARRAYSEXT_PROC _glUnlockArraysEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glLockArraysEXT (GLint first, GLsizei count) { return _glLockArraysEXT_(first, count); };
inline void glUnlockArraysEXT (void) { return _glUnlockArraysEXT_(); };
#endif //GL_EXT_compiled_vertex_array

#ifndef GL_EXT_convolution

// Defines
#define GL_CONVOLUTION_1D_EXT             0x8010 
#define GL_CONVOLUTION_2D_EXT             0x8011 
#define GL_SEPARABLE_2D_EXT               0x8012 
#define GL_CONVOLUTION_BORDER_MODE_EXT    0x8013 
#define GL_CONVOLUTION_FILTER_SCALE_EXT   0x8014 
#define GL_CONVOLUTION_FILTER_BIAS_EXT    0x8015 
#define GL_REDUCE_EXT                     0x8016 
#define GL_CONVOLUTION_FORMAT_EXT         0x8017 
#define GL_CONVOLUTION_WIDTH_EXT          0x8018 
#define GL_CONVOLUTION_HEIGHT_EXT         0x8019 
#define GL_MAX_CONVOLUTION_WIDTH_EXT      0x801A 
#define GL_MAX_CONVOLUTION_HEIGHT_EXT     0x801B 
#define GL_POST_CONVOLUTION_RED_SCALE_EXT 0x801C 
#define GL_POST_CONVOLUTION_GREEN_SCALE_EXT 0x801D 
#define GL_POST_CONVOLUTION_BLUE_SCALE_EXT 0x801E 
#define GL_POST_CONVOLUTION_ALPHA_SCALE_EXT 0x801F 
#define GL_POST_CONVOLUTION_RED_BIAS_EXT  0x8020 
#define GL_POST_CONVOLUTION_GREEN_BIAS_EXT 0x8021 
#define GL_POST_CONVOLUTION_BLUE_BIAS_EXT 0x8022 
#define GL_POST_CONVOLUTION_ALPHA_BIAS_EXT 0x8023 

// functions typedefs
typedef void (APIENTRYP PFN_GLCONVOLUTIONFILTER1DEXT_PROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image);
typedef void (APIENTRYP PFN_GLCONVOLUTIONFILTER2DEXT_PROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image);
typedef void (APIENTRYP PFN_GLCONVOLUTIONPARAMETERFEXT_PROC) (GLenum target, GLenum pname, GLfloat params);
typedef void (APIENTRYP PFN_GLCONVOLUTIONPARAMETERFVEXT_PROC) (GLenum target, GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLCONVOLUTIONPARAMETERIEXT_PROC) (GLenum target, GLenum pname, GLint params);
typedef void (APIENTRYP PFN_GLCONVOLUTIONPARAMETERIVEXT_PROC) (GLenum target, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLCOPYCONVOLUTIONFILTER1DEXT_PROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (APIENTRYP PFN_GLCOPYCONVOLUTIONFILTER2DEXT_PROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLGETCONVOLUTIONFILTEREXT_PROC) (GLenum target, GLenum format, GLenum type, void * image);
typedef void (APIENTRYP PFN_GLGETCONVOLUTIONPARAMETERFVEXT_PROC) (GLenum target, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETCONVOLUTIONPARAMETERIVEXT_PROC) (GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETSEPARABLEFILTEREXT_PROC) (GLenum target, GLenum format, GLenum type, void * row, void * column, void * span);
typedef void (APIENTRYP PFN_GLSEPARABLEFILTER2DEXT_PROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column);

// functions typedefs
GL_FUNC_DEF PFN_GLCONVOLUTIONFILTER1DEXT_PROC _glConvolutionFilter1DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCONVOLUTIONFILTER2DEXT_PROC _glConvolutionFilter2DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCONVOLUTIONPARAMETERFEXT_PROC _glConvolutionParameterfEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCONVOLUTIONPARAMETERFVEXT_PROC _glConvolutionParameterfvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCONVOLUTIONPARAMETERIEXT_PROC _glConvolutionParameteriEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCONVOLUTIONPARAMETERIVEXT_PROC _glConvolutionParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYCONVOLUTIONFILTER1DEXT_PROC _glCopyConvolutionFilter1DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYCONVOLUTIONFILTER2DEXT_PROC _glCopyConvolutionFilter2DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCONVOLUTIONFILTEREXT_PROC _glGetConvolutionFilterEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCONVOLUTIONPARAMETERFVEXT_PROC _glGetConvolutionParameterfvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCONVOLUTIONPARAMETERIVEXT_PROC _glGetConvolutionParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETSEPARABLEFILTEREXT_PROC _glGetSeparableFilterEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSEPARABLEFILTER2DEXT_PROC _glSeparableFilter2DEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glConvolutionFilter1DEXT (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image) { return _glConvolutionFilter1DEXT_(target, internalformat, width, format, type, image); };
inline void glConvolutionFilter2DEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image) { return _glConvolutionFilter2DEXT_(target, internalformat, width, height, format, type, image); };
inline void glConvolutionParameterfEXT (GLenum target, GLenum pname, GLfloat params) { return _glConvolutionParameterfEXT_(target, pname, params); };
inline void glConvolutionParameterfvEXT (GLenum target, GLenum pname, const GLfloat * params) { return _glConvolutionParameterfvEXT_(target, pname, params); };
inline void glConvolutionParameteriEXT (GLenum target, GLenum pname, GLint params) { return _glConvolutionParameteriEXT_(target, pname, params); };
inline void glConvolutionParameterivEXT (GLenum target, GLenum pname, const GLint * params) { return _glConvolutionParameterivEXT_(target, pname, params); };
inline void glCopyConvolutionFilter1DEXT (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { return _glCopyConvolutionFilter1DEXT_(target, internalformat, x, y, width); };
inline void glCopyConvolutionFilter2DEXT (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) { return _glCopyConvolutionFilter2DEXT_(target, internalformat, x, y, width, height); };
inline void glGetConvolutionFilterEXT (GLenum target, GLenum format, GLenum type, void * image) { return _glGetConvolutionFilterEXT_(target, format, type, image); };
inline void glGetConvolutionParameterfvEXT (GLenum target, GLenum pname, GLfloat * params) { return _glGetConvolutionParameterfvEXT_(target, pname, params); };
inline void glGetConvolutionParameterivEXT (GLenum target, GLenum pname, GLint * params) { return _glGetConvolutionParameterivEXT_(target, pname, params); };
inline void glGetSeparableFilterEXT (GLenum target, GLenum format, GLenum type, void * row, void * column, void * span) { return _glGetSeparableFilterEXT_(target, format, type, row, column, span); };
inline void glSeparableFilter2DEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column) { return _glSeparableFilter2DEXT_(target, internalformat, width, height, format, type, row, column); };
#endif //GL_EXT_convolution

#ifndef GL_EXT_coordinate_frame

// Defines
#define GL_TANGENT_ARRAY_EXT              0x8439 
#define GL_BINORMAL_ARRAY_EXT             0x843A 
#define GL_CURRENT_TANGENT_EXT            0x843B 
#define GL_CURRENT_BINORMAL_EXT           0x843C 
#define GL_TANGENT_ARRAY_TYPE_EXT         0x843E 
#define GL_TANGENT_ARRAY_STRIDE_EXT       0x843F 
#define GL_BINORMAL_ARRAY_TYPE_EXT        0x8440 
#define GL_BINORMAL_ARRAY_STRIDE_EXT      0x8441 
#define GL_TANGENT_ARRAY_POINTER_EXT      0x8442 
#define GL_BINORMAL_ARRAY_POINTER_EXT     0x8443 
#define GL_MAP1_TANGENT_EXT               0x8444 
#define GL_MAP2_TANGENT_EXT               0x8445 
#define GL_MAP1_BINORMAL_EXT              0x8446 
#define GL_MAP2_BINORMAL_EXT              0x8447 

// functions typedefs
typedef void (APIENTRYP PFN_GLTANGENT3BEXT_PROC) (GLbyte tx, GLbyte ty, GLbyte tz);
typedef void (APIENTRYP PFN_GLTANGENT3BVEXT_PROC) (const GLbyte * v);
typedef void (APIENTRYP PFN_GLTANGENT3DEXT_PROC) (GLdouble tx, GLdouble ty, GLdouble tz);
typedef void (APIENTRYP PFN_GLTANGENT3DVEXT_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLTANGENT3FEXT_PROC) (GLfloat tx, GLfloat ty, GLfloat tz);
typedef void (APIENTRYP PFN_GLTANGENT3FVEXT_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLTANGENT3IEXT_PROC) (GLint tx, GLint ty, GLint tz);
typedef void (APIENTRYP PFN_GLTANGENT3IVEXT_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLTANGENT3SEXT_PROC) (GLshort tx, GLshort ty, GLshort tz);
typedef void (APIENTRYP PFN_GLTANGENT3SVEXT_PROC) (const GLshort * v);
typedef void (APIENTRYP PFN_GLBINORMAL3BEXT_PROC) (GLbyte bx, GLbyte by, GLbyte bz);
typedef void (APIENTRYP PFN_GLBINORMAL3BVEXT_PROC) (const GLbyte * v);
typedef void (APIENTRYP PFN_GLBINORMAL3DEXT_PROC) (GLdouble bx, GLdouble by, GLdouble bz);
typedef void (APIENTRYP PFN_GLBINORMAL3DVEXT_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLBINORMAL3FEXT_PROC) (GLfloat bx, GLfloat by, GLfloat bz);
typedef void (APIENTRYP PFN_GLBINORMAL3FVEXT_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLBINORMAL3IEXT_PROC) (GLint bx, GLint by, GLint bz);
typedef void (APIENTRYP PFN_GLBINORMAL3IVEXT_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLBINORMAL3SEXT_PROC) (GLshort bx, GLshort by, GLshort bz);
typedef void (APIENTRYP PFN_GLBINORMAL3SVEXT_PROC) (const GLshort * v);
typedef void (APIENTRYP PFN_GLTANGENTPOINTEREXT_PROC) (GLenum type, GLsizei stride, const void * pointer);
typedef void (APIENTRYP PFN_GLBINORMALPOINTEREXT_PROC) (GLenum type, GLsizei stride, const void * pointer);

// functions typedefs
GL_FUNC_DEF PFN_GLTANGENT3BEXT_PROC _glTangent3bEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTANGENT3BVEXT_PROC _glTangent3bvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTANGENT3DEXT_PROC _glTangent3dEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTANGENT3DVEXT_PROC _glTangent3dvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTANGENT3FEXT_PROC _glTangent3fEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTANGENT3FVEXT_PROC _glTangent3fvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTANGENT3IEXT_PROC _glTangent3iEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTANGENT3IVEXT_PROC _glTangent3ivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTANGENT3SEXT_PROC _glTangent3sEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTANGENT3SVEXT_PROC _glTangent3svEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINORMAL3BEXT_PROC _glBinormal3bEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINORMAL3BVEXT_PROC _glBinormal3bvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINORMAL3DEXT_PROC _glBinormal3dEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINORMAL3DVEXT_PROC _glBinormal3dvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINORMAL3FEXT_PROC _glBinormal3fEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINORMAL3FVEXT_PROC _glBinormal3fvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINORMAL3IEXT_PROC _glBinormal3iEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINORMAL3IVEXT_PROC _glBinormal3ivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINORMAL3SEXT_PROC _glBinormal3sEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINORMAL3SVEXT_PROC _glBinormal3svEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTANGENTPOINTEREXT_PROC _glTangentPointerEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINORMALPOINTEREXT_PROC _glBinormalPointerEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glTangent3bEXT (GLbyte tx, GLbyte ty, GLbyte tz) { return _glTangent3bEXT_(tx, ty, tz); };
inline void glTangent3bvEXT (const GLbyte * v) { return _glTangent3bvEXT_(v); };
inline void glTangent3dEXT (GLdouble tx, GLdouble ty, GLdouble tz) { return _glTangent3dEXT_(tx, ty, tz); };
inline void glTangent3dvEXT (const GLdouble * v) { return _glTangent3dvEXT_(v); };
inline void glTangent3fEXT (GLfloat tx, GLfloat ty, GLfloat tz) { return _glTangent3fEXT_(tx, ty, tz); };
inline void glTangent3fvEXT (const GLfloat * v) { return _glTangent3fvEXT_(v); };
inline void glTangent3iEXT (GLint tx, GLint ty, GLint tz) { return _glTangent3iEXT_(tx, ty, tz); };
inline void glTangent3ivEXT (const GLint * v) { return _glTangent3ivEXT_(v); };
inline void glTangent3sEXT (GLshort tx, GLshort ty, GLshort tz) { return _glTangent3sEXT_(tx, ty, tz); };
inline void glTangent3svEXT (const GLshort * v) { return _glTangent3svEXT_(v); };
inline void glBinormal3bEXT (GLbyte bx, GLbyte by, GLbyte bz) { return _glBinormal3bEXT_(bx, by, bz); };
inline void glBinormal3bvEXT (const GLbyte * v) { return _glBinormal3bvEXT_(v); };
inline void glBinormal3dEXT (GLdouble bx, GLdouble by, GLdouble bz) { return _glBinormal3dEXT_(bx, by, bz); };
inline void glBinormal3dvEXT (const GLdouble * v) { return _glBinormal3dvEXT_(v); };
inline void glBinormal3fEXT (GLfloat bx, GLfloat by, GLfloat bz) { return _glBinormal3fEXT_(bx, by, bz); };
inline void glBinormal3fvEXT (const GLfloat * v) { return _glBinormal3fvEXT_(v); };
inline void glBinormal3iEXT (GLint bx, GLint by, GLint bz) { return _glBinormal3iEXT_(bx, by, bz); };
inline void glBinormal3ivEXT (const GLint * v) { return _glBinormal3ivEXT_(v); };
inline void glBinormal3sEXT (GLshort bx, GLshort by, GLshort bz) { return _glBinormal3sEXT_(bx, by, bz); };
inline void glBinormal3svEXT (const GLshort * v) { return _glBinormal3svEXT_(v); };
inline void glTangentPointerEXT (GLenum type, GLsizei stride, const void * pointer) { return _glTangentPointerEXT_(type, stride, pointer); };
inline void glBinormalPointerEXT (GLenum type, GLsizei stride, const void * pointer) { return _glBinormalPointerEXT_(type, stride, pointer); };
#endif //GL_EXT_coordinate_frame

#ifndef GL_EXT_copy_texture

// functions typedefs
typedef void (APIENTRYP PFN_GLCOPYTEXIMAGE1DEXT_PROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (APIENTRYP PFN_GLCOPYTEXIMAGE2DEXT_PROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (APIENTRYP PFN_GLCOPYTEXSUBIMAGE1DEXT_PROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (APIENTRYP PFN_GLCOPYTEXSUBIMAGE2DEXT_PROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLCOPYTEXSUBIMAGE3DEXT_PROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);

// functions typedefs
GL_FUNC_DEF PFN_GLCOPYTEXIMAGE1DEXT_PROC _glCopyTexImage1DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYTEXIMAGE2DEXT_PROC _glCopyTexImage2DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYTEXSUBIMAGE1DEXT_PROC _glCopyTexSubImage1DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYTEXSUBIMAGE2DEXT_PROC _glCopyTexSubImage2DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYTEXSUBIMAGE3DEXT_PROC _glCopyTexSubImage3DEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glCopyTexImage1DEXT (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { return _glCopyTexImage1DEXT_(target, level, internalformat, x, y, width, border); };
inline void glCopyTexImage2DEXT (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { return _glCopyTexImage2DEXT_(target, level, internalformat, x, y, width, height, border); };
inline void glCopyTexSubImage1DEXT (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { return _glCopyTexSubImage1DEXT_(target, level, xoffset, x, y, width); };
inline void glCopyTexSubImage2DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { return _glCopyTexSubImage2DEXT_(target, level, xoffset, yoffset, x, y, width, height); };
inline void glCopyTexSubImage3DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { return _glCopyTexSubImage3DEXT_(target, level, xoffset, yoffset, zoffset, x, y, width, height); };
#endif //GL_EXT_copy_texture

#ifndef GL_EXT_cull_vertex

// Defines
#define GL_CULL_VERTEX_EXT                0x81AA 
#define GL_CULL_VERTEX_EYE_POSITION_EXT   0x81AB 
#define GL_CULL_VERTEX_OBJECT_POSITION_EXT 0x81AC 

// functions typedefs
typedef void (APIENTRYP PFN_GLCULLPARAMETERDVEXT_PROC) (GLenum pname, GLdouble * params);
typedef void (APIENTRYP PFN_GLCULLPARAMETERFVEXT_PROC) (GLenum pname, GLfloat * params);

// functions typedefs
GL_FUNC_DEF PFN_GLCULLPARAMETERDVEXT_PROC _glCullParameterdvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCULLPARAMETERFVEXT_PROC _glCullParameterfvEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glCullParameterdvEXT (GLenum pname, GLdouble * params) { return _glCullParameterdvEXT_(pname, params); };
inline void glCullParameterfvEXT (GLenum pname, GLfloat * params) { return _glCullParameterfvEXT_(pname, params); };
#endif //GL_EXT_cull_vertex

#ifndef GL_EXT_depth_bounds_test

// Defines
#define GL_DEPTH_BOUNDS_TEST_EXT          0x8890 
#define GL_DEPTH_BOUNDS_EXT               0x8891 

// functions typedefs
typedef void (APIENTRYP PFN_GLDEPTHBOUNDSEXT_PROC) (GLclampd zmin, GLclampd zmax);

// functions typedefs
GL_FUNC_DEF PFN_GLDEPTHBOUNDSEXT_PROC _glDepthBoundsEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDepthBoundsEXT (GLclampd zmin, GLclampd zmax) { return _glDepthBoundsEXT_(zmin, zmax); };
#endif //GL_EXT_depth_bounds_test

#ifndef GL_EXT_draw_buffers2

// functions typedefs
typedef void (APIENTRYP PFN_GLCOLORMASKINDEXEDEXT_PROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);

// functions typedefs
GL_FUNC_DEF PFN_GLCOLORMASKINDEXEDEXT_PROC _glColorMaskIndexedEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glColorMaskIndexedEXT (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { return _glColorMaskIndexedEXT_(index, r, g, b, a); };
#endif //GL_EXT_draw_buffers2

#ifndef GL_EXT_draw_range_elements

// Defines
#define GL_MAX_ELEMENTS_VERTICES_EXT      0x80E8 
#define GL_MAX_ELEMENTS_INDICES_EXT       0x80E9 

// functions typedefs
typedef void (APIENTRYP PFN_GLDRAWRANGEELEMENTSEXT_PROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);

// functions typedefs
GL_FUNC_DEF PFN_GLDRAWRANGEELEMENTSEXT_PROC _glDrawRangeElementsEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDrawRangeElementsEXT (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) { return _glDrawRangeElementsEXT_(mode, start, end, count, type, indices); };
#endif //GL_EXT_draw_range_elements

#ifndef GL_EXT_external_buffer

// functions typedefs
typedef void (APIENTRYP PFN_GLBUFFERSTORAGEEXTERNALEXT_PROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags);
typedef void (APIENTRYP PFN_GLNAMEDBUFFERSTORAGEEXTERNALEXT_PROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags);

// functions typedefs
GL_FUNC_DEF PFN_GLBUFFERSTORAGEEXTERNALEXT_PROC _glBufferStorageExternalEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDBUFFERSTORAGEEXTERNALEXT_PROC _glNamedBufferStorageExternalEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBufferStorageExternalEXT (GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) { return _glBufferStorageExternalEXT_(target, offset, size, clientBuffer, flags); };
inline void glNamedBufferStorageExternalEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) { return _glNamedBufferStorageExternalEXT_(buffer, offset, size, clientBuffer, flags); };
#endif //GL_EXT_external_buffer

#ifndef GL_EXT_fog_coord

// Defines
#define GL_FOG_COORDINATE_SOURCE_EXT      0x8450 
#define GL_FOG_COORDINATE_EXT             0x8451 
#define GL_FRAGMENT_DEPTH_EXT             0x8452 
#define GL_CURRENT_FOG_COORDINATE_EXT     0x8453 
#define GL_FOG_COORDINATE_ARRAY_TYPE_EXT  0x8454 
#define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT 0x8455 
#define GL_FOG_COORDINATE_ARRAY_POINTER_EXT 0x8456 
#define GL_FOG_COORDINATE_ARRAY_EXT       0x8457 

// functions typedefs
typedef void (APIENTRYP PFN_GLFOGCOORDFEXT_PROC) (GLfloat coord);
typedef void (APIENTRYP PFN_GLFOGCOORDFVEXT_PROC) (const GLfloat * coord);
typedef void (APIENTRYP PFN_GLFOGCOORDDEXT_PROC) (GLdouble coord);
typedef void (APIENTRYP PFN_GLFOGCOORDDVEXT_PROC) (const GLdouble * coord);
typedef void (APIENTRYP PFN_GLFOGCOORDPOINTEREXT_PROC) (GLenum type, GLsizei stride, const void * pointer);

// functions typedefs
GL_FUNC_DEF PFN_GLFOGCOORDFEXT_PROC _glFogCoordfEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFOGCOORDFVEXT_PROC _glFogCoordfvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFOGCOORDDEXT_PROC _glFogCoorddEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFOGCOORDDVEXT_PROC _glFogCoorddvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFOGCOORDPOINTEREXT_PROC _glFogCoordPointerEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glFogCoordfEXT (GLfloat coord) { return _glFogCoordfEXT_(coord); };
inline void glFogCoordfvEXT (const GLfloat * coord) { return _glFogCoordfvEXT_(coord); };
inline void glFogCoorddEXT (GLdouble coord) { return _glFogCoorddEXT_(coord); };
inline void glFogCoorddvEXT (const GLdouble * coord) { return _glFogCoorddvEXT_(coord); };
inline void glFogCoordPointerEXT (GLenum type, GLsizei stride, const void * pointer) { return _glFogCoordPointerEXT_(type, stride, pointer); };
#endif //GL_EXT_fog_coord

#ifndef GL_EXT_framebuffer_blit

// Defines
#define GL_READ_FRAMEBUFFER_EXT           0x8CA8 
#define GL_DRAW_FRAMEBUFFER_EXT           0x8CA9 
#define GL_DRAW_FRAMEBUFFER_BINDING_EXT   0x8CA6 
#define GL_READ_FRAMEBUFFER_BINDING_EXT   0x8CAA 

// functions typedefs
typedef void (APIENTRYP PFN_GLBLITFRAMEBUFFEREXT_PROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);

// functions typedefs
GL_FUNC_DEF PFN_GLBLITFRAMEBUFFEREXT_PROC _glBlitFramebufferEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBlitFramebufferEXT (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { return _glBlitFramebufferEXT_(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); };
#endif //GL_EXT_framebuffer_blit

#ifndef GL_EXT_framebuffer_multisample

// Defines
#define GL_RENDERBUFFER_SAMPLES_EXT       0x8CAB 
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56 
#define GL_MAX_SAMPLES_EXT                0x8D57 

// functions typedefs
typedef void (APIENTRYP PFN_GLRENDERBUFFERSTORAGEMULTISAMPLEEXT_PROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);

// functions typedefs
GL_FUNC_DEF PFN_GLRENDERBUFFERSTORAGEMULTISAMPLEEXT_PROC _glRenderbufferStorageMultisampleEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glRenderbufferStorageMultisampleEXT (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { return _glRenderbufferStorageMultisampleEXT_(target, samples, internalformat, width, height); };
#endif //GL_EXT_framebuffer_multisample

#ifndef GL_EXT_framebuffer_multisample_blit_scaled

// Defines
#define GL_SCALED_RESOLVE_FASTEST_EXT     0x90BA 
#define GL_SCALED_RESOLVE_NICEST_EXT      0x90BB 
#endif //GL_EXT_framebuffer_multisample_blit_scaled

#ifndef GL_EXT_framebuffer_object

// Defines
#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506 
#define GL_MAX_RENDERBUFFER_SIZE_EXT      0x84E8 
#define GL_FRAMEBUFFER_BINDING_EXT        0x8CA6 
#define GL_RENDERBUFFER_BINDING_EXT       0x8CA7 
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0 
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1 
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2 
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3 
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4 
#define GL_FRAMEBUFFER_COMPLETE_EXT       0x8CD5 
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6 
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7 
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9 
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA 
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB 
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC 
#define GL_FRAMEBUFFER_UNSUPPORTED_EXT    0x8CDD 
#define GL_MAX_COLOR_ATTACHMENTS_EXT      0x8CDF 
#define GL_COLOR_ATTACHMENT0_EXT          0x8CE0 
#define GL_COLOR_ATTACHMENT1_EXT          0x8CE1 
#define GL_COLOR_ATTACHMENT2_EXT          0x8CE2 
#define GL_COLOR_ATTACHMENT3_EXT          0x8CE3 
#define GL_COLOR_ATTACHMENT4_EXT          0x8CE4 
#define GL_COLOR_ATTACHMENT5_EXT          0x8CE5 
#define GL_COLOR_ATTACHMENT6_EXT          0x8CE6 
#define GL_COLOR_ATTACHMENT7_EXT          0x8CE7 
#define GL_COLOR_ATTACHMENT8_EXT          0x8CE8 
#define GL_COLOR_ATTACHMENT9_EXT          0x8CE9 
#define GL_COLOR_ATTACHMENT10_EXT         0x8CEA 
#define GL_COLOR_ATTACHMENT11_EXT         0x8CEB 
#define GL_COLOR_ATTACHMENT12_EXT         0x8CEC 
#define GL_COLOR_ATTACHMENT13_EXT         0x8CED 
#define GL_COLOR_ATTACHMENT14_EXT         0x8CEE 
#define GL_COLOR_ATTACHMENT15_EXT         0x8CEF 
#define GL_DEPTH_ATTACHMENT_EXT           0x8D00 
#define GL_STENCIL_ATTACHMENT_EXT         0x8D20 
#define GL_FRAMEBUFFER_EXT                0x8D40 
#define GL_RENDERBUFFER_EXT               0x8D41 
#define GL_RENDERBUFFER_WIDTH_EXT         0x8D42 
#define GL_RENDERBUFFER_HEIGHT_EXT        0x8D43 
#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44 
#define GL_STENCIL_INDEX1_EXT             0x8D46 
#define GL_STENCIL_INDEX4_EXT             0x8D47 
#define GL_STENCIL_INDEX8_EXT             0x8D48 
#define GL_STENCIL_INDEX16_EXT            0x8D49 
#define GL_RENDERBUFFER_RED_SIZE_EXT      0x8D50 
#define GL_RENDERBUFFER_GREEN_SIZE_EXT    0x8D51 
#define GL_RENDERBUFFER_BLUE_SIZE_EXT     0x8D52 
#define GL_RENDERBUFFER_ALPHA_SIZE_EXT    0x8D53 
#define GL_RENDERBUFFER_DEPTH_SIZE_EXT    0x8D54 
#define GL_RENDERBUFFER_STENCIL_SIZE_EXT  0x8D55 

// functions typedefs
typedef GLboolean (APIENTRYP PFN_GLISRENDERBUFFEREXT_PROC) (GLuint renderbuffer);
typedef void (APIENTRYP PFN_GLBINDRENDERBUFFEREXT_PROC) (GLenum target, GLuint renderbuffer);
typedef void (APIENTRYP PFN_GLDELETERENDERBUFFERSEXT_PROC) (GLsizei n, const GLuint * renderbuffers);
typedef void (APIENTRYP PFN_GLGENRENDERBUFFERSEXT_PROC) (GLsizei n, GLuint * renderbuffers);
typedef void (APIENTRYP PFN_GLRENDERBUFFERSTORAGEEXT_PROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFN_GLGETRENDERBUFFERPARAMETERIVEXT_PROC) (GLenum target, GLenum pname, GLint * params);
typedef GLboolean (APIENTRYP PFN_GLISFRAMEBUFFEREXT_PROC) (GLuint framebuffer);
typedef void (APIENTRYP PFN_GLBINDFRAMEBUFFEREXT_PROC) (GLenum target, GLuint framebuffer);
typedef void (APIENTRYP PFN_GLDELETEFRAMEBUFFERSEXT_PROC) (GLsizei n, const GLuint * framebuffers);
typedef void (APIENTRYP PFN_GLGENFRAMEBUFFERSEXT_PROC) (GLsizei n, GLuint * framebuffers);
typedef GLenum (APIENTRYP PFN_GLCHECKFRAMEBUFFERSTATUSEXT_PROC) (GLenum target);
typedef void (APIENTRYP PFN_GLFRAMEBUFFERTEXTURE1DEXT_PROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (APIENTRYP PFN_GLFRAMEBUFFERTEXTURE2DEXT_PROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (APIENTRYP PFN_GLFRAMEBUFFERTEXTURE3DEXT_PROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (APIENTRYP PFN_GLFRAMEBUFFERRENDERBUFFEREXT_PROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (APIENTRYP PFN_GLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXT_PROC) (GLenum target, GLenum attachment, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGENERATEMIPMAPEXT_PROC) (GLenum target);

// functions typedefs
GL_FUNC_DEF PFN_GLISRENDERBUFFEREXT_PROC _glIsRenderbufferEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDRENDERBUFFEREXT_PROC _glBindRenderbufferEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETERENDERBUFFERSEXT_PROC _glDeleteRenderbuffersEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENRENDERBUFFERSEXT_PROC _glGenRenderbuffersEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRENDERBUFFERSTORAGEEXT_PROC _glRenderbufferStorageEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETRENDERBUFFERPARAMETERIVEXT_PROC _glGetRenderbufferParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISFRAMEBUFFEREXT_PROC _glIsFramebufferEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDFRAMEBUFFEREXT_PROC _glBindFramebufferEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEFRAMEBUFFERSEXT_PROC _glDeleteFramebuffersEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENFRAMEBUFFERSEXT_PROC _glGenFramebuffersEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCHECKFRAMEBUFFERSTATUSEXT_PROC _glCheckFramebufferStatusEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAMEBUFFERTEXTURE1DEXT_PROC _glFramebufferTexture1DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAMEBUFFERTEXTURE2DEXT_PROC _glFramebufferTexture2DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAMEBUFFERTEXTURE3DEXT_PROC _glFramebufferTexture3DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAMEBUFFERRENDERBUFFEREXT_PROC _glFramebufferRenderbufferEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXT_PROC _glGetFramebufferAttachmentParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENERATEMIPMAPEXT_PROC _glGenerateMipmapEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline GLboolean glIsRenderbufferEXT (GLuint renderbuffer) { return _glIsRenderbufferEXT_(renderbuffer); };
inline void glBindRenderbufferEXT (GLenum target, GLuint renderbuffer) { return _glBindRenderbufferEXT_(target, renderbuffer); };
inline void glDeleteRenderbuffersEXT (GLsizei n, const GLuint * renderbuffers) { return _glDeleteRenderbuffersEXT_(n, renderbuffers); };
inline void glGenRenderbuffersEXT (GLsizei n, GLuint * renderbuffers) { return _glGenRenderbuffersEXT_(n, renderbuffers); };
inline void glRenderbufferStorageEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { return _glRenderbufferStorageEXT_(target, internalformat, width, height); };
inline void glGetRenderbufferParameterivEXT (GLenum target, GLenum pname, GLint * params) { return _glGetRenderbufferParameterivEXT_(target, pname, params); };
inline GLboolean glIsFramebufferEXT (GLuint framebuffer) { return _glIsFramebufferEXT_(framebuffer); };
inline void glBindFramebufferEXT (GLenum target, GLuint framebuffer) { return _glBindFramebufferEXT_(target, framebuffer); };
inline void glDeleteFramebuffersEXT (GLsizei n, const GLuint * framebuffers) { return _glDeleteFramebuffersEXT_(n, framebuffers); };
inline void glGenFramebuffersEXT (GLsizei n, GLuint * framebuffers) { return _glGenFramebuffersEXT_(n, framebuffers); };
inline GLenum glCheckFramebufferStatusEXT (GLenum target) { return _glCheckFramebufferStatusEXT_(target); };
inline void glFramebufferTexture1DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { return _glFramebufferTexture1DEXT_(target, attachment, textarget, texture, level); };
inline void glFramebufferTexture2DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { return _glFramebufferTexture2DEXT_(target, attachment, textarget, texture, level); };
inline void glFramebufferTexture3DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { return _glFramebufferTexture3DEXT_(target, attachment, textarget, texture, level, zoffset); };
inline void glFramebufferRenderbufferEXT (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { return _glFramebufferRenderbufferEXT_(target, attachment, renderbuffertarget, renderbuffer); };
inline void glGetFramebufferAttachmentParameterivEXT (GLenum target, GLenum attachment, GLenum pname, GLint * params) { return _glGetFramebufferAttachmentParameterivEXT_(target, attachment, pname, params); };
inline void glGenerateMipmapEXT (GLenum target) { return _glGenerateMipmapEXT_(target); };
#endif //GL_EXT_framebuffer_object

#ifndef GL_EXT_framebuffer_sRGB

// Defines
#define GL_FRAMEBUFFER_SRGB_EXT           0x8DB9 
#define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT   0x8DBA 
#endif //GL_EXT_framebuffer_sRGB

#ifndef GL_EXT_geometry_shader4

// Defines
#define GL_GEOMETRY_SHADER_EXT            0x8DD9 
#define GL_GEOMETRY_VERTICES_OUT_EXT      0x8DDA 
#define GL_GEOMETRY_INPUT_TYPE_EXT        0x8DDB 
#define GL_GEOMETRY_OUTPUT_TYPE_EXT       0x8DDC 
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29 
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD 
#define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE 
#define GL_MAX_VARYING_COMPONENTS_EXT     0x8B4B 
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF 
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0 
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1 
#define GL_LINES_ADJACENCY_EXT            0x000A 
#define GL_LINE_STRIP_ADJACENCY_EXT       0x000B 
#define GL_TRIANGLES_ADJACENCY_EXT        0x000C 
#define GL_TRIANGLE_STRIP_ADJACENCY_EXT   0x000D 
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8 
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9 
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7 
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4 
#define GL_PROGRAM_POINT_SIZE_EXT         0x8642 

// functions typedefs
typedef void (APIENTRYP PFN_GLPROGRAMPARAMETERIEXT_PROC) (GLuint program, GLenum pname, GLint value);

// functions typedefs
GL_FUNC_DEF PFN_GLPROGRAMPARAMETERIEXT_PROC _glProgramParameteriEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glProgramParameteriEXT (GLuint program, GLenum pname, GLint value) { return _glProgramParameteriEXT_(program, pname, value); };
#endif //GL_EXT_geometry_shader4

#ifndef GL_EXT_gpu_program_parameters

// functions typedefs
typedef void (APIENTRYP PFN_GLPROGRAMENVPARAMETERS4FVEXT_PROC) (GLenum target, GLuint index, GLsizei count, const GLfloat * params);
typedef void (APIENTRYP PFN_GLPROGRAMLOCALPARAMETERS4FVEXT_PROC) (GLenum target, GLuint index, GLsizei count, const GLfloat * params);

// functions typedefs
GL_FUNC_DEF PFN_GLPROGRAMENVPARAMETERS4FVEXT_PROC _glProgramEnvParameters4fvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMLOCALPARAMETERS4FVEXT_PROC _glProgramLocalParameters4fvEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glProgramEnvParameters4fvEXT (GLenum target, GLuint index, GLsizei count, const GLfloat * params) { return _glProgramEnvParameters4fvEXT_(target, index, count, params); };
inline void glProgramLocalParameters4fvEXT (GLenum target, GLuint index, GLsizei count, const GLfloat * params) { return _glProgramLocalParameters4fvEXT_(target, index, count, params); };
#endif //GL_EXT_gpu_program_parameters

#ifndef GL_EXT_gpu_shader4

// Defines
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT 0x88FD 
#define GL_SAMPLER_1D_ARRAY_EXT           0x8DC0 
#define GL_SAMPLER_2D_ARRAY_EXT           0x8DC1 
#define GL_SAMPLER_BUFFER_EXT             0x8DC2 
#define GL_SAMPLER_1D_ARRAY_SHADOW_EXT    0x8DC3 
#define GL_SAMPLER_2D_ARRAY_SHADOW_EXT    0x8DC4 
#define GL_SAMPLER_CUBE_SHADOW_EXT        0x8DC5 
#define GL_UNSIGNED_INT_VEC2_EXT          0x8DC6 
#define GL_UNSIGNED_INT_VEC3_EXT          0x8DC7 
#define GL_UNSIGNED_INT_VEC4_EXT          0x8DC8 
#define GL_INT_SAMPLER_1D_EXT             0x8DC9 
#define GL_INT_SAMPLER_2D_EXT             0x8DCA 
#define GL_INT_SAMPLER_3D_EXT             0x8DCB 
#define GL_INT_SAMPLER_CUBE_EXT           0x8DCC 
#define GL_INT_SAMPLER_2D_RECT_EXT        0x8DCD 
#define GL_INT_SAMPLER_1D_ARRAY_EXT       0x8DCE 
#define GL_INT_SAMPLER_2D_ARRAY_EXT       0x8DCF 
#define GL_INT_SAMPLER_BUFFER_EXT         0x8DD0 
#define GL_UNSIGNED_INT_SAMPLER_1D_EXT    0x8DD1 
#define GL_UNSIGNED_INT_SAMPLER_2D_EXT    0x8DD2 
#define GL_UNSIGNED_INT_SAMPLER_3D_EXT    0x8DD3 
#define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT  0x8DD4 
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5 
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6 
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7 
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8 
#define GL_MIN_PROGRAM_TEXEL_OFFSET_EXT   0x8904 
#define GL_MAX_PROGRAM_TEXEL_OFFSET_EXT   0x8905 

// functions typedefs
typedef void (APIENTRYP PFN_GLGETUNIFORMUIVEXT_PROC) (GLuint program, GLint location, GLuint * params);
typedef void (APIENTRYP PFN_GLBINDFRAGDATALOCATIONEXT_PROC) (GLuint program, GLuint color, const GLchar * name);
typedef GLint (APIENTRYP PFN_GLGETFRAGDATALOCATIONEXT_PROC) (GLuint program, const GLchar * name);
typedef void (APIENTRYP PFN_GLUNIFORM1UIEXT_PROC) (GLint location, GLuint v0);
typedef void (APIENTRYP PFN_GLUNIFORM2UIEXT_PROC) (GLint location, GLuint v0, GLuint v1);
typedef void (APIENTRYP PFN_GLUNIFORM3UIEXT_PROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (APIENTRYP PFN_GLUNIFORM4UIEXT_PROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (APIENTRYP PFN_GLUNIFORM1UIVEXT_PROC) (GLint location, GLsizei count, const GLuint * value);
typedef void (APIENTRYP PFN_GLUNIFORM2UIVEXT_PROC) (GLint location, GLsizei count, const GLuint * value);
typedef void (APIENTRYP PFN_GLUNIFORM3UIVEXT_PROC) (GLint location, GLsizei count, const GLuint * value);
typedef void (APIENTRYP PFN_GLUNIFORM4UIVEXT_PROC) (GLint location, GLsizei count, const GLuint * value);

// functions typedefs
GL_FUNC_DEF PFN_GLGETUNIFORMUIVEXT_PROC _glGetUniformuivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDFRAGDATALOCATIONEXT_PROC _glBindFragDataLocationEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFRAGDATALOCATIONEXT_PROC _glGetFragDataLocationEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM1UIEXT_PROC _glUniform1uiEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2UIEXT_PROC _glUniform2uiEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3UIEXT_PROC _glUniform3uiEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4UIEXT_PROC _glUniform4uiEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM1UIVEXT_PROC _glUniform1uivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM2UIVEXT_PROC _glUniform2uivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM3UIVEXT_PROC _glUniform3uivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNIFORM4UIVEXT_PROC _glUniform4uivEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glGetUniformuivEXT (GLuint program, GLint location, GLuint * params) { return _glGetUniformuivEXT_(program, location, params); };
inline void glBindFragDataLocationEXT (GLuint program, GLuint color, const GLchar * name) { return _glBindFragDataLocationEXT_(program, color, name); };
inline GLint glGetFragDataLocationEXT (GLuint program, const GLchar * name) { return _glGetFragDataLocationEXT_(program, name); };
inline void glUniform1uiEXT (GLint location, GLuint v0) { return _glUniform1uiEXT_(location, v0); };
inline void glUniform2uiEXT (GLint location, GLuint v0, GLuint v1) { return _glUniform2uiEXT_(location, v0, v1); };
inline void glUniform3uiEXT (GLint location, GLuint v0, GLuint v1, GLuint v2) { return _glUniform3uiEXT_(location, v0, v1, v2); };
inline void glUniform4uiEXT (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { return _glUniform4uiEXT_(location, v0, v1, v2, v3); };
inline void glUniform1uivEXT (GLint location, GLsizei count, const GLuint * value) { return _glUniform1uivEXT_(location, count, value); };
inline void glUniform2uivEXT (GLint location, GLsizei count, const GLuint * value) { return _glUniform2uivEXT_(location, count, value); };
inline void glUniform3uivEXT (GLint location, GLsizei count, const GLuint * value) { return _glUniform3uivEXT_(location, count, value); };
inline void glUniform4uivEXT (GLint location, GLsizei count, const GLuint * value) { return _glUniform4uivEXT_(location, count, value); };
#endif //GL_EXT_gpu_shader4

#ifndef GL_EXT_histogram

// Defines
#define GL_HISTOGRAM_EXT                  0x8024 
#define GL_PROXY_HISTOGRAM_EXT            0x8025 
#define GL_HISTOGRAM_WIDTH_EXT            0x8026 
#define GL_HISTOGRAM_FORMAT_EXT           0x8027 
#define GL_HISTOGRAM_RED_SIZE_EXT         0x8028 
#define GL_HISTOGRAM_GREEN_SIZE_EXT       0x8029 
#define GL_HISTOGRAM_BLUE_SIZE_EXT        0x802A 
#define GL_HISTOGRAM_ALPHA_SIZE_EXT       0x802B 
#define GL_HISTOGRAM_LUMINANCE_SIZE_EXT   0x802C 
#define GL_HISTOGRAM_SINK_EXT             0x802D 
#define GL_MINMAX_EXT                     0x802E 
#define GL_MINMAX_FORMAT_EXT              0x802F 
#define GL_MINMAX_SINK_EXT                0x8030 
#define GL_TABLE_TOO_LARGE_EXT            0x8031 

// functions typedefs
typedef void (APIENTRYP PFN_GLGETHISTOGRAMEXT_PROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void * values);
typedef void (APIENTRYP PFN_GLGETHISTOGRAMPARAMETERFVEXT_PROC) (GLenum target, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETHISTOGRAMPARAMETERIVEXT_PROC) (GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETMINMAXEXT_PROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void * values);
typedef void (APIENTRYP PFN_GLGETMINMAXPARAMETERFVEXT_PROC) (GLenum target, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETMINMAXPARAMETERIVEXT_PROC) (GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLHISTOGRAMEXT_PROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
typedef void (APIENTRYP PFN_GLMINMAXEXT_PROC) (GLenum target, GLenum internalformat, GLboolean sink);
typedef void (APIENTRYP PFN_GLRESETHISTOGRAMEXT_PROC) (GLenum target);
typedef void (APIENTRYP PFN_GLRESETMINMAXEXT_PROC) (GLenum target);

// functions typedefs
GL_FUNC_DEF PFN_GLGETHISTOGRAMEXT_PROC _glGetHistogramEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETHISTOGRAMPARAMETERFVEXT_PROC _glGetHistogramParameterfvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETHISTOGRAMPARAMETERIVEXT_PROC _glGetHistogramParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMINMAXEXT_PROC _glGetMinmaxEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMINMAXPARAMETERFVEXT_PROC _glGetMinmaxParameterfvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMINMAXPARAMETERIVEXT_PROC _glGetMinmaxParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLHISTOGRAMEXT_PROC _glHistogramEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMINMAXEXT_PROC _glMinmaxEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRESETHISTOGRAMEXT_PROC _glResetHistogramEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRESETMINMAXEXT_PROC _glResetMinmaxEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glGetHistogramEXT (GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { return _glGetHistogramEXT_(target, reset, format, type, values); };
inline void glGetHistogramParameterfvEXT (GLenum target, GLenum pname, GLfloat * params) { return _glGetHistogramParameterfvEXT_(target, pname, params); };
inline void glGetHistogramParameterivEXT (GLenum target, GLenum pname, GLint * params) { return _glGetHistogramParameterivEXT_(target, pname, params); };
inline void glGetMinmaxEXT (GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { return _glGetMinmaxEXT_(target, reset, format, type, values); };
inline void glGetMinmaxParameterfvEXT (GLenum target, GLenum pname, GLfloat * params) { return _glGetMinmaxParameterfvEXT_(target, pname, params); };
inline void glGetMinmaxParameterivEXT (GLenum target, GLenum pname, GLint * params) { return _glGetMinmaxParameterivEXT_(target, pname, params); };
inline void glHistogramEXT (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) { return _glHistogramEXT_(target, width, internalformat, sink); };
inline void glMinmaxEXT (GLenum target, GLenum internalformat, GLboolean sink) { return _glMinmaxEXT_(target, internalformat, sink); };
inline void glResetHistogramEXT (GLenum target) { return _glResetHistogramEXT_(target); };
inline void glResetMinmaxEXT (GLenum target) { return _glResetMinmaxEXT_(target); };
#endif //GL_EXT_histogram

#ifndef GL_EXT_index_array_formats

// Defines
#define GL_IUI_V2F_EXT                    0x81AD 
#define GL_IUI_V3F_EXT                    0x81AE 
#define GL_IUI_N3F_V2F_EXT                0x81AF 
#define GL_IUI_N3F_V3F_EXT                0x81B0 
#define GL_T2F_IUI_V2F_EXT                0x81B1 
#define GL_T2F_IUI_V3F_EXT                0x81B2 
#define GL_T2F_IUI_N3F_V2F_EXT            0x81B3 
#define GL_T2F_IUI_N3F_V3F_EXT            0x81B4 
#endif //GL_EXT_index_array_formats

#ifndef GL_EXT_index_func

// Defines
#define GL_INDEX_TEST_EXT                 0x81B5 
#define GL_INDEX_TEST_FUNC_EXT            0x81B6 
#define GL_INDEX_TEST_REF_EXT             0x81B7 

// functions typedefs
typedef void (APIENTRYP PFN_GLINDEXFUNCEXT_PROC) (GLenum func, GLclampf ref);

// functions typedefs
GL_FUNC_DEF PFN_GLINDEXFUNCEXT_PROC _glIndexFuncEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glIndexFuncEXT (GLenum func, GLclampf ref) { return _glIndexFuncEXT_(func, ref); };
#endif //GL_EXT_index_func

#ifndef GL_EXT_index_material

// Defines
#define GL_INDEX_MATERIAL_EXT             0x81B8 
#define GL_INDEX_MATERIAL_PARAMETER_EXT   0x81B9 
#define GL_INDEX_MATERIAL_FACE_EXT        0x81BA 

// functions typedefs
typedef void (APIENTRYP PFN_GLINDEXMATERIALEXT_PROC) (GLenum face, GLenum mode);

// functions typedefs
GL_FUNC_DEF PFN_GLINDEXMATERIALEXT_PROC _glIndexMaterialEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glIndexMaterialEXT (GLenum face, GLenum mode) { return _glIndexMaterialEXT_(face, mode); };
#endif //GL_EXT_index_material

// GL_EXT_index_texture

#ifndef GL_EXT_light_texture

// Defines
#define GL_FRAGMENT_MATERIAL_EXT          0x8349 
#define GL_FRAGMENT_NORMAL_EXT            0x834A 
#define GL_FRAGMENT_COLOR_EXT             0x834C 
#define GL_ATTENUATION_EXT                0x834D 
#define GL_SHADOW_ATTENUATION_EXT         0x834E 
#define GL_TEXTURE_APPLICATION_MODE_EXT   0x834F 
#define GL_TEXTURE_LIGHT_EXT              0x8350 
#define GL_TEXTURE_MATERIAL_FACE_EXT      0x8351 
#define GL_TEXTURE_MATERIAL_PARAMETER_EXT 0x8352 

// functions typedefs
typedef void (APIENTRYP PFN_GLAPPLYTEXTUREEXT_PROC) (GLenum mode);
typedef void (APIENTRYP PFN_GLTEXTURELIGHTEXT_PROC) (GLenum pname);
typedef void (APIENTRYP PFN_GLTEXTUREMATERIALEXT_PROC) (GLenum face, GLenum mode);

// functions typedefs
GL_FUNC_DEF PFN_GLAPPLYTEXTUREEXT_PROC _glApplyTextureEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURELIGHTEXT_PROC _glTextureLightEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREMATERIALEXT_PROC _glTextureMaterialEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glApplyTextureEXT (GLenum mode) { return _glApplyTextureEXT_(mode); };
inline void glTextureLightEXT (GLenum pname) { return _glTextureLightEXT_(pname); };
inline void glTextureMaterialEXT (GLenum face, GLenum mode) { return _glTextureMaterialEXT_(face, mode); };
#endif //GL_EXT_light_texture

#ifndef GL_EXT_memory_object

// Defines
#define GL_TEXTURE_TILING_EXT             0x9580 
#define GL_DEDICATED_MEMORY_OBJECT_EXT    0x9581 
#define GL_PROTECTED_MEMORY_OBJECT_EXT    0x959B 
#define GL_NUM_TILING_TYPES_EXT           0x9582 
#define GL_TILING_TYPES_EXT               0x9583 
#define GL_OPTIMAL_TILING_EXT             0x9584 
#define GL_LINEAR_TILING_EXT              0x9585 
#define GL_NUM_DEVICE_UUIDS_EXT           0x9596 
#define GL_DEVICE_UUID_EXT                0x9597 
#define GL_DRIVER_UUID_EXT                0x9598 
#define GL_UUID_SIZE_EXT                  16 

// functions typedefs
typedef void (APIENTRYP PFN_GLGETUNSIGNEDBYTEVEXT_PROC) (GLenum pname, GLubyte * data);
typedef void (APIENTRYP PFN_GLGETUNSIGNEDBYTEI_VEXT_PROC) (GLenum target, GLuint index, GLubyte * data);
typedef void (APIENTRYP PFN_GLDELETEMEMORYOBJECTSEXT_PROC) (GLsizei n, const GLuint * memoryObjects);
typedef GLboolean (APIENTRYP PFN_GLISMEMORYOBJECTEXT_PROC) (GLuint memoryObject);
typedef void (APIENTRYP PFN_GLCREATEMEMORYOBJECTSEXT_PROC) (GLsizei n, GLuint * memoryObjects);
typedef void (APIENTRYP PFN_GLMEMORYOBJECTPARAMETERIVEXT_PROC) (GLuint memoryObject, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLGETMEMORYOBJECTPARAMETERIVEXT_PROC) (GLuint memoryObject, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLTEXSTORAGEMEM2DEXT_PROC) (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
typedef void (APIENTRYP PFN_GLTEXSTORAGEMEM2DMULTISAMPLEEXT_PROC) (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
typedef void (APIENTRYP PFN_GLTEXSTORAGEMEM3DEXT_PROC) (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
typedef void (APIENTRYP PFN_GLTEXSTORAGEMEM3DMULTISAMPLEEXT_PROC) (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
typedef void (APIENTRYP PFN_GLBUFFERSTORAGEMEMEXT_PROC) (GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset);
typedef void (APIENTRYP PFN_GLTEXTURESTORAGEMEM2DEXT_PROC) (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
typedef void (APIENTRYP PFN_GLTEXTURESTORAGEMEM2DMULTISAMPLEEXT_PROC) (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
typedef void (APIENTRYP PFN_GLTEXTURESTORAGEMEM3DEXT_PROC) (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
typedef void (APIENTRYP PFN_GLTEXTURESTORAGEMEM3DMULTISAMPLEEXT_PROC) (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
typedef void (APIENTRYP PFN_GLNAMEDBUFFERSTORAGEMEMEXT_PROC) (GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset);
typedef void (APIENTRYP PFN_GLTEXSTORAGEMEM1DEXT_PROC) (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);
typedef void (APIENTRYP PFN_GLTEXTURESTORAGEMEM1DEXT_PROC) (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);

// functions typedefs
GL_FUNC_DEF PFN_GLGETUNSIGNEDBYTEVEXT_PROC _glGetUnsignedBytevEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETUNSIGNEDBYTEI_VEXT_PROC _glGetUnsignedBytei_vEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEMEMORYOBJECTSEXT_PROC _glDeleteMemoryObjectsEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISMEMORYOBJECTEXT_PROC _glIsMemoryObjectEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCREATEMEMORYOBJECTSEXT_PROC _glCreateMemoryObjectsEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMEMORYOBJECTPARAMETERIVEXT_PROC _glMemoryObjectParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMEMORYOBJECTPARAMETERIVEXT_PROC _glGetMemoryObjectParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXSTORAGEMEM2DEXT_PROC _glTexStorageMem2DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXSTORAGEMEM2DMULTISAMPLEEXT_PROC _glTexStorageMem2DMultisampleEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXSTORAGEMEM3DEXT_PROC _glTexStorageMem3DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXSTORAGEMEM3DMULTISAMPLEEXT_PROC _glTexStorageMem3DMultisampleEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBUFFERSTORAGEMEMEXT_PROC _glBufferStorageMemEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESTORAGEMEM2DEXT_PROC _glTextureStorageMem2DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESTORAGEMEM2DMULTISAMPLEEXT_PROC _glTextureStorageMem2DMultisampleEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESTORAGEMEM3DEXT_PROC _glTextureStorageMem3DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESTORAGEMEM3DMULTISAMPLEEXT_PROC _glTextureStorageMem3DMultisampleEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNAMEDBUFFERSTORAGEMEMEXT_PROC _glNamedBufferStorageMemEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXSTORAGEMEM1DEXT_PROC _glTexStorageMem1DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTURESTORAGEMEM1DEXT_PROC _glTextureStorageMem1DEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glGetUnsignedBytevEXT (GLenum pname, GLubyte * data) { return _glGetUnsignedBytevEXT_(pname, data); };
inline void glGetUnsignedBytei_vEXT (GLenum target, GLuint index, GLubyte * data) { return _glGetUnsignedBytei_vEXT_(target, index, data); };
inline void glDeleteMemoryObjectsEXT (GLsizei n, const GLuint * memoryObjects) { return _glDeleteMemoryObjectsEXT_(n, memoryObjects); };
inline GLboolean glIsMemoryObjectEXT (GLuint memoryObject) { return _glIsMemoryObjectEXT_(memoryObject); };
inline void glCreateMemoryObjectsEXT (GLsizei n, GLuint * memoryObjects) { return _glCreateMemoryObjectsEXT_(n, memoryObjects); };
inline void glMemoryObjectParameterivEXT (GLuint memoryObject, GLenum pname, const GLint * params) { return _glMemoryObjectParameterivEXT_(memoryObject, pname, params); };
inline void glGetMemoryObjectParameterivEXT (GLuint memoryObject, GLenum pname, GLint * params) { return _glGetMemoryObjectParameterivEXT_(memoryObject, pname, params); };
inline void glTexStorageMem2DEXT (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) { return _glTexStorageMem2DEXT_(target, levels, internalFormat, width, height, memory, offset); };
inline void glTexStorageMem2DMultisampleEXT (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { return _glTexStorageMem2DMultisampleEXT_(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset); };
inline void glTexStorageMem3DEXT (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) { return _glTexStorageMem3DEXT_(target, levels, internalFormat, width, height, depth, memory, offset); };
inline void glTexStorageMem3DMultisampleEXT (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { return _glTexStorageMem3DMultisampleEXT_(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset); };
inline void glBufferStorageMemEXT (GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset) { return _glBufferStorageMemEXT_(target, size, memory, offset); };
inline void glTextureStorageMem2DEXT (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) { return _glTextureStorageMem2DEXT_(texture, levels, internalFormat, width, height, memory, offset); };
inline void glTextureStorageMem2DMultisampleEXT (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { return _glTextureStorageMem2DMultisampleEXT_(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset); };
inline void glTextureStorageMem3DEXT (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) { return _glTextureStorageMem3DEXT_(texture, levels, internalFormat, width, height, depth, memory, offset); };
inline void glTextureStorageMem3DMultisampleEXT (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { return _glTextureStorageMem3DMultisampleEXT_(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset); };
inline void glNamedBufferStorageMemEXT (GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset) { return _glNamedBufferStorageMemEXT_(buffer, size, memory, offset); };
inline void glTexStorageMem1DEXT (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) { return _glTexStorageMem1DEXT_(target, levels, internalFormat, width, memory, offset); };
inline void glTextureStorageMem1DEXT (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) { return _glTextureStorageMem1DEXT_(texture, levels, internalFormat, width, memory, offset); };
#endif //GL_EXT_memory_object

#ifndef GL_EXT_memory_object_fd

// Defines
#define GL_HANDLE_TYPE_OPAQUE_FD_EXT      0x9586 

// functions typedefs
typedef void (APIENTRYP PFN_GLIMPORTMEMORYFDEXT_PROC) (GLuint memory, GLuint64 size, GLenum handleType, GLint fd);

// functions typedefs
GL_FUNC_DEF PFN_GLIMPORTMEMORYFDEXT_PROC _glImportMemoryFdEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glImportMemoryFdEXT (GLuint memory, GLuint64 size, GLenum handleType, GLint fd) { return _glImportMemoryFdEXT_(memory, size, handleType, fd); };
#endif //GL_EXT_memory_object_fd

#ifndef GL_EXT_memory_object_win32

// Defines
#define GL_HANDLE_TYPE_OPAQUE_WIN32_EXT   0x9587 
#define GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT 0x9588 
#define GL_DEVICE_LUID_EXT                0x9599 
#define GL_DEVICE_NODE_MASK_EXT           0x959A 
#define GL_LUID_SIZE_EXT                  8 
#define GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT 0x9589 
#define GL_HANDLE_TYPE_D3D12_RESOURCE_EXT 0x958A 
#define GL_HANDLE_TYPE_D3D11_IMAGE_EXT    0x958B 
#define GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT 0x958C 

// functions typedefs
typedef void (APIENTRYP PFN_GLIMPORTMEMORYWIN32HANDLEEXT_PROC) (GLuint memory, GLuint64 size, GLenum handleType, void * handle);
typedef void (APIENTRYP PFN_GLIMPORTMEMORYWIN32NAMEEXT_PROC) (GLuint memory, GLuint64 size, GLenum handleType, const void * name);

// functions typedefs
GL_FUNC_DEF PFN_GLIMPORTMEMORYWIN32HANDLEEXT_PROC _glImportMemoryWin32HandleEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLIMPORTMEMORYWIN32NAMEEXT_PROC _glImportMemoryWin32NameEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glImportMemoryWin32HandleEXT (GLuint memory, GLuint64 size, GLenum handleType, void * handle) { return _glImportMemoryWin32HandleEXT_(memory, size, handleType, handle); };
inline void glImportMemoryWin32NameEXT (GLuint memory, GLuint64 size, GLenum handleType, const void * name) { return _glImportMemoryWin32NameEXT_(memory, size, handleType, name); };
#endif //GL_EXT_memory_object_win32

// GL_EXT_misc_attribute

#ifndef GL_EXT_multi_draw_arrays

// functions typedefs
typedef void (APIENTRYP PFN_GLMULTIDRAWARRAYSEXT_PROC) (GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount);
typedef void (APIENTRYP PFN_GLMULTIDRAWELEMENTSEXT_PROC) (GLenum mode, const GLsizei * count, GLenum type, const void * const * indices, GLsizei primcount);

// functions typedefs
GL_FUNC_DEF PFN_GLMULTIDRAWARRAYSEXT_PROC _glMultiDrawArraysEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTIDRAWELEMENTSEXT_PROC _glMultiDrawElementsEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glMultiDrawArraysEXT (GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount) { return _glMultiDrawArraysEXT_(mode, first, count, primcount); };
inline void glMultiDrawElementsEXT (GLenum mode, const GLsizei * count, GLenum type, const void * const * indices, GLsizei primcount) { return _glMultiDrawElementsEXT_(mode, count, type, indices, primcount); };
#endif //GL_EXT_multi_draw_arrays

#ifndef GL_EXT_multisample

// Defines
#define GL_MULTISAMPLE_EXT                0x809D 
#define GL_SAMPLE_ALPHA_TO_MASK_EXT       0x809E 
#define GL_SAMPLE_ALPHA_TO_ONE_EXT        0x809F 
#define GL_SAMPLE_MASK_EXT                0x80A0 
#define GL_1PASS_EXT                      0x80A1 
#define GL_2PASS_0_EXT                    0x80A2 
#define GL_2PASS_1_EXT                    0x80A3 
#define GL_4PASS_0_EXT                    0x80A4 
#define GL_4PASS_1_EXT                    0x80A5 
#define GL_4PASS_2_EXT                    0x80A6 
#define GL_4PASS_3_EXT                    0x80A7 
#define GL_SAMPLE_BUFFERS_EXT             0x80A8 
#define GL_SAMPLES_EXT                    0x80A9 
#define GL_SAMPLE_MASK_VALUE_EXT          0x80AA 
#define GL_SAMPLE_MASK_INVERT_EXT         0x80AB 
#define GL_SAMPLE_PATTERN_EXT             0x80AC 
#define GL_MULTISAMPLE_BIT_EXT            0x20000000 

// functions typedefs
typedef void (APIENTRYP PFN_GLSAMPLEMASKEXT_PROC) (GLclampf value, GLboolean invert);
typedef void (APIENTRYP PFN_GLSAMPLEPATTERNEXT_PROC) (GLenum pattern);

// functions typedefs
GL_FUNC_DEF PFN_GLSAMPLEMASKEXT_PROC _glSampleMaskEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSAMPLEPATTERNEXT_PROC _glSamplePatternEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glSampleMaskEXT (GLclampf value, GLboolean invert) { return _glSampleMaskEXT_(value, invert); };
inline void glSamplePatternEXT (GLenum pattern) { return _glSamplePatternEXT_(pattern); };
#endif //GL_EXT_multisample

#ifndef GL_EXT_packed_depth_stencil

// Defines
#define GL_DEPTH_STENCIL_EXT              0x84F9 
#define GL_UNSIGNED_INT_24_8_EXT          0x84FA 
#define GL_DEPTH24_STENCIL8_EXT           0x88F0 
#define GL_TEXTURE_STENCIL_SIZE_EXT       0x88F1 
#endif //GL_EXT_packed_depth_stencil

#ifndef GL_EXT_packed_float

// Defines
#define GL_R11F_G11F_B10F_EXT             0x8C3A 
#define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT 0x8C3B 
#define GL_RGBA_SIGNED_COMPONENTS_EXT     0x8C3C 
#endif //GL_EXT_packed_float

#ifndef GL_EXT_packed_pixels

// Defines
#define GL_UNSIGNED_BYTE_3_3_2_EXT        0x8032 
#define GL_UNSIGNED_SHORT_4_4_4_4_EXT     0x8033 
#define GL_UNSIGNED_SHORT_5_5_5_1_EXT     0x8034 
#define GL_UNSIGNED_INT_8_8_8_8_EXT       0x8035 
#define GL_UNSIGNED_INT_10_10_10_2_EXT    0x8036 
#endif //GL_EXT_packed_pixels

#ifndef GL_EXT_paletted_texture

// Defines
#define GL_TEXTURE_INDEX_SIZE_EXT         0x80ED 

// functions typedefs
typedef void (APIENTRYP PFN_GLCOLORTABLEEXT_PROC) (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void * table);
typedef void (APIENTRYP PFN_GLGETCOLORTABLEEXT_PROC) (GLenum target, GLenum format, GLenum type, void * data);
typedef void (APIENTRYP PFN_GLGETCOLORTABLEPARAMETERIVEXT_PROC) (GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETCOLORTABLEPARAMETERFVEXT_PROC) (GLenum target, GLenum pname, GLfloat * params);

// functions typedefs
GL_FUNC_DEF PFN_GLCOLORTABLEEXT_PROC _glColorTableEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOLORTABLEEXT_PROC _glGetColorTableEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOLORTABLEPARAMETERIVEXT_PROC _glGetColorTableParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOLORTABLEPARAMETERFVEXT_PROC _glGetColorTableParameterfvEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glColorTableEXT (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void * table) { return _glColorTableEXT_(target, internalFormat, width, format, type, table); };
inline void glGetColorTableEXT (GLenum target, GLenum format, GLenum type, void * data) { return _glGetColorTableEXT_(target, format, type, data); };
inline void glGetColorTableParameterivEXT (GLenum target, GLenum pname, GLint * params) { return _glGetColorTableParameterivEXT_(target, pname, params); };
inline void glGetColorTableParameterfvEXT (GLenum target, GLenum pname, GLfloat * params) { return _glGetColorTableParameterfvEXT_(target, pname, params); };
#endif //GL_EXT_paletted_texture

#ifndef GL_EXT_pixel_buffer_object

// Defines
#define GL_PIXEL_PACK_BUFFER_EXT          0x88EB 
#define GL_PIXEL_UNPACK_BUFFER_EXT        0x88EC 
#define GL_PIXEL_PACK_BUFFER_BINDING_EXT  0x88ED 
#define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT 0x88EF 
#endif //GL_EXT_pixel_buffer_object

#ifndef GL_EXT_pixel_transform

// Defines
#define GL_PIXEL_TRANSFORM_2D_EXT         0x8330 
#define GL_PIXEL_MAG_FILTER_EXT           0x8331 
#define GL_PIXEL_MIN_FILTER_EXT           0x8332 
#define GL_PIXEL_CUBIC_WEIGHT_EXT         0x8333 
#define GL_CUBIC_EXT                      0x8334 
#define GL_AVERAGE_EXT                    0x8335 
#define GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8336 
#define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8337 
#define GL_PIXEL_TRANSFORM_2D_MATRIX_EXT  0x8338 

// functions typedefs
typedef void (APIENTRYP PFN_GLPIXELTRANSFORMPARAMETERIEXT_PROC) (GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLPIXELTRANSFORMPARAMETERFEXT_PROC) (GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLPIXELTRANSFORMPARAMETERIVEXT_PROC) (GLenum target, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLPIXELTRANSFORMPARAMETERFVEXT_PROC) (GLenum target, GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLGETPIXELTRANSFORMPARAMETERIVEXT_PROC) (GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETPIXELTRANSFORMPARAMETERFVEXT_PROC) (GLenum target, GLenum pname, GLfloat * params);

// functions typedefs
GL_FUNC_DEF PFN_GLPIXELTRANSFORMPARAMETERIEXT_PROC _glPixelTransformParameteriEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPIXELTRANSFORMPARAMETERFEXT_PROC _glPixelTransformParameterfEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPIXELTRANSFORMPARAMETERIVEXT_PROC _glPixelTransformParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPIXELTRANSFORMPARAMETERFVEXT_PROC _glPixelTransformParameterfvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPIXELTRANSFORMPARAMETERIVEXT_PROC _glGetPixelTransformParameterivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPIXELTRANSFORMPARAMETERFVEXT_PROC _glGetPixelTransformParameterfvEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glPixelTransformParameteriEXT (GLenum target, GLenum pname, GLint param) { return _glPixelTransformParameteriEXT_(target, pname, param); };
inline void glPixelTransformParameterfEXT (GLenum target, GLenum pname, GLfloat param) { return _glPixelTransformParameterfEXT_(target, pname, param); };
inline void glPixelTransformParameterivEXT (GLenum target, GLenum pname, const GLint * params) { return _glPixelTransformParameterivEXT_(target, pname, params); };
inline void glPixelTransformParameterfvEXT (GLenum target, GLenum pname, const GLfloat * params) { return _glPixelTransformParameterfvEXT_(target, pname, params); };
inline void glGetPixelTransformParameterivEXT (GLenum target, GLenum pname, GLint * params) { return _glGetPixelTransformParameterivEXT_(target, pname, params); };
inline void glGetPixelTransformParameterfvEXT (GLenum target, GLenum pname, GLfloat * params) { return _glGetPixelTransformParameterfvEXT_(target, pname, params); };
#endif //GL_EXT_pixel_transform

// GL_EXT_pixel_transform_color_table

#ifndef GL_EXT_point_parameters

// Defines
#define GL_POINT_SIZE_MIN_EXT             0x8126 
#define GL_POINT_SIZE_MAX_EXT             0x8127 
#define GL_POINT_FADE_THRESHOLD_SIZE_EXT  0x8128 
#define GL_DISTANCE_ATTENUATION_EXT       0x8129 

// functions typedefs
typedef void (APIENTRYP PFN_GLPOINTPARAMETERFEXT_PROC) (GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLPOINTPARAMETERFVEXT_PROC) (GLenum pname, const GLfloat * params);

// functions typedefs
GL_FUNC_DEF PFN_GLPOINTPARAMETERFEXT_PROC _glPointParameterfEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOINTPARAMETERFVEXT_PROC _glPointParameterfvEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glPointParameterfEXT (GLenum pname, GLfloat param) { return _glPointParameterfEXT_(pname, param); };
inline void glPointParameterfvEXT (GLenum pname, const GLfloat * params) { return _glPointParameterfvEXT_(pname, params); };
#endif //GL_EXT_point_parameters

#ifndef GL_EXT_polygon_offset

// Defines
#define GL_POLYGON_OFFSET_EXT             0x8037 
#define GL_POLYGON_OFFSET_FACTOR_EXT      0x8038 
#define GL_POLYGON_OFFSET_BIAS_EXT        0x8039 

// functions typedefs
typedef void (APIENTRYP PFN_GLPOLYGONOFFSETEXT_PROC) (GLfloat factor, GLfloat bias);

// functions typedefs
GL_FUNC_DEF PFN_GLPOLYGONOFFSETEXT_PROC _glPolygonOffsetEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glPolygonOffsetEXT (GLfloat factor, GLfloat bias) { return _glPolygonOffsetEXT_(factor, bias); };
#endif //GL_EXT_polygon_offset

#ifndef GL_EXT_provoking_vertex

// Defines
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0x8E4C 
#define GL_FIRST_VERTEX_CONVENTION_EXT    0x8E4D 
#define GL_LAST_VERTEX_CONVENTION_EXT     0x8E4E 
#define GL_PROVOKING_VERTEX_EXT           0x8E4F 

// functions typedefs
typedef void (APIENTRYP PFN_GLPROVOKINGVERTEXEXT_PROC) (GLenum mode);

// functions typedefs
GL_FUNC_DEF PFN_GLPROVOKINGVERTEXEXT_PROC _glProvokingVertexEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glProvokingVertexEXT (GLenum mode) { return _glProvokingVertexEXT_(mode); };
#endif //GL_EXT_provoking_vertex

#ifndef GL_EXT_rescale_normal

// Defines
#define GL_RESCALE_NORMAL_EXT             0x803A 
#endif //GL_EXT_rescale_normal

#ifndef GL_EXT_secondary_color

// Defines
#define GL_COLOR_SUM_EXT                  0x8458 
#define GL_CURRENT_SECONDARY_COLOR_EXT    0x8459 
#define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT 0x845A 
#define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT 0x845B 
#define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT 0x845C 
#define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT 0x845D 
#define GL_SECONDARY_COLOR_ARRAY_EXT      0x845E 

// functions typedefs
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3BEXT_PROC) (GLbyte red, GLbyte green, GLbyte blue);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3BVEXT_PROC) (const GLbyte * v);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3DEXT_PROC) (GLdouble red, GLdouble green, GLdouble blue);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3DVEXT_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3FEXT_PROC) (GLfloat red, GLfloat green, GLfloat blue);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3FVEXT_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3IEXT_PROC) (GLint red, GLint green, GLint blue);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3IVEXT_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3SEXT_PROC) (GLshort red, GLshort green, GLshort blue);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3SVEXT_PROC) (const GLshort * v);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3UBEXT_PROC) (GLubyte red, GLubyte green, GLubyte blue);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3UBVEXT_PROC) (const GLubyte * v);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3UIEXT_PROC) (GLuint red, GLuint green, GLuint blue);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3UIVEXT_PROC) (const GLuint * v);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3USEXT_PROC) (GLushort red, GLushort green, GLushort blue);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3USVEXT_PROC) (const GLushort * v);
typedef void (APIENTRYP PFN_GLSECONDARYCOLORPOINTEREXT_PROC) (GLint size, GLenum type, GLsizei stride, const void * pointer);

// functions typedefs
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3BEXT_PROC _glSecondaryColor3bEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3BVEXT_PROC _glSecondaryColor3bvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3DEXT_PROC _glSecondaryColor3dEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3DVEXT_PROC _glSecondaryColor3dvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3FEXT_PROC _glSecondaryColor3fEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3FVEXT_PROC _glSecondaryColor3fvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3IEXT_PROC _glSecondaryColor3iEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3IVEXT_PROC _glSecondaryColor3ivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3SEXT_PROC _glSecondaryColor3sEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3SVEXT_PROC _glSecondaryColor3svEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3UBEXT_PROC _glSecondaryColor3ubEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3UBVEXT_PROC _glSecondaryColor3ubvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3UIEXT_PROC _glSecondaryColor3uiEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3UIVEXT_PROC _glSecondaryColor3uivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3USEXT_PROC _glSecondaryColor3usEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3USVEXT_PROC _glSecondaryColor3usvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLORPOINTEREXT_PROC _glSecondaryColorPointerEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glSecondaryColor3bEXT (GLbyte red, GLbyte green, GLbyte blue) { return _glSecondaryColor3bEXT_(red, green, blue); };
inline void glSecondaryColor3bvEXT (const GLbyte * v) { return _glSecondaryColor3bvEXT_(v); };
inline void glSecondaryColor3dEXT (GLdouble red, GLdouble green, GLdouble blue) { return _glSecondaryColor3dEXT_(red, green, blue); };
inline void glSecondaryColor3dvEXT (const GLdouble * v) { return _glSecondaryColor3dvEXT_(v); };
inline void glSecondaryColor3fEXT (GLfloat red, GLfloat green, GLfloat blue) { return _glSecondaryColor3fEXT_(red, green, blue); };
inline void glSecondaryColor3fvEXT (const GLfloat * v) { return _glSecondaryColor3fvEXT_(v); };
inline void glSecondaryColor3iEXT (GLint red, GLint green, GLint blue) { return _glSecondaryColor3iEXT_(red, green, blue); };
inline void glSecondaryColor3ivEXT (const GLint * v) { return _glSecondaryColor3ivEXT_(v); };
inline void glSecondaryColor3sEXT (GLshort red, GLshort green, GLshort blue) { return _glSecondaryColor3sEXT_(red, green, blue); };
inline void glSecondaryColor3svEXT (const GLshort * v) { return _glSecondaryColor3svEXT_(v); };
inline void glSecondaryColor3ubEXT (GLubyte red, GLubyte green, GLubyte blue) { return _glSecondaryColor3ubEXT_(red, green, blue); };
inline void glSecondaryColor3ubvEXT (const GLubyte * v) { return _glSecondaryColor3ubvEXT_(v); };
inline void glSecondaryColor3uiEXT (GLuint red, GLuint green, GLuint blue) { return _glSecondaryColor3uiEXT_(red, green, blue); };
inline void glSecondaryColor3uivEXT (const GLuint * v) { return _glSecondaryColor3uivEXT_(v); };
inline void glSecondaryColor3usEXT (GLushort red, GLushort green, GLushort blue) { return _glSecondaryColor3usEXT_(red, green, blue); };
inline void glSecondaryColor3usvEXT (const GLushort * v) { return _glSecondaryColor3usvEXT_(v); };
inline void glSecondaryColorPointerEXT (GLint size, GLenum type, GLsizei stride, const void * pointer) { return _glSecondaryColorPointerEXT_(size, type, stride, pointer); };
#endif //GL_EXT_secondary_color

#ifndef GL_EXT_semaphore

// Defines
#define GL_LAYOUT_GENERAL_EXT             0x958D 
#define GL_LAYOUT_COLOR_ATTACHMENT_EXT    0x958E 
#define GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT 0x958F 
#define GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT 0x9590 
#define GL_LAYOUT_SHADER_READ_ONLY_EXT    0x9591 
#define GL_LAYOUT_TRANSFER_SRC_EXT        0x9592 
#define GL_LAYOUT_TRANSFER_DST_EXT        0x9593 
#define GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT 0x9530 
#define GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT 0x9531 

// functions typedefs
typedef void (APIENTRYP PFN_GLGENSEMAPHORESEXT_PROC) (GLsizei n, GLuint * semaphores);
typedef void (APIENTRYP PFN_GLDELETESEMAPHORESEXT_PROC) (GLsizei n, const GLuint * semaphores);
typedef GLboolean (APIENTRYP PFN_GLISSEMAPHOREEXT_PROC) (GLuint semaphore);
typedef void (APIENTRYP PFN_GLSEMAPHOREPARAMETERUI64VEXT_PROC) (GLuint semaphore, GLenum pname, const GLuint64 * params);
typedef void (APIENTRYP PFN_GLGETSEMAPHOREPARAMETERUI64VEXT_PROC) (GLuint semaphore, GLenum pname, GLuint64 * params);
typedef void (APIENTRYP PFN_GLWAITSEMAPHOREEXT_PROC) (GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * srcLayouts);
typedef void (APIENTRYP PFN_GLSIGNALSEMAPHOREEXT_PROC) (GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * dstLayouts);

// functions typedefs
GL_FUNC_DEF PFN_GLGENSEMAPHORESEXT_PROC _glGenSemaphoresEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETESEMAPHORESEXT_PROC _glDeleteSemaphoresEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISSEMAPHOREEXT_PROC _glIsSemaphoreEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSEMAPHOREPARAMETERUI64VEXT_PROC _glSemaphoreParameterui64vEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETSEMAPHOREPARAMETERUI64VEXT_PROC _glGetSemaphoreParameterui64vEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWAITSEMAPHOREEXT_PROC _glWaitSemaphoreEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSIGNALSEMAPHOREEXT_PROC _glSignalSemaphoreEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glGenSemaphoresEXT (GLsizei n, GLuint * semaphores) { return _glGenSemaphoresEXT_(n, semaphores); };
inline void glDeleteSemaphoresEXT (GLsizei n, const GLuint * semaphores) { return _glDeleteSemaphoresEXT_(n, semaphores); };
inline GLboolean glIsSemaphoreEXT (GLuint semaphore) { return _glIsSemaphoreEXT_(semaphore); };
inline void glSemaphoreParameterui64vEXT (GLuint semaphore, GLenum pname, const GLuint64 * params) { return _glSemaphoreParameterui64vEXT_(semaphore, pname, params); };
inline void glGetSemaphoreParameterui64vEXT (GLuint semaphore, GLenum pname, GLuint64 * params) { return _glGetSemaphoreParameterui64vEXT_(semaphore, pname, params); };
inline void glWaitSemaphoreEXT (GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * srcLayouts) { return _glWaitSemaphoreEXT_(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts); };
inline void glSignalSemaphoreEXT (GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * dstLayouts) { return _glSignalSemaphoreEXT_(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts); };
#endif //GL_EXT_semaphore

#ifndef GL_EXT_semaphore_fd

// functions typedefs
typedef void (APIENTRYP PFN_GLIMPORTSEMAPHOREFDEXT_PROC) (GLuint semaphore, GLenum handleType, GLint fd);

// functions typedefs
GL_FUNC_DEF PFN_GLIMPORTSEMAPHOREFDEXT_PROC _glImportSemaphoreFdEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glImportSemaphoreFdEXT (GLuint semaphore, GLenum handleType, GLint fd) { return _glImportSemaphoreFdEXT_(semaphore, handleType, fd); };
#endif //GL_EXT_semaphore_fd

#ifndef GL_EXT_semaphore_win32

// Defines
#define GL_HANDLE_TYPE_D3D12_FENCE_EXT    0x9594 
#define GL_D3D12_FENCE_VALUE_EXT          0x9595 

// functions typedefs
typedef void (APIENTRYP PFN_GLIMPORTSEMAPHOREWIN32HANDLEEXT_PROC) (GLuint semaphore, GLenum handleType, void * handle);
typedef void (APIENTRYP PFN_GLIMPORTSEMAPHOREWIN32NAMEEXT_PROC) (GLuint semaphore, GLenum handleType, const void * name);

// functions typedefs
GL_FUNC_DEF PFN_GLIMPORTSEMAPHOREWIN32HANDLEEXT_PROC _glImportSemaphoreWin32HandleEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLIMPORTSEMAPHOREWIN32NAMEEXT_PROC _glImportSemaphoreWin32NameEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glImportSemaphoreWin32HandleEXT (GLuint semaphore, GLenum handleType, void * handle) { return _glImportSemaphoreWin32HandleEXT_(semaphore, handleType, handle); };
inline void glImportSemaphoreWin32NameEXT (GLuint semaphore, GLenum handleType, const void * name) { return _glImportSemaphoreWin32NameEXT_(semaphore, handleType, name); };
#endif //GL_EXT_semaphore_win32

#ifndef GL_EXT_separate_specular_color

// Defines
#define GL_LIGHT_MODEL_COLOR_CONTROL_EXT  0x81F8 
#define GL_SINGLE_COLOR_EXT               0x81F9 
#define GL_SEPARATE_SPECULAR_COLOR_EXT    0x81FA 
#endif //GL_EXT_separate_specular_color

// GL_EXT_shader_image_load_formatted

#ifndef GL_EXT_shader_image_load_store

// Defines
#define GL_MAX_IMAGE_UNITS_EXT            0x8F38 
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT 0x8F39 
#define GL_IMAGE_BINDING_NAME_EXT         0x8F3A 
#define GL_IMAGE_BINDING_LEVEL_EXT        0x8F3B 
#define GL_IMAGE_BINDING_LAYERED_EXT      0x8F3C 
#define GL_IMAGE_BINDING_LAYER_EXT        0x8F3D 
#define GL_IMAGE_BINDING_ACCESS_EXT       0x8F3E 
#define GL_IMAGE_1D_EXT                   0x904C 
#define GL_IMAGE_2D_EXT                   0x904D 
#define GL_IMAGE_3D_EXT                   0x904E 
#define GL_IMAGE_2D_RECT_EXT              0x904F 
#define GL_IMAGE_CUBE_EXT                 0x9050 
#define GL_IMAGE_BUFFER_EXT               0x9051 
#define GL_IMAGE_1D_ARRAY_EXT             0x9052 
#define GL_IMAGE_2D_ARRAY_EXT             0x9053 
#define GL_IMAGE_CUBE_MAP_ARRAY_EXT       0x9054 
#define GL_IMAGE_2D_MULTISAMPLE_EXT       0x9055 
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9056 
#define GL_INT_IMAGE_1D_EXT               0x9057 
#define GL_INT_IMAGE_2D_EXT               0x9058 
#define GL_INT_IMAGE_3D_EXT               0x9059 
#define GL_INT_IMAGE_2D_RECT_EXT          0x905A 
#define GL_INT_IMAGE_CUBE_EXT             0x905B 
#define GL_INT_IMAGE_BUFFER_EXT           0x905C 
#define GL_INT_IMAGE_1D_ARRAY_EXT         0x905D 
#define GL_INT_IMAGE_2D_ARRAY_EXT         0x905E 
#define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT   0x905F 
#define GL_INT_IMAGE_2D_MULTISAMPLE_EXT   0x9060 
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9061 
#define GL_UNSIGNED_INT_IMAGE_1D_EXT      0x9062 
#define GL_UNSIGNED_INT_IMAGE_2D_EXT      0x9063 
#define GL_UNSIGNED_INT_IMAGE_3D_EXT      0x9064 
#define GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT 0x9065 
#define GL_UNSIGNED_INT_IMAGE_CUBE_EXT    0x9066 
#define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT  0x9067 
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT 0x9068 
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT 0x9069 
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x906A 
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT 0x906B 
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x906C 
#define GL_MAX_IMAGE_SAMPLES_EXT          0x906D 
#define GL_IMAGE_BINDING_FORMAT_EXT       0x906E 
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT 0x00000001 
#define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT  0x00000002 
#define GL_UNIFORM_BARRIER_BIT_EXT        0x00000004 
#define GL_TEXTURE_FETCH_BARRIER_BIT_EXT  0x00000008 
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT 0x00000020 
#define GL_COMMAND_BARRIER_BIT_EXT        0x00000040 
#define GL_PIXEL_BUFFER_BARRIER_BIT_EXT   0x00000080 
#define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0x00000100 
#define GL_BUFFER_UPDATE_BARRIER_BIT_EXT  0x00000200 
#define GL_FRAMEBUFFER_BARRIER_BIT_EXT    0x00000400 
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0x00000800 
#define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT 0x00001000 
#define GL_ALL_BARRIER_BITS_EXT           0xFFFFFFFF 

// functions typedefs
typedef void (APIENTRYP PFN_GLBINDIMAGETEXTUREEXT_PROC) (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
typedef void (APIENTRYP PFN_GLMEMORYBARRIEREXT_PROC) (GLbitfield barriers);

// functions typedefs
GL_FUNC_DEF PFN_GLBINDIMAGETEXTUREEXT_PROC _glBindImageTextureEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMEMORYBARRIEREXT_PROC _glMemoryBarrierEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBindImageTextureEXT (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format) { return _glBindImageTextureEXT_(index, texture, level, layered, layer, access, format); };
inline void glMemoryBarrierEXT (GLbitfield barriers) { return _glMemoryBarrierEXT_(barriers); };
#endif //GL_EXT_shader_image_load_store

// GL_EXT_shadow_funcs

#ifndef GL_EXT_shared_texture_palette

// Defines
#define GL_SHARED_TEXTURE_PALETTE_EXT     0x81FB 
#endif //GL_EXT_shared_texture_palette

// GL_EXT_sparse_texture2

#ifndef GL_EXT_stencil_clear_tag

// Defines
#define GL_STENCIL_TAG_BITS_EXT           0x88F2 
#define GL_STENCIL_CLEAR_TAG_VALUE_EXT    0x88F3 

// functions typedefs
typedef void (APIENTRYP PFN_GLSTENCILCLEARTAGEXT_PROC) (GLsizei stencilTagBits, GLuint stencilClearTag);

// functions typedefs
GL_FUNC_DEF PFN_GLSTENCILCLEARTAGEXT_PROC _glStencilClearTagEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glStencilClearTagEXT (GLsizei stencilTagBits, GLuint stencilClearTag) { return _glStencilClearTagEXT_(stencilTagBits, stencilClearTag); };
#endif //GL_EXT_stencil_clear_tag

#ifndef GL_EXT_stencil_two_side

// Defines
#define GL_STENCIL_TEST_TWO_SIDE_EXT      0x8910 
#define GL_ACTIVE_STENCIL_FACE_EXT        0x8911 

// functions typedefs
typedef void (APIENTRYP PFN_GLACTIVESTENCILFACEEXT_PROC) (GLenum face);

// functions typedefs
GL_FUNC_DEF PFN_GLACTIVESTENCILFACEEXT_PROC _glActiveStencilFaceEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glActiveStencilFaceEXT (GLenum face) { return _glActiveStencilFaceEXT_(face); };
#endif //GL_EXT_stencil_two_side

#ifndef GL_EXT_stencil_wrap

// Defines
#define GL_INCR_WRAP_EXT                  0x8507 
#define GL_DECR_WRAP_EXT                  0x8508 
#endif //GL_EXT_stencil_wrap

#ifndef GL_EXT_subtexture

// functions typedefs
typedef void (APIENTRYP PFN_GLTEXSUBIMAGE1DEXT_PROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLTEXSUBIMAGE2DEXT_PROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);

// functions typedefs
GL_FUNC_DEF PFN_GLTEXSUBIMAGE1DEXT_PROC _glTexSubImage1DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXSUBIMAGE2DEXT_PROC _glTexSubImage2DEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glTexSubImage1DEXT (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { return _glTexSubImage1DEXT_(target, level, xoffset, width, format, type, pixels); };
inline void glTexSubImage2DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { return _glTexSubImage2DEXT_(target, level, xoffset, yoffset, width, height, format, type, pixels); };
#endif //GL_EXT_subtexture

#ifndef GL_EXT_texture

// Defines
#define GL_ALPHA4_EXT                     0x803B 
#define GL_ALPHA8_EXT                     0x803C 
#define GL_ALPHA12_EXT                    0x803D 
#define GL_ALPHA16_EXT                    0x803E 
#define GL_LUMINANCE4_EXT                 0x803F 
#define GL_LUMINANCE8_EXT                 0x8040 
#define GL_LUMINANCE12_EXT                0x8041 
#define GL_LUMINANCE16_EXT                0x8042 
#define GL_LUMINANCE4_ALPHA4_EXT          0x8043 
#define GL_LUMINANCE6_ALPHA2_EXT          0x8044 
#define GL_LUMINANCE8_ALPHA8_EXT          0x8045 
#define GL_LUMINANCE12_ALPHA4_EXT         0x8046 
#define GL_LUMINANCE12_ALPHA12_EXT        0x8047 
#define GL_LUMINANCE16_ALPHA16_EXT        0x8048 
#define GL_INTENSITY_EXT                  0x8049 
#define GL_INTENSITY4_EXT                 0x804A 
#define GL_INTENSITY8_EXT                 0x804B 
#define GL_INTENSITY12_EXT                0x804C 
#define GL_INTENSITY16_EXT                0x804D 
#define GL_RGB2_EXT                       0x804E 
#define GL_RGB4_EXT                       0x804F 
#define GL_RGB5_EXT                       0x8050 
#define GL_RGB8_EXT                       0x8051 
#define GL_RGB10_EXT                      0x8052 
#define GL_RGB12_EXT                      0x8053 
#define GL_RGB16_EXT                      0x8054 
#define GL_RGBA2_EXT                      0x8055 
#define GL_RGBA4_EXT                      0x8056 
#define GL_RGB5_A1_EXT                    0x8057 
#define GL_RGBA8_EXT                      0x8058 
#define GL_RGB10_A2_EXT                   0x8059 
#define GL_RGBA12_EXT                     0x805A 
#define GL_RGBA16_EXT                     0x805B 
#define GL_TEXTURE_RED_SIZE_EXT           0x805C 
#define GL_TEXTURE_GREEN_SIZE_EXT         0x805D 
#define GL_TEXTURE_BLUE_SIZE_EXT          0x805E 
#define GL_TEXTURE_ALPHA_SIZE_EXT         0x805F 
#define GL_TEXTURE_LUMINANCE_SIZE_EXT     0x8060 
#define GL_TEXTURE_INTENSITY_SIZE_EXT     0x8061 
#define GL_REPLACE_EXT                    0x8062 
#define GL_PROXY_TEXTURE_1D_EXT           0x8063 
#define GL_PROXY_TEXTURE_2D_EXT           0x8064 
#define GL_TEXTURE_TOO_LARGE_EXT          0x8065 
#endif //GL_EXT_texture

#ifndef GL_EXT_texture3D

// Defines
#define GL_PACK_SKIP_IMAGES_EXT           0x806B 
#define GL_PACK_IMAGE_HEIGHT_EXT          0x806C 
#define GL_UNPACK_SKIP_IMAGES_EXT         0x806D 
#define GL_UNPACK_IMAGE_HEIGHT_EXT        0x806E 
#define GL_TEXTURE_3D_EXT                 0x806F 
#define GL_PROXY_TEXTURE_3D_EXT           0x8070 
#define GL_TEXTURE_DEPTH_EXT              0x8071 
#define GL_TEXTURE_WRAP_R_EXT             0x8072 
#define GL_MAX_3D_TEXTURE_SIZE_EXT        0x8073 

// functions typedefs
typedef void (APIENTRYP PFN_GLTEXIMAGE3DEXT_PROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLTEXSUBIMAGE3DEXT_PROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);

// functions typedefs
GL_FUNC_DEF PFN_GLTEXIMAGE3DEXT_PROC _glTexImage3DEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXSUBIMAGE3DEXT_PROC _glTexSubImage3DEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glTexImage3DEXT (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { return _glTexImage3DEXT_(target, level, internalformat, width, height, depth, border, format, type, pixels); };
inline void glTexSubImage3DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { return _glTexSubImage3DEXT_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); };
#endif //GL_EXT_texture3D

#ifndef GL_EXT_texture_array

// Defines
#define GL_TEXTURE_1D_ARRAY_EXT           0x8C18 
#define GL_PROXY_TEXTURE_1D_ARRAY_EXT     0x8C19 
#define GL_TEXTURE_2D_ARRAY_EXT           0x8C1A 
#define GL_PROXY_TEXTURE_2D_ARRAY_EXT     0x8C1B 
#define GL_TEXTURE_BINDING_1D_ARRAY_EXT   0x8C1C 
#define GL_TEXTURE_BINDING_2D_ARRAY_EXT   0x8C1D 
#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT   0x88FF 
#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E 

// functions typedefs
typedef void (APIENTRYP PFN_GLFRAMEBUFFERTEXTURELAYEREXT_PROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);

// functions typedefs
GL_FUNC_DEF PFN_GLFRAMEBUFFERTEXTURELAYEREXT_PROC _glFramebufferTextureLayerEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glFramebufferTextureLayerEXT (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { return _glFramebufferTextureLayerEXT_(target, attachment, texture, level, layer); };
#endif //GL_EXT_texture_array

#ifndef GL_EXT_texture_buffer_object

// Defines
#define GL_TEXTURE_BUFFER_EXT             0x8C2A 
#define GL_MAX_TEXTURE_BUFFER_SIZE_EXT    0x8C2B 
#define GL_TEXTURE_BINDING_BUFFER_EXT     0x8C2C 
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D 
#define GL_TEXTURE_BUFFER_FORMAT_EXT      0x8C2E 

// functions typedefs
typedef void (APIENTRYP PFN_GLTEXBUFFEREXT_PROC) (GLenum target, GLenum internalformat, GLuint buffer);

// functions typedefs
GL_FUNC_DEF PFN_GLTEXBUFFEREXT_PROC _glTexBufferEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glTexBufferEXT (GLenum target, GLenum internalformat, GLuint buffer) { return _glTexBufferEXT_(target, internalformat, buffer); };
#endif //GL_EXT_texture_buffer_object

#ifndef GL_EXT_texture_compression_latc

// Defines
#define GL_COMPRESSED_LUMINANCE_LATC1_EXT 0x8C70 
#define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT 0x8C71 
#define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT 0x8C72 
#define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT 0x8C73 
#endif //GL_EXT_texture_compression_latc

#ifndef GL_EXT_texture_compression_rgtc

// Defines
#define GL_COMPRESSED_RED_RGTC1_EXT       0x8DBB 
#define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT 0x8DBC 
#define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0x8DBD 
#define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0x8DBE 
#endif //GL_EXT_texture_compression_rgtc

#ifndef GL_EXT_texture_cube_map

// Defines
#define GL_NORMAL_MAP_EXT                 0x8511 
#define GL_REFLECTION_MAP_EXT             0x8512 
#define GL_TEXTURE_CUBE_MAP_EXT           0x8513 
#define GL_TEXTURE_BINDING_CUBE_MAP_EXT   0x8514 
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT 0x8515 
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT 0x8516 
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT 0x8517 
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT 0x8518 
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT 0x8519 
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT 0x851A 
#define GL_PROXY_TEXTURE_CUBE_MAP_EXT     0x851B 
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT  0x851C 
#endif //GL_EXT_texture_cube_map

// GL_EXT_texture_env_add

#ifndef GL_EXT_texture_env_combine

// Defines
#define GL_COMBINE_EXT                    0x8570 
#define GL_COMBINE_RGB_EXT                0x8571 
#define GL_COMBINE_ALPHA_EXT              0x8572 
#define GL_RGB_SCALE_EXT                  0x8573 
#define GL_ADD_SIGNED_EXT                 0x8574 
#define GL_INTERPOLATE_EXT                0x8575 
#define GL_CONSTANT_EXT                   0x8576 
#define GL_PRIMARY_COLOR_EXT              0x8577 
#define GL_PREVIOUS_EXT                   0x8578 
#define GL_SOURCE0_RGB_EXT                0x8580 
#define GL_SOURCE1_RGB_EXT                0x8581 
#define GL_SOURCE2_RGB_EXT                0x8582 
#define GL_SOURCE0_ALPHA_EXT              0x8588 
#define GL_SOURCE1_ALPHA_EXT              0x8589 
#define GL_SOURCE2_ALPHA_EXT              0x858A 
#define GL_OPERAND0_RGB_EXT               0x8590 
#define GL_OPERAND1_RGB_EXT               0x8591 
#define GL_OPERAND2_RGB_EXT               0x8592 
#define GL_OPERAND0_ALPHA_EXT             0x8598 
#define GL_OPERAND1_ALPHA_EXT             0x8599 
#define GL_OPERAND2_ALPHA_EXT             0x859A 
#endif //GL_EXT_texture_env_combine

#ifndef GL_EXT_texture_env_dot3

// Defines
#define GL_DOT3_RGB_EXT                   0x8740 
#define GL_DOT3_RGBA_EXT                  0x8741 
#endif //GL_EXT_texture_env_dot3

#ifndef GL_EXT_texture_filter_anisotropic

// Defines
#define GL_TEXTURE_MAX_ANISOTROPY_EXT     0x84FE 
#define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 0x84FF 
#endif //GL_EXT_texture_filter_anisotropic

#ifndef GL_EXT_texture_integer

// Defines
#define GL_RGBA32UI_EXT                   0x8D70 
#define GL_RGB32UI_EXT                    0x8D71 
#define GL_ALPHA32UI_EXT                  0x8D72 
#define GL_INTENSITY32UI_EXT              0x8D73 
#define GL_LUMINANCE32UI_EXT              0x8D74 
#define GL_LUMINANCE_ALPHA32UI_EXT        0x8D75 
#define GL_RGBA16UI_EXT                   0x8D76 
#define GL_RGB16UI_EXT                    0x8D77 
#define GL_ALPHA16UI_EXT                  0x8D78 
#define GL_INTENSITY16UI_EXT              0x8D79 
#define GL_LUMINANCE16UI_EXT              0x8D7A 
#define GL_LUMINANCE_ALPHA16UI_EXT        0x8D7B 
#define GL_RGBA8UI_EXT                    0x8D7C 
#define GL_RGB8UI_EXT                     0x8D7D 
#define GL_ALPHA8UI_EXT                   0x8D7E 
#define GL_INTENSITY8UI_EXT               0x8D7F 
#define GL_LUMINANCE8UI_EXT               0x8D80 
#define GL_LUMINANCE_ALPHA8UI_EXT         0x8D81 
#define GL_RGBA32I_EXT                    0x8D82 
#define GL_RGB32I_EXT                     0x8D83 
#define GL_ALPHA32I_EXT                   0x8D84 
#define GL_INTENSITY32I_EXT               0x8D85 
#define GL_LUMINANCE32I_EXT               0x8D86 
#define GL_LUMINANCE_ALPHA32I_EXT         0x8D87 
#define GL_RGBA16I_EXT                    0x8D88 
#define GL_RGB16I_EXT                     0x8D89 
#define GL_ALPHA16I_EXT                   0x8D8A 
#define GL_INTENSITY16I_EXT               0x8D8B 
#define GL_LUMINANCE16I_EXT               0x8D8C 
#define GL_LUMINANCE_ALPHA16I_EXT         0x8D8D 
#define GL_RGBA8I_EXT                     0x8D8E 
#define GL_RGB8I_EXT                      0x8D8F 
#define GL_ALPHA8I_EXT                    0x8D90 
#define GL_INTENSITY8I_EXT                0x8D91 
#define GL_LUMINANCE8I_EXT                0x8D92 
#define GL_LUMINANCE_ALPHA8I_EXT          0x8D93 
#define GL_RED_INTEGER_EXT                0x8D94 
#define GL_GREEN_INTEGER_EXT              0x8D95 
#define GL_BLUE_INTEGER_EXT               0x8D96 
#define GL_ALPHA_INTEGER_EXT              0x8D97 
#define GL_RGB_INTEGER_EXT                0x8D98 
#define GL_RGBA_INTEGER_EXT               0x8D99 
#define GL_BGR_INTEGER_EXT                0x8D9A 
#define GL_BGRA_INTEGER_EXT               0x8D9B 
#define GL_LUMINANCE_INTEGER_EXT          0x8D9C 
#define GL_LUMINANCE_ALPHA_INTEGER_EXT    0x8D9D 
#define GL_RGBA_INTEGER_MODE_EXT          0x8D9E 

// functions typedefs
typedef void (APIENTRYP PFN_GLTEXPARAMETERIIVEXT_PROC) (GLenum target, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLTEXPARAMETERIUIVEXT_PROC) (GLenum target, GLenum pname, const GLuint * params);
typedef void (APIENTRYP PFN_GLGETTEXPARAMETERIIVEXT_PROC) (GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETTEXPARAMETERIUIVEXT_PROC) (GLenum target, GLenum pname, GLuint * params);
typedef void (APIENTRYP PFN_GLCLEARCOLORIIEXT_PROC) (GLint red, GLint green, GLint blue, GLint alpha);
typedef void (APIENTRYP PFN_GLCLEARCOLORIUIEXT_PROC) (GLuint red, GLuint green, GLuint blue, GLuint alpha);

// functions typedefs
GL_FUNC_DEF PFN_GLTEXPARAMETERIIVEXT_PROC _glTexParameterIivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXPARAMETERIUIVEXT_PROC _glTexParameterIuivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXPARAMETERIIVEXT_PROC _glGetTexParameterIivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTEXPARAMETERIUIVEXT_PROC _glGetTexParameterIuivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARCOLORIIEXT_PROC _glClearColorIiEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARCOLORIUIEXT_PROC _glClearColorIuiEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glTexParameterIivEXT (GLenum target, GLenum pname, const GLint * params) { return _glTexParameterIivEXT_(target, pname, params); };
inline void glTexParameterIuivEXT (GLenum target, GLenum pname, const GLuint * params) { return _glTexParameterIuivEXT_(target, pname, params); };
inline void glGetTexParameterIivEXT (GLenum target, GLenum pname, GLint * params) { return _glGetTexParameterIivEXT_(target, pname, params); };
inline void glGetTexParameterIuivEXT (GLenum target, GLenum pname, GLuint * params) { return _glGetTexParameterIuivEXT_(target, pname, params); };
inline void glClearColorIiEXT (GLint red, GLint green, GLint blue, GLint alpha) { return _glClearColorIiEXT_(red, green, blue, alpha); };
inline void glClearColorIuiEXT (GLuint red, GLuint green, GLuint blue, GLuint alpha) { return _glClearColorIuiEXT_(red, green, blue, alpha); };
#endif //GL_EXT_texture_integer

#ifndef GL_EXT_texture_lod_bias

// Defines
#define GL_MAX_TEXTURE_LOD_BIAS_EXT       0x84FD 
#define GL_TEXTURE_FILTER_CONTROL_EXT     0x8500 
#define GL_TEXTURE_LOD_BIAS_EXT           0x8501 
#endif //GL_EXT_texture_lod_bias

#ifndef GL_EXT_texture_mirror_clamp

// Defines
#define GL_MIRROR_CLAMP_EXT               0x8742 
#define GL_MIRROR_CLAMP_TO_EDGE_EXT       0x8743 
#define GL_MIRROR_CLAMP_TO_BORDER_EXT     0x8912 
#endif //GL_EXT_texture_mirror_clamp

#ifndef GL_EXT_texture_object

// Defines
#define GL_TEXTURE_PRIORITY_EXT           0x8066 
#define GL_TEXTURE_RESIDENT_EXT           0x8067 
#define GL_TEXTURE_1D_BINDING_EXT         0x8068 
#define GL_TEXTURE_2D_BINDING_EXT         0x8069 
#define GL_TEXTURE_3D_BINDING_EXT         0x806A 

// functions typedefs
typedef GLboolean (APIENTRYP PFN_GLARETEXTURESRESIDENTEXT_PROC) (GLsizei n, const GLuint * textures, GLboolean * residences);
typedef void (APIENTRYP PFN_GLBINDTEXTUREEXT_PROC) (GLenum target, GLuint texture);
typedef void (APIENTRYP PFN_GLDELETETEXTURESEXT_PROC) (GLsizei n, const GLuint * textures);
typedef void (APIENTRYP PFN_GLGENTEXTURESEXT_PROC) (GLsizei n, GLuint * textures);
typedef GLboolean (APIENTRYP PFN_GLISTEXTUREEXT_PROC) (GLuint texture);
typedef void (APIENTRYP PFN_GLPRIORITIZETEXTURESEXT_PROC) (GLsizei n, const GLuint * textures, const GLclampf * priorities);

// functions typedefs
GL_FUNC_DEF PFN_GLARETEXTURESRESIDENTEXT_PROC _glAreTexturesResidentEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDTEXTUREEXT_PROC _glBindTextureEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETETEXTURESEXT_PROC _glDeleteTexturesEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENTEXTURESEXT_PROC _glGenTexturesEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISTEXTUREEXT_PROC _glIsTextureEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPRIORITIZETEXTURESEXT_PROC _glPrioritizeTexturesEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline GLboolean glAreTexturesResidentEXT (GLsizei n, const GLuint * textures, GLboolean * residences) { return _glAreTexturesResidentEXT_(n, textures, residences); };
inline void glBindTextureEXT (GLenum target, GLuint texture) { return _glBindTextureEXT_(target, texture); };
inline void glDeleteTexturesEXT (GLsizei n, const GLuint * textures) { return _glDeleteTexturesEXT_(n, textures); };
inline void glGenTexturesEXT (GLsizei n, GLuint * textures) { return _glGenTexturesEXT_(n, textures); };
inline GLboolean glIsTextureEXT (GLuint texture) { return _glIsTextureEXT_(texture); };
inline void glPrioritizeTexturesEXT (GLsizei n, const GLuint * textures, const GLclampf * priorities) { return _glPrioritizeTexturesEXT_(n, textures, priorities); };
#endif //GL_EXT_texture_object

#ifndef GL_EXT_texture_perturb_normal

// Defines
#define GL_PERTURB_EXT                    0x85AE 
#define GL_TEXTURE_NORMAL_EXT             0x85AF 

// functions typedefs
typedef void (APIENTRYP PFN_GLTEXTURENORMALEXT_PROC) (GLenum mode);

// functions typedefs
GL_FUNC_DEF PFN_GLTEXTURENORMALEXT_PROC _glTextureNormalEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glTextureNormalEXT (GLenum mode) { return _glTextureNormalEXT_(mode); };
#endif //GL_EXT_texture_perturb_normal

#ifndef GL_EXT_texture_sRGB

// Defines
#define GL_SRGB_EXT                       0x8C40 
#define GL_SRGB8_EXT                      0x8C41 
#define GL_SRGB_ALPHA_EXT                 0x8C42 
#define GL_SRGB8_ALPHA8_EXT               0x8C43 
#define GL_SLUMINANCE_ALPHA_EXT           0x8C44 
#define GL_SLUMINANCE8_ALPHA8_EXT         0x8C45 
#define GL_SLUMINANCE_EXT                 0x8C46 
#define GL_SLUMINANCE8_EXT                0x8C47 
#define GL_COMPRESSED_SRGB_EXT            0x8C48 
#define GL_COMPRESSED_SRGB_ALPHA_EXT      0x8C49 
#define GL_COMPRESSED_SLUMINANCE_EXT      0x8C4A 
#define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT 0x8C4B 
#define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT  0x8C4C 
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D 
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E 
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F 
#endif //GL_EXT_texture_sRGB

#ifndef GL_EXT_texture_shared_exponent

// Defines
#define GL_RGB9_E5_EXT                    0x8C3D 
#define GL_UNSIGNED_INT_5_9_9_9_REV_EXT   0x8C3E 
#define GL_TEXTURE_SHARED_SIZE_EXT        0x8C3F 
#endif //GL_EXT_texture_shared_exponent

#ifndef GL_EXT_texture_snorm

// Defines
#define GL_ALPHA_SNORM                    0x9010 
#define GL_LUMINANCE_SNORM                0x9011 
#define GL_LUMINANCE_ALPHA_SNORM          0x9012 
#define GL_INTENSITY_SNORM                0x9013 
#define GL_ALPHA8_SNORM                   0x9014 
#define GL_LUMINANCE8_SNORM               0x9015 
#define GL_LUMINANCE8_ALPHA8_SNORM        0x9016 
#define GL_INTENSITY8_SNORM               0x9017 
#define GL_ALPHA16_SNORM                  0x9018 
#define GL_LUMINANCE16_SNORM              0x9019 
#define GL_LUMINANCE16_ALPHA16_SNORM      0x901A 
#define GL_INTENSITY16_SNORM              0x901B 
#define GL_RED_SNORM                      0x8F90 
#define GL_RG_SNORM                       0x8F91 
#define GL_RGB_SNORM                      0x8F92 
#define GL_RGBA_SNORM                     0x8F93 
#endif //GL_EXT_texture_snorm

#ifndef GL_EXT_texture_swizzle

// Defines
#define GL_TEXTURE_SWIZZLE_R_EXT          0x8E42 
#define GL_TEXTURE_SWIZZLE_G_EXT          0x8E43 
#define GL_TEXTURE_SWIZZLE_B_EXT          0x8E44 
#define GL_TEXTURE_SWIZZLE_A_EXT          0x8E45 
#define GL_TEXTURE_SWIZZLE_RGBA_EXT       0x8E46 
#endif //GL_EXT_texture_swizzle

#ifndef GL_EXT_timer_query

// Defines
#define GL_TIME_ELAPSED_EXT               0x88BF 

// functions typedefs
typedef void (APIENTRYP PFN_GLGETQUERYOBJECTI64VEXT_PROC) (GLuint id, GLenum pname, GLint64 * params);
typedef void (APIENTRYP PFN_GLGETQUERYOBJECTUI64VEXT_PROC) (GLuint id, GLenum pname, GLuint64 * params);

// functions typedefs
GL_FUNC_DEF PFN_GLGETQUERYOBJECTI64VEXT_PROC _glGetQueryObjecti64vEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETQUERYOBJECTUI64VEXT_PROC _glGetQueryObjectui64vEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glGetQueryObjecti64vEXT (GLuint id, GLenum pname, GLint64 * params) { return _glGetQueryObjecti64vEXT_(id, pname, params); };
inline void glGetQueryObjectui64vEXT (GLuint id, GLenum pname, GLuint64 * params) { return _glGetQueryObjectui64vEXT_(id, pname, params); };
#endif //GL_EXT_timer_query

#ifndef GL_EXT_transform_feedback

// Defines
#define GL_TRANSFORM_FEEDBACK_BUFFER_EXT  0x8C8E 
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 0x8C84 
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 0x8C85 
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0x8C8F 
#define GL_INTERLEAVED_ATTRIBS_EXT        0x8C8C 
#define GL_SEPARATE_ATTRIBS_EXT           0x8C8D 
#define GL_PRIMITIVES_GENERATED_EXT       0x8C87 
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0x8C88 
#define GL_RASTERIZER_DISCARD_EXT         0x8C89 
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A 
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0x8C8B 
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0x8C80 
#define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 0x8C83 
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 0x8C7F 
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0x8C76 

// functions typedefs
typedef void (APIENTRYP PFN_GLBEGINTRANSFORMFEEDBACKEXT_PROC) (GLenum primitiveMode);
typedef void (APIENTRYP PFN_GLENDTRANSFORMFEEDBACKEXT_PROC) (void);
typedef void (APIENTRYP PFN_GLBINDBUFFERRANGEEXT_PROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRYP PFN_GLBINDBUFFEROFFSETEXT_PROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
typedef void (APIENTRYP PFN_GLBINDBUFFERBASEEXT_PROC) (GLenum target, GLuint index, GLuint buffer);
typedef void (APIENTRYP PFN_GLTRANSFORMFEEDBACKVARYINGSEXT_PROC) (GLuint program, GLsizei count, const GLchar * const * varyings, GLenum bufferMode);
typedef void (APIENTRYP PFN_GLGETTRANSFORMFEEDBACKVARYINGEXT_PROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);

// functions typedefs
GL_FUNC_DEF PFN_GLBEGINTRANSFORMFEEDBACKEXT_PROC _glBeginTransformFeedbackEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENDTRANSFORMFEEDBACKEXT_PROC _glEndTransformFeedbackEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDBUFFERRANGEEXT_PROC _glBindBufferRangeEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDBUFFEROFFSETEXT_PROC _glBindBufferOffsetEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDBUFFERBASEEXT_PROC _glBindBufferBaseEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTRANSFORMFEEDBACKVARYINGSEXT_PROC _glTransformFeedbackVaryingsEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTRANSFORMFEEDBACKVARYINGEXT_PROC _glGetTransformFeedbackVaryingEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBeginTransformFeedbackEXT (GLenum primitiveMode) { return _glBeginTransformFeedbackEXT_(primitiveMode); };
inline void glEndTransformFeedbackEXT (void) { return _glEndTransformFeedbackEXT_(); };
inline void glBindBufferRangeEXT (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { return _glBindBufferRangeEXT_(target, index, buffer, offset, size); };
inline void glBindBufferOffsetEXT (GLenum target, GLuint index, GLuint buffer, GLintptr offset) { return _glBindBufferOffsetEXT_(target, index, buffer, offset); };
inline void glBindBufferBaseEXT (GLenum target, GLuint index, GLuint buffer) { return _glBindBufferBaseEXT_(target, index, buffer); };
inline void glTransformFeedbackVaryingsEXT (GLuint program, GLsizei count, const GLchar * const * varyings, GLenum bufferMode) { return _glTransformFeedbackVaryingsEXT_(program, count, varyings, bufferMode); };
inline void glGetTransformFeedbackVaryingEXT (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) { return _glGetTransformFeedbackVaryingEXT_(program, index, bufSize, length, size, type, name); };
#endif //GL_EXT_transform_feedback

#ifndef GL_EXT_vertex_array

// functions typedefs
typedef void (APIENTRYP PFN_GLARRAYELEMENTEXT_PROC) (GLint i);
typedef void (APIENTRYP PFN_GLCOLORPOINTEREXT_PROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (APIENTRYP PFN_GLDRAWARRAYSEXT_PROC) (GLenum mode, GLint first, GLsizei count);
typedef void (APIENTRYP PFN_GLEDGEFLAGPOINTEREXT_PROC) (GLsizei stride, GLsizei count, const GLboolean * pointer);
typedef void (APIENTRYP PFN_GLGETPOINTERVEXT_PROC) (GLenum pname, void * * params);
typedef void (APIENTRYP PFN_GLINDEXPOINTEREXT_PROC) (GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (APIENTRYP PFN_GLNORMALPOINTEREXT_PROC) (GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (APIENTRYP PFN_GLTEXCOORDPOINTEREXT_PROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (APIENTRYP PFN_GLVERTEXPOINTEREXT_PROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer);

// functions typedefs
GL_FUNC_DEF PFN_GLARRAYELEMENTEXT_PROC _glArrayElementEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLORPOINTEREXT_PROC _glColorPointerEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWARRAYSEXT_PROC _glDrawArraysEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEDGEFLAGPOINTEREXT_PROC _glEdgeFlagPointerEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPOINTERVEXT_PROC _glGetPointervEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINDEXPOINTEREXT_PROC _glIndexPointerEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMALPOINTEREXT_PROC _glNormalPointerEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORDPOINTEREXT_PROC _glTexCoordPointerEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXPOINTEREXT_PROC _glVertexPointerEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glArrayElementEXT (GLint i) { return _glArrayElementEXT_(i); };
inline void glColorPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) { return _glColorPointerEXT_(size, type, stride, count, pointer); };
inline void glDrawArraysEXT (GLenum mode, GLint first, GLsizei count) { return _glDrawArraysEXT_(mode, first, count); };
inline void glEdgeFlagPointerEXT (GLsizei stride, GLsizei count, const GLboolean * pointer) { return _glEdgeFlagPointerEXT_(stride, count, pointer); };
inline void glGetPointervEXT (GLenum pname, void * * params) { return _glGetPointervEXT_(pname, params); };
inline void glIndexPointerEXT (GLenum type, GLsizei stride, GLsizei count, const void * pointer) { return _glIndexPointerEXT_(type, stride, count, pointer); };
inline void glNormalPointerEXT (GLenum type, GLsizei stride, GLsizei count, const void * pointer) { return _glNormalPointerEXT_(type, stride, count, pointer); };
inline void glTexCoordPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) { return _glTexCoordPointerEXT_(size, type, stride, count, pointer); };
inline void glVertexPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) { return _glVertexPointerEXT_(size, type, stride, count, pointer); };
#endif //GL_EXT_vertex_array

// GL_EXT_vertex_array_bgra

#ifndef GL_EXT_vertex_attrib_64bit

// Defines
#define GL_DOUBLE_VEC2_EXT                0x8FFC 
#define GL_DOUBLE_VEC3_EXT                0x8FFD 
#define GL_DOUBLE_VEC4_EXT                0x8FFE 
#define GL_DOUBLE_MAT2_EXT                0x8F46 
#define GL_DOUBLE_MAT3_EXT                0x8F47 
#define GL_DOUBLE_MAT4_EXT                0x8F48 
#define GL_DOUBLE_MAT2x3_EXT              0x8F49 
#define GL_DOUBLE_MAT2x4_EXT              0x8F4A 
#define GL_DOUBLE_MAT3x2_EXT              0x8F4B 
#define GL_DOUBLE_MAT3x4_EXT              0x8F4C 
#define GL_DOUBLE_MAT4x2_EXT              0x8F4D 
#define GL_DOUBLE_MAT4x3_EXT              0x8F4E 

// functions typedefs
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL1DEXT_PROC) (GLuint index, GLdouble x);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL2DEXT_PROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL3DEXT_PROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL4DEXT_PROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL1DVEXT_PROC) (GLuint index, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL2DVEXT_PROC) (GLuint index, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL3DVEXT_PROC) (GLuint index, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBL4DVEXT_PROC) (GLuint index, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBLPOINTEREXT_PROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBLDVEXT_PROC) (GLuint index, GLenum pname, GLdouble * params);

// functions typedefs
GL_FUNC_DEF PFN_GLVERTEXATTRIBL1DEXT_PROC _glVertexAttribL1dEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL2DEXT_PROC _glVertexAttribL2dEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL3DEXT_PROC _glVertexAttribL3dEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL4DEXT_PROC _glVertexAttribL4dEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL1DVEXT_PROC _glVertexAttribL1dvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL2DVEXT_PROC _glVertexAttribL2dvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL3DVEXT_PROC _glVertexAttribL3dvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBL4DVEXT_PROC _glVertexAttribL4dvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBLPOINTEREXT_PROC _glVertexAttribLPointerEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBLDVEXT_PROC _glGetVertexAttribLdvEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glVertexAttribL1dEXT (GLuint index, GLdouble x) { return _glVertexAttribL1dEXT_(index, x); };
inline void glVertexAttribL2dEXT (GLuint index, GLdouble x, GLdouble y) { return _glVertexAttribL2dEXT_(index, x, y); };
inline void glVertexAttribL3dEXT (GLuint index, GLdouble x, GLdouble y, GLdouble z) { return _glVertexAttribL3dEXT_(index, x, y, z); };
inline void glVertexAttribL4dEXT (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { return _glVertexAttribL4dEXT_(index, x, y, z, w); };
inline void glVertexAttribL1dvEXT (GLuint index, const GLdouble * v) { return _glVertexAttribL1dvEXT_(index, v); };
inline void glVertexAttribL2dvEXT (GLuint index, const GLdouble * v) { return _glVertexAttribL2dvEXT_(index, v); };
inline void glVertexAttribL3dvEXT (GLuint index, const GLdouble * v) { return _glVertexAttribL3dvEXT_(index, v); };
inline void glVertexAttribL4dvEXT (GLuint index, const GLdouble * v) { return _glVertexAttribL4dvEXT_(index, v); };
inline void glVertexAttribLPointerEXT (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { return _glVertexAttribLPointerEXT_(index, size, type, stride, pointer); };
inline void glGetVertexAttribLdvEXT (GLuint index, GLenum pname, GLdouble * params) { return _glGetVertexAttribLdvEXT_(index, pname, params); };
#endif //GL_EXT_vertex_attrib_64bit

#ifndef GL_EXT_vertex_shader

// Defines
#define GL_VERTEX_SHADER_EXT              0x8780 
#define GL_VERTEX_SHADER_BINDING_EXT      0x8781 
#define GL_OP_INDEX_EXT                   0x8782 
#define GL_OP_NEGATE_EXT                  0x8783 
#define GL_OP_DOT3_EXT                    0x8784 
#define GL_OP_DOT4_EXT                    0x8785 
#define GL_OP_MUL_EXT                     0x8786 
#define GL_OP_ADD_EXT                     0x8787 
#define GL_OP_MADD_EXT                    0x8788 
#define GL_OP_FRAC_EXT                    0x8789 
#define GL_OP_MAX_EXT                     0x878A 
#define GL_OP_MIN_EXT                     0x878B 
#define GL_OP_SET_GE_EXT                  0x878C 
#define GL_OP_SET_LT_EXT                  0x878D 
#define GL_OP_CLAMP_EXT                   0x878E 
#define GL_OP_FLOOR_EXT                   0x878F 
#define GL_OP_ROUND_EXT                   0x8790 
#define GL_OP_EXP_BASE_2_EXT              0x8791 
#define GL_OP_LOG_BASE_2_EXT              0x8792 
#define GL_OP_POWER_EXT                   0x8793 
#define GL_OP_RECIP_EXT                   0x8794 
#define GL_OP_RECIP_SQRT_EXT              0x8795 
#define GL_OP_SUB_EXT                     0x8796 
#define GL_OP_CROSS_PRODUCT_EXT           0x8797 
#define GL_OP_MULTIPLY_MATRIX_EXT         0x8798 
#define GL_OP_MOV_EXT                     0x8799 
#define GL_OUTPUT_VERTEX_EXT              0x879A 
#define GL_OUTPUT_COLOR0_EXT              0x879B 
#define GL_OUTPUT_COLOR1_EXT              0x879C 
#define GL_OUTPUT_TEXTURE_COORD0_EXT      0x879D 
#define GL_OUTPUT_TEXTURE_COORD1_EXT      0x879E 
#define GL_OUTPUT_TEXTURE_COORD2_EXT      0x879F 
#define GL_OUTPUT_TEXTURE_COORD3_EXT      0x87A0 
#define GL_OUTPUT_TEXTURE_COORD4_EXT      0x87A1 
#define GL_OUTPUT_TEXTURE_COORD5_EXT      0x87A2 
#define GL_OUTPUT_TEXTURE_COORD6_EXT      0x87A3 
#define GL_OUTPUT_TEXTURE_COORD7_EXT      0x87A4 
#define GL_OUTPUT_TEXTURE_COORD8_EXT      0x87A5 
#define GL_OUTPUT_TEXTURE_COORD9_EXT      0x87A6 
#define GL_OUTPUT_TEXTURE_COORD10_EXT     0x87A7 
#define GL_OUTPUT_TEXTURE_COORD11_EXT     0x87A8 
#define GL_OUTPUT_TEXTURE_COORD12_EXT     0x87A9 
#define GL_OUTPUT_TEXTURE_COORD13_EXT     0x87AA 
#define GL_OUTPUT_TEXTURE_COORD14_EXT     0x87AB 
#define GL_OUTPUT_TEXTURE_COORD15_EXT     0x87AC 
#define GL_OUTPUT_TEXTURE_COORD16_EXT     0x87AD 
#define GL_OUTPUT_TEXTURE_COORD17_EXT     0x87AE 
#define GL_OUTPUT_TEXTURE_COORD18_EXT     0x87AF 
#define GL_OUTPUT_TEXTURE_COORD19_EXT     0x87B0 
#define GL_OUTPUT_TEXTURE_COORD20_EXT     0x87B1 
#define GL_OUTPUT_TEXTURE_COORD21_EXT     0x87B2 
#define GL_OUTPUT_TEXTURE_COORD22_EXT     0x87B3 
#define GL_OUTPUT_TEXTURE_COORD23_EXT     0x87B4 
#define GL_OUTPUT_TEXTURE_COORD24_EXT     0x87B5 
#define GL_OUTPUT_TEXTURE_COORD25_EXT     0x87B6 
#define GL_OUTPUT_TEXTURE_COORD26_EXT     0x87B7 
#define GL_OUTPUT_TEXTURE_COORD27_EXT     0x87B8 
#define GL_OUTPUT_TEXTURE_COORD28_EXT     0x87B9 
#define GL_OUTPUT_TEXTURE_COORD29_EXT     0x87BA 
#define GL_OUTPUT_TEXTURE_COORD30_EXT     0x87BB 
#define GL_OUTPUT_TEXTURE_COORD31_EXT     0x87BC 
#define GL_OUTPUT_FOG_EXT                 0x87BD 
#define GL_SCALAR_EXT                     0x87BE 
#define GL_VECTOR_EXT                     0x87BF 
#define GL_MATRIX_EXT                     0x87C0 
#define GL_VARIANT_EXT                    0x87C1 
#define GL_INVARIANT_EXT                  0x87C2 
#define GL_LOCAL_CONSTANT_EXT             0x87C3 
#define GL_LOCAL_EXT                      0x87C4 
#define GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87C5 
#define GL_MAX_VERTEX_SHADER_VARIANTS_EXT 0x87C6 
#define GL_MAX_VERTEX_SHADER_INVARIANTS_EXT 0x87C7 
#define GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87C8 
#define GL_MAX_VERTEX_SHADER_LOCALS_EXT   0x87C9 
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CA 
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT 0x87CB 
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87CC 
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT 0x87CD 
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT 0x87CE 
#define GL_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CF 
#define GL_VERTEX_SHADER_VARIANTS_EXT     0x87D0 
#define GL_VERTEX_SHADER_INVARIANTS_EXT   0x87D1 
#define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87D2 
#define GL_VERTEX_SHADER_LOCALS_EXT       0x87D3 
#define GL_VERTEX_SHADER_OPTIMIZED_EXT    0x87D4 
#define GL_X_EXT                          0x87D5 
#define GL_Y_EXT                          0x87D6 
#define GL_Z_EXT                          0x87D7 
#define GL_W_EXT                          0x87D8 
#define GL_NEGATIVE_X_EXT                 0x87D9 
#define GL_NEGATIVE_Y_EXT                 0x87DA 
#define GL_NEGATIVE_Z_EXT                 0x87DB 
#define GL_NEGATIVE_W_EXT                 0x87DC 
#define GL_ZERO_EXT                       0x87DD 
#define GL_ONE_EXT                        0x87DE 
#define GL_NEGATIVE_ONE_EXT               0x87DF 
#define GL_NORMALIZED_RANGE_EXT           0x87E0 
#define GL_FULL_RANGE_EXT                 0x87E1 
#define GL_CURRENT_VERTEX_EXT             0x87E2 
#define GL_MVP_MATRIX_EXT                 0x87E3 
#define GL_VARIANT_VALUE_EXT              0x87E4 
#define GL_VARIANT_DATATYPE_EXT           0x87E5 
#define GL_VARIANT_ARRAY_STRIDE_EXT       0x87E6 
#define GL_VARIANT_ARRAY_TYPE_EXT         0x87E7 
#define GL_VARIANT_ARRAY_EXT              0x87E8 
#define GL_VARIANT_ARRAY_POINTER_EXT      0x87E9 
#define GL_INVARIANT_VALUE_EXT            0x87EA 
#define GL_INVARIANT_DATATYPE_EXT         0x87EB 
#define GL_LOCAL_CONSTANT_VALUE_EXT       0x87EC 
#define GL_LOCAL_CONSTANT_DATATYPE_EXT    0x87ED 

// functions typedefs
typedef void (APIENTRYP PFN_GLBEGINVERTEXSHADEREXT_PROC) (void);
typedef void (APIENTRYP PFN_GLENDVERTEXSHADEREXT_PROC) (void);
typedef void (APIENTRYP PFN_GLBINDVERTEXSHADEREXT_PROC) (GLuint id);
typedef GLuint (APIENTRYP PFN_GLGENVERTEXSHADERSEXT_PROC) (GLuint range);
typedef void (APIENTRYP PFN_GLDELETEVERTEXSHADEREXT_PROC) (GLuint id);
typedef void (APIENTRYP PFN_GLSHADEROP1EXT_PROC) (GLenum op, GLuint res, GLuint arg1);
typedef void (APIENTRYP PFN_GLSHADEROP2EXT_PROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2);
typedef void (APIENTRYP PFN_GLSHADEROP3EXT_PROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
typedef void (APIENTRYP PFN_GLSWIZZLEEXT_PROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
typedef void (APIENTRYP PFN_GLWRITEMASKEXT_PROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
typedef void (APIENTRYP PFN_GLINSERTCOMPONENTEXT_PROC) (GLuint res, GLuint src, GLuint num);
typedef void (APIENTRYP PFN_GLEXTRACTCOMPONENTEXT_PROC) (GLuint res, GLuint src, GLuint num);
typedef GLuint (APIENTRYP PFN_GLGENSYMBOLSEXT_PROC) (GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
typedef void (APIENTRYP PFN_GLSETINVARIANTEXT_PROC) (GLuint id, GLenum type, const void * addr);
typedef void (APIENTRYP PFN_GLSETLOCALCONSTANTEXT_PROC) (GLuint id, GLenum type, const void * addr);
typedef void (APIENTRYP PFN_GLVARIANTBVEXT_PROC) (GLuint id, const GLbyte * addr);
typedef void (APIENTRYP PFN_GLVARIANTSVEXT_PROC) (GLuint id, const GLshort * addr);
typedef void (APIENTRYP PFN_GLVARIANTIVEXT_PROC) (GLuint id, const GLint * addr);
typedef void (APIENTRYP PFN_GLVARIANTFVEXT_PROC) (GLuint id, const GLfloat * addr);
typedef void (APIENTRYP PFN_GLVARIANTDVEXT_PROC) (GLuint id, const GLdouble * addr);
typedef void (APIENTRYP PFN_GLVARIANTUBVEXT_PROC) (GLuint id, const GLubyte * addr);
typedef void (APIENTRYP PFN_GLVARIANTUSVEXT_PROC) (GLuint id, const GLushort * addr);
typedef void (APIENTRYP PFN_GLVARIANTUIVEXT_PROC) (GLuint id, const GLuint * addr);
typedef void (APIENTRYP PFN_GLVARIANTPOINTEREXT_PROC) (GLuint id, GLenum type, GLuint stride, const void * addr);
typedef void (APIENTRYP PFN_GLENABLEVARIANTCLIENTSTATEEXT_PROC) (GLuint id);
typedef void (APIENTRYP PFN_GLDISABLEVARIANTCLIENTSTATEEXT_PROC) (GLuint id);
typedef GLuint (APIENTRYP PFN_GLBINDLIGHTPARAMETEREXT_PROC) (GLenum light, GLenum value);
typedef GLuint (APIENTRYP PFN_GLBINDMATERIALPARAMETEREXT_PROC) (GLenum face, GLenum value);
typedef GLuint (APIENTRYP PFN_GLBINDTEXGENPARAMETEREXT_PROC) (GLenum unit, GLenum coord, GLenum value);
typedef GLuint (APIENTRYP PFN_GLBINDTEXTUREUNITPARAMETEREXT_PROC) (GLenum unit, GLenum value);
typedef GLuint (APIENTRYP PFN_GLBINDPARAMETEREXT_PROC) (GLenum value);
typedef GLboolean (APIENTRYP PFN_GLISVARIANTENABLEDEXT_PROC) (GLuint id, GLenum cap);
typedef void (APIENTRYP PFN_GLGETVARIANTBOOLEANVEXT_PROC) (GLuint id, GLenum value, GLboolean * data);
typedef void (APIENTRYP PFN_GLGETVARIANTINTEGERVEXT_PROC) (GLuint id, GLenum value, GLint * data);
typedef void (APIENTRYP PFN_GLGETVARIANTFLOATVEXT_PROC) (GLuint id, GLenum value, GLfloat * data);
typedef void (APIENTRYP PFN_GLGETVARIANTPOINTERVEXT_PROC) (GLuint id, GLenum value, void * * data);
typedef void (APIENTRYP PFN_GLGETINVARIANTBOOLEANVEXT_PROC) (GLuint id, GLenum value, GLboolean * data);
typedef void (APIENTRYP PFN_GLGETINVARIANTINTEGERVEXT_PROC) (GLuint id, GLenum value, GLint * data);
typedef void (APIENTRYP PFN_GLGETINVARIANTFLOATVEXT_PROC) (GLuint id, GLenum value, GLfloat * data);
typedef void (APIENTRYP PFN_GLGETLOCALCONSTANTBOOLEANVEXT_PROC) (GLuint id, GLenum value, GLboolean * data);
typedef void (APIENTRYP PFN_GLGETLOCALCONSTANTINTEGERVEXT_PROC) (GLuint id, GLenum value, GLint * data);
typedef void (APIENTRYP PFN_GLGETLOCALCONSTANTFLOATVEXT_PROC) (GLuint id, GLenum value, GLfloat * data);

// functions typedefs
GL_FUNC_DEF PFN_GLBEGINVERTEXSHADEREXT_PROC _glBeginVertexShaderEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENDVERTEXSHADEREXT_PROC _glEndVertexShaderEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDVERTEXSHADEREXT_PROC _glBindVertexShaderEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENVERTEXSHADERSEXT_PROC _glGenVertexShadersEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEVERTEXSHADEREXT_PROC _glDeleteVertexShaderEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSHADEROP1EXT_PROC _glShaderOp1EXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSHADEROP2EXT_PROC _glShaderOp2EXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSHADEROP3EXT_PROC _glShaderOp3EXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSWIZZLEEXT_PROC _glSwizzleEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWRITEMASKEXT_PROC _glWriteMaskEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINSERTCOMPONENTEXT_PROC _glInsertComponentEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEXTRACTCOMPONENTEXT_PROC _glExtractComponentEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENSYMBOLSEXT_PROC _glGenSymbolsEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSETINVARIANTEXT_PROC _glSetInvariantEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSETLOCALCONSTANTEXT_PROC _glSetLocalConstantEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVARIANTBVEXT_PROC _glVariantbvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVARIANTSVEXT_PROC _glVariantsvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVARIANTIVEXT_PROC _glVariantivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVARIANTFVEXT_PROC _glVariantfvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVARIANTDVEXT_PROC _glVariantdvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVARIANTUBVEXT_PROC _glVariantubvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVARIANTUSVEXT_PROC _glVariantusvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVARIANTUIVEXT_PROC _glVariantuivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVARIANTPOINTEREXT_PROC _glVariantPointerEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENABLEVARIANTCLIENTSTATEEXT_PROC _glEnableVariantClientStateEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDISABLEVARIANTCLIENTSTATEEXT_PROC _glDisableVariantClientStateEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDLIGHTPARAMETEREXT_PROC _glBindLightParameterEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDMATERIALPARAMETEREXT_PROC _glBindMaterialParameterEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDTEXGENPARAMETEREXT_PROC _glBindTexGenParameterEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDTEXTUREUNITPARAMETEREXT_PROC _glBindTextureUnitParameterEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDPARAMETEREXT_PROC _glBindParameterEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISVARIANTENABLEDEXT_PROC _glIsVariantEnabledEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVARIANTBOOLEANVEXT_PROC _glGetVariantBooleanvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVARIANTINTEGERVEXT_PROC _glGetVariantIntegervEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVARIANTFLOATVEXT_PROC _glGetVariantFloatvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVARIANTPOINTERVEXT_PROC _glGetVariantPointervEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETINVARIANTBOOLEANVEXT_PROC _glGetInvariantBooleanvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETINVARIANTINTEGERVEXT_PROC _glGetInvariantIntegervEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETINVARIANTFLOATVEXT_PROC _glGetInvariantFloatvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETLOCALCONSTANTBOOLEANVEXT_PROC _glGetLocalConstantBooleanvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETLOCALCONSTANTINTEGERVEXT_PROC _glGetLocalConstantIntegervEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETLOCALCONSTANTFLOATVEXT_PROC _glGetLocalConstantFloatvEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBeginVertexShaderEXT (void) { return _glBeginVertexShaderEXT_(); };
inline void glEndVertexShaderEXT (void) { return _glEndVertexShaderEXT_(); };
inline void glBindVertexShaderEXT (GLuint id) { return _glBindVertexShaderEXT_(id); };
inline GLuint glGenVertexShadersEXT (GLuint range) { return _glGenVertexShadersEXT_(range); };
inline void glDeleteVertexShaderEXT (GLuint id) { return _glDeleteVertexShaderEXT_(id); };
inline void glShaderOp1EXT (GLenum op, GLuint res, GLuint arg1) { return _glShaderOp1EXT_(op, res, arg1); };
inline void glShaderOp2EXT (GLenum op, GLuint res, GLuint arg1, GLuint arg2) { return _glShaderOp2EXT_(op, res, arg1, arg2); };
inline void glShaderOp3EXT (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3) { return _glShaderOp3EXT_(op, res, arg1, arg2, arg3); };
inline void glSwizzleEXT (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) { return _glSwizzleEXT_(res, in, outX, outY, outZ, outW); };
inline void glWriteMaskEXT (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) { return _glWriteMaskEXT_(res, in, outX, outY, outZ, outW); };
inline void glInsertComponentEXT (GLuint res, GLuint src, GLuint num) { return _glInsertComponentEXT_(res, src, num); };
inline void glExtractComponentEXT (GLuint res, GLuint src, GLuint num) { return _glExtractComponentEXT_(res, src, num); };
inline GLuint glGenSymbolsEXT (GLenum datatype, GLenum storagetype, GLenum range, GLuint components) { return _glGenSymbolsEXT_(datatype, storagetype, range, components); };
inline void glSetInvariantEXT (GLuint id, GLenum type, const void * addr) { return _glSetInvariantEXT_(id, type, addr); };
inline void glSetLocalConstantEXT (GLuint id, GLenum type, const void * addr) { return _glSetLocalConstantEXT_(id, type, addr); };
inline void glVariantbvEXT (GLuint id, const GLbyte * addr) { return _glVariantbvEXT_(id, addr); };
inline void glVariantsvEXT (GLuint id, const GLshort * addr) { return _glVariantsvEXT_(id, addr); };
inline void glVariantivEXT (GLuint id, const GLint * addr) { return _glVariantivEXT_(id, addr); };
inline void glVariantfvEXT (GLuint id, const GLfloat * addr) { return _glVariantfvEXT_(id, addr); };
inline void glVariantdvEXT (GLuint id, const GLdouble * addr) { return _glVariantdvEXT_(id, addr); };
inline void glVariantubvEXT (GLuint id, const GLubyte * addr) { return _glVariantubvEXT_(id, addr); };
inline void glVariantusvEXT (GLuint id, const GLushort * addr) { return _glVariantusvEXT_(id, addr); };
inline void glVariantuivEXT (GLuint id, const GLuint * addr) { return _glVariantuivEXT_(id, addr); };
inline void glVariantPointerEXT (GLuint id, GLenum type, GLuint stride, const void * addr) { return _glVariantPointerEXT_(id, type, stride, addr); };
inline void glEnableVariantClientStateEXT (GLuint id) { return _glEnableVariantClientStateEXT_(id); };
inline void glDisableVariantClientStateEXT (GLuint id) { return _glDisableVariantClientStateEXT_(id); };
inline GLuint glBindLightParameterEXT (GLenum light, GLenum value) { return _glBindLightParameterEXT_(light, value); };
inline GLuint glBindMaterialParameterEXT (GLenum face, GLenum value) { return _glBindMaterialParameterEXT_(face, value); };
inline GLuint glBindTexGenParameterEXT (GLenum unit, GLenum coord, GLenum value) { return _glBindTexGenParameterEXT_(unit, coord, value); };
inline GLuint glBindTextureUnitParameterEXT (GLenum unit, GLenum value) { return _glBindTextureUnitParameterEXT_(unit, value); };
inline GLuint glBindParameterEXT (GLenum value) { return _glBindParameterEXT_(value); };
inline GLboolean glIsVariantEnabledEXT (GLuint id, GLenum cap) { return _glIsVariantEnabledEXT_(id, cap); };
inline void glGetVariantBooleanvEXT (GLuint id, GLenum value, GLboolean * data) { return _glGetVariantBooleanvEXT_(id, value, data); };
inline void glGetVariantIntegervEXT (GLuint id, GLenum value, GLint * data) { return _glGetVariantIntegervEXT_(id, value, data); };
inline void glGetVariantFloatvEXT (GLuint id, GLenum value, GLfloat * data) { return _glGetVariantFloatvEXT_(id, value, data); };
inline void glGetVariantPointervEXT (GLuint id, GLenum value, void * * data) { return _glGetVariantPointervEXT_(id, value, data); };
inline void glGetInvariantBooleanvEXT (GLuint id, GLenum value, GLboolean * data) { return _glGetInvariantBooleanvEXT_(id, value, data); };
inline void glGetInvariantIntegervEXT (GLuint id, GLenum value, GLint * data) { return _glGetInvariantIntegervEXT_(id, value, data); };
inline void glGetInvariantFloatvEXT (GLuint id, GLenum value, GLfloat * data) { return _glGetInvariantFloatvEXT_(id, value, data); };
inline void glGetLocalConstantBooleanvEXT (GLuint id, GLenum value, GLboolean * data) { return _glGetLocalConstantBooleanvEXT_(id, value, data); };
inline void glGetLocalConstantIntegervEXT (GLuint id, GLenum value, GLint * data) { return _glGetLocalConstantIntegervEXT_(id, value, data); };
inline void glGetLocalConstantFloatvEXT (GLuint id, GLenum value, GLfloat * data) { return _glGetLocalConstantFloatvEXT_(id, value, data); };
#endif //GL_EXT_vertex_shader

#ifndef GL_EXT_vertex_weighting

// Defines
#define GL_MODELVIEW0_STACK_DEPTH_EXT     0x0BA3 
#define GL_MODELVIEW1_STACK_DEPTH_EXT     0x8502 
#define GL_MODELVIEW0_MATRIX_EXT          0x0BA6 
#define GL_MODELVIEW1_MATRIX_EXT          0x8506 
#define GL_VERTEX_WEIGHTING_EXT           0x8509 
#define GL_MODELVIEW0_EXT                 0x1700 
#define GL_MODELVIEW1_EXT                 0x850A 
#define GL_CURRENT_VERTEX_WEIGHT_EXT      0x850B 
#define GL_VERTEX_WEIGHT_ARRAY_EXT        0x850C 
#define GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT   0x850D 
#define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT   0x850E 
#define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT 0x850F 
#define GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT 0x8510 

// functions typedefs
typedef void (APIENTRYP PFN_GLVERTEXWEIGHTFEXT_PROC) (GLfloat weight);
typedef void (APIENTRYP PFN_GLVERTEXWEIGHTFVEXT_PROC) (const GLfloat * weight);
typedef void (APIENTRYP PFN_GLVERTEXWEIGHTPOINTEREXT_PROC) (GLint size, GLenum type, GLsizei stride, const void * pointer);

// functions typedefs
GL_FUNC_DEF PFN_GLVERTEXWEIGHTFEXT_PROC _glVertexWeightfEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXWEIGHTFVEXT_PROC _glVertexWeightfvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXWEIGHTPOINTEREXT_PROC _glVertexWeightPointerEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glVertexWeightfEXT (GLfloat weight) { return _glVertexWeightfEXT_(weight); };
inline void glVertexWeightfvEXT (const GLfloat * weight) { return _glVertexWeightfvEXT_(weight); };
inline void glVertexWeightPointerEXT (GLint size, GLenum type, GLsizei stride, const void * pointer) { return _glVertexWeightPointerEXT_(size, type, stride, pointer); };
#endif //GL_EXT_vertex_weighting

#ifndef GL_EXT_win32_keyed_mutex

// functions typedefs
typedef GLboolean (APIENTRYP PFN_GLACQUIREKEYEDMUTEXWIN32EXT_PROC) (GLuint memory, GLuint64 key, GLuint timeout);
typedef GLboolean (APIENTRYP PFN_GLRELEASEKEYEDMUTEXWIN32EXT_PROC) (GLuint memory, GLuint64 key);

// functions typedefs
GL_FUNC_DEF PFN_GLACQUIREKEYEDMUTEXWIN32EXT_PROC _glAcquireKeyedMutexWin32EXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRELEASEKEYEDMUTEXWIN32EXT_PROC _glReleaseKeyedMutexWin32EXT_ GL_FUNC_DEF2;

// functions inline wrap
inline GLboolean glAcquireKeyedMutexWin32EXT (GLuint memory, GLuint64 key, GLuint timeout) { return _glAcquireKeyedMutexWin32EXT_(memory, key, timeout); };
inline GLboolean glReleaseKeyedMutexWin32EXT (GLuint memory, GLuint64 key) { return _glReleaseKeyedMutexWin32EXT_(memory, key); };
#endif //GL_EXT_win32_keyed_mutex

#ifndef GL_EXT_x11_sync_object

// Defines
#define GL_SYNC_X11_FENCE_EXT             0x90E1 

// functions typedefs
typedef GLsync (APIENTRYP PFN_GLIMPORTSYNCEXT_PROC) (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);

// functions typedefs
GL_FUNC_DEF PFN_GLIMPORTSYNCEXT_PROC _glImportSyncEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline GLsync glImportSyncEXT (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags) { return _glImportSyncEXT_(external_sync_type, external_sync, flags); };
#endif //GL_EXT_x11_sync_object

#ifndef GL_GREMEDY_frame_terminator

// functions typedefs
typedef void (APIENTRYP PFN_GLFRAMETERMINATORGREMEDY_PROC) (void);

// functions typedefs
GL_FUNC_DEF PFN_GLFRAMETERMINATORGREMEDY_PROC _glFrameTerminatorGREMEDY_ GL_FUNC_DEF2;

// functions inline wrap
inline void glFrameTerminatorGREMEDY (void) { return _glFrameTerminatorGREMEDY_(); };
#endif //GL_GREMEDY_frame_terminator

#ifndef GL_GREMEDY_string_marker

// functions typedefs
typedef void (APIENTRYP PFN_GLSTRINGMARKERGREMEDY_PROC) (GLsizei len, const void * string);

// functions typedefs
GL_FUNC_DEF PFN_GLSTRINGMARKERGREMEDY_PROC _glStringMarkerGREMEDY_ GL_FUNC_DEF2;

// functions inline wrap
inline void glStringMarkerGREMEDY (GLsizei len, const void * string) { return _glStringMarkerGREMEDY_(len, string); };
#endif //GL_GREMEDY_string_marker

#ifndef GL_HP_convolution_border_modes

// Defines
#define GL_IGNORE_BORDER_HP               0x8150 
#define GL_CONSTANT_BORDER_HP             0x8151 
#define GL_REPLICATE_BORDER_HP            0x8153 
#define GL_CONVOLUTION_BORDER_COLOR_HP    0x8154 
#endif //GL_HP_convolution_border_modes

#ifndef GL_HP_image_transform

// Defines
#define GL_IMAGE_SCALE_X_HP               0x8155 
#define GL_IMAGE_SCALE_Y_HP               0x8156 
#define GL_IMAGE_TRANSLATE_X_HP           0x8157 
#define GL_IMAGE_TRANSLATE_Y_HP           0x8158 
#define GL_IMAGE_ROTATE_ANGLE_HP          0x8159 
#define GL_IMAGE_ROTATE_ORIGIN_X_HP       0x815A 
#define GL_IMAGE_ROTATE_ORIGIN_Y_HP       0x815B 
#define GL_IMAGE_MAG_FILTER_HP            0x815C 
#define GL_IMAGE_MIN_FILTER_HP            0x815D 
#define GL_IMAGE_CUBIC_WEIGHT_HP          0x815E 
#define GL_CUBIC_HP                       0x815F 
#define GL_AVERAGE_HP                     0x8160 
#define GL_IMAGE_TRANSFORM_2D_HP          0x8161 
#define GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8162 
#define GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8163 

// functions typedefs
typedef void (APIENTRYP PFN_GLIMAGETRANSFORMPARAMETERIHP_PROC) (GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLIMAGETRANSFORMPARAMETERFHP_PROC) (GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLIMAGETRANSFORMPARAMETERIVHP_PROC) (GLenum target, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLIMAGETRANSFORMPARAMETERFVHP_PROC) (GLenum target, GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLGETIMAGETRANSFORMPARAMETERIVHP_PROC) (GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETIMAGETRANSFORMPARAMETERFVHP_PROC) (GLenum target, GLenum pname, GLfloat * params);

// functions typedefs
GL_FUNC_DEF PFN_GLIMAGETRANSFORMPARAMETERIHP_PROC _glImageTransformParameteriHP_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLIMAGETRANSFORMPARAMETERFHP_PROC _glImageTransformParameterfHP_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLIMAGETRANSFORMPARAMETERIVHP_PROC _glImageTransformParameterivHP_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLIMAGETRANSFORMPARAMETERFVHP_PROC _glImageTransformParameterfvHP_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETIMAGETRANSFORMPARAMETERIVHP_PROC _glGetImageTransformParameterivHP_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETIMAGETRANSFORMPARAMETERFVHP_PROC _glGetImageTransformParameterfvHP_ GL_FUNC_DEF2;

// functions inline wrap
inline void glImageTransformParameteriHP (GLenum target, GLenum pname, GLint param) { return _glImageTransformParameteriHP_(target, pname, param); };
inline void glImageTransformParameterfHP (GLenum target, GLenum pname, GLfloat param) { return _glImageTransformParameterfHP_(target, pname, param); };
inline void glImageTransformParameterivHP (GLenum target, GLenum pname, const GLint * params) { return _glImageTransformParameterivHP_(target, pname, params); };
inline void glImageTransformParameterfvHP (GLenum target, GLenum pname, const GLfloat * params) { return _glImageTransformParameterfvHP_(target, pname, params); };
inline void glGetImageTransformParameterivHP (GLenum target, GLenum pname, GLint * params) { return _glGetImageTransformParameterivHP_(target, pname, params); };
inline void glGetImageTransformParameterfvHP (GLenum target, GLenum pname, GLfloat * params) { return _glGetImageTransformParameterfvHP_(target, pname, params); };
#endif //GL_HP_image_transform

#ifndef GL_HP_occlusion_test

// Defines
#define GL_OCCLUSION_TEST_HP              0x8165 
#define GL_OCCLUSION_TEST_RESULT_HP       0x8166 
#endif //GL_HP_occlusion_test

#ifndef GL_HP_texture_lighting

// Defines
#define GL_TEXTURE_LIGHTING_MODE_HP       0x8167 
#define GL_TEXTURE_POST_SPECULAR_HP       0x8168 
#define GL_TEXTURE_PRE_SPECULAR_HP        0x8169 
#endif //GL_HP_texture_lighting

#ifndef GL_IBM_cull_vertex

// Defines
#define GL_CULL_VERTEX_IBM                103050 
#endif //GL_IBM_cull_vertex

#ifndef GL_IBM_multimode_draw_arrays

// functions typedefs
typedef void (APIENTRYP PFN_GLMULTIMODEDRAWARRAYSIBM_PROC) (const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei primcount, GLint modestride);
typedef void (APIENTRYP PFN_GLMULTIMODEDRAWELEMENTSIBM_PROC) (const GLenum * mode, const GLsizei * count, GLenum type, const void * const * indices, GLsizei primcount, GLint modestride);

// functions typedefs
GL_FUNC_DEF PFN_GLMULTIMODEDRAWARRAYSIBM_PROC _glMultiModeDrawArraysIBM_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTIMODEDRAWELEMENTSIBM_PROC _glMultiModeDrawElementsIBM_ GL_FUNC_DEF2;

// functions inline wrap
inline void glMultiModeDrawArraysIBM (const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei primcount, GLint modestride) { return _glMultiModeDrawArraysIBM_(mode, first, count, primcount, modestride); };
inline void glMultiModeDrawElementsIBM (const GLenum * mode, const GLsizei * count, GLenum type, const void * const * indices, GLsizei primcount, GLint modestride) { return _glMultiModeDrawElementsIBM_(mode, count, type, indices, primcount, modestride); };
#endif //GL_IBM_multimode_draw_arrays

#ifndef GL_IBM_rasterpos_clip

// Defines
#define GL_RASTER_POSITION_UNCLIPPED_IBM  0x19262 
#endif //GL_IBM_rasterpos_clip

#ifndef GL_IBM_static_data

// Defines
#define GL_ALL_STATIC_DATA_IBM            103060 
#define GL_STATIC_VERTEX_ARRAY_IBM        103061 

// functions typedefs
typedef void (APIENTRYP PFN_GLFLUSHSTATICDATAIBM_PROC) (GLenum target);

// functions typedefs
GL_FUNC_DEF PFN_GLFLUSHSTATICDATAIBM_PROC _glFlushStaticDataIBM_ GL_FUNC_DEF2;

// functions inline wrap
inline void glFlushStaticDataIBM (GLenum target) { return _glFlushStaticDataIBM_(target); };
#endif //GL_IBM_static_data

#ifndef GL_IBM_texture_mirrored_repeat

// Defines
#define GL_MIRRORED_REPEAT_IBM            0x8370 
#endif //GL_IBM_texture_mirrored_repeat

#ifndef GL_IBM_vertex_array_lists

// Defines
#define GL_VERTEX_ARRAY_LIST_IBM          103070 
#define GL_NORMAL_ARRAY_LIST_IBM          103071 
#define GL_COLOR_ARRAY_LIST_IBM           103072 
#define GL_INDEX_ARRAY_LIST_IBM           103073 
#define GL_TEXTURE_COORD_ARRAY_LIST_IBM   103074 
#define GL_EDGE_FLAG_ARRAY_LIST_IBM       103075 
#define GL_FOG_COORDINATE_ARRAY_LIST_IBM  103076 
#define GL_SECONDARY_COLOR_ARRAY_LIST_IBM 103077 
#define GL_VERTEX_ARRAY_LIST_STRIDE_IBM   103080 
#define GL_NORMAL_ARRAY_LIST_STRIDE_IBM   103081 
#define GL_COLOR_ARRAY_LIST_STRIDE_IBM    103082 
#define GL_INDEX_ARRAY_LIST_STRIDE_IBM    103083 
#define GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM 103084 
#define GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM 103085 
#define GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM 103086 
#define GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM 103087 

// functions typedefs
typedef void (APIENTRYP PFN_GLCOLORPOINTERLISTIBM_PROC) (GLint size, GLenum type, GLint stride, const void * * pointer, GLint ptrstride);
typedef void (APIENTRYP PFN_GLSECONDARYCOLORPOINTERLISTIBM_PROC) (GLint size, GLenum type, GLint stride, const void * * pointer, GLint ptrstride);
typedef void (APIENTRYP PFN_GLEDGEFLAGPOINTERLISTIBM_PROC) (GLint stride, const GLboolean * * pointer, GLint ptrstride);
typedef void (APIENTRYP PFN_GLFOGCOORDPOINTERLISTIBM_PROC) (GLenum type, GLint stride, const void * * pointer, GLint ptrstride);
typedef void (APIENTRYP PFN_GLINDEXPOINTERLISTIBM_PROC) (GLenum type, GLint stride, const void * * pointer, GLint ptrstride);
typedef void (APIENTRYP PFN_GLNORMALPOINTERLISTIBM_PROC) (GLenum type, GLint stride, const void * * pointer, GLint ptrstride);
typedef void (APIENTRYP PFN_GLTEXCOORDPOINTERLISTIBM_PROC) (GLint size, GLenum type, GLint stride, const void * * pointer, GLint ptrstride);
typedef void (APIENTRYP PFN_GLVERTEXPOINTERLISTIBM_PROC) (GLint size, GLenum type, GLint stride, const void * * pointer, GLint ptrstride);

// functions typedefs
GL_FUNC_DEF PFN_GLCOLORPOINTERLISTIBM_PROC _glColorPointerListIBM_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLORPOINTERLISTIBM_PROC _glSecondaryColorPointerListIBM_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEDGEFLAGPOINTERLISTIBM_PROC _glEdgeFlagPointerListIBM_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFOGCOORDPOINTERLISTIBM_PROC _glFogCoordPointerListIBM_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINDEXPOINTERLISTIBM_PROC _glIndexPointerListIBM_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMALPOINTERLISTIBM_PROC _glNormalPointerListIBM_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORDPOINTERLISTIBM_PROC _glTexCoordPointerListIBM_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXPOINTERLISTIBM_PROC _glVertexPointerListIBM_ GL_FUNC_DEF2;

// functions inline wrap
inline void glColorPointerListIBM (GLint size, GLenum type, GLint stride, const void * * pointer, GLint ptrstride) { return _glColorPointerListIBM_(size, type, stride, pointer, ptrstride); };
inline void glSecondaryColorPointerListIBM (GLint size, GLenum type, GLint stride, const void * * pointer, GLint ptrstride) { return _glSecondaryColorPointerListIBM_(size, type, stride, pointer, ptrstride); };
inline void glEdgeFlagPointerListIBM (GLint stride, const GLboolean * * pointer, GLint ptrstride) { return _glEdgeFlagPointerListIBM_(stride, pointer, ptrstride); };
inline void glFogCoordPointerListIBM (GLenum type, GLint stride, const void * * pointer, GLint ptrstride) { return _glFogCoordPointerListIBM_(type, stride, pointer, ptrstride); };
inline void glIndexPointerListIBM (GLenum type, GLint stride, const void * * pointer, GLint ptrstride) { return _glIndexPointerListIBM_(type, stride, pointer, ptrstride); };
inline void glNormalPointerListIBM (GLenum type, GLint stride, const void * * pointer, GLint ptrstride) { return _glNormalPointerListIBM_(type, stride, pointer, ptrstride); };
inline void glTexCoordPointerListIBM (GLint size, GLenum type, GLint stride, const void * * pointer, GLint ptrstride) { return _glTexCoordPointerListIBM_(size, type, stride, pointer, ptrstride); };
inline void glVertexPointerListIBM (GLint size, GLenum type, GLint stride, const void * * pointer, GLint ptrstride) { return _glVertexPointerListIBM_(size, type, stride, pointer, ptrstride); };
#endif //GL_IBM_vertex_array_lists

#ifndef GL_INGR_blend_func_separate

// functions typedefs
typedef void (APIENTRYP PFN_GLBLENDFUNCSEPARATEINGR_PROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);

// functions typedefs
GL_FUNC_DEF PFN_GLBLENDFUNCSEPARATEINGR_PROC _glBlendFuncSeparateINGR_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBlendFuncSeparateINGR (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { return _glBlendFuncSeparateINGR_(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); };
#endif //GL_INGR_blend_func_separate

#ifndef GL_INGR_color_clamp

// Defines
#define GL_RED_MIN_CLAMP_INGR             0x8560 
#define GL_GREEN_MIN_CLAMP_INGR           0x8561 
#define GL_BLUE_MIN_CLAMP_INGR            0x8562 
#define GL_ALPHA_MIN_CLAMP_INGR           0x8563 
#define GL_RED_MAX_CLAMP_INGR             0x8564 
#define GL_GREEN_MAX_CLAMP_INGR           0x8565 
#define GL_BLUE_MAX_CLAMP_INGR            0x8566 
#define GL_ALPHA_MAX_CLAMP_INGR           0x8567 
#endif //GL_INGR_color_clamp

#ifndef GL_INGR_interlace_read

// Defines
#define GL_INTERLACE_READ_INGR            0x8568 
#endif //GL_INGR_interlace_read

// GL_INTEL_fragment_shader_ordering

#ifndef GL_INTEL_map_texture

// Defines
#define GL_TEXTURE_MEMORY_LAYOUT_INTEL    0x83FF 
#define GL_LAYOUT_DEFAULT_INTEL           0 
#define GL_LAYOUT_LINEAR_INTEL            1 
#define GL_LAYOUT_LINEAR_CPU_CACHED_INTEL 2 

// functions typedefs
typedef void (APIENTRYP PFN_GLSYNCTEXTUREINTEL_PROC) (GLuint texture);
typedef void (APIENTRYP PFN_GLUNMAPTEXTURE2DINTEL_PROC) (GLuint texture, GLint level);
typedef void * (APIENTRYP PFN_GLMAPTEXTURE2DINTEL_PROC) (GLuint texture, GLint level, GLbitfield access, GLint * stride, GLenum * layout);

// functions typedefs
GL_FUNC_DEF PFN_GLSYNCTEXTUREINTEL_PROC _glSyncTextureINTEL_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLUNMAPTEXTURE2DINTEL_PROC _glUnmapTexture2DINTEL_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAPTEXTURE2DINTEL_PROC _glMapTexture2DINTEL_ GL_FUNC_DEF2;

// functions inline wrap
inline void glSyncTextureINTEL (GLuint texture) { return _glSyncTextureINTEL_(texture); };
inline void glUnmapTexture2DINTEL (GLuint texture, GLint level) { return _glUnmapTexture2DINTEL_(texture, level); };
inline void * glMapTexture2DINTEL (GLuint texture, GLint level, GLbitfield access, GLint * stride, GLenum * layout) { return _glMapTexture2DINTEL_(texture, level, access, stride, layout); };
#endif //GL_INTEL_map_texture

#ifndef GL_INTEL_parallel_arrays

// Defines
#define GL_PARALLEL_ARRAYS_INTEL          0x83F4 
#define GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL 0x83F5 
#define GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL 0x83F6 
#define GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL 0x83F7 
#define GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL 0x83F8 

// functions typedefs
typedef void (APIENTRYP PFN_GLVERTEXPOINTERVINTEL_PROC) (GLint size, GLenum type, const void * * pointer);
typedef void (APIENTRYP PFN_GLNORMALPOINTERVINTEL_PROC) (GLenum type, const void * * pointer);
typedef void (APIENTRYP PFN_GLCOLORPOINTERVINTEL_PROC) (GLint size, GLenum type, const void * * pointer);
typedef void (APIENTRYP PFN_GLTEXCOORDPOINTERVINTEL_PROC) (GLint size, GLenum type, const void * * pointer);

// functions typedefs
GL_FUNC_DEF PFN_GLVERTEXPOINTERVINTEL_PROC _glVertexPointervINTEL_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMALPOINTERVINTEL_PROC _glNormalPointervINTEL_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLORPOINTERVINTEL_PROC _glColorPointervINTEL_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORDPOINTERVINTEL_PROC _glTexCoordPointervINTEL_ GL_FUNC_DEF2;

// functions inline wrap
inline void glVertexPointervINTEL (GLint size, GLenum type, const void * * pointer) { return _glVertexPointervINTEL_(size, type, pointer); };
inline void glNormalPointervINTEL (GLenum type, const void * * pointer) { return _glNormalPointervINTEL_(type, pointer); };
inline void glColorPointervINTEL (GLint size, GLenum type, const void * * pointer) { return _glColorPointervINTEL_(size, type, pointer); };
inline void glTexCoordPointervINTEL (GLint size, GLenum type, const void * * pointer) { return _glTexCoordPointervINTEL_(size, type, pointer); };
#endif //GL_INTEL_parallel_arrays

#ifndef GL_MESAX_texture_stack

// Defines
#define GL_TEXTURE_1D_STACK_MESAX         0x8759 
#define GL_TEXTURE_2D_STACK_MESAX         0x875A 
#define GL_PROXY_TEXTURE_1D_STACK_MESAX   0x875B 
#define GL_PROXY_TEXTURE_2D_STACK_MESAX   0x875C 
#define GL_TEXTURE_1D_STACK_BINDING_MESAX 0x875D 
#define GL_TEXTURE_2D_STACK_BINDING_MESAX 0x875E 
#endif //GL_MESAX_texture_stack

#ifndef GL_MESA_pack_invert

// Defines
#define GL_PACK_INVERT_MESA               0x8758 
#endif //GL_MESA_pack_invert

#ifndef GL_MESA_program_binary_formats

// Defines
#define GL_PROGRAM_BINARY_FORMAT_MESA     0x875F 
#endif //GL_MESA_program_binary_formats

#ifndef GL_MESA_resize_buffers

// functions typedefs
typedef void (APIENTRYP PFN_GLRESIZEBUFFERSMESA_PROC) (void);

// functions typedefs
GL_FUNC_DEF PFN_GLRESIZEBUFFERSMESA_PROC _glResizeBuffersMESA_ GL_FUNC_DEF2;

// functions inline wrap
inline void glResizeBuffersMESA (void) { return _glResizeBuffersMESA_(); };
#endif //GL_MESA_resize_buffers

// GL_MESA_shader_integer_functions

#ifndef GL_MESA_tile_raster_order

// Defines
#define GL_TILE_RASTER_ORDER_FIXED_MESA   0x8BB8 
#define GL_TILE_RASTER_ORDER_INCREASING_X_MESA 0x8BB9 
#define GL_TILE_RASTER_ORDER_INCREASING_Y_MESA 0x8BBA 
#endif //GL_MESA_tile_raster_order

#ifndef GL_MESA_window_pos

// functions typedefs
typedef void (APIENTRYP PFN_GLWINDOWPOS2DMESA_PROC) (GLdouble x, GLdouble y);
typedef void (APIENTRYP PFN_GLWINDOWPOS2DVMESA_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS2FMESA_PROC) (GLfloat x, GLfloat y);
typedef void (APIENTRYP PFN_GLWINDOWPOS2FVMESA_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS2IMESA_PROC) (GLint x, GLint y);
typedef void (APIENTRYP PFN_GLWINDOWPOS2IVMESA_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS2SMESA_PROC) (GLshort x, GLshort y);
typedef void (APIENTRYP PFN_GLWINDOWPOS2SVMESA_PROC) (const GLshort * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS3DMESA_PROC) (GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFN_GLWINDOWPOS3DVMESA_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS3FMESA_PROC) (GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLWINDOWPOS3FVMESA_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS3IMESA_PROC) (GLint x, GLint y, GLint z);
typedef void (APIENTRYP PFN_GLWINDOWPOS3IVMESA_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS3SMESA_PROC) (GLshort x, GLshort y, GLshort z);
typedef void (APIENTRYP PFN_GLWINDOWPOS3SVMESA_PROC) (const GLshort * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS4DMESA_PROC) (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFN_GLWINDOWPOS4DVMESA_PROC) (const GLdouble * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS4FMESA_PROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRYP PFN_GLWINDOWPOS4FVMESA_PROC) (const GLfloat * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS4IMESA_PROC) (GLint x, GLint y, GLint z, GLint w);
typedef void (APIENTRYP PFN_GLWINDOWPOS4IVMESA_PROC) (const GLint * v);
typedef void (APIENTRYP PFN_GLWINDOWPOS4SMESA_PROC) (GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (APIENTRYP PFN_GLWINDOWPOS4SVMESA_PROC) (const GLshort * v);

// functions typedefs
GL_FUNC_DEF PFN_GLWINDOWPOS2DMESA_PROC _glWindowPos2dMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2DVMESA_PROC _glWindowPos2dvMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2FMESA_PROC _glWindowPos2fMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2FVMESA_PROC _glWindowPos2fvMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2IMESA_PROC _glWindowPos2iMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2IVMESA_PROC _glWindowPos2ivMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2SMESA_PROC _glWindowPos2sMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS2SVMESA_PROC _glWindowPos2svMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3DMESA_PROC _glWindowPos3dMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3DVMESA_PROC _glWindowPos3dvMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3FMESA_PROC _glWindowPos3fMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3FVMESA_PROC _glWindowPos3fvMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3IMESA_PROC _glWindowPos3iMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3IVMESA_PROC _glWindowPos3ivMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3SMESA_PROC _glWindowPos3sMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS3SVMESA_PROC _glWindowPos3svMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS4DMESA_PROC _glWindowPos4dMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS4DVMESA_PROC _glWindowPos4dvMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS4FMESA_PROC _glWindowPos4fMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS4FVMESA_PROC _glWindowPos4fvMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS4IMESA_PROC _glWindowPos4iMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS4IVMESA_PROC _glWindowPos4ivMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS4SMESA_PROC _glWindowPos4sMESA_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWINDOWPOS4SVMESA_PROC _glWindowPos4svMESA_ GL_FUNC_DEF2;

// functions inline wrap
inline void glWindowPos2dMESA (GLdouble x, GLdouble y) { return _glWindowPos2dMESA_(x, y); };
inline void glWindowPos2dvMESA (const GLdouble * v) { return _glWindowPos2dvMESA_(v); };
inline void glWindowPos2fMESA (GLfloat x, GLfloat y) { return _glWindowPos2fMESA_(x, y); };
inline void glWindowPos2fvMESA (const GLfloat * v) { return _glWindowPos2fvMESA_(v); };
inline void glWindowPos2iMESA (GLint x, GLint y) { return _glWindowPos2iMESA_(x, y); };
inline void glWindowPos2ivMESA (const GLint * v) { return _glWindowPos2ivMESA_(v); };
inline void glWindowPos2sMESA (GLshort x, GLshort y) { return _glWindowPos2sMESA_(x, y); };
inline void glWindowPos2svMESA (const GLshort * v) { return _glWindowPos2svMESA_(v); };
inline void glWindowPos3dMESA (GLdouble x, GLdouble y, GLdouble z) { return _glWindowPos3dMESA_(x, y, z); };
inline void glWindowPos3dvMESA (const GLdouble * v) { return _glWindowPos3dvMESA_(v); };
inline void glWindowPos3fMESA (GLfloat x, GLfloat y, GLfloat z) { return _glWindowPos3fMESA_(x, y, z); };
inline void glWindowPos3fvMESA (const GLfloat * v) { return _glWindowPos3fvMESA_(v); };
inline void glWindowPos3iMESA (GLint x, GLint y, GLint z) { return _glWindowPos3iMESA_(x, y, z); };
inline void glWindowPos3ivMESA (const GLint * v) { return _glWindowPos3ivMESA_(v); };
inline void glWindowPos3sMESA (GLshort x, GLshort y, GLshort z) { return _glWindowPos3sMESA_(x, y, z); };
inline void glWindowPos3svMESA (const GLshort * v) { return _glWindowPos3svMESA_(v); };
inline void glWindowPos4dMESA (GLdouble x, GLdouble y, GLdouble z, GLdouble w) { return _glWindowPos4dMESA_(x, y, z, w); };
inline void glWindowPos4dvMESA (const GLdouble * v) { return _glWindowPos4dvMESA_(v); };
inline void glWindowPos4fMESA (GLfloat x, GLfloat y, GLfloat z, GLfloat w) { return _glWindowPos4fMESA_(x, y, z, w); };
inline void glWindowPos4fvMESA (const GLfloat * v) { return _glWindowPos4fvMESA_(v); };
inline void glWindowPos4iMESA (GLint x, GLint y, GLint z, GLint w) { return _glWindowPos4iMESA_(x, y, z, w); };
inline void glWindowPos4ivMESA (const GLint * v) { return _glWindowPos4ivMESA_(v); };
inline void glWindowPos4sMESA (GLshort x, GLshort y, GLshort z, GLshort w) { return _glWindowPos4sMESA_(x, y, z, w); };
inline void glWindowPos4svMESA (const GLshort * v) { return _glWindowPos4svMESA_(v); };
#endif //GL_MESA_window_pos

#ifndef GL_MESA_ycbcr_texture

// Defines
#define GL_UNSIGNED_SHORT_8_8_MESA        0x85BA 
#define GL_UNSIGNED_SHORT_8_8_REV_MESA    0x85BB 
#define GL_YCBCR_MESA                     0x8757 
#endif //GL_MESA_ycbcr_texture

// GL_NVX_blend_equation_advanced_multi_draw_buffers

#ifndef GL_NVX_conditional_render

// functions typedefs
typedef void (APIENTRYP PFN_GLBEGINCONDITIONALRENDERNVX_PROC) (GLuint id);
typedef void (APIENTRYP PFN_GLENDCONDITIONALRENDERNVX_PROC) (void);

// functions typedefs
GL_FUNC_DEF PFN_GLBEGINCONDITIONALRENDERNVX_PROC _glBeginConditionalRenderNVX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENDCONDITIONALRENDERNVX_PROC _glEndConditionalRenderNVX_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBeginConditionalRenderNVX (GLuint id) { return _glBeginConditionalRenderNVX_(id); };
inline void glEndConditionalRenderNVX (void) { return _glEndConditionalRenderNVX_(); };
#endif //GL_NVX_conditional_render

#ifndef GL_NVX_gpu_memory_info

// Defines
#define GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX 0x9047 
#define GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX 0x9048 
#define GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX 0x9049 
#define GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX 0x904A 
#define GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX 0x904B 
#endif //GL_NVX_gpu_memory_info

#ifndef GL_NVX_gpu_multicast2

// Defines
#define GL_UPLOAD_GPU_MASK_NVX            0x954A 

// functions typedefs
typedef void (APIENTRYP PFN_GLUPLOADGPUMASKNVX_PROC) (GLbitfield mask);
typedef void (APIENTRYP PFN_GLMULTICASTVIEWPORTARRAYVNVX_PROC) (GLuint gpu, GLuint first, GLsizei count, const GLfloat * v);
typedef void (APIENTRYP PFN_GLMULTICASTVIEWPORTPOSITIONWSCALENVX_PROC) (GLuint gpu, GLuint index, GLfloat xcoeff, GLfloat ycoeff);
typedef void (APIENTRYP PFN_GLMULTICASTSCISSORARRAYVNVX_PROC) (GLuint gpu, GLuint first, GLsizei count, const GLint * v);
typedef GLuint (APIENTRYP PFN_GLASYNCCOPYBUFFERSUBDATANVX_PROC) (GLsizei waitSemaphoreCount, const GLuint * waitSemaphoreArray, const GLuint64 * fenceValueArray, GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, GLsizei signalSemaphoreCount, const GLuint * signalSemaphoreArray, const GLuint64 * signalValueArray);
typedef GLuint (APIENTRYP PFN_GLASYNCCOPYIMAGESUBDATANVX_PROC) (GLsizei waitSemaphoreCount, const GLuint * waitSemaphoreArray, const GLuint64 * waitValueArray, GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, GLsizei signalSemaphoreCount, const GLuint * signalSemaphoreArray, const GLuint64 * signalValueArray);

// functions typedefs
GL_FUNC_DEF PFN_GLUPLOADGPUMASKNVX_PROC _glUploadGpuMaskNVX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTICASTVIEWPORTARRAYVNVX_PROC _glMulticastViewportArrayvNVX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTICASTVIEWPORTPOSITIONWSCALENVX_PROC _glMulticastViewportPositionWScaleNVX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTICASTSCISSORARRAYVNVX_PROC _glMulticastScissorArrayvNVX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLASYNCCOPYBUFFERSUBDATANVX_PROC _glAsyncCopyBufferSubDataNVX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLASYNCCOPYIMAGESUBDATANVX_PROC _glAsyncCopyImageSubDataNVX_ GL_FUNC_DEF2;

// functions inline wrap
inline void glUploadGpuMaskNVX (GLbitfield mask) { return _glUploadGpuMaskNVX_(mask); };
inline void glMulticastViewportArrayvNVX (GLuint gpu, GLuint first, GLsizei count, const GLfloat * v) { return _glMulticastViewportArrayvNVX_(gpu, first, count, v); };
inline void glMulticastViewportPositionWScaleNVX (GLuint gpu, GLuint index, GLfloat xcoeff, GLfloat ycoeff) { return _glMulticastViewportPositionWScaleNVX_(gpu, index, xcoeff, ycoeff); };
inline void glMulticastScissorArrayvNVX (GLuint gpu, GLuint first, GLsizei count, const GLint * v) { return _glMulticastScissorArrayvNVX_(gpu, first, count, v); };
inline GLuint glAsyncCopyBufferSubDataNVX (GLsizei waitSemaphoreCount, const GLuint * waitSemaphoreArray, const GLuint64 * fenceValueArray, GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, GLsizei signalSemaphoreCount, const GLuint * signalSemaphoreArray, const GLuint64 * signalValueArray) { return _glAsyncCopyBufferSubDataNVX_(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray); };
inline GLuint glAsyncCopyImageSubDataNVX (GLsizei waitSemaphoreCount, const GLuint * waitSemaphoreArray, const GLuint64 * waitValueArray, GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, GLsizei signalSemaphoreCount, const GLuint * signalSemaphoreArray, const GLuint64 * signalValueArray) { return _glAsyncCopyImageSubDataNVX_(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray); };
#endif //GL_NVX_gpu_multicast2

#ifndef GL_NVX_linked_gpu_multicast

// Defines
#define GL_LGPU_SEPARATE_STORAGE_BIT_NVX  0x0800 
#define GL_MAX_LGPU_GPUS_NVX              0x92BA 

// functions typedefs
typedef void (APIENTRYP PFN_GLLGPUNAMEDBUFFERSUBDATANVX_PROC) (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data);
typedef void (APIENTRYP PFN_GLLGPUCOPYIMAGESUBDATANVX_PROC) (GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
typedef void (APIENTRYP PFN_GLLGPUINTERLOCKNVX_PROC) (void);

// functions typedefs
GL_FUNC_DEF PFN_GLLGPUNAMEDBUFFERSUBDATANVX_PROC _glLGPUNamedBufferSubDataNVX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLGPUCOPYIMAGESUBDATANVX_PROC _glLGPUCopyImageSubDataNVX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLGPUINTERLOCKNVX_PROC _glLGPUInterlockNVX_ GL_FUNC_DEF2;

// functions inline wrap
inline void glLGPUNamedBufferSubDataNVX (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { return _glLGPUNamedBufferSubDataNVX_(gpuMask, buffer, offset, size, data); };
inline void glLGPUCopyImageSubDataNVX (GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) { return _glLGPUCopyImageSubDataNVX_(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth); };
inline void glLGPUInterlockNVX (void) { return _glLGPUInterlockNVX_(); };
#endif //GL_NVX_linked_gpu_multicast

#ifndef GL_NVX_progress_fence

// functions typedefs
typedef GLuint (APIENTRYP PFN_GLCREATEPROGRESSFENCENVX_PROC) (void);
typedef void (APIENTRYP PFN_GLSIGNALSEMAPHOREUI64NVX_PROC) (GLuint signalGpu, GLsizei fenceObjectCount, const GLuint * semaphoreArray, const GLuint64 * fenceValueArray);
typedef void (APIENTRYP PFN_GLWAITSEMAPHOREUI64NVX_PROC) (GLuint waitGpu, GLsizei fenceObjectCount, const GLuint * semaphoreArray, const GLuint64 * fenceValueArray);
typedef void (APIENTRYP PFN_GLCLIENTWAITSEMAPHOREUI64NVX_PROC) (GLsizei fenceObjectCount, const GLuint * semaphoreArray, const GLuint64 * fenceValueArray);

// functions typedefs
GL_FUNC_DEF PFN_GLCREATEPROGRESSFENCENVX_PROC _glCreateProgressFenceNVX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSIGNALSEMAPHOREUI64NVX_PROC _glSignalSemaphoreui64NVX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLWAITSEMAPHOREUI64NVX_PROC _glWaitSemaphoreui64NVX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLIENTWAITSEMAPHOREUI64NVX_PROC _glClientWaitSemaphoreui64NVX_ GL_FUNC_DEF2;

// functions inline wrap
inline GLuint glCreateProgressFenceNVX (void) { return _glCreateProgressFenceNVX_(); };
inline void glSignalSemaphoreui64NVX (GLuint signalGpu, GLsizei fenceObjectCount, const GLuint * semaphoreArray, const GLuint64 * fenceValueArray) { return _glSignalSemaphoreui64NVX_(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray); };
inline void glWaitSemaphoreui64NVX (GLuint waitGpu, GLsizei fenceObjectCount, const GLuint * semaphoreArray, const GLuint64 * fenceValueArray) { return _glWaitSemaphoreui64NVX_(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray); };
inline void glClientWaitSemaphoreui64NVX (GLsizei fenceObjectCount, const GLuint * semaphoreArray, const GLuint64 * fenceValueArray) { return _glClientWaitSemaphoreui64NVX_(fenceObjectCount, semaphoreArray, fenceValueArray); };
#endif //GL_NVX_progress_fence

#ifndef GL_NV_alpha_to_coverage_dither_control

// Defines
#define GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV 0x934D 
#define GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV 0x934E 
#define GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV 0x934F 
#define GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV 0x92BF 

// functions typedefs
typedef void (APIENTRYP PFN_GLALPHATOCOVERAGEDITHERCONTROLNV_PROC) (GLenum mode);

// functions typedefs
GL_FUNC_DEF PFN_GLALPHATOCOVERAGEDITHERCONTROLNV_PROC _glAlphaToCoverageDitherControlNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glAlphaToCoverageDitherControlNV (GLenum mode) { return _glAlphaToCoverageDitherControlNV_(mode); };
#endif //GL_NV_alpha_to_coverage_dither_control

// GL_NV_blend_square

#ifndef GL_NV_compute_program5

// Defines
#define GL_COMPUTE_PROGRAM_NV             0x90FB 
#define GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV 0x90FC 
#endif //GL_NV_compute_program5

#ifndef GL_NV_copy_depth_to_color

// Defines
#define GL_DEPTH_STENCIL_TO_RGBA_NV       0x886E 
#define GL_DEPTH_STENCIL_TO_BGRA_NV       0x886F 
#endif //GL_NV_copy_depth_to_color

#ifndef GL_NV_copy_image

// functions typedefs
typedef void (APIENTRYP PFN_GLCOPYIMAGESUBDATANV_PROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);

// functions typedefs
GL_FUNC_DEF PFN_GLCOPYIMAGESUBDATANV_PROC _glCopyImageSubDataNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glCopyImageSubDataNV (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) { return _glCopyImageSubDataNV_(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth); };
#endif //GL_NV_copy_image

#ifndef GL_NV_deep_texture3D

// Defines
#define GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV 0x90D0 
#define GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV   0x90D1 
#endif //GL_NV_deep_texture3D

#ifndef GL_NV_depth_buffer_float

// Defines
#define GL_DEPTH_COMPONENT32F_NV          0x8DAB 
#define GL_DEPTH32F_STENCIL8_NV           0x8DAC 
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV 0x8DAD 
#define GL_DEPTH_BUFFER_FLOAT_MODE_NV     0x8DAF 

// functions typedefs
typedef void (APIENTRYP PFN_GLDEPTHRANGEDNV_PROC) (GLdouble zNear, GLdouble zFar);
typedef void (APIENTRYP PFN_GLCLEARDEPTHDNV_PROC) (GLdouble depth);
typedef void (APIENTRYP PFN_GLDEPTHBOUNDSDNV_PROC) (GLdouble zmin, GLdouble zmax);

// functions typedefs
GL_FUNC_DEF PFN_GLDEPTHRANGEDNV_PROC _glDepthRangedNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCLEARDEPTHDNV_PROC _glClearDepthdNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDEPTHBOUNDSDNV_PROC _glDepthBoundsdNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDepthRangedNV (GLdouble zNear, GLdouble zFar) { return _glDepthRangedNV_(zNear, zFar); };
inline void glClearDepthdNV (GLdouble depth) { return _glClearDepthdNV_(depth); };
inline void glDepthBoundsdNV (GLdouble zmin, GLdouble zmax) { return _glDepthBoundsdNV_(zmin, zmax); };
#endif //GL_NV_depth_buffer_float

#ifndef GL_NV_depth_clamp

// Defines
#define GL_DEPTH_CLAMP_NV                 0x864F 
#endif //GL_NV_depth_clamp

#ifndef GL_NV_draw_texture

// functions typedefs
typedef void (APIENTRYP PFN_GLDRAWTEXTURENV_PROC) (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);

// functions typedefs
GL_FUNC_DEF PFN_GLDRAWTEXTURENV_PROC _glDrawTextureNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDrawTextureNV (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) { return _glDrawTextureNV_(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1); };
#endif //GL_NV_draw_texture

#ifndef GL_NV_evaluators

// Defines
#define GL_EVAL_2D_NV                     0x86C0 
#define GL_EVAL_TRIANGULAR_2D_NV          0x86C1 
#define GL_MAP_TESSELLATION_NV            0x86C2 
#define GL_MAP_ATTRIB_U_ORDER_NV          0x86C3 
#define GL_MAP_ATTRIB_V_ORDER_NV          0x86C4 
#define GL_EVAL_FRACTIONAL_TESSELLATION_NV 0x86C5 
#define GL_EVAL_VERTEX_ATTRIB0_NV         0x86C6 
#define GL_EVAL_VERTEX_ATTRIB1_NV         0x86C7 
#define GL_EVAL_VERTEX_ATTRIB2_NV         0x86C8 
#define GL_EVAL_VERTEX_ATTRIB3_NV         0x86C9 
#define GL_EVAL_VERTEX_ATTRIB4_NV         0x86CA 
#define GL_EVAL_VERTEX_ATTRIB5_NV         0x86CB 
#define GL_EVAL_VERTEX_ATTRIB6_NV         0x86CC 
#define GL_EVAL_VERTEX_ATTRIB7_NV         0x86CD 
#define GL_EVAL_VERTEX_ATTRIB8_NV         0x86CE 
#define GL_EVAL_VERTEX_ATTRIB9_NV         0x86CF 
#define GL_EVAL_VERTEX_ATTRIB10_NV        0x86D0 
#define GL_EVAL_VERTEX_ATTRIB11_NV        0x86D1 
#define GL_EVAL_VERTEX_ATTRIB12_NV        0x86D2 
#define GL_EVAL_VERTEX_ATTRIB13_NV        0x86D3 
#define GL_EVAL_VERTEX_ATTRIB14_NV        0x86D4 
#define GL_EVAL_VERTEX_ATTRIB15_NV        0x86D5 
#define GL_MAX_MAP_TESSELLATION_NV        0x86D6 
#define GL_MAX_RATIONAL_EVAL_ORDER_NV     0x86D7 

// functions typedefs
typedef void (APIENTRYP PFN_GLMAPCONTROLPOINTSNV_PROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void * points);
typedef void (APIENTRYP PFN_GLMAPPARAMETERIVNV_PROC) (GLenum target, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLMAPPARAMETERFVNV_PROC) (GLenum target, GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLGETMAPCONTROLPOINTSNV_PROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void * points);
typedef void (APIENTRYP PFN_GLGETMAPPARAMETERIVNV_PROC) (GLenum target, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETMAPPARAMETERFVNV_PROC) (GLenum target, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETMAPATTRIBPARAMETERIVNV_PROC) (GLenum target, GLuint index, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETMAPATTRIBPARAMETERFVNV_PROC) (GLenum target, GLuint index, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLEVALMAPSNV_PROC) (GLenum target, GLenum mode);

// functions typedefs
GL_FUNC_DEF PFN_GLMAPCONTROLPOINTSNV_PROC _glMapControlPointsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAPPARAMETERIVNV_PROC _glMapParameterivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMAPPARAMETERFVNV_PROC _glMapParameterfvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMAPCONTROLPOINTSNV_PROC _glGetMapControlPointsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMAPPARAMETERIVNV_PROC _glGetMapParameterivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMAPPARAMETERFVNV_PROC _glGetMapParameterfvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMAPATTRIBPARAMETERIVNV_PROC _glGetMapAttribParameterivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETMAPATTRIBPARAMETERFVNV_PROC _glGetMapAttribParameterfvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEVALMAPSNV_PROC _glEvalMapsNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glMapControlPointsNV (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void * points) { return _glMapControlPointsNV_(target, index, type, ustride, vstride, uorder, vorder, packed, points); };
inline void glMapParameterivNV (GLenum target, GLenum pname, const GLint * params) { return _glMapParameterivNV_(target, pname, params); };
inline void glMapParameterfvNV (GLenum target, GLenum pname, const GLfloat * params) { return _glMapParameterfvNV_(target, pname, params); };
inline void glGetMapControlPointsNV (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void * points) { return _glGetMapControlPointsNV_(target, index, type, ustride, vstride, packed, points); };
inline void glGetMapParameterivNV (GLenum target, GLenum pname, GLint * params) { return _glGetMapParameterivNV_(target, pname, params); };
inline void glGetMapParameterfvNV (GLenum target, GLenum pname, GLfloat * params) { return _glGetMapParameterfvNV_(target, pname, params); };
inline void glGetMapAttribParameterivNV (GLenum target, GLuint index, GLenum pname, GLint * params) { return _glGetMapAttribParameterivNV_(target, index, pname, params); };
inline void glGetMapAttribParameterfvNV (GLenum target, GLuint index, GLenum pname, GLfloat * params) { return _glGetMapAttribParameterfvNV_(target, index, pname, params); };
inline void glEvalMapsNV (GLenum target, GLenum mode) { return _glEvalMapsNV_(target, mode); };
#endif //GL_NV_evaluators

#ifndef GL_NV_explicit_multisample

// Defines
#define GL_SAMPLE_POSITION_NV             0x8E50 
#define GL_SAMPLE_MASK_NV                 0x8E51 
#define GL_SAMPLE_MASK_VALUE_NV           0x8E52 
#define GL_TEXTURE_BINDING_RENDERBUFFER_NV 0x8E53 
#define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0x8E54 
#define GL_TEXTURE_RENDERBUFFER_NV        0x8E55 
#define GL_SAMPLER_RENDERBUFFER_NV        0x8E56 
#define GL_INT_SAMPLER_RENDERBUFFER_NV    0x8E57 
#define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV 0x8E58 
#define GL_MAX_SAMPLE_MASK_WORDS_NV       0x8E59 

// functions typedefs
typedef void (APIENTRYP PFN_GLGETMULTISAMPLEFVNV_PROC) (GLenum pname, GLuint index, GLfloat * val);
typedef void (APIENTRYP PFN_GLSAMPLEMASKINDEXEDNV_PROC) (GLuint index, GLbitfield mask);
typedef void (APIENTRYP PFN_GLTEXRENDERBUFFERNV_PROC) (GLenum target, GLuint renderbuffer);

// functions typedefs
GL_FUNC_DEF PFN_GLGETMULTISAMPLEFVNV_PROC _glGetMultisamplefvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSAMPLEMASKINDEXEDNV_PROC _glSampleMaskIndexedNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXRENDERBUFFERNV_PROC _glTexRenderbufferNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glGetMultisamplefvNV (GLenum pname, GLuint index, GLfloat * val) { return _glGetMultisamplefvNV_(pname, index, val); };
inline void glSampleMaskIndexedNV (GLuint index, GLbitfield mask) { return _glSampleMaskIndexedNV_(index, mask); };
inline void glTexRenderbufferNV (GLenum target, GLuint renderbuffer) { return _glTexRenderbufferNV_(target, renderbuffer); };
#endif //GL_NV_explicit_multisample

#ifndef GL_NV_fence

// Defines
#define GL_ALL_COMPLETED_NV               0x84F2 
#define GL_FENCE_STATUS_NV                0x84F3 
#define GL_FENCE_CONDITION_NV             0x84F4 

// functions typedefs
typedef void (APIENTRYP PFN_GLDELETEFENCESNV_PROC) (GLsizei n, const GLuint * fences);
typedef void (APIENTRYP PFN_GLGENFENCESNV_PROC) (GLsizei n, GLuint * fences);
typedef GLboolean (APIENTRYP PFN_GLISFENCENV_PROC) (GLuint fence);
typedef GLboolean (APIENTRYP PFN_GLTESTFENCENV_PROC) (GLuint fence);
typedef void (APIENTRYP PFN_GLGETFENCEIVNV_PROC) (GLuint fence, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLFINISHFENCENV_PROC) (GLuint fence);
typedef void (APIENTRYP PFN_GLSETFENCENV_PROC) (GLuint fence, GLenum condition);

// functions typedefs
GL_FUNC_DEF PFN_GLDELETEFENCESNV_PROC _glDeleteFencesNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENFENCESNV_PROC _glGenFencesNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISFENCENV_PROC _glIsFenceNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTESTFENCENV_PROC _glTestFenceNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFENCEIVNV_PROC _glGetFenceivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFINISHFENCENV_PROC _glFinishFenceNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSETFENCENV_PROC _glSetFenceNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDeleteFencesNV (GLsizei n, const GLuint * fences) { return _glDeleteFencesNV_(n, fences); };
inline void glGenFencesNV (GLsizei n, GLuint * fences) { return _glGenFencesNV_(n, fences); };
inline GLboolean glIsFenceNV (GLuint fence) { return _glIsFenceNV_(fence); };
inline GLboolean glTestFenceNV (GLuint fence) { return _glTestFenceNV_(fence); };
inline void glGetFenceivNV (GLuint fence, GLenum pname, GLint * params) { return _glGetFenceivNV_(fence, pname, params); };
inline void glFinishFenceNV (GLuint fence) { return _glFinishFenceNV_(fence); };
inline void glSetFenceNV (GLuint fence, GLenum condition) { return _glSetFenceNV_(fence, condition); };
#endif //GL_NV_fence

#ifndef GL_NV_float_buffer

// Defines
#define GL_FLOAT_R_NV                     0x8880 
#define GL_FLOAT_RG_NV                    0x8881 
#define GL_FLOAT_RGB_NV                   0x8882 
#define GL_FLOAT_RGBA_NV                  0x8883 
#define GL_FLOAT_R16_NV                   0x8884 
#define GL_FLOAT_R32_NV                   0x8885 
#define GL_FLOAT_RG16_NV                  0x8886 
#define GL_FLOAT_RG32_NV                  0x8887 
#define GL_FLOAT_RGB16_NV                 0x8888 
#define GL_FLOAT_RGB32_NV                 0x8889 
#define GL_FLOAT_RGBA16_NV                0x888A 
#define GL_FLOAT_RGBA32_NV                0x888B 
#define GL_TEXTURE_FLOAT_COMPONENTS_NV    0x888C 
#define GL_FLOAT_CLEAR_COLOR_VALUE_NV     0x888D 
#define GL_FLOAT_RGBA_MODE_NV             0x888E 
#endif //GL_NV_float_buffer

#ifndef GL_NV_fog_distance

// Defines
#define GL_FOG_DISTANCE_MODE_NV           0x855A 
#define GL_EYE_RADIAL_NV                  0x855B 
#define GL_EYE_PLANE_ABSOLUTE_NV          0x855C 
#endif //GL_NV_fog_distance

#ifndef GL_NV_fragment_program

// Defines
#define GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV 0x8868 
#define GL_FRAGMENT_PROGRAM_NV            0x8870 
#define GL_MAX_TEXTURE_COORDS_NV          0x8871 
#define GL_MAX_TEXTURE_IMAGE_UNITS_NV     0x8872 
#define GL_FRAGMENT_PROGRAM_BINDING_NV    0x8873 
#define GL_PROGRAM_ERROR_STRING_NV        0x8874 

// functions typedefs
typedef void (APIENTRYP PFN_GLPROGRAMNAMEDPARAMETER4FNV_PROC) (GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRYP PFN_GLPROGRAMNAMEDPARAMETER4FVNV_PROC) (GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v);
typedef void (APIENTRYP PFN_GLPROGRAMNAMEDPARAMETER4DNV_PROC) (GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFN_GLPROGRAMNAMEDPARAMETER4DVNV_PROC) (GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v);
typedef void (APIENTRYP PFN_GLGETPROGRAMNAMEDPARAMETERFVNV_PROC) (GLuint id, GLsizei len, const GLubyte * name, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETPROGRAMNAMEDPARAMETERDVNV_PROC) (GLuint id, GLsizei len, const GLubyte * name, GLdouble * params);

// functions typedefs
GL_FUNC_DEF PFN_GLPROGRAMNAMEDPARAMETER4FNV_PROC _glProgramNamedParameter4fNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMNAMEDPARAMETER4FVNV_PROC _glProgramNamedParameter4fvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMNAMEDPARAMETER4DNV_PROC _glProgramNamedParameter4dNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMNAMEDPARAMETER4DVNV_PROC _glProgramNamedParameter4dvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMNAMEDPARAMETERFVNV_PROC _glGetProgramNamedParameterfvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMNAMEDPARAMETERDVNV_PROC _glGetProgramNamedParameterdvNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glProgramNamedParameter4fNV (GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { return _glProgramNamedParameter4fNV_(id, len, name, x, y, z, w); };
inline void glProgramNamedParameter4fvNV (GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v) { return _glProgramNamedParameter4fvNV_(id, len, name, v); };
inline void glProgramNamedParameter4dNV (GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { return _glProgramNamedParameter4dNV_(id, len, name, x, y, z, w); };
inline void glProgramNamedParameter4dvNV (GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v) { return _glProgramNamedParameter4dvNV_(id, len, name, v); };
inline void glGetProgramNamedParameterfvNV (GLuint id, GLsizei len, const GLubyte * name, GLfloat * params) { return _glGetProgramNamedParameterfvNV_(id, len, name, params); };
inline void glGetProgramNamedParameterdvNV (GLuint id, GLsizei len, const GLubyte * name, GLdouble * params) { return _glGetProgramNamedParameterdvNV_(id, len, name, params); };
#endif //GL_NV_fragment_program

#ifndef GL_NV_fragment_program2

// Defines
#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4 
#define GL_MAX_PROGRAM_CALL_DEPTH_NV      0x88F5 
#define GL_MAX_PROGRAM_IF_DEPTH_NV        0x88F6 
#define GL_MAX_PROGRAM_LOOP_DEPTH_NV      0x88F7 
#define GL_MAX_PROGRAM_LOOP_COUNT_NV      0x88F8 
#endif //GL_NV_fragment_program2

// GL_NV_fragment_program4

// GL_NV_fragment_program_option

#ifndef GL_NV_geometry_program4

// Defines
#define GL_GEOMETRY_PROGRAM_NV            0x8C26 
#define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27 
#define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28 

// functions typedefs
typedef void (APIENTRYP PFN_GLPROGRAMVERTEXLIMITNV_PROC) (GLenum target, GLint limit);
typedef void (APIENTRYP PFN_GLFRAMEBUFFERTEXTUREEXT_PROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (APIENTRYP PFN_GLFRAMEBUFFERTEXTUREFACEEXT_PROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);

// functions typedefs
GL_FUNC_DEF PFN_GLPROGRAMVERTEXLIMITNV_PROC _glProgramVertexLimitNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAMEBUFFERTEXTUREEXT_PROC _glFramebufferTextureEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAMEBUFFERTEXTUREFACEEXT_PROC _glFramebufferTextureFaceEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glProgramVertexLimitNV (GLenum target, GLint limit) { return _glProgramVertexLimitNV_(target, limit); };
inline void glFramebufferTextureEXT (GLenum target, GLenum attachment, GLuint texture, GLint level) { return _glFramebufferTextureEXT_(target, attachment, texture, level); };
inline void glFramebufferTextureFaceEXT (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) { return _glFramebufferTextureFaceEXT_(target, attachment, texture, level, face); };
#endif //GL_NV_geometry_program4

// GL_NV_geometry_shader4

#ifndef GL_NV_gpu_multicast

// Defines
#define GL_PER_GPU_STORAGE_BIT_NV         0x0800 
#define GL_MULTICAST_GPUS_NV              0x92BA 
#define GL_RENDER_GPU_MASK_NV             0x9558 
#define GL_PER_GPU_STORAGE_NV             0x9548 
#define GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9549 

// functions typedefs
typedef void (APIENTRYP PFN_GLRENDERGPUMASKNV_PROC) (GLbitfield mask);
typedef void (APIENTRYP PFN_GLMULTICASTBUFFERSUBDATANV_PROC) (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data);
typedef void (APIENTRYP PFN_GLMULTICASTCOPYBUFFERSUBDATANV_PROC) (GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (APIENTRYP PFN_GLMULTICASTCOPYIMAGESUBDATANV_PROC) (GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef void (APIENTRYP PFN_GLMULTICASTBLITFRAMEBUFFERNV_PROC) (GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (APIENTRYP PFN_GLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNV_PROC) (GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v);
typedef void (APIENTRYP PFN_GLMULTICASTBARRIERNV_PROC) (void);
typedef void (APIENTRYP PFN_GLMULTICASTWAITSYNCNV_PROC) (GLuint signalGpu, GLbitfield waitGpuMask);
typedef void (APIENTRYP PFN_GLMULTICASTGETQUERYOBJECTIVNV_PROC) (GLuint gpu, GLuint id, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLMULTICASTGETQUERYOBJECTUIVNV_PROC) (GLuint gpu, GLuint id, GLenum pname, GLuint * params);
typedef void (APIENTRYP PFN_GLMULTICASTGETQUERYOBJECTI64VNV_PROC) (GLuint gpu, GLuint id, GLenum pname, GLint64 * params);
typedef void (APIENTRYP PFN_GLMULTICASTGETQUERYOBJECTUI64VNV_PROC) (GLuint gpu, GLuint id, GLenum pname, GLuint64 * params);

// functions typedefs
GL_FUNC_DEF PFN_GLRENDERGPUMASKNV_PROC _glRenderGpuMaskNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTICASTBUFFERSUBDATANV_PROC _glMulticastBufferSubDataNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTICASTCOPYBUFFERSUBDATANV_PROC _glMulticastCopyBufferSubDataNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTICASTCOPYIMAGESUBDATANV_PROC _glMulticastCopyImageSubDataNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTICASTBLITFRAMEBUFFERNV_PROC _glMulticastBlitFramebufferNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNV_PROC _glMulticastFramebufferSampleLocationsfvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTICASTBARRIERNV_PROC _glMulticastBarrierNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTICASTWAITSYNCNV_PROC _glMulticastWaitSyncNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTICASTGETQUERYOBJECTIVNV_PROC _glMulticastGetQueryObjectivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTICASTGETQUERYOBJECTUIVNV_PROC _glMulticastGetQueryObjectuivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTICASTGETQUERYOBJECTI64VNV_PROC _glMulticastGetQueryObjecti64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTICASTGETQUERYOBJECTUI64VNV_PROC _glMulticastGetQueryObjectui64vNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glRenderGpuMaskNV (GLbitfield mask) { return _glRenderGpuMaskNV_(mask); };
inline void glMulticastBufferSubDataNV (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { return _glMulticastBufferSubDataNV_(gpuMask, buffer, offset, size, data); };
inline void glMulticastCopyBufferSubDataNV (GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { return _glMulticastCopyBufferSubDataNV_(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size); };
inline void glMulticastCopyImageSubDataNV (GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { return _glMulticastCopyImageSubDataNV_(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); };
inline void glMulticastBlitFramebufferNV (GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { return _glMulticastBlitFramebufferNV_(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); };
inline void glMulticastFramebufferSampleLocationsfvNV (GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) { return _glMulticastFramebufferSampleLocationsfvNV_(gpu, framebuffer, start, count, v); };
inline void glMulticastBarrierNV (void) { return _glMulticastBarrierNV_(); };
inline void glMulticastWaitSyncNV (GLuint signalGpu, GLbitfield waitGpuMask) { return _glMulticastWaitSyncNV_(signalGpu, waitGpuMask); };
inline void glMulticastGetQueryObjectivNV (GLuint gpu, GLuint id, GLenum pname, GLint * params) { return _glMulticastGetQueryObjectivNV_(gpu, id, pname, params); };
inline void glMulticastGetQueryObjectuivNV (GLuint gpu, GLuint id, GLenum pname, GLuint * params) { return _glMulticastGetQueryObjectuivNV_(gpu, id, pname, params); };
inline void glMulticastGetQueryObjecti64vNV (GLuint gpu, GLuint id, GLenum pname, GLint64 * params) { return _glMulticastGetQueryObjecti64vNV_(gpu, id, pname, params); };
inline void glMulticastGetQueryObjectui64vNV (GLuint gpu, GLuint id, GLenum pname, GLuint64 * params) { return _glMulticastGetQueryObjectui64vNV_(gpu, id, pname, params); };
#endif //GL_NV_gpu_multicast

#ifndef GL_NV_gpu_program4

// Defines
#define GL_MIN_PROGRAM_TEXEL_OFFSET_NV    0x8904 
#define GL_MAX_PROGRAM_TEXEL_OFFSET_NV    0x8905 
#define GL_PROGRAM_ATTRIB_COMPONENTS_NV   0x8906 
#define GL_PROGRAM_RESULT_COMPONENTS_NV   0x8907 
#define GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV 0x8908 
#define GL_MAX_PROGRAM_RESULT_COMPONENTS_NV 0x8909 
#define GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV 0x8DA5 
#define GL_MAX_PROGRAM_GENERIC_RESULTS_NV 0x8DA6 

// functions typedefs
typedef void (APIENTRYP PFN_GLPROGRAMLOCALPARAMETERI4INV_PROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (APIENTRYP PFN_GLPROGRAMLOCALPARAMETERI4IVNV_PROC) (GLenum target, GLuint index, const GLint * params);
typedef void (APIENTRYP PFN_GLPROGRAMLOCALPARAMETERSI4IVNV_PROC) (GLenum target, GLuint index, GLsizei count, const GLint * params);
typedef void (APIENTRYP PFN_GLPROGRAMLOCALPARAMETERI4UINV_PROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (APIENTRYP PFN_GLPROGRAMLOCALPARAMETERI4UIVNV_PROC) (GLenum target, GLuint index, const GLuint * params);
typedef void (APIENTRYP PFN_GLPROGRAMLOCALPARAMETERSI4UIVNV_PROC) (GLenum target, GLuint index, GLsizei count, const GLuint * params);
typedef void (APIENTRYP PFN_GLPROGRAMENVPARAMETERI4INV_PROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (APIENTRYP PFN_GLPROGRAMENVPARAMETERI4IVNV_PROC) (GLenum target, GLuint index, const GLint * params);
typedef void (APIENTRYP PFN_GLPROGRAMENVPARAMETERSI4IVNV_PROC) (GLenum target, GLuint index, GLsizei count, const GLint * params);
typedef void (APIENTRYP PFN_GLPROGRAMENVPARAMETERI4UINV_PROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (APIENTRYP PFN_GLPROGRAMENVPARAMETERI4UIVNV_PROC) (GLenum target, GLuint index, const GLuint * params);
typedef void (APIENTRYP PFN_GLPROGRAMENVPARAMETERSI4UIVNV_PROC) (GLenum target, GLuint index, GLsizei count, const GLuint * params);
typedef void (APIENTRYP PFN_GLGETPROGRAMLOCALPARAMETERIIVNV_PROC) (GLenum target, GLuint index, GLint * params);
typedef void (APIENTRYP PFN_GLGETPROGRAMLOCALPARAMETERIUIVNV_PROC) (GLenum target, GLuint index, GLuint * params);
typedef void (APIENTRYP PFN_GLGETPROGRAMENVPARAMETERIIVNV_PROC) (GLenum target, GLuint index, GLint * params);
typedef void (APIENTRYP PFN_GLGETPROGRAMENVPARAMETERIUIVNV_PROC) (GLenum target, GLuint index, GLuint * params);

// functions typedefs
GL_FUNC_DEF PFN_GLPROGRAMLOCALPARAMETERI4INV_PROC _glProgramLocalParameterI4iNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMLOCALPARAMETERI4IVNV_PROC _glProgramLocalParameterI4ivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMLOCALPARAMETERSI4IVNV_PROC _glProgramLocalParametersI4ivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMLOCALPARAMETERI4UINV_PROC _glProgramLocalParameterI4uiNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMLOCALPARAMETERI4UIVNV_PROC _glProgramLocalParameterI4uivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMLOCALPARAMETERSI4UIVNV_PROC _glProgramLocalParametersI4uivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMENVPARAMETERI4INV_PROC _glProgramEnvParameterI4iNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMENVPARAMETERI4IVNV_PROC _glProgramEnvParameterI4ivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMENVPARAMETERSI4IVNV_PROC _glProgramEnvParametersI4ivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMENVPARAMETERI4UINV_PROC _glProgramEnvParameterI4uiNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMENVPARAMETERI4UIVNV_PROC _glProgramEnvParameterI4uivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMENVPARAMETERSI4UIVNV_PROC _glProgramEnvParametersI4uivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMLOCALPARAMETERIIVNV_PROC _glGetProgramLocalParameterIivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMLOCALPARAMETERIUIVNV_PROC _glGetProgramLocalParameterIuivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMENVPARAMETERIIVNV_PROC _glGetProgramEnvParameterIivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMENVPARAMETERIUIVNV_PROC _glGetProgramEnvParameterIuivNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glProgramLocalParameterI4iNV (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { return _glProgramLocalParameterI4iNV_(target, index, x, y, z, w); };
inline void glProgramLocalParameterI4ivNV (GLenum target, GLuint index, const GLint * params) { return _glProgramLocalParameterI4ivNV_(target, index, params); };
inline void glProgramLocalParametersI4ivNV (GLenum target, GLuint index, GLsizei count, const GLint * params) { return _glProgramLocalParametersI4ivNV_(target, index, count, params); };
inline void glProgramLocalParameterI4uiNV (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { return _glProgramLocalParameterI4uiNV_(target, index, x, y, z, w); };
inline void glProgramLocalParameterI4uivNV (GLenum target, GLuint index, const GLuint * params) { return _glProgramLocalParameterI4uivNV_(target, index, params); };
inline void glProgramLocalParametersI4uivNV (GLenum target, GLuint index, GLsizei count, const GLuint * params) { return _glProgramLocalParametersI4uivNV_(target, index, count, params); };
inline void glProgramEnvParameterI4iNV (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { return _glProgramEnvParameterI4iNV_(target, index, x, y, z, w); };
inline void glProgramEnvParameterI4ivNV (GLenum target, GLuint index, const GLint * params) { return _glProgramEnvParameterI4ivNV_(target, index, params); };
inline void glProgramEnvParametersI4ivNV (GLenum target, GLuint index, GLsizei count, const GLint * params) { return _glProgramEnvParametersI4ivNV_(target, index, count, params); };
inline void glProgramEnvParameterI4uiNV (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { return _glProgramEnvParameterI4uiNV_(target, index, x, y, z, w); };
inline void glProgramEnvParameterI4uivNV (GLenum target, GLuint index, const GLuint * params) { return _glProgramEnvParameterI4uivNV_(target, index, params); };
inline void glProgramEnvParametersI4uivNV (GLenum target, GLuint index, GLsizei count, const GLuint * params) { return _glProgramEnvParametersI4uivNV_(target, index, count, params); };
inline void glGetProgramLocalParameterIivNV (GLenum target, GLuint index, GLint * params) { return _glGetProgramLocalParameterIivNV_(target, index, params); };
inline void glGetProgramLocalParameterIuivNV (GLenum target, GLuint index, GLuint * params) { return _glGetProgramLocalParameterIuivNV_(target, index, params); };
inline void glGetProgramEnvParameterIivNV (GLenum target, GLuint index, GLint * params) { return _glGetProgramEnvParameterIivNV_(target, index, params); };
inline void glGetProgramEnvParameterIuivNV (GLenum target, GLuint index, GLuint * params) { return _glGetProgramEnvParameterIuivNV_(target, index, params); };
#endif //GL_NV_gpu_program4

#ifndef GL_NV_gpu_program5

// Defines
#define GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV 0x8E5A 
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5B 
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5C 
#define GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV 0x8E5D 
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5E 
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5F 
#define GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV 0x8F44 
#define GL_MAX_PROGRAM_SUBROUTINE_NUM_NV  0x8F45 

// functions typedefs
typedef void (APIENTRYP PFN_GLPROGRAMSUBROUTINEPARAMETERSUIVNV_PROC) (GLenum target, GLsizei count, const GLuint * params);
typedef void (APIENTRYP PFN_GLGETPROGRAMSUBROUTINEPARAMETERUIVNV_PROC) (GLenum target, GLuint index, GLuint * param);

// functions typedefs
GL_FUNC_DEF PFN_GLPROGRAMSUBROUTINEPARAMETERSUIVNV_PROC _glProgramSubroutineParametersuivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMSUBROUTINEPARAMETERUIVNV_PROC _glGetProgramSubroutineParameteruivNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glProgramSubroutineParametersuivNV (GLenum target, GLsizei count, const GLuint * params) { return _glProgramSubroutineParametersuivNV_(target, count, params); };
inline void glGetProgramSubroutineParameteruivNV (GLenum target, GLuint index, GLuint * param) { return _glGetProgramSubroutineParameteruivNV_(target, index, param); };
#endif //GL_NV_gpu_program5

// GL_NV_gpu_program5_mem_extended

#ifndef GL_NV_half_float

// Defines
#define GL_HALF_FLOAT_NV                  0x140B 

// functions typedefs
typedef void (APIENTRYP PFN_GLVERTEX2HNV_PROC) (GLhalfNV x, GLhalfNV y);
typedef void (APIENTRYP PFN_GLVERTEX2HVNV_PROC) (const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLVERTEX3HNV_PROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z);
typedef void (APIENTRYP PFN_GLVERTEX3HVNV_PROC) (const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLVERTEX4HNV_PROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
typedef void (APIENTRYP PFN_GLVERTEX4HVNV_PROC) (const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLNORMAL3HNV_PROC) (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
typedef void (APIENTRYP PFN_GLNORMAL3HVNV_PROC) (const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLCOLOR3HNV_PROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
typedef void (APIENTRYP PFN_GLCOLOR3HVNV_PROC) (const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLCOLOR4HNV_PROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
typedef void (APIENTRYP PFN_GLCOLOR4HVNV_PROC) (const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLTEXCOORD1HNV_PROC) (GLhalfNV s);
typedef void (APIENTRYP PFN_GLTEXCOORD1HVNV_PROC) (const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLTEXCOORD2HNV_PROC) (GLhalfNV s, GLhalfNV t);
typedef void (APIENTRYP PFN_GLTEXCOORD2HVNV_PROC) (const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLTEXCOORD3HNV_PROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r);
typedef void (APIENTRYP PFN_GLTEXCOORD3HVNV_PROC) (const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLTEXCOORD4HNV_PROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
typedef void (APIENTRYP PFN_GLTEXCOORD4HVNV_PROC) (const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1HNV_PROC) (GLenum target, GLhalfNV s);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD1HVNV_PROC) (GLenum target, const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2HNV_PROC) (GLenum target, GLhalfNV s, GLhalfNV t);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD2HVNV_PROC) (GLenum target, const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3HNV_PROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD3HVNV_PROC) (GLenum target, const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4HNV_PROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
typedef void (APIENTRYP PFN_GLMULTITEXCOORD4HVNV_PROC) (GLenum target, const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLFOGCOORDHNV_PROC) (GLhalfNV fog);
typedef void (APIENTRYP PFN_GLFOGCOORDHVNV_PROC) (const GLhalfNV * fog);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3HNV_PROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
typedef void (APIENTRYP PFN_GLSECONDARYCOLOR3HVNV_PROC) (const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLVERTEXWEIGHTHNV_PROC) (GLhalfNV weight);
typedef void (APIENTRYP PFN_GLVERTEXWEIGHTHVNV_PROC) (const GLhalfNV * weight);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB1HNV_PROC) (GLuint index, GLhalfNV x);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB1HVNV_PROC) (GLuint index, const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB2HNV_PROC) (GLuint index, GLhalfNV x, GLhalfNV y);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB2HVNV_PROC) (GLuint index, const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB3HNV_PROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB3HVNV_PROC) (GLuint index, const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4HNV_PROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4HVNV_PROC) (GLuint index, const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBS1HVNV_PROC) (GLuint index, GLsizei n, const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBS2HVNV_PROC) (GLuint index, GLsizei n, const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBS3HVNV_PROC) (GLuint index, GLsizei n, const GLhalfNV * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBS4HVNV_PROC) (GLuint index, GLsizei n, const GLhalfNV * v);

// functions typedefs
GL_FUNC_DEF PFN_GLVERTEX2HNV_PROC _glVertex2hNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX2HVNV_PROC _glVertex2hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX3HNV_PROC _glVertex3hNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX3HVNV_PROC _glVertex3hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX4HNV_PROC _glVertex4hNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEX4HVNV_PROC _glVertex4hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMAL3HNV_PROC _glNormal3hNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMAL3HVNV_PROC _glNormal3hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3HNV_PROC _glColor3hNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3HVNV_PROC _glColor3hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4HNV_PROC _glColor4hNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4HVNV_PROC _glColor4hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD1HNV_PROC _glTexCoord1hNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD1HVNV_PROC _glTexCoord1hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2HNV_PROC _glTexCoord2hNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2HVNV_PROC _glTexCoord2hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD3HNV_PROC _glTexCoord3hNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD3HVNV_PROC _glTexCoord3hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD4HNV_PROC _glTexCoord4hNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD4HVNV_PROC _glTexCoord4hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD1HNV_PROC _glMultiTexCoord1hNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD1HVNV_PROC _glMultiTexCoord1hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2HNV_PROC _glMultiTexCoord2hNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD2HVNV_PROC _glMultiTexCoord2hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3HNV_PROC _glMultiTexCoord3hNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD3HVNV_PROC _glMultiTexCoord3hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4HNV_PROC _glMultiTexCoord4hNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLMULTITEXCOORD4HVNV_PROC _glMultiTexCoord4hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFOGCOORDHNV_PROC _glFogCoordhNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFOGCOORDHVNV_PROC _glFogCoordhvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3HNV_PROC _glSecondaryColor3hNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSECONDARYCOLOR3HVNV_PROC _glSecondaryColor3hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXWEIGHTHNV_PROC _glVertexWeighthNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXWEIGHTHVNV_PROC _glVertexWeighthvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB1HNV_PROC _glVertexAttrib1hNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB1HVNV_PROC _glVertexAttrib1hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB2HNV_PROC _glVertexAttrib2hNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB2HVNV_PROC _glVertexAttrib2hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB3HNV_PROC _glVertexAttrib3hNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB3HVNV_PROC _glVertexAttrib3hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4HNV_PROC _glVertexAttrib4hNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4HVNV_PROC _glVertexAttrib4hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBS1HVNV_PROC _glVertexAttribs1hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBS2HVNV_PROC _glVertexAttribs2hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBS3HVNV_PROC _glVertexAttribs3hvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBS4HVNV_PROC _glVertexAttribs4hvNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glVertex2hNV (GLhalfNV x, GLhalfNV y) { return _glVertex2hNV_(x, y); };
inline void glVertex2hvNV (const GLhalfNV * v) { return _glVertex2hvNV_(v); };
inline void glVertex3hNV (GLhalfNV x, GLhalfNV y, GLhalfNV z) { return _glVertex3hNV_(x, y, z); };
inline void glVertex3hvNV (const GLhalfNV * v) { return _glVertex3hvNV_(v); };
inline void glVertex4hNV (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) { return _glVertex4hNV_(x, y, z, w); };
inline void glVertex4hvNV (const GLhalfNV * v) { return _glVertex4hvNV_(v); };
inline void glNormal3hNV (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz) { return _glNormal3hNV_(nx, ny, nz); };
inline void glNormal3hvNV (const GLhalfNV * v) { return _glNormal3hvNV_(v); };
inline void glColor3hNV (GLhalfNV red, GLhalfNV green, GLhalfNV blue) { return _glColor3hNV_(red, green, blue); };
inline void glColor3hvNV (const GLhalfNV * v) { return _glColor3hvNV_(v); };
inline void glColor4hNV (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha) { return _glColor4hNV_(red, green, blue, alpha); };
inline void glColor4hvNV (const GLhalfNV * v) { return _glColor4hvNV_(v); };
inline void glTexCoord1hNV (GLhalfNV s) { return _glTexCoord1hNV_(s); };
inline void glTexCoord1hvNV (const GLhalfNV * v) { return _glTexCoord1hvNV_(v); };
inline void glTexCoord2hNV (GLhalfNV s, GLhalfNV t) { return _glTexCoord2hNV_(s, t); };
inline void glTexCoord2hvNV (const GLhalfNV * v) { return _glTexCoord2hvNV_(v); };
inline void glTexCoord3hNV (GLhalfNV s, GLhalfNV t, GLhalfNV r) { return _glTexCoord3hNV_(s, t, r); };
inline void glTexCoord3hvNV (const GLhalfNV * v) { return _glTexCoord3hvNV_(v); };
inline void glTexCoord4hNV (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) { return _glTexCoord4hNV_(s, t, r, q); };
inline void glTexCoord4hvNV (const GLhalfNV * v) { return _glTexCoord4hvNV_(v); };
inline void glMultiTexCoord1hNV (GLenum target, GLhalfNV s) { return _glMultiTexCoord1hNV_(target, s); };
inline void glMultiTexCoord1hvNV (GLenum target, const GLhalfNV * v) { return _glMultiTexCoord1hvNV_(target, v); };
inline void glMultiTexCoord2hNV (GLenum target, GLhalfNV s, GLhalfNV t) { return _glMultiTexCoord2hNV_(target, s, t); };
inline void glMultiTexCoord2hvNV (GLenum target, const GLhalfNV * v) { return _glMultiTexCoord2hvNV_(target, v); };
inline void glMultiTexCoord3hNV (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r) { return _glMultiTexCoord3hNV_(target, s, t, r); };
inline void glMultiTexCoord3hvNV (GLenum target, const GLhalfNV * v) { return _glMultiTexCoord3hvNV_(target, v); };
inline void glMultiTexCoord4hNV (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) { return _glMultiTexCoord4hNV_(target, s, t, r, q); };
inline void glMultiTexCoord4hvNV (GLenum target, const GLhalfNV * v) { return _glMultiTexCoord4hvNV_(target, v); };
inline void glFogCoordhNV (GLhalfNV fog) { return _glFogCoordhNV_(fog); };
inline void glFogCoordhvNV (const GLhalfNV * fog) { return _glFogCoordhvNV_(fog); };
inline void glSecondaryColor3hNV (GLhalfNV red, GLhalfNV green, GLhalfNV blue) { return _glSecondaryColor3hNV_(red, green, blue); };
inline void glSecondaryColor3hvNV (const GLhalfNV * v) { return _glSecondaryColor3hvNV_(v); };
inline void glVertexWeighthNV (GLhalfNV weight) { return _glVertexWeighthNV_(weight); };
inline void glVertexWeighthvNV (const GLhalfNV * weight) { return _glVertexWeighthvNV_(weight); };
inline void glVertexAttrib1hNV (GLuint index, GLhalfNV x) { return _glVertexAttrib1hNV_(index, x); };
inline void glVertexAttrib1hvNV (GLuint index, const GLhalfNV * v) { return _glVertexAttrib1hvNV_(index, v); };
inline void glVertexAttrib2hNV (GLuint index, GLhalfNV x, GLhalfNV y) { return _glVertexAttrib2hNV_(index, x, y); };
inline void glVertexAttrib2hvNV (GLuint index, const GLhalfNV * v) { return _glVertexAttrib2hvNV_(index, v); };
inline void glVertexAttrib3hNV (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z) { return _glVertexAttrib3hNV_(index, x, y, z); };
inline void glVertexAttrib3hvNV (GLuint index, const GLhalfNV * v) { return _glVertexAttrib3hvNV_(index, v); };
inline void glVertexAttrib4hNV (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) { return _glVertexAttrib4hNV_(index, x, y, z, w); };
inline void glVertexAttrib4hvNV (GLuint index, const GLhalfNV * v) { return _glVertexAttrib4hvNV_(index, v); };
inline void glVertexAttribs1hvNV (GLuint index, GLsizei n, const GLhalfNV * v) { return _glVertexAttribs1hvNV_(index, n, v); };
inline void glVertexAttribs2hvNV (GLuint index, GLsizei n, const GLhalfNV * v) { return _glVertexAttribs2hvNV_(index, n, v); };
inline void glVertexAttribs3hvNV (GLuint index, GLsizei n, const GLhalfNV * v) { return _glVertexAttribs3hvNV_(index, n, v); };
inline void glVertexAttribs4hvNV (GLuint index, GLsizei n, const GLhalfNV * v) { return _glVertexAttribs4hvNV_(index, n, v); };
#endif //GL_NV_half_float

#ifndef GL_NV_light_max_exponent

// Defines
#define GL_MAX_SHININESS_NV               0x8504 
#define GL_MAX_SPOT_EXPONENT_NV           0x8505 
#endif //GL_NV_light_max_exponent

// GL_NV_multisample_coverage

#ifndef GL_NV_multisample_filter_hint

// Defines
#define GL_MULTISAMPLE_FILTER_HINT_NV     0x8534 
#endif //GL_NV_multisample_filter_hint

#ifndef GL_NV_occlusion_query

// Defines
#define GL_PIXEL_COUNTER_BITS_NV          0x8864 
#define GL_CURRENT_OCCLUSION_QUERY_ID_NV  0x8865 
#define GL_PIXEL_COUNT_NV                 0x8866 
#define GL_PIXEL_COUNT_AVAILABLE_NV       0x8867 

// functions typedefs
typedef void (APIENTRYP PFN_GLGENOCCLUSIONQUERIESNV_PROC) (GLsizei n, GLuint * ids);
typedef void (APIENTRYP PFN_GLDELETEOCCLUSIONQUERIESNV_PROC) (GLsizei n, const GLuint * ids);
typedef GLboolean (APIENTRYP PFN_GLISOCCLUSIONQUERYNV_PROC) (GLuint id);
typedef void (APIENTRYP PFN_GLBEGINOCCLUSIONQUERYNV_PROC) (GLuint id);
typedef void (APIENTRYP PFN_GLENDOCCLUSIONQUERYNV_PROC) (void);
typedef void (APIENTRYP PFN_GLGETOCCLUSIONQUERYIVNV_PROC) (GLuint id, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETOCCLUSIONQUERYUIVNV_PROC) (GLuint id, GLenum pname, GLuint * params);

// functions typedefs
GL_FUNC_DEF PFN_GLGENOCCLUSIONQUERIESNV_PROC _glGenOcclusionQueriesNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEOCCLUSIONQUERIESNV_PROC _glDeleteOcclusionQueriesNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISOCCLUSIONQUERYNV_PROC _glIsOcclusionQueryNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBEGINOCCLUSIONQUERYNV_PROC _glBeginOcclusionQueryNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENDOCCLUSIONQUERYNV_PROC _glEndOcclusionQueryNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETOCCLUSIONQUERYIVNV_PROC _glGetOcclusionQueryivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETOCCLUSIONQUERYUIVNV_PROC _glGetOcclusionQueryuivNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glGenOcclusionQueriesNV (GLsizei n, GLuint * ids) { return _glGenOcclusionQueriesNV_(n, ids); };
inline void glDeleteOcclusionQueriesNV (GLsizei n, const GLuint * ids) { return _glDeleteOcclusionQueriesNV_(n, ids); };
inline GLboolean glIsOcclusionQueryNV (GLuint id) { return _glIsOcclusionQueryNV_(id); };
inline void glBeginOcclusionQueryNV (GLuint id) { return _glBeginOcclusionQueryNV_(id); };
inline void glEndOcclusionQueryNV (void) { return _glEndOcclusionQueryNV_(); };
inline void glGetOcclusionQueryivNV (GLuint id, GLenum pname, GLint * params) { return _glGetOcclusionQueryivNV_(id, pname, params); };
inline void glGetOcclusionQueryuivNV (GLuint id, GLenum pname, GLuint * params) { return _glGetOcclusionQueryuivNV_(id, pname, params); };
#endif //GL_NV_occlusion_query

#ifndef GL_NV_packed_depth_stencil

// Defines
#define GL_DEPTH_STENCIL_NV               0x84F9 
#define GL_UNSIGNED_INT_24_8_NV           0x84FA 
#endif //GL_NV_packed_depth_stencil

#ifndef GL_NV_parameter_buffer_object

// Defines
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV 0x8DA0 
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV 0x8DA1 
#define GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV 0x8DA2 
#define GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV 0x8DA3 
#define GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV 0x8DA4 

// functions typedefs
typedef void (APIENTRYP PFN_GLPROGRAMBUFFERPARAMETERSFVNV_PROC) (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat * params);
typedef void (APIENTRYP PFN_GLPROGRAMBUFFERPARAMETERSIIVNV_PROC) (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint * params);
typedef void (APIENTRYP PFN_GLPROGRAMBUFFERPARAMETERSIUIVNV_PROC) (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint * params);

// functions typedefs
GL_FUNC_DEF PFN_GLPROGRAMBUFFERPARAMETERSFVNV_PROC _glProgramBufferParametersfvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMBUFFERPARAMETERSIIVNV_PROC _glProgramBufferParametersIivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMBUFFERPARAMETERSIUIVNV_PROC _glProgramBufferParametersIuivNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glProgramBufferParametersfvNV (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat * params) { return _glProgramBufferParametersfvNV_(target, bindingIndex, wordIndex, count, params); };
inline void glProgramBufferParametersIivNV (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint * params) { return _glProgramBufferParametersIivNV_(target, bindingIndex, wordIndex, count, params); };
inline void glProgramBufferParametersIuivNV (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint * params) { return _glProgramBufferParametersIuivNV_(target, bindingIndex, wordIndex, count, params); };
#endif //GL_NV_parameter_buffer_object

// GL_NV_parameter_buffer_object2

#ifndef GL_NV_pixel_data_range

// Defines
#define GL_WRITE_PIXEL_DATA_RANGE_NV      0x8878 
#define GL_READ_PIXEL_DATA_RANGE_NV       0x8879 
#define GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV 0x887A 
#define GL_READ_PIXEL_DATA_RANGE_LENGTH_NV 0x887B 
#define GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV 0x887C 
#define GL_READ_PIXEL_DATA_RANGE_POINTER_NV 0x887D 

// functions typedefs
typedef void (APIENTRYP PFN_GLPIXELDATARANGENV_PROC) (GLenum target, GLsizei length, const void * pointer);
typedef void (APIENTRYP PFN_GLFLUSHPIXELDATARANGENV_PROC) (GLenum target);

// functions typedefs
GL_FUNC_DEF PFN_GLPIXELDATARANGENV_PROC _glPixelDataRangeNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFLUSHPIXELDATARANGENV_PROC _glFlushPixelDataRangeNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glPixelDataRangeNV (GLenum target, GLsizei length, const void * pointer) { return _glPixelDataRangeNV_(target, length, pointer); };
inline void glFlushPixelDataRangeNV (GLenum target) { return _glFlushPixelDataRangeNV_(target); };
#endif //GL_NV_pixel_data_range

#ifndef GL_NV_point_sprite

// Defines
#define GL_POINT_SPRITE_NV                0x8861 
#define GL_COORD_REPLACE_NV               0x8862 
#define GL_POINT_SPRITE_R_MODE_NV         0x8863 

// functions typedefs
typedef void (APIENTRYP PFN_GLPOINTPARAMETERINV_PROC) (GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLPOINTPARAMETERIVNV_PROC) (GLenum pname, const GLint * params);

// functions typedefs
GL_FUNC_DEF PFN_GLPOINTPARAMETERINV_PROC _glPointParameteriNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOINTPARAMETERIVNV_PROC _glPointParameterivNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glPointParameteriNV (GLenum pname, GLint param) { return _glPointParameteriNV_(pname, param); };
inline void glPointParameterivNV (GLenum pname, const GLint * params) { return _glPointParameterivNV_(pname, params); };
#endif //GL_NV_point_sprite

#ifndef GL_NV_present_video

// Defines
#define GL_FRAME_NV                       0x8E26 
#define GL_FIELDS_NV                      0x8E27 
#define GL_CURRENT_TIME_NV                0x8E28 
#define GL_NUM_FILL_STREAMS_NV            0x8E29 
#define GL_PRESENT_TIME_NV                0x8E2A 
#define GL_PRESENT_DURATION_NV            0x8E2B 

// functions typedefs
typedef void (APIENTRYP PFN_GLPRESENTFRAMEKEYEDNV_PROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
typedef void (APIENTRYP PFN_GLPRESENTFRAMEDUALFILLNV_PROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
typedef void (APIENTRYP PFN_GLGETVIDEOIVNV_PROC) (GLuint video_slot, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETVIDEOUIVNV_PROC) (GLuint video_slot, GLenum pname, GLuint * params);
typedef void (APIENTRYP PFN_GLGETVIDEOI64VNV_PROC) (GLuint video_slot, GLenum pname, GLint64EXT * params);
typedef void (APIENTRYP PFN_GLGETVIDEOUI64VNV_PROC) (GLuint video_slot, GLenum pname, GLuint64EXT * params);

// functions typedefs
GL_FUNC_DEF PFN_GLPRESENTFRAMEKEYEDNV_PROC _glPresentFrameKeyedNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPRESENTFRAMEDUALFILLNV_PROC _glPresentFrameDualFillNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVIDEOIVNV_PROC _glGetVideoivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVIDEOUIVNV_PROC _glGetVideouivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVIDEOI64VNV_PROC _glGetVideoi64vNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVIDEOUI64VNV_PROC _glGetVideoui64vNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glPresentFrameKeyedNV (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1) { return _glPresentFrameKeyedNV_(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1); };
inline void glPresentFrameDualFillNV (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3) { return _glPresentFrameDualFillNV_(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3); };
inline void glGetVideoivNV (GLuint video_slot, GLenum pname, GLint * params) { return _glGetVideoivNV_(video_slot, pname, params); };
inline void glGetVideouivNV (GLuint video_slot, GLenum pname, GLuint * params) { return _glGetVideouivNV_(video_slot, pname, params); };
inline void glGetVideoi64vNV (GLuint video_slot, GLenum pname, GLint64EXT * params) { return _glGetVideoi64vNV_(video_slot, pname, params); };
inline void glGetVideoui64vNV (GLuint video_slot, GLenum pname, GLuint64EXT * params) { return _glGetVideoui64vNV_(video_slot, pname, params); };
#endif //GL_NV_present_video

#ifndef GL_NV_primitive_restart

// Defines
#define GL_PRIMITIVE_RESTART_NV           0x8558 
#define GL_PRIMITIVE_RESTART_INDEX_NV     0x8559 

// functions typedefs
typedef void (APIENTRYP PFN_GLPRIMITIVERESTARTNV_PROC) (void);
typedef void (APIENTRYP PFN_GLPRIMITIVERESTARTINDEXNV_PROC) (GLuint index);

// functions typedefs
GL_FUNC_DEF PFN_GLPRIMITIVERESTARTNV_PROC _glPrimitiveRestartNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPRIMITIVERESTARTINDEXNV_PROC _glPrimitiveRestartIndexNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glPrimitiveRestartNV (void) { return _glPrimitiveRestartNV_(); };
inline void glPrimitiveRestartIndexNV (GLuint index) { return _glPrimitiveRestartIndexNV_(index); };
#endif //GL_NV_primitive_restart

#ifndef GL_NV_query_resource

// Defines
#define GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV 0x9540 
#define GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV 0x9542 
#define GL_QUERY_RESOURCE_SYS_RESERVED_NV 0x9544 
#define GL_QUERY_RESOURCE_TEXTURE_NV      0x9545 
#define GL_QUERY_RESOURCE_RENDERBUFFER_NV 0x9546 
#define GL_QUERY_RESOURCE_BUFFEROBJECT_NV 0x9547 

// functions typedefs
typedef GLint (APIENTRYP PFN_GLQUERYRESOURCENV_PROC) (GLenum queryType, GLint tagId, GLuint count, GLint * buffer);

// functions typedefs
GL_FUNC_DEF PFN_GLQUERYRESOURCENV_PROC _glQueryResourceNV_ GL_FUNC_DEF2;

// functions inline wrap
inline GLint glQueryResourceNV (GLenum queryType, GLint tagId, GLuint count, GLint * buffer) { return _glQueryResourceNV_(queryType, tagId, count, buffer); };
#endif //GL_NV_query_resource

#ifndef GL_NV_query_resource_tag

// functions typedefs
typedef void (APIENTRYP PFN_GLGENQUERYRESOURCETAGNV_PROC) (GLsizei n, GLint * tagIds);
typedef void (APIENTRYP PFN_GLDELETEQUERYRESOURCETAGNV_PROC) (GLsizei n, const GLint * tagIds);
typedef void (APIENTRYP PFN_GLQUERYRESOURCETAGNV_PROC) (GLint tagId, const GLchar * tagString);

// functions typedefs
GL_FUNC_DEF PFN_GLGENQUERYRESOURCETAGNV_PROC _glGenQueryResourceTagNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEQUERYRESOURCETAGNV_PROC _glDeleteQueryResourceTagNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLQUERYRESOURCETAGNV_PROC _glQueryResourceTagNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glGenQueryResourceTagNV (GLsizei n, GLint * tagIds) { return _glGenQueryResourceTagNV_(n, tagIds); };
inline void glDeleteQueryResourceTagNV (GLsizei n, const GLint * tagIds) { return _glDeleteQueryResourceTagNV_(n, tagIds); };
inline void glQueryResourceTagNV (GLint tagId, const GLchar * tagString) { return _glQueryResourceTagNV_(tagId, tagString); };
#endif //GL_NV_query_resource_tag

#ifndef GL_NV_register_combiners

// Defines
#define GL_REGISTER_COMBINERS_NV          0x8522 
#define GL_VARIABLE_A_NV                  0x8523 
#define GL_VARIABLE_B_NV                  0x8524 
#define GL_VARIABLE_C_NV                  0x8525 
#define GL_VARIABLE_D_NV                  0x8526 
#define GL_VARIABLE_E_NV                  0x8527 
#define GL_VARIABLE_F_NV                  0x8528 
#define GL_VARIABLE_G_NV                  0x8529 
#define GL_CONSTANT_COLOR0_NV             0x852A 
#define GL_CONSTANT_COLOR1_NV             0x852B 
#define GL_SPARE0_NV                      0x852E 
#define GL_SPARE1_NV                      0x852F 
#define GL_DISCARD_NV                     0x8530 
#define GL_E_TIMES_F_NV                   0x8531 
#define GL_SPARE0_PLUS_SECONDARY_COLOR_NV 0x8532 
#define GL_UNSIGNED_IDENTITY_NV           0x8536 
#define GL_UNSIGNED_INVERT_NV             0x8537 
#define GL_EXPAND_NORMAL_NV               0x8538 
#define GL_EXPAND_NEGATE_NV               0x8539 
#define GL_HALF_BIAS_NORMAL_NV            0x853A 
#define GL_HALF_BIAS_NEGATE_NV            0x853B 
#define GL_SIGNED_IDENTITY_NV             0x853C 
#define GL_SIGNED_NEGATE_NV               0x853D 
#define GL_SCALE_BY_TWO_NV                0x853E 
#define GL_SCALE_BY_FOUR_NV               0x853F 
#define GL_SCALE_BY_ONE_HALF_NV           0x8540 
#define GL_BIAS_BY_NEGATIVE_ONE_HALF_NV   0x8541 
#define GL_COMBINER_INPUT_NV              0x8542 
#define GL_COMBINER_MAPPING_NV            0x8543 
#define GL_COMBINER_COMPONENT_USAGE_NV    0x8544 
#define GL_COMBINER_AB_DOT_PRODUCT_NV     0x8545 
#define GL_COMBINER_CD_DOT_PRODUCT_NV     0x8546 
#define GL_COMBINER_MUX_SUM_NV            0x8547 
#define GL_COMBINER_SCALE_NV              0x8548 
#define GL_COMBINER_BIAS_NV               0x8549 
#define GL_COMBINER_AB_OUTPUT_NV          0x854A 
#define GL_COMBINER_CD_OUTPUT_NV          0x854B 
#define GL_COMBINER_SUM_OUTPUT_NV         0x854C 
#define GL_MAX_GENERAL_COMBINERS_NV       0x854D 
#define GL_NUM_GENERAL_COMBINERS_NV       0x854E 
#define GL_COLOR_SUM_CLAMP_NV             0x854F 
#define GL_COMBINER0_NV                   0x8550 
#define GL_COMBINER1_NV                   0x8551 
#define GL_COMBINER2_NV                   0x8552 
#define GL_COMBINER3_NV                   0x8553 
#define GL_COMBINER4_NV                   0x8554 
#define GL_COMBINER5_NV                   0x8555 
#define GL_COMBINER6_NV                   0x8556 
#define GL_COMBINER7_NV                   0x8557 

// functions typedefs
typedef void (APIENTRYP PFN_GLCOMBINERPARAMETERFVNV_PROC) (GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLCOMBINERPARAMETERFNV_PROC) (GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLCOMBINERPARAMETERIVNV_PROC) (GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLCOMBINERPARAMETERINV_PROC) (GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLCOMBINERINPUTNV_PROC) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
typedef void (APIENTRYP PFN_GLCOMBINEROUTPUTNV_PROC) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
typedef void (APIENTRYP PFN_GLFINALCOMBINERINPUTNV_PROC) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
typedef void (APIENTRYP PFN_GLGETCOMBINERINPUTPARAMETERFVNV_PROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETCOMBINERINPUTPARAMETERIVNV_PROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETCOMBINEROUTPUTPARAMETERFVNV_PROC) (GLenum stage, GLenum portion, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETCOMBINEROUTPUTPARAMETERIVNV_PROC) (GLenum stage, GLenum portion, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETFINALCOMBINERINPUTPARAMETERFVNV_PROC) (GLenum variable, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETFINALCOMBINERINPUTPARAMETERIVNV_PROC) (GLenum variable, GLenum pname, GLint * params);

// functions typedefs
GL_FUNC_DEF PFN_GLCOMBINERPARAMETERFVNV_PROC _glCombinerParameterfvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMBINERPARAMETERFNV_PROC _glCombinerParameterfNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMBINERPARAMETERIVNV_PROC _glCombinerParameterivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMBINERPARAMETERINV_PROC _glCombinerParameteriNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMBINERINPUTNV_PROC _glCombinerInputNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOMBINEROUTPUTNV_PROC _glCombinerOutputNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFINALCOMBINERINPUTNV_PROC _glFinalCombinerInputNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOMBINERINPUTPARAMETERFVNV_PROC _glGetCombinerInputParameterfvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOMBINERINPUTPARAMETERIVNV_PROC _glGetCombinerInputParameterivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOMBINEROUTPUTPARAMETERFVNV_PROC _glGetCombinerOutputParameterfvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOMBINEROUTPUTPARAMETERIVNV_PROC _glGetCombinerOutputParameterivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFINALCOMBINERINPUTPARAMETERFVNV_PROC _glGetFinalCombinerInputParameterfvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFINALCOMBINERINPUTPARAMETERIVNV_PROC _glGetFinalCombinerInputParameterivNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glCombinerParameterfvNV (GLenum pname, const GLfloat * params) { return _glCombinerParameterfvNV_(pname, params); };
inline void glCombinerParameterfNV (GLenum pname, GLfloat param) { return _glCombinerParameterfNV_(pname, param); };
inline void glCombinerParameterivNV (GLenum pname, const GLint * params) { return _glCombinerParameterivNV_(pname, params); };
inline void glCombinerParameteriNV (GLenum pname, GLint param) { return _glCombinerParameteriNV_(pname, param); };
inline void glCombinerInputNV (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) { return _glCombinerInputNV_(stage, portion, variable, input, mapping, componentUsage); };
inline void glCombinerOutputNV (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum) { return _glCombinerOutputNV_(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum); };
inline void glFinalCombinerInputNV (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) { return _glFinalCombinerInputNV_(variable, input, mapping, componentUsage); };
inline void glGetCombinerInputParameterfvNV (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params) { return _glGetCombinerInputParameterfvNV_(stage, portion, variable, pname, params); };
inline void glGetCombinerInputParameterivNV (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params) { return _glGetCombinerInputParameterivNV_(stage, portion, variable, pname, params); };
inline void glGetCombinerOutputParameterfvNV (GLenum stage, GLenum portion, GLenum pname, GLfloat * params) { return _glGetCombinerOutputParameterfvNV_(stage, portion, pname, params); };
inline void glGetCombinerOutputParameterivNV (GLenum stage, GLenum portion, GLenum pname, GLint * params) { return _glGetCombinerOutputParameterivNV_(stage, portion, pname, params); };
inline void glGetFinalCombinerInputParameterfvNV (GLenum variable, GLenum pname, GLfloat * params) { return _glGetFinalCombinerInputParameterfvNV_(variable, pname, params); };
inline void glGetFinalCombinerInputParameterivNV (GLenum variable, GLenum pname, GLint * params) { return _glGetFinalCombinerInputParameterivNV_(variable, pname, params); };
#endif //GL_NV_register_combiners

#ifndef GL_NV_register_combiners2

// Defines
#define GL_PER_STAGE_CONSTANTS_NV         0x8535 

// functions typedefs
typedef void (APIENTRYP PFN_GLCOMBINERSTAGEPARAMETERFVNV_PROC) (GLenum stage, GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLGETCOMBINERSTAGEPARAMETERFVNV_PROC) (GLenum stage, GLenum pname, GLfloat * params);

// functions typedefs
GL_FUNC_DEF PFN_GLCOMBINERSTAGEPARAMETERFVNV_PROC _glCombinerStageParameterfvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOMBINERSTAGEPARAMETERFVNV_PROC _glGetCombinerStageParameterfvNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glCombinerStageParameterfvNV (GLenum stage, GLenum pname, const GLfloat * params) { return _glCombinerStageParameterfvNV_(stage, pname, params); };
inline void glGetCombinerStageParameterfvNV (GLenum stage, GLenum pname, GLfloat * params) { return _glGetCombinerStageParameterfvNV_(stage, pname, params); };
#endif //GL_NV_register_combiners2

#ifndef GL_NV_robustness_video_memory_purge

// Defines
#define GL_PURGED_CONTEXT_RESET_NV        0x92BB 
#endif //GL_NV_robustness_video_memory_purge

// GL_NV_shader_storage_buffer_object

#ifndef GL_NV_tessellation_program5

// Defines
#define GL_MAX_PROGRAM_PATCH_ATTRIBS_NV   0x86D8 
#define GL_TESS_CONTROL_PROGRAM_NV        0x891E 
#define GL_TESS_EVALUATION_PROGRAM_NV     0x891F 
#define GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV 0x8C74 
#define GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV 0x8C75 
#endif //GL_NV_tessellation_program5

#ifndef GL_NV_texgen_emboss

// Defines
#define GL_EMBOSS_LIGHT_NV                0x855D 
#define GL_EMBOSS_CONSTANT_NV             0x855E 
#define GL_EMBOSS_MAP_NV                  0x855F 
#endif //GL_NV_texgen_emboss

#ifndef GL_NV_texgen_reflection

// Defines
#define GL_NORMAL_MAP_NV                  0x8511 
#define GL_REFLECTION_MAP_NV              0x8512 
#endif //GL_NV_texgen_reflection

// GL_NV_texture_compression_vtc

#ifndef GL_NV_texture_env_combine4

// Defines
#define GL_COMBINE4_NV                    0x8503 
#define GL_SOURCE3_RGB_NV                 0x8583 
#define GL_SOURCE3_ALPHA_NV               0x858B 
#define GL_OPERAND3_RGB_NV                0x8593 
#define GL_OPERAND3_ALPHA_NV              0x859B 
#endif //GL_NV_texture_env_combine4

#ifndef GL_NV_texture_expand_normal

// Defines
#define GL_TEXTURE_UNSIGNED_REMAP_MODE_NV 0x888F 
#endif //GL_NV_texture_expand_normal

#ifndef GL_NV_texture_multisample

// Defines
#define GL_TEXTURE_COVERAGE_SAMPLES_NV    0x9045 
#define GL_TEXTURE_COLOR_SAMPLES_NV       0x9046 

// functions typedefs
typedef void (APIENTRYP PFN_GLTEXIMAGE2DMULTISAMPLECOVERAGENV_PROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef void (APIENTRYP PFN_GLTEXIMAGE3DMULTISAMPLECOVERAGENV_PROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
typedef void (APIENTRYP PFN_GLTEXTUREIMAGE2DMULTISAMPLENV_PROC) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef void (APIENTRYP PFN_GLTEXTUREIMAGE3DMULTISAMPLENV_PROC) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
typedef void (APIENTRYP PFN_GLTEXTUREIMAGE2DMULTISAMPLECOVERAGENV_PROC) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef void (APIENTRYP PFN_GLTEXTUREIMAGE3DMULTISAMPLECOVERAGENV_PROC) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);

// functions typedefs
GL_FUNC_DEF PFN_GLTEXIMAGE2DMULTISAMPLECOVERAGENV_PROC _glTexImage2DMultisampleCoverageNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXIMAGE3DMULTISAMPLECOVERAGENV_PROC _glTexImage3DMultisampleCoverageNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREIMAGE2DMULTISAMPLENV_PROC _glTextureImage2DMultisampleNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREIMAGE3DMULTISAMPLENV_PROC _glTextureImage3DMultisampleNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREIMAGE2DMULTISAMPLECOVERAGENV_PROC _glTextureImage2DMultisampleCoverageNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXTUREIMAGE3DMULTISAMPLECOVERAGENV_PROC _glTextureImage3DMultisampleCoverageNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glTexImage2DMultisampleCoverageNV (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { return _glTexImage2DMultisampleCoverageNV_(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations); };
inline void glTexImage3DMultisampleCoverageNV (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { return _glTexImage3DMultisampleCoverageNV_(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations); };
inline void glTextureImage2DMultisampleNV (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { return _glTextureImage2DMultisampleNV_(texture, target, samples, internalFormat, width, height, fixedSampleLocations); };
inline void glTextureImage3DMultisampleNV (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { return _glTextureImage3DMultisampleNV_(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations); };
inline void glTextureImage2DMultisampleCoverageNV (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { return _glTextureImage2DMultisampleCoverageNV_(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations); };
inline void glTextureImage3DMultisampleCoverageNV (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { return _glTextureImage3DMultisampleCoverageNV_(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations); };
#endif //GL_NV_texture_multisample

#ifndef GL_NV_texture_rectangle

// Defines
#define GL_TEXTURE_RECTANGLE_NV           0x84F5 
#define GL_TEXTURE_BINDING_RECTANGLE_NV   0x84F6 
#define GL_PROXY_TEXTURE_RECTANGLE_NV     0x84F7 
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_NV  0x84F8 
#endif //GL_NV_texture_rectangle

#ifndef GL_NV_texture_shader

// Defines
#define GL_OFFSET_TEXTURE_RECTANGLE_NV    0x864C 
#define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV 0x864D 
#define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV 0x864E 
#define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV 0x86D9 
#define GL_UNSIGNED_INT_S8_S8_8_8_NV      0x86DA 
#define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV  0x86DB 
#define GL_DSDT_MAG_INTENSITY_NV          0x86DC 
#define GL_SHADER_CONSISTENT_NV           0x86DD 
#define GL_TEXTURE_SHADER_NV              0x86DE 
#define GL_SHADER_OPERATION_NV            0x86DF 
#define GL_CULL_MODES_NV                  0x86E0 
#define GL_OFFSET_TEXTURE_MATRIX_NV       0x86E1 
#define GL_OFFSET_TEXTURE_SCALE_NV        0x86E2 
#define GL_OFFSET_TEXTURE_BIAS_NV         0x86E3 
#define GL_OFFSET_TEXTURE_2D_MATRIX_NV    0x86E1 
#define GL_OFFSET_TEXTURE_2D_SCALE_NV     0x86E2 
#define GL_OFFSET_TEXTURE_2D_BIAS_NV      0x86E3 
#define GL_PREVIOUS_TEXTURE_INPUT_NV      0x86E4 
#define GL_CONST_EYE_NV                   0x86E5 
#define GL_PASS_THROUGH_NV                0x86E6 
#define GL_CULL_FRAGMENT_NV               0x86E7 
#define GL_OFFSET_TEXTURE_2D_NV           0x86E8 
#define GL_DEPENDENT_AR_TEXTURE_2D_NV     0x86E9 
#define GL_DEPENDENT_GB_TEXTURE_2D_NV     0x86EA 
#define GL_DOT_PRODUCT_NV                 0x86EC 
#define GL_DOT_PRODUCT_DEPTH_REPLACE_NV   0x86ED 
#define GL_DOT_PRODUCT_TEXTURE_2D_NV      0x86EE 
#define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV 0x86F0 
#define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV 0x86F1 
#define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV 0x86F2 
#define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV 0x86F3 
#define GL_HILO_NV                        0x86F4 
#define GL_DSDT_NV                        0x86F5 
#define GL_DSDT_MAG_NV                    0x86F6 
#define GL_DSDT_MAG_VIB_NV                0x86F7 
#define GL_HILO16_NV                      0x86F8 
#define GL_SIGNED_HILO_NV                 0x86F9 
#define GL_SIGNED_HILO16_NV               0x86FA 
#define GL_SIGNED_RGBA_NV                 0x86FB 
#define GL_SIGNED_RGBA8_NV                0x86FC 
#define GL_SIGNED_RGB_NV                  0x86FE 
#define GL_SIGNED_RGB8_NV                 0x86FF 
#define GL_SIGNED_LUMINANCE_NV            0x8701 
#define GL_SIGNED_LUMINANCE8_NV           0x8702 
#define GL_SIGNED_LUMINANCE_ALPHA_NV      0x8703 
#define GL_SIGNED_LUMINANCE8_ALPHA8_NV    0x8704 
#define GL_SIGNED_ALPHA_NV                0x8705 
#define GL_SIGNED_ALPHA8_NV               0x8706 
#define GL_SIGNED_INTENSITY_NV            0x8707 
#define GL_SIGNED_INTENSITY8_NV           0x8708 
#define GL_DSDT8_NV                       0x8709 
#define GL_DSDT8_MAG8_NV                  0x870A 
#define GL_DSDT8_MAG8_INTENSITY8_NV       0x870B 
#define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV   0x870C 
#define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 0x870D 
#define GL_HI_SCALE_NV                    0x870E 
#define GL_LO_SCALE_NV                    0x870F 
#define GL_DS_SCALE_NV                    0x8710 
#define GL_DT_SCALE_NV                    0x8711 
#define GL_MAGNITUDE_SCALE_NV             0x8712 
#define GL_VIBRANCE_SCALE_NV              0x8713 
#define GL_HI_BIAS_NV                     0x8714 
#define GL_LO_BIAS_NV                     0x8715 
#define GL_DS_BIAS_NV                     0x8716 
#define GL_DT_BIAS_NV                     0x8717 
#define GL_MAGNITUDE_BIAS_NV              0x8718 
#define GL_VIBRANCE_BIAS_NV               0x8719 
#define GL_TEXTURE_BORDER_VALUES_NV       0x871A 
#define GL_TEXTURE_HI_SIZE_NV             0x871B 
#define GL_TEXTURE_LO_SIZE_NV             0x871C 
#define GL_TEXTURE_DS_SIZE_NV             0x871D 
#define GL_TEXTURE_DT_SIZE_NV             0x871E 
#define GL_TEXTURE_MAG_SIZE_NV            0x871F 
#endif //GL_NV_texture_shader

#ifndef GL_NV_texture_shader2

// Defines
#define GL_DOT_PRODUCT_TEXTURE_3D_NV      0x86EF 
#endif //GL_NV_texture_shader2

#ifndef GL_NV_texture_shader3

// Defines
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV 0x8850 
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV 0x8851 
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8852 
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV 0x8853 
#define GL_OFFSET_HILO_TEXTURE_2D_NV      0x8854 
#define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV 0x8855 
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV 0x8856 
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8857 
#define GL_DEPENDENT_HILO_TEXTURE_2D_NV   0x8858 
#define GL_DEPENDENT_RGB_TEXTURE_3D_NV    0x8859 
#define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV 0x885A 
#define GL_DOT_PRODUCT_PASS_THROUGH_NV    0x885B 
#define GL_DOT_PRODUCT_TEXTURE_1D_NV      0x885C 
#define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV 0x885D 
#define GL_HILO8_NV                       0x885E 
#define GL_SIGNED_HILO8_NV                0x885F 
#define GL_FORCE_BLUE_TO_ONE_NV           0x8860 
#endif //GL_NV_texture_shader3

#ifndef GL_NV_transform_feedback

// Defines
#define GL_BACK_PRIMARY_COLOR_NV          0x8C77 
#define GL_BACK_SECONDARY_COLOR_NV        0x8C78 
#define GL_TEXTURE_COORD_NV               0x8C79 
#define GL_CLIP_DISTANCE_NV               0x8C7A 
#define GL_VERTEX_ID_NV                   0x8C7B 
#define GL_PRIMITIVE_ID_NV                0x8C7C 
#define GL_GENERIC_ATTRIB_NV              0x8C7D 
#define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV  0x8C7E 
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0x8C7F 
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80 
#define GL_ACTIVE_VARYINGS_NV             0x8C81 
#define GL_ACTIVE_VARYING_MAX_LENGTH_NV   0x8C82 
#define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0x8C83 
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0x8C84 
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0x8C85 
#define GL_TRANSFORM_FEEDBACK_RECORD_NV   0x8C86 
#define GL_PRIMITIVES_GENERATED_NV        0x8C87 
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88 
#define GL_RASTERIZER_DISCARD_NV          0x8C89 
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV 0x8C8A 
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B 
#define GL_INTERLEAVED_ATTRIBS_NV         0x8C8C 
#define GL_SEPARATE_ATTRIBS_NV            0x8C8D 
#define GL_TRANSFORM_FEEDBACK_BUFFER_NV   0x8C8E 
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0x8C8F 
#define GL_LAYER_NV                       0x8DAA 
#define GL_NEXT_BUFFER_NV                 -2 
#define GL_SKIP_COMPONENTS4_NV            -3 
#define GL_SKIP_COMPONENTS3_NV            -4 
#define GL_SKIP_COMPONENTS2_NV            -5 
#define GL_SKIP_COMPONENTS1_NV            -6 

// functions typedefs
typedef void (APIENTRYP PFN_GLBEGINTRANSFORMFEEDBACKNV_PROC) (GLenum primitiveMode);
typedef void (APIENTRYP PFN_GLENDTRANSFORMFEEDBACKNV_PROC) (void);
typedef void (APIENTRYP PFN_GLTRANSFORMFEEDBACKATTRIBSNV_PROC) (GLsizei count, const GLint * attribs, GLenum bufferMode);
typedef void (APIENTRYP PFN_GLBINDBUFFERRANGENV_PROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRYP PFN_GLBINDBUFFEROFFSETNV_PROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
typedef void (APIENTRYP PFN_GLBINDBUFFERBASENV_PROC) (GLenum target, GLuint index, GLuint buffer);
typedef void (APIENTRYP PFN_GLTRANSFORMFEEDBACKVARYINGSNV_PROC) (GLuint program, GLsizei count, const GLint * locations, GLenum bufferMode);
typedef void (APIENTRYP PFN_GLACTIVEVARYINGNV_PROC) (GLuint program, const GLchar * name);
typedef GLint (APIENTRYP PFN_GLGETVARYINGLOCATIONNV_PROC) (GLuint program, const GLchar * name);
typedef void (APIENTRYP PFN_GLGETACTIVEVARYINGNV_PROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef void (APIENTRYP PFN_GLGETTRANSFORMFEEDBACKVARYINGNV_PROC) (GLuint program, GLuint index, GLint * location);
typedef void (APIENTRYP PFN_GLTRANSFORMFEEDBACKSTREAMATTRIBSNV_PROC) (GLsizei count, const GLint * attribs, GLsizei nbuffers, const GLint * bufstreams, GLenum bufferMode);

// functions typedefs
GL_FUNC_DEF PFN_GLBEGINTRANSFORMFEEDBACKNV_PROC _glBeginTransformFeedbackNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENDTRANSFORMFEEDBACKNV_PROC _glEndTransformFeedbackNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTRANSFORMFEEDBACKATTRIBSNV_PROC _glTransformFeedbackAttribsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDBUFFERRANGENV_PROC _glBindBufferRangeNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDBUFFEROFFSETNV_PROC _glBindBufferOffsetNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDBUFFERBASENV_PROC _glBindBufferBaseNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTRANSFORMFEEDBACKVARYINGSNV_PROC _glTransformFeedbackVaryingsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLACTIVEVARYINGNV_PROC _glActiveVaryingNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVARYINGLOCATIONNV_PROC _glGetVaryingLocationNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETACTIVEVARYINGNV_PROC _glGetActiveVaryingNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTRANSFORMFEEDBACKVARYINGNV_PROC _glGetTransformFeedbackVaryingNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTRANSFORMFEEDBACKSTREAMATTRIBSNV_PROC _glTransformFeedbackStreamAttribsNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBeginTransformFeedbackNV (GLenum primitiveMode) { return _glBeginTransformFeedbackNV_(primitiveMode); };
inline void glEndTransformFeedbackNV (void) { return _glEndTransformFeedbackNV_(); };
inline void glTransformFeedbackAttribsNV (GLsizei count, const GLint * attribs, GLenum bufferMode) { return _glTransformFeedbackAttribsNV_(count, attribs, bufferMode); };
inline void glBindBufferRangeNV (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { return _glBindBufferRangeNV_(target, index, buffer, offset, size); };
inline void glBindBufferOffsetNV (GLenum target, GLuint index, GLuint buffer, GLintptr offset) { return _glBindBufferOffsetNV_(target, index, buffer, offset); };
inline void glBindBufferBaseNV (GLenum target, GLuint index, GLuint buffer) { return _glBindBufferBaseNV_(target, index, buffer); };
inline void glTransformFeedbackVaryingsNV (GLuint program, GLsizei count, const GLint * locations, GLenum bufferMode) { return _glTransformFeedbackVaryingsNV_(program, count, locations, bufferMode); };
inline void glActiveVaryingNV (GLuint program, const GLchar * name) { return _glActiveVaryingNV_(program, name); };
inline GLint glGetVaryingLocationNV (GLuint program, const GLchar * name) { return _glGetVaryingLocationNV_(program, name); };
inline void glGetActiveVaryingNV (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) { return _glGetActiveVaryingNV_(program, index, bufSize, length, size, type, name); };
inline void glGetTransformFeedbackVaryingNV (GLuint program, GLuint index, GLint * location) { return _glGetTransformFeedbackVaryingNV_(program, index, location); };
inline void glTransformFeedbackStreamAttribsNV (GLsizei count, const GLint * attribs, GLsizei nbuffers, const GLint * bufstreams, GLenum bufferMode) { return _glTransformFeedbackStreamAttribsNV_(count, attribs, nbuffers, bufstreams, bufferMode); };
#endif //GL_NV_transform_feedback

#ifndef GL_NV_transform_feedback2

// Defines
#define GL_TRANSFORM_FEEDBACK_NV          0x8E22 
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV 0x8E23 
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV 0x8E24 
#define GL_TRANSFORM_FEEDBACK_BINDING_NV  0x8E25 

// functions typedefs
typedef void (APIENTRYP PFN_GLBINDTRANSFORMFEEDBACKNV_PROC) (GLenum target, GLuint id);
typedef void (APIENTRYP PFN_GLDELETETRANSFORMFEEDBACKSNV_PROC) (GLsizei n, const GLuint * ids);
typedef void (APIENTRYP PFN_GLGENTRANSFORMFEEDBACKSNV_PROC) (GLsizei n, GLuint * ids);
typedef GLboolean (APIENTRYP PFN_GLISTRANSFORMFEEDBACKNV_PROC) (GLuint id);
typedef void (APIENTRYP PFN_GLPAUSETRANSFORMFEEDBACKNV_PROC) (void);
typedef void (APIENTRYP PFN_GLRESUMETRANSFORMFEEDBACKNV_PROC) (void);
typedef void (APIENTRYP PFN_GLDRAWTRANSFORMFEEDBACKNV_PROC) (GLenum mode, GLuint id);

// functions typedefs
GL_FUNC_DEF PFN_GLBINDTRANSFORMFEEDBACKNV_PROC _glBindTransformFeedbackNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETETRANSFORMFEEDBACKSNV_PROC _glDeleteTransformFeedbacksNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENTRANSFORMFEEDBACKSNV_PROC _glGenTransformFeedbacksNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISTRANSFORMFEEDBACKNV_PROC _glIsTransformFeedbackNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPAUSETRANSFORMFEEDBACKNV_PROC _glPauseTransformFeedbackNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLRESUMETRANSFORMFEEDBACKNV_PROC _glResumeTransformFeedbackNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDRAWTRANSFORMFEEDBACKNV_PROC _glDrawTransformFeedbackNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBindTransformFeedbackNV (GLenum target, GLuint id) { return _glBindTransformFeedbackNV_(target, id); };
inline void glDeleteTransformFeedbacksNV (GLsizei n, const GLuint * ids) { return _glDeleteTransformFeedbacksNV_(n, ids); };
inline void glGenTransformFeedbacksNV (GLsizei n, GLuint * ids) { return _glGenTransformFeedbacksNV_(n, ids); };
inline GLboolean glIsTransformFeedbackNV (GLuint id) { return _glIsTransformFeedbackNV_(id); };
inline void glPauseTransformFeedbackNV (void) { return _glPauseTransformFeedbackNV_(); };
inline void glResumeTransformFeedbackNV (void) { return _glResumeTransformFeedbackNV_(); };
inline void glDrawTransformFeedbackNV (GLenum mode, GLuint id) { return _glDrawTransformFeedbackNV_(mode, id); };
#endif //GL_NV_transform_feedback2

#ifndef GL_NV_vdpau_interop

// Defines
#define GL_SURFACE_STATE_NV               0x86EB 
#define GL_SURFACE_REGISTERED_NV          0x86FD 
#define GL_SURFACE_MAPPED_NV              0x8700 
#define GL_WRITE_DISCARD_NV               0x88BE 

// functions typedefs
typedef void (APIENTRYP PFN_GLVDPAUINITNV_PROC) (const void * vdpDevice, const void * getProcAddress);
typedef void (APIENTRYP PFN_GLVDPAUFININV_PROC) (void);
typedef GLvdpauSurfaceNV (APIENTRYP PFN_GLVDPAUREGISTERVIDEOSURFACENV_PROC) (const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames);
typedef GLvdpauSurfaceNV (APIENTRYP PFN_GLVDPAUREGISTEROUTPUTSURFACENV_PROC) (const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames);
typedef GLboolean (APIENTRYP PFN_GLVDPAUISSURFACENV_PROC) (GLvdpauSurfaceNV surface);
typedef void (APIENTRYP PFN_GLVDPAUUNREGISTERSURFACENV_PROC) (GLvdpauSurfaceNV surface);
typedef void (APIENTRYP PFN_GLVDPAUGETSURFACEIVNV_PROC) (GLvdpauSurfaceNV surface, GLenum pname, GLsizei count, GLsizei * length, GLint * values);
typedef void (APIENTRYP PFN_GLVDPAUSURFACEACCESSNV_PROC) (GLvdpauSurfaceNV surface, GLenum access);
typedef void (APIENTRYP PFN_GLVDPAUMAPSURFACESNV_PROC) (GLsizei numSurfaces, const GLvdpauSurfaceNV * surfaces);
typedef void (APIENTRYP PFN_GLVDPAUUNMAPSURFACESNV_PROC) (GLsizei numSurface, const GLvdpauSurfaceNV * surfaces);

// functions typedefs
GL_FUNC_DEF PFN_GLVDPAUINITNV_PROC _glVDPAUInitNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVDPAUFININV_PROC _glVDPAUFiniNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVDPAUREGISTERVIDEOSURFACENV_PROC _glVDPAURegisterVideoSurfaceNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVDPAUREGISTEROUTPUTSURFACENV_PROC _glVDPAURegisterOutputSurfaceNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVDPAUISSURFACENV_PROC _glVDPAUIsSurfaceNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVDPAUUNREGISTERSURFACENV_PROC _glVDPAUUnregisterSurfaceNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVDPAUGETSURFACEIVNV_PROC _glVDPAUGetSurfaceivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVDPAUSURFACEACCESSNV_PROC _glVDPAUSurfaceAccessNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVDPAUMAPSURFACESNV_PROC _glVDPAUMapSurfacesNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVDPAUUNMAPSURFACESNV_PROC _glVDPAUUnmapSurfacesNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glVDPAUInitNV (const void * vdpDevice, const void * getProcAddress) { return _glVDPAUInitNV_(vdpDevice, getProcAddress); };
inline void glVDPAUFiniNV (void) { return _glVDPAUFiniNV_(); };
inline GLvdpauSurfaceNV glVDPAURegisterVideoSurfaceNV (const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames) { return _glVDPAURegisterVideoSurfaceNV_(vdpSurface, target, numTextureNames, textureNames); };
inline GLvdpauSurfaceNV glVDPAURegisterOutputSurfaceNV (const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames) { return _glVDPAURegisterOutputSurfaceNV_(vdpSurface, target, numTextureNames, textureNames); };
inline GLboolean glVDPAUIsSurfaceNV (GLvdpauSurfaceNV surface) { return _glVDPAUIsSurfaceNV_(surface); };
inline void glVDPAUUnregisterSurfaceNV (GLvdpauSurfaceNV surface) { return _glVDPAUUnregisterSurfaceNV_(surface); };
inline void glVDPAUGetSurfaceivNV (GLvdpauSurfaceNV surface, GLenum pname, GLsizei count, GLsizei * length, GLint * values) { return _glVDPAUGetSurfaceivNV_(surface, pname, count, length, values); };
inline void glVDPAUSurfaceAccessNV (GLvdpauSurfaceNV surface, GLenum access) { return _glVDPAUSurfaceAccessNV_(surface, access); };
inline void glVDPAUMapSurfacesNV (GLsizei numSurfaces, const GLvdpauSurfaceNV * surfaces) { return _glVDPAUMapSurfacesNV_(numSurfaces, surfaces); };
inline void glVDPAUUnmapSurfacesNV (GLsizei numSurface, const GLvdpauSurfaceNV * surfaces) { return _glVDPAUUnmapSurfacesNV_(numSurface, surfaces); };
#endif //GL_NV_vdpau_interop

#ifndef GL_NV_vdpau_interop2

// functions typedefs
typedef GLvdpauSurfaceNV (APIENTRYP PFN_GLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENV_PROC) (const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames, GLboolean isFrameStructure);

// functions typedefs
GL_FUNC_DEF PFN_GLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENV_PROC _glVDPAURegisterVideoSurfaceWithPictureStructureNV_ GL_FUNC_DEF2;

// functions inline wrap
inline GLvdpauSurfaceNV glVDPAURegisterVideoSurfaceWithPictureStructureNV (const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames, GLboolean isFrameStructure) { return _glVDPAURegisterVideoSurfaceWithPictureStructureNV_(vdpSurface, target, numTextureNames, textureNames, isFrameStructure); };
#endif //GL_NV_vdpau_interop2

#ifndef GL_NV_vertex_array_range

// Defines
#define GL_VERTEX_ARRAY_RANGE_NV          0x851D 
#define GL_VERTEX_ARRAY_RANGE_LENGTH_NV   0x851E 
#define GL_VERTEX_ARRAY_RANGE_VALID_NV    0x851F 
#define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV 0x8520 
#define GL_VERTEX_ARRAY_RANGE_POINTER_NV  0x8521 

// functions typedefs
typedef void (APIENTRYP PFN_GLFLUSHVERTEXARRAYRANGENV_PROC) (void);
typedef void (APIENTRYP PFN_GLVERTEXARRAYRANGENV_PROC) (GLsizei length, const void * pointer);

// functions typedefs
GL_FUNC_DEF PFN_GLFLUSHVERTEXARRAYRANGENV_PROC _glFlushVertexArrayRangeNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXARRAYRANGENV_PROC _glVertexArrayRangeNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glFlushVertexArrayRangeNV (void) { return _glFlushVertexArrayRangeNV_(); };
inline void glVertexArrayRangeNV (GLsizei length, const void * pointer) { return _glVertexArrayRangeNV_(length, pointer); };
#endif //GL_NV_vertex_array_range

#ifndef GL_NV_vertex_array_range2

// Defines
#define GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV 0x8533 
#endif //GL_NV_vertex_array_range2

#ifndef GL_NV_vertex_program

// Defines
#define GL_VERTEX_PROGRAM_NV              0x8620 
#define GL_VERTEX_STATE_PROGRAM_NV        0x8621 
#define GL_ATTRIB_ARRAY_SIZE_NV           0x8623 
#define GL_ATTRIB_ARRAY_STRIDE_NV         0x8624 
#define GL_ATTRIB_ARRAY_TYPE_NV           0x8625 
#define GL_CURRENT_ATTRIB_NV              0x8626 
#define GL_PROGRAM_LENGTH_NV              0x8627 
#define GL_PROGRAM_STRING_NV              0x8628 
#define GL_MODELVIEW_PROJECTION_NV        0x8629 
#define GL_IDENTITY_NV                    0x862A 
#define GL_INVERSE_NV                     0x862B 
#define GL_TRANSPOSE_NV                   0x862C 
#define GL_INVERSE_TRANSPOSE_NV           0x862D 
#define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0x862E 
#define GL_MAX_TRACK_MATRICES_NV          0x862F 
#define GL_MATRIX0_NV                     0x8630 
#define GL_MATRIX1_NV                     0x8631 
#define GL_MATRIX2_NV                     0x8632 
#define GL_MATRIX3_NV                     0x8633 
#define GL_MATRIX4_NV                     0x8634 
#define GL_MATRIX5_NV                     0x8635 
#define GL_MATRIX6_NV                     0x8636 
#define GL_MATRIX7_NV                     0x8637 
#define GL_CURRENT_MATRIX_STACK_DEPTH_NV  0x8640 
#define GL_CURRENT_MATRIX_NV              0x8641 
#define GL_VERTEX_PROGRAM_POINT_SIZE_NV   0x8642 
#define GL_VERTEX_PROGRAM_TWO_SIDE_NV     0x8643 
#define GL_PROGRAM_PARAMETER_NV           0x8644 
#define GL_ATTRIB_ARRAY_POINTER_NV        0x8645 
#define GL_PROGRAM_TARGET_NV              0x8646 
#define GL_PROGRAM_RESIDENT_NV            0x8647 
#define GL_TRACK_MATRIX_NV                0x8648 
#define GL_TRACK_MATRIX_TRANSFORM_NV      0x8649 
#define GL_VERTEX_PROGRAM_BINDING_NV      0x864A 
#define GL_PROGRAM_ERROR_POSITION_NV      0x864B 
#define GL_VERTEX_ATTRIB_ARRAY0_NV        0x8650 
#define GL_VERTEX_ATTRIB_ARRAY1_NV        0x8651 
#define GL_VERTEX_ATTRIB_ARRAY2_NV        0x8652 
#define GL_VERTEX_ATTRIB_ARRAY3_NV        0x8653 
#define GL_VERTEX_ATTRIB_ARRAY4_NV        0x8654 
#define GL_VERTEX_ATTRIB_ARRAY5_NV        0x8655 
#define GL_VERTEX_ATTRIB_ARRAY6_NV        0x8656 
#define GL_VERTEX_ATTRIB_ARRAY7_NV        0x8657 
#define GL_VERTEX_ATTRIB_ARRAY8_NV        0x8658 
#define GL_VERTEX_ATTRIB_ARRAY9_NV        0x8659 
#define GL_VERTEX_ATTRIB_ARRAY10_NV       0x865A 
#define GL_VERTEX_ATTRIB_ARRAY11_NV       0x865B 
#define GL_VERTEX_ATTRIB_ARRAY12_NV       0x865C 
#define GL_VERTEX_ATTRIB_ARRAY13_NV       0x865D 
#define GL_VERTEX_ATTRIB_ARRAY14_NV       0x865E 
#define GL_VERTEX_ATTRIB_ARRAY15_NV       0x865F 
#define GL_MAP1_VERTEX_ATTRIB0_4_NV       0x8660 
#define GL_MAP1_VERTEX_ATTRIB1_4_NV       0x8661 
#define GL_MAP1_VERTEX_ATTRIB2_4_NV       0x8662 
#define GL_MAP1_VERTEX_ATTRIB3_4_NV       0x8663 
#define GL_MAP1_VERTEX_ATTRIB4_4_NV       0x8664 
#define GL_MAP1_VERTEX_ATTRIB5_4_NV       0x8665 
#define GL_MAP1_VERTEX_ATTRIB6_4_NV       0x8666 
#define GL_MAP1_VERTEX_ATTRIB7_4_NV       0x8667 
#define GL_MAP1_VERTEX_ATTRIB8_4_NV       0x8668 
#define GL_MAP1_VERTEX_ATTRIB9_4_NV       0x8669 
#define GL_MAP1_VERTEX_ATTRIB10_4_NV      0x866A 
#define GL_MAP1_VERTEX_ATTRIB11_4_NV      0x866B 
#define GL_MAP1_VERTEX_ATTRIB12_4_NV      0x866C 
#define GL_MAP1_VERTEX_ATTRIB13_4_NV      0x866D 
#define GL_MAP1_VERTEX_ATTRIB14_4_NV      0x866E 
#define GL_MAP1_VERTEX_ATTRIB15_4_NV      0x866F 
#define GL_MAP2_VERTEX_ATTRIB0_4_NV       0x8670 
#define GL_MAP2_VERTEX_ATTRIB1_4_NV       0x8671 
#define GL_MAP2_VERTEX_ATTRIB2_4_NV       0x8672 
#define GL_MAP2_VERTEX_ATTRIB3_4_NV       0x8673 
#define GL_MAP2_VERTEX_ATTRIB4_4_NV       0x8674 
#define GL_MAP2_VERTEX_ATTRIB5_4_NV       0x8675 
#define GL_MAP2_VERTEX_ATTRIB6_4_NV       0x8676 
#define GL_MAP2_VERTEX_ATTRIB7_4_NV       0x8677 
#define GL_MAP2_VERTEX_ATTRIB8_4_NV       0x8678 
#define GL_MAP2_VERTEX_ATTRIB9_4_NV       0x8679 
#define GL_MAP2_VERTEX_ATTRIB10_4_NV      0x867A 
#define GL_MAP2_VERTEX_ATTRIB11_4_NV      0x867B 
#define GL_MAP2_VERTEX_ATTRIB12_4_NV      0x867C 
#define GL_MAP2_VERTEX_ATTRIB13_4_NV      0x867D 
#define GL_MAP2_VERTEX_ATTRIB14_4_NV      0x867E 
#define GL_MAP2_VERTEX_ATTRIB15_4_NV      0x867F 

// functions typedefs
typedef GLboolean (APIENTRYP PFN_GLAREPROGRAMSRESIDENTNV_PROC) (GLsizei n, const GLuint * programs, GLboolean * residences);
typedef void (APIENTRYP PFN_GLBINDPROGRAMNV_PROC) (GLenum target, GLuint id);
typedef void (APIENTRYP PFN_GLDELETEPROGRAMSNV_PROC) (GLsizei n, const GLuint * programs);
typedef void (APIENTRYP PFN_GLEXECUTEPROGRAMNV_PROC) (GLenum target, GLuint id, const GLfloat * params);
typedef void (APIENTRYP PFN_GLGENPROGRAMSNV_PROC) (GLsizei n, GLuint * programs);
typedef void (APIENTRYP PFN_GLGETPROGRAMPARAMETERDVNV_PROC) (GLenum target, GLuint index, GLenum pname, GLdouble * params);
typedef void (APIENTRYP PFN_GLGETPROGRAMPARAMETERFVNV_PROC) (GLenum target, GLuint index, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETPROGRAMIVNV_PROC) (GLuint id, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETPROGRAMSTRINGNV_PROC) (GLuint id, GLenum pname, GLubyte * program);
typedef void (APIENTRYP PFN_GLGETTRACKMATRIXIVNV_PROC) (GLenum target, GLuint address, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBDVNV_PROC) (GLuint index, GLenum pname, GLdouble * params);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBFVNV_PROC) (GLuint index, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBIVNV_PROC) (GLuint index, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBPOINTERVNV_PROC) (GLuint index, GLenum pname, void * * pointer);
typedef GLboolean (APIENTRYP PFN_GLISPROGRAMNV_PROC) (GLuint id);
typedef void (APIENTRYP PFN_GLLOADPROGRAMNV_PROC) (GLenum target, GLuint id, GLsizei len, const GLubyte * program);
typedef void (APIENTRYP PFN_GLPROGRAMPARAMETER4DNV_PROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFN_GLPROGRAMPARAMETER4DVNV_PROC) (GLenum target, GLuint index, const GLdouble * v);
typedef void (APIENTRYP PFN_GLPROGRAMPARAMETER4FNV_PROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRYP PFN_GLPROGRAMPARAMETER4FVNV_PROC) (GLenum target, GLuint index, const GLfloat * v);
typedef void (APIENTRYP PFN_GLPROGRAMPARAMETERS4DVNV_PROC) (GLenum target, GLuint index, GLsizei count, const GLdouble * v);
typedef void (APIENTRYP PFN_GLPROGRAMPARAMETERS4FVNV_PROC) (GLenum target, GLuint index, GLsizei count, const GLfloat * v);
typedef void (APIENTRYP PFN_GLREQUESTRESIDENTPROGRAMSNV_PROC) (GLsizei n, const GLuint * programs);
typedef void (APIENTRYP PFN_GLTRACKMATRIXNV_PROC) (GLenum target, GLuint address, GLenum matrix, GLenum transform);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBPOINTERNV_PROC) (GLuint index, GLint fsize, GLenum type, GLsizei stride, const void * pointer);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB1DNV_PROC) (GLuint index, GLdouble x);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB1DVNV_PROC) (GLuint index, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB1FNV_PROC) (GLuint index, GLfloat x);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB1FVNV_PROC) (GLuint index, const GLfloat * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB1SNV_PROC) (GLuint index, GLshort x);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB1SVNV_PROC) (GLuint index, const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB2DNV_PROC) (GLuint index, GLdouble x, GLdouble y);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB2DVNV_PROC) (GLuint index, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB2FNV_PROC) (GLuint index, GLfloat x, GLfloat y);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB2FVNV_PROC) (GLuint index, const GLfloat * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB2SNV_PROC) (GLuint index, GLshort x, GLshort y);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB2SVNV_PROC) (GLuint index, const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB3DNV_PROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB3DVNV_PROC) (GLuint index, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB3FNV_PROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB3FVNV_PROC) (GLuint index, const GLfloat * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB3SNV_PROC) (GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB3SVNV_PROC) (GLuint index, const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4DNV_PROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4DVNV_PROC) (GLuint index, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4FNV_PROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4FVNV_PROC) (GLuint index, const GLfloat * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4SNV_PROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4SVNV_PROC) (GLuint index, const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4UBNV_PROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (APIENTRYP PFN_GLVERTEXATTRIB4UBVNV_PROC) (GLuint index, const GLubyte * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBS1DVNV_PROC) (GLuint index, GLsizei count, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBS1FVNV_PROC) (GLuint index, GLsizei count, const GLfloat * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBS1SVNV_PROC) (GLuint index, GLsizei count, const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBS2DVNV_PROC) (GLuint index, GLsizei count, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBS2FVNV_PROC) (GLuint index, GLsizei count, const GLfloat * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBS2SVNV_PROC) (GLuint index, GLsizei count, const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBS3DVNV_PROC) (GLuint index, GLsizei count, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBS3FVNV_PROC) (GLuint index, GLsizei count, const GLfloat * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBS3SVNV_PROC) (GLuint index, GLsizei count, const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBS4DVNV_PROC) (GLuint index, GLsizei count, const GLdouble * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBS4FVNV_PROC) (GLuint index, GLsizei count, const GLfloat * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBS4SVNV_PROC) (GLuint index, GLsizei count, const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBS4UBVNV_PROC) (GLuint index, GLsizei count, const GLubyte * v);

// functions typedefs
GL_FUNC_DEF PFN_GLAREPROGRAMSRESIDENTNV_PROC _glAreProgramsResidentNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDPROGRAMNV_PROC _glBindProgramNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEPROGRAMSNV_PROC _glDeleteProgramsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLEXECUTEPROGRAMNV_PROC _glExecuteProgramNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENPROGRAMSNV_PROC _glGenProgramsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMPARAMETERDVNV_PROC _glGetProgramParameterdvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMPARAMETERFVNV_PROC _glGetProgramParameterfvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMIVNV_PROC _glGetProgramivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPROGRAMSTRINGNV_PROC _glGetProgramStringNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETTRACKMATRIXIVNV_PROC _glGetTrackMatrixivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBDVNV_PROC _glGetVertexAttribdvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBFVNV_PROC _glGetVertexAttribfvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBIVNV_PROC _glGetVertexAttribivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBPOINTERVNV_PROC _glGetVertexAttribPointervNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISPROGRAMNV_PROC _glIsProgramNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLOADPROGRAMNV_PROC _glLoadProgramNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMPARAMETER4DNV_PROC _glProgramParameter4dNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMPARAMETER4DVNV_PROC _glProgramParameter4dvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMPARAMETER4FNV_PROC _glProgramParameter4fNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMPARAMETER4FVNV_PROC _glProgramParameter4fvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMPARAMETERS4DVNV_PROC _glProgramParameters4dvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPROGRAMPARAMETERS4FVNV_PROC _glProgramParameters4fvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREQUESTRESIDENTPROGRAMSNV_PROC _glRequestResidentProgramsNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTRACKMATRIXNV_PROC _glTrackMatrixNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBPOINTERNV_PROC _glVertexAttribPointerNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB1DNV_PROC _glVertexAttrib1dNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB1DVNV_PROC _glVertexAttrib1dvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB1FNV_PROC _glVertexAttrib1fNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB1FVNV_PROC _glVertexAttrib1fvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB1SNV_PROC _glVertexAttrib1sNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB1SVNV_PROC _glVertexAttrib1svNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB2DNV_PROC _glVertexAttrib2dNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB2DVNV_PROC _glVertexAttrib2dvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB2FNV_PROC _glVertexAttrib2fNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB2FVNV_PROC _glVertexAttrib2fvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB2SNV_PROC _glVertexAttrib2sNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB2SVNV_PROC _glVertexAttrib2svNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB3DNV_PROC _glVertexAttrib3dNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB3DVNV_PROC _glVertexAttrib3dvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB3FNV_PROC _glVertexAttrib3fNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB3FVNV_PROC _glVertexAttrib3fvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB3SNV_PROC _glVertexAttrib3sNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB3SVNV_PROC _glVertexAttrib3svNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4DNV_PROC _glVertexAttrib4dNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4DVNV_PROC _glVertexAttrib4dvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4FNV_PROC _glVertexAttrib4fNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4FVNV_PROC _glVertexAttrib4fvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4SNV_PROC _glVertexAttrib4sNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4SVNV_PROC _glVertexAttrib4svNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4UBNV_PROC _glVertexAttrib4ubNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIB4UBVNV_PROC _glVertexAttrib4ubvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBS1DVNV_PROC _glVertexAttribs1dvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBS1FVNV_PROC _glVertexAttribs1fvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBS1SVNV_PROC _glVertexAttribs1svNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBS2DVNV_PROC _glVertexAttribs2dvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBS2FVNV_PROC _glVertexAttribs2fvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBS2SVNV_PROC _glVertexAttribs2svNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBS3DVNV_PROC _glVertexAttribs3dvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBS3FVNV_PROC _glVertexAttribs3fvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBS3SVNV_PROC _glVertexAttribs3svNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBS4DVNV_PROC _glVertexAttribs4dvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBS4FVNV_PROC _glVertexAttribs4fvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBS4SVNV_PROC _glVertexAttribs4svNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBS4UBVNV_PROC _glVertexAttribs4ubvNV_ GL_FUNC_DEF2;

// functions inline wrap
inline GLboolean glAreProgramsResidentNV (GLsizei n, const GLuint * programs, GLboolean * residences) { return _glAreProgramsResidentNV_(n, programs, residences); };
inline void glBindProgramNV (GLenum target, GLuint id) { return _glBindProgramNV_(target, id); };
inline void glDeleteProgramsNV (GLsizei n, const GLuint * programs) { return _glDeleteProgramsNV_(n, programs); };
inline void glExecuteProgramNV (GLenum target, GLuint id, const GLfloat * params) { return _glExecuteProgramNV_(target, id, params); };
inline void glGenProgramsNV (GLsizei n, GLuint * programs) { return _glGenProgramsNV_(n, programs); };
inline void glGetProgramParameterdvNV (GLenum target, GLuint index, GLenum pname, GLdouble * params) { return _glGetProgramParameterdvNV_(target, index, pname, params); };
inline void glGetProgramParameterfvNV (GLenum target, GLuint index, GLenum pname, GLfloat * params) { return _glGetProgramParameterfvNV_(target, index, pname, params); };
inline void glGetProgramivNV (GLuint id, GLenum pname, GLint * params) { return _glGetProgramivNV_(id, pname, params); };
inline void glGetProgramStringNV (GLuint id, GLenum pname, GLubyte * program) { return _glGetProgramStringNV_(id, pname, program); };
inline void glGetTrackMatrixivNV (GLenum target, GLuint address, GLenum pname, GLint * params) { return _glGetTrackMatrixivNV_(target, address, pname, params); };
inline void glGetVertexAttribdvNV (GLuint index, GLenum pname, GLdouble * params) { return _glGetVertexAttribdvNV_(index, pname, params); };
inline void glGetVertexAttribfvNV (GLuint index, GLenum pname, GLfloat * params) { return _glGetVertexAttribfvNV_(index, pname, params); };
inline void glGetVertexAttribivNV (GLuint index, GLenum pname, GLint * params) { return _glGetVertexAttribivNV_(index, pname, params); };
inline void glGetVertexAttribPointervNV (GLuint index, GLenum pname, void * * pointer) { return _glGetVertexAttribPointervNV_(index, pname, pointer); };
inline GLboolean glIsProgramNV (GLuint id) { return _glIsProgramNV_(id); };
inline void glLoadProgramNV (GLenum target, GLuint id, GLsizei len, const GLubyte * program) { return _glLoadProgramNV_(target, id, len, program); };
inline void glProgramParameter4dNV (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { return _glProgramParameter4dNV_(target, index, x, y, z, w); };
inline void glProgramParameter4dvNV (GLenum target, GLuint index, const GLdouble * v) { return _glProgramParameter4dvNV_(target, index, v); };
inline void glProgramParameter4fNV (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { return _glProgramParameter4fNV_(target, index, x, y, z, w); };
inline void glProgramParameter4fvNV (GLenum target, GLuint index, const GLfloat * v) { return _glProgramParameter4fvNV_(target, index, v); };
inline void glProgramParameters4dvNV (GLenum target, GLuint index, GLsizei count, const GLdouble * v) { return _glProgramParameters4dvNV_(target, index, count, v); };
inline void glProgramParameters4fvNV (GLenum target, GLuint index, GLsizei count, const GLfloat * v) { return _glProgramParameters4fvNV_(target, index, count, v); };
inline void glRequestResidentProgramsNV (GLsizei n, const GLuint * programs) { return _glRequestResidentProgramsNV_(n, programs); };
inline void glTrackMatrixNV (GLenum target, GLuint address, GLenum matrix, GLenum transform) { return _glTrackMatrixNV_(target, address, matrix, transform); };
inline void glVertexAttribPointerNV (GLuint index, GLint fsize, GLenum type, GLsizei stride, const void * pointer) { return _glVertexAttribPointerNV_(index, fsize, type, stride, pointer); };
inline void glVertexAttrib1dNV (GLuint index, GLdouble x) { return _glVertexAttrib1dNV_(index, x); };
inline void glVertexAttrib1dvNV (GLuint index, const GLdouble * v) { return _glVertexAttrib1dvNV_(index, v); };
inline void glVertexAttrib1fNV (GLuint index, GLfloat x) { return _glVertexAttrib1fNV_(index, x); };
inline void glVertexAttrib1fvNV (GLuint index, const GLfloat * v) { return _glVertexAttrib1fvNV_(index, v); };
inline void glVertexAttrib1sNV (GLuint index, GLshort x) { return _glVertexAttrib1sNV_(index, x); };
inline void glVertexAttrib1svNV (GLuint index, const GLshort * v) { return _glVertexAttrib1svNV_(index, v); };
inline void glVertexAttrib2dNV (GLuint index, GLdouble x, GLdouble y) { return _glVertexAttrib2dNV_(index, x, y); };
inline void glVertexAttrib2dvNV (GLuint index, const GLdouble * v) { return _glVertexAttrib2dvNV_(index, v); };
inline void glVertexAttrib2fNV (GLuint index, GLfloat x, GLfloat y) { return _glVertexAttrib2fNV_(index, x, y); };
inline void glVertexAttrib2fvNV (GLuint index, const GLfloat * v) { return _glVertexAttrib2fvNV_(index, v); };
inline void glVertexAttrib2sNV (GLuint index, GLshort x, GLshort y) { return _glVertexAttrib2sNV_(index, x, y); };
inline void glVertexAttrib2svNV (GLuint index, const GLshort * v) { return _glVertexAttrib2svNV_(index, v); };
inline void glVertexAttrib3dNV (GLuint index, GLdouble x, GLdouble y, GLdouble z) { return _glVertexAttrib3dNV_(index, x, y, z); };
inline void glVertexAttrib3dvNV (GLuint index, const GLdouble * v) { return _glVertexAttrib3dvNV_(index, v); };
inline void glVertexAttrib3fNV (GLuint index, GLfloat x, GLfloat y, GLfloat z) { return _glVertexAttrib3fNV_(index, x, y, z); };
inline void glVertexAttrib3fvNV (GLuint index, const GLfloat * v) { return _glVertexAttrib3fvNV_(index, v); };
inline void glVertexAttrib3sNV (GLuint index, GLshort x, GLshort y, GLshort z) { return _glVertexAttrib3sNV_(index, x, y, z); };
inline void glVertexAttrib3svNV (GLuint index, const GLshort * v) { return _glVertexAttrib3svNV_(index, v); };
inline void glVertexAttrib4dNV (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { return _glVertexAttrib4dNV_(index, x, y, z, w); };
inline void glVertexAttrib4dvNV (GLuint index, const GLdouble * v) { return _glVertexAttrib4dvNV_(index, v); };
inline void glVertexAttrib4fNV (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { return _glVertexAttrib4fNV_(index, x, y, z, w); };
inline void glVertexAttrib4fvNV (GLuint index, const GLfloat * v) { return _glVertexAttrib4fvNV_(index, v); };
inline void glVertexAttrib4sNV (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { return _glVertexAttrib4sNV_(index, x, y, z, w); };
inline void glVertexAttrib4svNV (GLuint index, const GLshort * v) { return _glVertexAttrib4svNV_(index, v); };
inline void glVertexAttrib4ubNV (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { return _glVertexAttrib4ubNV_(index, x, y, z, w); };
inline void glVertexAttrib4ubvNV (GLuint index, const GLubyte * v) { return _glVertexAttrib4ubvNV_(index, v); };
inline void glVertexAttribs1dvNV (GLuint index, GLsizei count, const GLdouble * v) { return _glVertexAttribs1dvNV_(index, count, v); };
inline void glVertexAttribs1fvNV (GLuint index, GLsizei count, const GLfloat * v) { return _glVertexAttribs1fvNV_(index, count, v); };
inline void glVertexAttribs1svNV (GLuint index, GLsizei count, const GLshort * v) { return _glVertexAttribs1svNV_(index, count, v); };
inline void glVertexAttribs2dvNV (GLuint index, GLsizei count, const GLdouble * v) { return _glVertexAttribs2dvNV_(index, count, v); };
inline void glVertexAttribs2fvNV (GLuint index, GLsizei count, const GLfloat * v) { return _glVertexAttribs2fvNV_(index, count, v); };
inline void glVertexAttribs2svNV (GLuint index, GLsizei count, const GLshort * v) { return _glVertexAttribs2svNV_(index, count, v); };
inline void glVertexAttribs3dvNV (GLuint index, GLsizei count, const GLdouble * v) { return _glVertexAttribs3dvNV_(index, count, v); };
inline void glVertexAttribs3fvNV (GLuint index, GLsizei count, const GLfloat * v) { return _glVertexAttribs3fvNV_(index, count, v); };
inline void glVertexAttribs3svNV (GLuint index, GLsizei count, const GLshort * v) { return _glVertexAttribs3svNV_(index, count, v); };
inline void glVertexAttribs4dvNV (GLuint index, GLsizei count, const GLdouble * v) { return _glVertexAttribs4dvNV_(index, count, v); };
inline void glVertexAttribs4fvNV (GLuint index, GLsizei count, const GLfloat * v) { return _glVertexAttribs4fvNV_(index, count, v); };
inline void glVertexAttribs4svNV (GLuint index, GLsizei count, const GLshort * v) { return _glVertexAttribs4svNV_(index, count, v); };
inline void glVertexAttribs4ubvNV (GLuint index, GLsizei count, const GLubyte * v) { return _glVertexAttribs4ubvNV_(index, count, v); };
#endif //GL_NV_vertex_program

// GL_NV_vertex_program1_1

// GL_NV_vertex_program2

// GL_NV_vertex_program2_option

// GL_NV_vertex_program3

#ifndef GL_NV_vertex_program4

// Defines
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV 0x88FD 

// functions typedefs
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI1IEXT_PROC) (GLuint index, GLint x);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI2IEXT_PROC) (GLuint index, GLint x, GLint y);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI3IEXT_PROC) (GLuint index, GLint x, GLint y, GLint z);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI4IEXT_PROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI1UIEXT_PROC) (GLuint index, GLuint x);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI2UIEXT_PROC) (GLuint index, GLuint x, GLuint y);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI3UIEXT_PROC) (GLuint index, GLuint x, GLuint y, GLuint z);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI4UIEXT_PROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI1IVEXT_PROC) (GLuint index, const GLint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI2IVEXT_PROC) (GLuint index, const GLint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI3IVEXT_PROC) (GLuint index, const GLint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI4IVEXT_PROC) (GLuint index, const GLint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI1UIVEXT_PROC) (GLuint index, const GLuint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI2UIVEXT_PROC) (GLuint index, const GLuint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI3UIVEXT_PROC) (GLuint index, const GLuint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI4UIVEXT_PROC) (GLuint index, const GLuint * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI4BVEXT_PROC) (GLuint index, const GLbyte * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI4SVEXT_PROC) (GLuint index, const GLshort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI4UBVEXT_PROC) (GLuint index, const GLubyte * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBI4USVEXT_PROC) (GLuint index, const GLushort * v);
typedef void (APIENTRYP PFN_GLVERTEXATTRIBIPOINTEREXT_PROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBIIVEXT_PROC) (GLuint index, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETVERTEXATTRIBIUIVEXT_PROC) (GLuint index, GLenum pname, GLuint * params);

// functions typedefs
GL_FUNC_DEF PFN_GLVERTEXATTRIBI1IEXT_PROC _glVertexAttribI1iEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI2IEXT_PROC _glVertexAttribI2iEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI3IEXT_PROC _glVertexAttribI3iEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI4IEXT_PROC _glVertexAttribI4iEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI1UIEXT_PROC _glVertexAttribI1uiEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI2UIEXT_PROC _glVertexAttribI2uiEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI3UIEXT_PROC _glVertexAttribI3uiEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI4UIEXT_PROC _glVertexAttribI4uiEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI1IVEXT_PROC _glVertexAttribI1ivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI2IVEXT_PROC _glVertexAttribI2ivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI3IVEXT_PROC _glVertexAttribI3ivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI4IVEXT_PROC _glVertexAttribI4ivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI1UIVEXT_PROC _glVertexAttribI1uivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI2UIVEXT_PROC _glVertexAttribI2uivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI3UIVEXT_PROC _glVertexAttribI3uivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI4UIVEXT_PROC _glVertexAttribI4uivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI4BVEXT_PROC _glVertexAttribI4bvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI4SVEXT_PROC _glVertexAttribI4svEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI4UBVEXT_PROC _glVertexAttribI4ubvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBI4USVEXT_PROC _glVertexAttribI4usvEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVERTEXATTRIBIPOINTEREXT_PROC _glVertexAttribIPointerEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBIIVEXT_PROC _glGetVertexAttribIivEXT_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVERTEXATTRIBIUIVEXT_PROC _glGetVertexAttribIuivEXT_ GL_FUNC_DEF2;

// functions inline wrap
inline void glVertexAttribI1iEXT (GLuint index, GLint x) { return _glVertexAttribI1iEXT_(index, x); };
inline void glVertexAttribI2iEXT (GLuint index, GLint x, GLint y) { return _glVertexAttribI2iEXT_(index, x, y); };
inline void glVertexAttribI3iEXT (GLuint index, GLint x, GLint y, GLint z) { return _glVertexAttribI3iEXT_(index, x, y, z); };
inline void glVertexAttribI4iEXT (GLuint index, GLint x, GLint y, GLint z, GLint w) { return _glVertexAttribI4iEXT_(index, x, y, z, w); };
inline void glVertexAttribI1uiEXT (GLuint index, GLuint x) { return _glVertexAttribI1uiEXT_(index, x); };
inline void glVertexAttribI2uiEXT (GLuint index, GLuint x, GLuint y) { return _glVertexAttribI2uiEXT_(index, x, y); };
inline void glVertexAttribI3uiEXT (GLuint index, GLuint x, GLuint y, GLuint z) { return _glVertexAttribI3uiEXT_(index, x, y, z); };
inline void glVertexAttribI4uiEXT (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { return _glVertexAttribI4uiEXT_(index, x, y, z, w); };
inline void glVertexAttribI1ivEXT (GLuint index, const GLint * v) { return _glVertexAttribI1ivEXT_(index, v); };
inline void glVertexAttribI2ivEXT (GLuint index, const GLint * v) { return _glVertexAttribI2ivEXT_(index, v); };
inline void glVertexAttribI3ivEXT (GLuint index, const GLint * v) { return _glVertexAttribI3ivEXT_(index, v); };
inline void glVertexAttribI4ivEXT (GLuint index, const GLint * v) { return _glVertexAttribI4ivEXT_(index, v); };
inline void glVertexAttribI1uivEXT (GLuint index, const GLuint * v) { return _glVertexAttribI1uivEXT_(index, v); };
inline void glVertexAttribI2uivEXT (GLuint index, const GLuint * v) { return _glVertexAttribI2uivEXT_(index, v); };
inline void glVertexAttribI3uivEXT (GLuint index, const GLuint * v) { return _glVertexAttribI3uivEXT_(index, v); };
inline void glVertexAttribI4uivEXT (GLuint index, const GLuint * v) { return _glVertexAttribI4uivEXT_(index, v); };
inline void glVertexAttribI4bvEXT (GLuint index, const GLbyte * v) { return _glVertexAttribI4bvEXT_(index, v); };
inline void glVertexAttribI4svEXT (GLuint index, const GLshort * v) { return _glVertexAttribI4svEXT_(index, v); };
inline void glVertexAttribI4ubvEXT (GLuint index, const GLubyte * v) { return _glVertexAttribI4ubvEXT_(index, v); };
inline void glVertexAttribI4usvEXT (GLuint index, const GLushort * v) { return _glVertexAttribI4usvEXT_(index, v); };
inline void glVertexAttribIPointerEXT (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { return _glVertexAttribIPointerEXT_(index, size, type, stride, pointer); };
inline void glGetVertexAttribIivEXT (GLuint index, GLenum pname, GLint * params) { return _glGetVertexAttribIivEXT_(index, pname, params); };
inline void glGetVertexAttribIuivEXT (GLuint index, GLenum pname, GLuint * params) { return _glGetVertexAttribIuivEXT_(index, pname, params); };
#endif //GL_NV_vertex_program4

#ifndef GL_NV_video_capture

// Defines
#define GL_VIDEO_BUFFER_NV                0x9020 
#define GL_VIDEO_BUFFER_BINDING_NV        0x9021 
#define GL_FIELD_UPPER_NV                 0x9022 
#define GL_FIELD_LOWER_NV                 0x9023 
#define GL_NUM_VIDEO_CAPTURE_STREAMS_NV   0x9024 
#define GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV 0x9025 
#define GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV 0x9026 
#define GL_LAST_VIDEO_CAPTURE_STATUS_NV   0x9027 
#define GL_VIDEO_BUFFER_PITCH_NV          0x9028 
#define GL_VIDEO_COLOR_CONVERSION_MATRIX_NV 0x9029 
#define GL_VIDEO_COLOR_CONVERSION_MAX_NV  0x902A 
#define GL_VIDEO_COLOR_CONVERSION_MIN_NV  0x902B 
#define GL_VIDEO_COLOR_CONVERSION_OFFSET_NV 0x902C 
#define GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV 0x902D 
#define GL_PARTIAL_SUCCESS_NV             0x902E 
#define GL_SUCCESS_NV                     0x902F 
#define GL_FAILURE_NV                     0x9030 
#define GL_YCBYCR8_422_NV                 0x9031 
#define GL_YCBAYCR8A_4224_NV              0x9032 
#define GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV  0x9033 
#define GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV 0x9034 
#define GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV  0x9035 
#define GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV 0x9036 
#define GL_Z4Y12Z4CB12Z4CR12_444_NV       0x9037 
#define GL_VIDEO_CAPTURE_FRAME_WIDTH_NV   0x9038 
#define GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV  0x9039 
#define GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV 0x903A 
#define GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV 0x903B 
#define GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV 0x903C 

// functions typedefs
typedef void (APIENTRYP PFN_GLBEGINVIDEOCAPTURENV_PROC) (GLuint video_capture_slot);
typedef void (APIENTRYP PFN_GLBINDVIDEOCAPTURESTREAMBUFFERNV_PROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
typedef void (APIENTRYP PFN_GLBINDVIDEOCAPTURESTREAMTEXTURENV_PROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
typedef void (APIENTRYP PFN_GLENDVIDEOCAPTURENV_PROC) (GLuint video_capture_slot);
typedef void (APIENTRYP PFN_GLGETVIDEOCAPTUREIVNV_PROC) (GLuint video_capture_slot, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETVIDEOCAPTURESTREAMIVNV_PROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETVIDEOCAPTURESTREAMFVNV_PROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETVIDEOCAPTURESTREAMDVNV_PROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble * params);
typedef GLenum (APIENTRYP PFN_GLVIDEOCAPTURENV_PROC) (GLuint video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time);
typedef void (APIENTRYP PFN_GLVIDEOCAPTURESTREAMPARAMETERIVNV_PROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLVIDEOCAPTURESTREAMPARAMETERFVNV_PROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLVIDEOCAPTURESTREAMPARAMETERDVNV_PROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble * params);

// functions typedefs
GL_FUNC_DEF PFN_GLBEGINVIDEOCAPTURENV_PROC _glBeginVideoCaptureNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDVIDEOCAPTURESTREAMBUFFERNV_PROC _glBindVideoCaptureStreamBufferNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLBINDVIDEOCAPTURESTREAMTEXTURENV_PROC _glBindVideoCaptureStreamTextureNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLENDVIDEOCAPTURENV_PROC _glEndVideoCaptureNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVIDEOCAPTUREIVNV_PROC _glGetVideoCaptureivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVIDEOCAPTURESTREAMIVNV_PROC _glGetVideoCaptureStreamivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVIDEOCAPTURESTREAMFVNV_PROC _glGetVideoCaptureStreamfvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETVIDEOCAPTURESTREAMDVNV_PROC _glGetVideoCaptureStreamdvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVIDEOCAPTURENV_PROC _glVideoCaptureNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVIDEOCAPTURESTREAMPARAMETERIVNV_PROC _glVideoCaptureStreamParameterivNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVIDEOCAPTURESTREAMPARAMETERFVNV_PROC _glVideoCaptureStreamParameterfvNV_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLVIDEOCAPTURESTREAMPARAMETERDVNV_PROC _glVideoCaptureStreamParameterdvNV_ GL_FUNC_DEF2;

// functions inline wrap
inline void glBeginVideoCaptureNV (GLuint video_capture_slot) { return _glBeginVideoCaptureNV_(video_capture_slot); };
inline void glBindVideoCaptureStreamBufferNV (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset) { return _glBindVideoCaptureStreamBufferNV_(video_capture_slot, stream, frame_region, offset); };
inline void glBindVideoCaptureStreamTextureNV (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture) { return _glBindVideoCaptureStreamTextureNV_(video_capture_slot, stream, frame_region, target, texture); };
inline void glEndVideoCaptureNV (GLuint video_capture_slot) { return _glEndVideoCaptureNV_(video_capture_slot); };
inline void glGetVideoCaptureivNV (GLuint video_capture_slot, GLenum pname, GLint * params) { return _glGetVideoCaptureivNV_(video_capture_slot, pname, params); };
inline void glGetVideoCaptureStreamivNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint * params) { return _glGetVideoCaptureStreamivNV_(video_capture_slot, stream, pname, params); };
inline void glGetVideoCaptureStreamfvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat * params) { return _glGetVideoCaptureStreamfvNV_(video_capture_slot, stream, pname, params); };
inline void glGetVideoCaptureStreamdvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble * params) { return _glGetVideoCaptureStreamdvNV_(video_capture_slot, stream, pname, params); };
inline GLenum glVideoCaptureNV (GLuint video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time) { return _glVideoCaptureNV_(video_capture_slot, sequence_num, capture_time); };
inline void glVideoCaptureStreamParameterivNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint * params) { return _glVideoCaptureStreamParameterivNV_(video_capture_slot, stream, pname, params); };
inline void glVideoCaptureStreamParameterfvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat * params) { return _glVideoCaptureStreamParameterfvNV_(video_capture_slot, stream, pname, params); };
inline void glVideoCaptureStreamParameterdvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble * params) { return _glVideoCaptureStreamParameterdvNV_(video_capture_slot, stream, pname, params); };
#endif //GL_NV_video_capture

#ifndef GL_OML_interlace

// Defines
#define GL_INTERLACE_OML                  0x8980 
#define GL_INTERLACE_READ_OML             0x8981 
#endif //GL_OML_interlace

#ifndef GL_OML_resample

// Defines
#define GL_PACK_RESAMPLE_OML              0x8984 
#define GL_UNPACK_RESAMPLE_OML            0x8985 
#define GL_RESAMPLE_REPLICATE_OML         0x8986 
#define GL_RESAMPLE_ZERO_FILL_OML         0x8987 
#define GL_RESAMPLE_AVERAGE_OML           0x8988 
#define GL_RESAMPLE_DECIMATE_OML          0x8989 
#endif //GL_OML_resample

#ifndef GL_OML_subsample

// Defines
#define GL_FORMAT_SUBSAMPLE_24_24_OML     0x8982 
#define GL_FORMAT_SUBSAMPLE_244_244_OML   0x8983 
#endif //GL_OML_subsample

#ifndef GL_PGI_misc_hints

// Defines
#define GL_PREFER_DOUBLEBUFFER_HINT_PGI   0x1A1F8 
#define GL_CONSERVE_MEMORY_HINT_PGI       0x1A1FD 
#define GL_RECLAIM_MEMORY_HINT_PGI        0x1A1FE 
#define GL_NATIVE_GRAPHICS_HANDLE_PGI     0x1A202 
#define GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI 0x1A203 
#define GL_NATIVE_GRAPHICS_END_HINT_PGI   0x1A204 
#define GL_ALWAYS_FAST_HINT_PGI           0x1A20C 
#define GL_ALWAYS_SOFT_HINT_PGI           0x1A20D 
#define GL_ALLOW_DRAW_OBJ_HINT_PGI        0x1A20E 
#define GL_ALLOW_DRAW_WIN_HINT_PGI        0x1A20F 
#define GL_ALLOW_DRAW_FRG_HINT_PGI        0x1A210 
#define GL_ALLOW_DRAW_MEM_HINT_PGI        0x1A211 
#define GL_STRICT_DEPTHFUNC_HINT_PGI      0x1A216 
#define GL_STRICT_LIGHTING_HINT_PGI       0x1A217 
#define GL_STRICT_SCISSOR_HINT_PGI        0x1A218 
#define GL_FULL_STIPPLE_HINT_PGI          0x1A219 
#define GL_CLIP_NEAR_HINT_PGI             0x1A220 
#define GL_CLIP_FAR_HINT_PGI              0x1A221 
#define GL_WIDE_LINE_HINT_PGI             0x1A222 
#define GL_BACK_NORMALS_HINT_PGI          0x1A223 

// functions typedefs
typedef void (APIENTRYP PFN_GLHINTPGI_PROC) (GLenum target, GLint mode);

// functions typedefs
GL_FUNC_DEF PFN_GLHINTPGI_PROC _glHintPGI_ GL_FUNC_DEF2;

// functions inline wrap
inline void glHintPGI (GLenum target, GLint mode) { return _glHintPGI_(target, mode); };
#endif //GL_PGI_misc_hints

#ifndef GL_PGI_vertex_hints

// Defines
#define GL_VERTEX_DATA_HINT_PGI           0x1A22A 
#define GL_VERTEX_CONSISTENT_HINT_PGI     0x1A22B 
#define GL_MATERIAL_SIDE_HINT_PGI         0x1A22C 
#define GL_MAX_VERTEX_HINT_PGI            0x1A22D 
#define GL_COLOR3_BIT_PGI                 0x00010000 
#define GL_COLOR4_BIT_PGI                 0x00020000 
#define GL_EDGEFLAG_BIT_PGI               0x00040000 
#define GL_INDEX_BIT_PGI                  0x00080000 
#define GL_MAT_AMBIENT_BIT_PGI            0x00100000 
#define GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI 0x00200000 
#define GL_MAT_DIFFUSE_BIT_PGI            0x00400000 
#define GL_MAT_EMISSION_BIT_PGI           0x00800000 
#define GL_MAT_COLOR_INDEXES_BIT_PGI      0x01000000 
#define GL_MAT_SHININESS_BIT_PGI          0x02000000 
#define GL_MAT_SPECULAR_BIT_PGI           0x04000000 
#define GL_NORMAL_BIT_PGI                 0x08000000 
#define GL_TEXCOORD1_BIT_PGI              0x10000000 
#define GL_TEXCOORD2_BIT_PGI              0x20000000 
#define GL_TEXCOORD3_BIT_PGI              0x40000000 
#define GL_TEXCOORD4_BIT_PGI              0x80000000 
#define GL_VERTEX23_BIT_PGI               0x00000004 
#define GL_VERTEX4_BIT_PGI                0x00000008 
#endif //GL_PGI_vertex_hints

#ifndef GL_REND_screen_coordinates

// Defines
#define GL_SCREEN_COORDINATES_REND        0x8490 
#define GL_INVERTED_SCREEN_W_REND         0x8491 
#endif //GL_REND_screen_coordinates

#ifndef GL_S3_s3tc

// Defines
#define GL_RGB_S3TC                       0x83A0 
#define GL_RGB4_S3TC                      0x83A1 
#define GL_RGBA_S3TC                      0x83A2 
#define GL_RGBA4_S3TC                     0x83A3 
#define GL_RGBA_DXT5_S3TC                 0x83A4 
#define GL_RGBA4_DXT5_S3TC                0x83A5 
#endif //GL_S3_s3tc

#ifndef GL_SGIS_detail_texture

// Defines
#define GL_DETAIL_TEXTURE_2D_SGIS         0x8095 
#define GL_DETAIL_TEXTURE_2D_BINDING_SGIS 0x8096 
#define GL_LINEAR_DETAIL_SGIS             0x8097 
#define GL_LINEAR_DETAIL_ALPHA_SGIS       0x8098 
#define GL_LINEAR_DETAIL_COLOR_SGIS       0x8099 
#define GL_DETAIL_TEXTURE_LEVEL_SGIS      0x809A 
#define GL_DETAIL_TEXTURE_MODE_SGIS       0x809B 
#define GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS 0x809C 

// functions typedefs
typedef void (APIENTRYP PFN_GLDETAILTEXFUNCSGIS_PROC) (GLenum target, GLsizei n, const GLfloat * points);
typedef void (APIENTRYP PFN_GLGETDETAILTEXFUNCSGIS_PROC) (GLenum target, GLfloat * points);

// functions typedefs
GL_FUNC_DEF PFN_GLDETAILTEXFUNCSGIS_PROC _glDetailTexFuncSGIS_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETDETAILTEXFUNCSGIS_PROC _glGetDetailTexFuncSGIS_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDetailTexFuncSGIS (GLenum target, GLsizei n, const GLfloat * points) { return _glDetailTexFuncSGIS_(target, n, points); };
inline void glGetDetailTexFuncSGIS (GLenum target, GLfloat * points) { return _glGetDetailTexFuncSGIS_(target, points); };
#endif //GL_SGIS_detail_texture

#ifndef GL_SGIS_fog_function

// Defines
#define GL_FOG_FUNC_SGIS                  0x812A 
#define GL_FOG_FUNC_POINTS_SGIS           0x812B 
#define GL_MAX_FOG_FUNC_POINTS_SGIS       0x812C 

// functions typedefs
typedef void (APIENTRYP PFN_GLFOGFUNCSGIS_PROC) (GLsizei n, const GLfloat * points);
typedef void (APIENTRYP PFN_GLGETFOGFUNCSGIS_PROC) (GLfloat * points);

// functions typedefs
GL_FUNC_DEF PFN_GLFOGFUNCSGIS_PROC _glFogFuncSGIS_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFOGFUNCSGIS_PROC _glGetFogFuncSGIS_ GL_FUNC_DEF2;

// functions inline wrap
inline void glFogFuncSGIS (GLsizei n, const GLfloat * points) { return _glFogFuncSGIS_(n, points); };
inline void glGetFogFuncSGIS (GLfloat * points) { return _glGetFogFuncSGIS_(points); };
#endif //GL_SGIS_fog_function

#ifndef GL_SGIS_generate_mipmap

// Defines
#define GL_GENERATE_MIPMAP_SGIS           0x8191 
#define GL_GENERATE_MIPMAP_HINT_SGIS      0x8192 
#endif //GL_SGIS_generate_mipmap

#ifndef GL_SGIS_multisample

// Defines
#define GL_MULTISAMPLE_SGIS               0x809D 
#define GL_SAMPLE_ALPHA_TO_MASK_SGIS      0x809E 
#define GL_SAMPLE_ALPHA_TO_ONE_SGIS       0x809F 
#define GL_SAMPLE_MASK_SGIS               0x80A0 
#define GL_1PASS_SGIS                     0x80A1 
#define GL_2PASS_0_SGIS                   0x80A2 
#define GL_2PASS_1_SGIS                   0x80A3 
#define GL_4PASS_0_SGIS                   0x80A4 
#define GL_4PASS_1_SGIS                   0x80A5 
#define GL_4PASS_2_SGIS                   0x80A6 
#define GL_4PASS_3_SGIS                   0x80A7 
#define GL_SAMPLE_BUFFERS_SGIS            0x80A8 
#define GL_SAMPLES_SGIS                   0x80A9 
#define GL_SAMPLE_MASK_VALUE_SGIS         0x80AA 
#define GL_SAMPLE_MASK_INVERT_SGIS        0x80AB 
#define GL_SAMPLE_PATTERN_SGIS            0x80AC 

// functions typedefs
typedef void (APIENTRYP PFN_GLSAMPLEMASKSGIS_PROC) (GLclampf value, GLboolean invert);
typedef void (APIENTRYP PFN_GLSAMPLEPATTERNSGIS_PROC) (GLenum pattern);

// functions typedefs
GL_FUNC_DEF PFN_GLSAMPLEMASKSGIS_PROC _glSampleMaskSGIS_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSAMPLEPATTERNSGIS_PROC _glSamplePatternSGIS_ GL_FUNC_DEF2;

// functions inline wrap
inline void glSampleMaskSGIS (GLclampf value, GLboolean invert) { return _glSampleMaskSGIS_(value, invert); };
inline void glSamplePatternSGIS (GLenum pattern) { return _glSamplePatternSGIS_(pattern); };
#endif //GL_SGIS_multisample

#ifndef GL_SGIS_pixel_texture

// Defines
#define GL_PIXEL_TEXTURE_SGIS             0x8353 
#define GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS 0x8354 
#define GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS 0x8355 
#define GL_PIXEL_GROUP_COLOR_SGIS         0x8356 

// functions typedefs
typedef void (APIENTRYP PFN_GLPIXELTEXGENPARAMETERISGIS_PROC) (GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLPIXELTEXGENPARAMETERIVSGIS_PROC) (GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLPIXELTEXGENPARAMETERFSGIS_PROC) (GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLPIXELTEXGENPARAMETERFVSGIS_PROC) (GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLGETPIXELTEXGENPARAMETERIVSGIS_PROC) (GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETPIXELTEXGENPARAMETERFVSGIS_PROC) (GLenum pname, GLfloat * params);

// functions typedefs
GL_FUNC_DEF PFN_GLPIXELTEXGENPARAMETERISGIS_PROC _glPixelTexGenParameteriSGIS_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPIXELTEXGENPARAMETERIVSGIS_PROC _glPixelTexGenParameterivSGIS_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPIXELTEXGENPARAMETERFSGIS_PROC _glPixelTexGenParameterfSGIS_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPIXELTEXGENPARAMETERFVSGIS_PROC _glPixelTexGenParameterfvSGIS_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPIXELTEXGENPARAMETERIVSGIS_PROC _glGetPixelTexGenParameterivSGIS_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETPIXELTEXGENPARAMETERFVSGIS_PROC _glGetPixelTexGenParameterfvSGIS_ GL_FUNC_DEF2;

// functions inline wrap
inline void glPixelTexGenParameteriSGIS (GLenum pname, GLint param) { return _glPixelTexGenParameteriSGIS_(pname, param); };
inline void glPixelTexGenParameterivSGIS (GLenum pname, const GLint * params) { return _glPixelTexGenParameterivSGIS_(pname, params); };
inline void glPixelTexGenParameterfSGIS (GLenum pname, GLfloat param) { return _glPixelTexGenParameterfSGIS_(pname, param); };
inline void glPixelTexGenParameterfvSGIS (GLenum pname, const GLfloat * params) { return _glPixelTexGenParameterfvSGIS_(pname, params); };
inline void glGetPixelTexGenParameterivSGIS (GLenum pname, GLint * params) { return _glGetPixelTexGenParameterivSGIS_(pname, params); };
inline void glGetPixelTexGenParameterfvSGIS (GLenum pname, GLfloat * params) { return _glGetPixelTexGenParameterfvSGIS_(pname, params); };
#endif //GL_SGIS_pixel_texture

#ifndef GL_SGIS_point_line_texgen

// Defines
#define GL_EYE_DISTANCE_TO_POINT_SGIS     0x81F0 
#define GL_OBJECT_DISTANCE_TO_POINT_SGIS  0x81F1 
#define GL_EYE_DISTANCE_TO_LINE_SGIS      0x81F2 
#define GL_OBJECT_DISTANCE_TO_LINE_SGIS   0x81F3 
#define GL_EYE_POINT_SGIS                 0x81F4 
#define GL_OBJECT_POINT_SGIS              0x81F5 
#define GL_EYE_LINE_SGIS                  0x81F6 
#define GL_OBJECT_LINE_SGIS               0x81F7 
#endif //GL_SGIS_point_line_texgen

#ifndef GL_SGIS_point_parameters

// Defines
#define GL_POINT_SIZE_MIN_SGIS            0x8126 
#define GL_POINT_SIZE_MAX_SGIS            0x8127 
#define GL_POINT_FADE_THRESHOLD_SIZE_SGIS 0x8128 
#define GL_DISTANCE_ATTENUATION_SGIS      0x8129 

// functions typedefs
typedef void (APIENTRYP PFN_GLPOINTPARAMETERFSGIS_PROC) (GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLPOINTPARAMETERFVSGIS_PROC) (GLenum pname, const GLfloat * params);

// functions typedefs
GL_FUNC_DEF PFN_GLPOINTPARAMETERFSGIS_PROC _glPointParameterfSGIS_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOINTPARAMETERFVSGIS_PROC _glPointParameterfvSGIS_ GL_FUNC_DEF2;

// functions inline wrap
inline void glPointParameterfSGIS (GLenum pname, GLfloat param) { return _glPointParameterfSGIS_(pname, param); };
inline void glPointParameterfvSGIS (GLenum pname, const GLfloat * params) { return _glPointParameterfvSGIS_(pname, params); };
#endif //GL_SGIS_point_parameters

#ifndef GL_SGIS_sharpen_texture

// Defines
#define GL_LINEAR_SHARPEN_SGIS            0x80AD 
#define GL_LINEAR_SHARPEN_ALPHA_SGIS      0x80AE 
#define GL_LINEAR_SHARPEN_COLOR_SGIS      0x80AF 
#define GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS 0x80B0 

// functions typedefs
typedef void (APIENTRYP PFN_GLSHARPENTEXFUNCSGIS_PROC) (GLenum target, GLsizei n, const GLfloat * points);
typedef void (APIENTRYP PFN_GLGETSHARPENTEXFUNCSGIS_PROC) (GLenum target, GLfloat * points);

// functions typedefs
GL_FUNC_DEF PFN_GLSHARPENTEXFUNCSGIS_PROC _glSharpenTexFuncSGIS_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETSHARPENTEXFUNCSGIS_PROC _glGetSharpenTexFuncSGIS_ GL_FUNC_DEF2;

// functions inline wrap
inline void glSharpenTexFuncSGIS (GLenum target, GLsizei n, const GLfloat * points) { return _glSharpenTexFuncSGIS_(target, n, points); };
inline void glGetSharpenTexFuncSGIS (GLenum target, GLfloat * points) { return _glGetSharpenTexFuncSGIS_(target, points); };
#endif //GL_SGIS_sharpen_texture

#ifndef GL_SGIS_texture4D

// Defines
#define GL_PACK_SKIP_VOLUMES_SGIS         0x8130 
#define GL_PACK_IMAGE_DEPTH_SGIS          0x8131 
#define GL_UNPACK_SKIP_VOLUMES_SGIS       0x8132 
#define GL_UNPACK_IMAGE_DEPTH_SGIS        0x8133 
#define GL_TEXTURE_4D_SGIS                0x8134 
#define GL_PROXY_TEXTURE_4D_SGIS          0x8135 
#define GL_TEXTURE_4DSIZE_SGIS            0x8136 
#define GL_TEXTURE_WRAP_Q_SGIS            0x8137 
#define GL_MAX_4D_TEXTURE_SIZE_SGIS       0x8138 
#define GL_TEXTURE_4D_BINDING_SGIS        0x814F 

// functions typedefs
typedef void (APIENTRYP PFN_GLTEXIMAGE4DSGIS_PROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (APIENTRYP PFN_GLTEXSUBIMAGE4DSGIS_PROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void * pixels);

// functions typedefs
GL_FUNC_DEF PFN_GLTEXIMAGE4DSGIS_PROC _glTexImage4DSGIS_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXSUBIMAGE4DSGIS_PROC _glTexSubImage4DSGIS_ GL_FUNC_DEF2;

// functions inline wrap
inline void glTexImage4DSGIS (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void * pixels) { return _glTexImage4DSGIS_(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels); };
inline void glTexSubImage4DSGIS (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void * pixels) { return _glTexSubImage4DSGIS_(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels); };
#endif //GL_SGIS_texture4D

#ifndef GL_SGIS_texture_border_clamp

// Defines
#define GL_CLAMP_TO_BORDER_SGIS           0x812D 
#endif //GL_SGIS_texture_border_clamp

#ifndef GL_SGIS_texture_color_mask

// Defines
#define GL_TEXTURE_COLOR_WRITEMASK_SGIS   0x81EF 

// functions typedefs
typedef void (APIENTRYP PFN_GLTEXTURECOLORMASKSGIS_PROC) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);

// functions typedefs
GL_FUNC_DEF PFN_GLTEXTURECOLORMASKSGIS_PROC _glTextureColorMaskSGIS_ GL_FUNC_DEF2;

// functions inline wrap
inline void glTextureColorMaskSGIS (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) { return _glTextureColorMaskSGIS_(red, green, blue, alpha); };
#endif //GL_SGIS_texture_color_mask

#ifndef GL_SGIS_texture_edge_clamp

// Defines
#define GL_CLAMP_TO_EDGE_SGIS             0x812F 
#endif //GL_SGIS_texture_edge_clamp

#ifndef GL_SGIS_texture_filter4

// Defines
#define GL_FILTER4_SGIS                   0x8146 
#define GL_TEXTURE_FILTER4_SIZE_SGIS      0x8147 

// functions typedefs
typedef void (APIENTRYP PFN_GLGETTEXFILTERFUNCSGIS_PROC) (GLenum target, GLenum filter, GLfloat * weights);
typedef void (APIENTRYP PFN_GLTEXFILTERFUNCSGIS_PROC) (GLenum target, GLenum filter, GLsizei n, const GLfloat * weights);

// functions typedefs
GL_FUNC_DEF PFN_GLGETTEXFILTERFUNCSGIS_PROC _glGetTexFilterFuncSGIS_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXFILTERFUNCSGIS_PROC _glTexFilterFuncSGIS_ GL_FUNC_DEF2;

// functions inline wrap
inline void glGetTexFilterFuncSGIS (GLenum target, GLenum filter, GLfloat * weights) { return _glGetTexFilterFuncSGIS_(target, filter, weights); };
inline void glTexFilterFuncSGIS (GLenum target, GLenum filter, GLsizei n, const GLfloat * weights) { return _glTexFilterFuncSGIS_(target, filter, n, weights); };
#endif //GL_SGIS_texture_filter4

#ifndef GL_SGIS_texture_lod

// Defines
#define GL_TEXTURE_MIN_LOD_SGIS           0x813A 
#define GL_TEXTURE_MAX_LOD_SGIS           0x813B 
#define GL_TEXTURE_BASE_LEVEL_SGIS        0x813C 
#define GL_TEXTURE_MAX_LEVEL_SGIS         0x813D 
#endif //GL_SGIS_texture_lod

#ifndef GL_SGIS_texture_select

// Defines
#define GL_DUAL_ALPHA4_SGIS               0x8110 
#define GL_DUAL_ALPHA8_SGIS               0x8111 
#define GL_DUAL_ALPHA12_SGIS              0x8112 
#define GL_DUAL_ALPHA16_SGIS              0x8113 
#define GL_DUAL_LUMINANCE4_SGIS           0x8114 
#define GL_DUAL_LUMINANCE8_SGIS           0x8115 
#define GL_DUAL_LUMINANCE12_SGIS          0x8116 
#define GL_DUAL_LUMINANCE16_SGIS          0x8117 
#define GL_DUAL_INTENSITY4_SGIS           0x8118 
#define GL_DUAL_INTENSITY8_SGIS           0x8119 
#define GL_DUAL_INTENSITY12_SGIS          0x811A 
#define GL_DUAL_INTENSITY16_SGIS          0x811B 
#define GL_DUAL_LUMINANCE_ALPHA4_SGIS     0x811C 
#define GL_DUAL_LUMINANCE_ALPHA8_SGIS     0x811D 
#define GL_QUAD_ALPHA4_SGIS               0x811E 
#define GL_QUAD_ALPHA8_SGIS               0x811F 
#define GL_QUAD_LUMINANCE4_SGIS           0x8120 
#define GL_QUAD_LUMINANCE8_SGIS           0x8121 
#define GL_QUAD_INTENSITY4_SGIS           0x8122 
#define GL_QUAD_INTENSITY8_SGIS           0x8123 
#define GL_DUAL_TEXTURE_SELECT_SGIS       0x8124 
#define GL_QUAD_TEXTURE_SELECT_SGIS       0x8125 
#endif //GL_SGIS_texture_select

#ifndef GL_SGIX_async

// Defines
#define GL_ASYNC_MARKER_SGIX              0x8329 

// functions typedefs
typedef void (APIENTRYP PFN_GLASYNCMARKERSGIX_PROC) (GLuint marker);
typedef GLint (APIENTRYP PFN_GLFINISHASYNCSGIX_PROC) (GLuint * markerp);
typedef GLint (APIENTRYP PFN_GLPOLLASYNCSGIX_PROC) (GLuint * markerp);
typedef GLuint (APIENTRYP PFN_GLGENASYNCMARKERSSGIX_PROC) (GLsizei range);
typedef void (APIENTRYP PFN_GLDELETEASYNCMARKERSSGIX_PROC) (GLuint marker, GLsizei range);
typedef GLboolean (APIENTRYP PFN_GLISASYNCMARKERSGIX_PROC) (GLuint marker);

// functions typedefs
GL_FUNC_DEF PFN_GLASYNCMARKERSGIX_PROC _glAsyncMarkerSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFINISHASYNCSGIX_PROC _glFinishAsyncSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOLLASYNCSGIX_PROC _glPollAsyncSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGENASYNCMARKERSSGIX_PROC _glGenAsyncMarkersSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDELETEASYNCMARKERSSGIX_PROC _glDeleteAsyncMarkersSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLISASYNCMARKERSGIX_PROC _glIsAsyncMarkerSGIX_ GL_FUNC_DEF2;

// functions inline wrap
inline void glAsyncMarkerSGIX (GLuint marker) { return _glAsyncMarkerSGIX_(marker); };
inline GLint glFinishAsyncSGIX (GLuint * markerp) { return _glFinishAsyncSGIX_(markerp); };
inline GLint glPollAsyncSGIX (GLuint * markerp) { return _glPollAsyncSGIX_(markerp); };
inline GLuint glGenAsyncMarkersSGIX (GLsizei range) { return _glGenAsyncMarkersSGIX_(range); };
inline void glDeleteAsyncMarkersSGIX (GLuint marker, GLsizei range) { return _glDeleteAsyncMarkersSGIX_(marker, range); };
inline GLboolean glIsAsyncMarkerSGIX (GLuint marker) { return _glIsAsyncMarkerSGIX_(marker); };
#endif //GL_SGIX_async

#ifndef GL_SGIX_async_histogram

// Defines
#define GL_ASYNC_HISTOGRAM_SGIX           0x832C 
#define GL_MAX_ASYNC_HISTOGRAM_SGIX       0x832D 
#endif //GL_SGIX_async_histogram

#ifndef GL_SGIX_async_pixel

// Defines
#define GL_ASYNC_TEX_IMAGE_SGIX           0x835C 
#define GL_ASYNC_DRAW_PIXELS_SGIX         0x835D 
#define GL_ASYNC_READ_PIXELS_SGIX         0x835E 
#define GL_MAX_ASYNC_TEX_IMAGE_SGIX       0x835F 
#define GL_MAX_ASYNC_DRAW_PIXELS_SGIX     0x8360 
#define GL_MAX_ASYNC_READ_PIXELS_SGIX     0x8361 
#endif //GL_SGIX_async_pixel

#ifndef GL_SGIX_blend_alpha_minmax

// Defines
#define GL_ALPHA_MIN_SGIX                 0x8320 
#define GL_ALPHA_MAX_SGIX                 0x8321 
#endif //GL_SGIX_blend_alpha_minmax

#ifndef GL_SGIX_calligraphic_fragment

// Defines
#define GL_CALLIGRAPHIC_FRAGMENT_SGIX     0x8183 
#endif //GL_SGIX_calligraphic_fragment

#ifndef GL_SGIX_clipmap

// Defines
#define GL_LINEAR_CLIPMAP_LINEAR_SGIX     0x8170 
#define GL_TEXTURE_CLIPMAP_CENTER_SGIX    0x8171 
#define GL_TEXTURE_CLIPMAP_FRAME_SGIX     0x8172 
#define GL_TEXTURE_CLIPMAP_OFFSET_SGIX    0x8173 
#define GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8174 
#define GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX 0x8175 
#define GL_TEXTURE_CLIPMAP_DEPTH_SGIX     0x8176 
#define GL_MAX_CLIPMAP_DEPTH_SGIX         0x8177 
#define GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8178 
#define GL_NEAREST_CLIPMAP_NEAREST_SGIX   0x844D 
#define GL_NEAREST_CLIPMAP_LINEAR_SGIX    0x844E 
#define GL_LINEAR_CLIPMAP_NEAREST_SGIX    0x844F 
#endif //GL_SGIX_clipmap

#ifndef GL_SGIX_convolution_accuracy

// Defines
#define GL_CONVOLUTION_HINT_SGIX          0x8316 
#endif //GL_SGIX_convolution_accuracy

// GL_SGIX_depth_pass_instrument

#ifndef GL_SGIX_depth_texture

// Defines
#define GL_DEPTH_COMPONENT16_SGIX         0x81A5 
#define GL_DEPTH_COMPONENT24_SGIX         0x81A6 
#define GL_DEPTH_COMPONENT32_SGIX         0x81A7 
#endif //GL_SGIX_depth_texture

#ifndef GL_SGIX_flush_raster

// functions typedefs
typedef void (APIENTRYP PFN_GLFLUSHRASTERSGIX_PROC) (void);

// functions typedefs
GL_FUNC_DEF PFN_GLFLUSHRASTERSGIX_PROC _glFlushRasterSGIX_ GL_FUNC_DEF2;

// functions inline wrap
inline void glFlushRasterSGIX (void) { return _glFlushRasterSGIX_(); };
#endif //GL_SGIX_flush_raster

#ifndef GL_SGIX_fog_offset

// Defines
#define GL_FOG_OFFSET_SGIX                0x8198 
#define GL_FOG_OFFSET_VALUE_SGIX          0x8199 
#endif //GL_SGIX_fog_offset

#ifndef GL_SGIX_fragment_lighting

// Defines
#define GL_FRAGMENT_LIGHTING_SGIX         0x8400 
#define GL_FRAGMENT_COLOR_MATERIAL_SGIX   0x8401 
#define GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX 0x8402 
#define GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX 0x8403 
#define GL_MAX_FRAGMENT_LIGHTS_SGIX       0x8404 
#define GL_MAX_ACTIVE_LIGHTS_SGIX         0x8405 
#define GL_CURRENT_RASTER_NORMAL_SGIX     0x8406 
#define GL_LIGHT_ENV_MODE_SGIX            0x8407 
#define GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX 0x8408 
#define GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX 0x8409 
#define GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX 0x840A 
#define GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX 0x840B 
#define GL_FRAGMENT_LIGHT0_SGIX           0x840C 
#define GL_FRAGMENT_LIGHT1_SGIX           0x840D 
#define GL_FRAGMENT_LIGHT2_SGIX           0x840E 
#define GL_FRAGMENT_LIGHT3_SGIX           0x840F 
#define GL_FRAGMENT_LIGHT4_SGIX           0x8410 
#define GL_FRAGMENT_LIGHT5_SGIX           0x8411 
#define GL_FRAGMENT_LIGHT6_SGIX           0x8412 
#define GL_FRAGMENT_LIGHT7_SGIX           0x8413 

// functions typedefs
typedef void (APIENTRYP PFN_GLFRAGMENTCOLORMATERIALSGIX_PROC) (GLenum face, GLenum mode);
typedef void (APIENTRYP PFN_GLFRAGMENTLIGHTFSGIX_PROC) (GLenum light, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLFRAGMENTLIGHTFVSGIX_PROC) (GLenum light, GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLFRAGMENTLIGHTISGIX_PROC) (GLenum light, GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLFRAGMENTLIGHTIVSGIX_PROC) (GLenum light, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLFRAGMENTLIGHTMODELFSGIX_PROC) (GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLFRAGMENTLIGHTMODELFVSGIX_PROC) (GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLFRAGMENTLIGHTMODELISGIX_PROC) (GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLFRAGMENTLIGHTMODELIVSGIX_PROC) (GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLFRAGMENTMATERIALFSGIX_PROC) (GLenum face, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLFRAGMENTMATERIALFVSGIX_PROC) (GLenum face, GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLFRAGMENTMATERIALISGIX_PROC) (GLenum face, GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLFRAGMENTMATERIALIVSGIX_PROC) (GLenum face, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLGETFRAGMENTLIGHTFVSGIX_PROC) (GLenum light, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETFRAGMENTLIGHTIVSGIX_PROC) (GLenum light, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLGETFRAGMENTMATERIALFVSGIX_PROC) (GLenum face, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETFRAGMENTMATERIALIVSGIX_PROC) (GLenum face, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLLIGHTENVISGIX_PROC) (GLenum pname, GLint param);

// functions typedefs
GL_FUNC_DEF PFN_GLFRAGMENTCOLORMATERIALSGIX_PROC _glFragmentColorMaterialSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAGMENTLIGHTFSGIX_PROC _glFragmentLightfSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAGMENTLIGHTFVSGIX_PROC _glFragmentLightfvSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAGMENTLIGHTISGIX_PROC _glFragmentLightiSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAGMENTLIGHTIVSGIX_PROC _glFragmentLightivSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAGMENTLIGHTMODELFSGIX_PROC _glFragmentLightModelfSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAGMENTLIGHTMODELFVSGIX_PROC _glFragmentLightModelfvSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAGMENTLIGHTMODELISGIX_PROC _glFragmentLightModeliSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAGMENTLIGHTMODELIVSGIX_PROC _glFragmentLightModelivSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAGMENTMATERIALFSGIX_PROC _glFragmentMaterialfSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAGMENTMATERIALFVSGIX_PROC _glFragmentMaterialfvSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAGMENTMATERIALISGIX_PROC _glFragmentMaterialiSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLFRAGMENTMATERIALIVSGIX_PROC _glFragmentMaterialivSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFRAGMENTLIGHTFVSGIX_PROC _glGetFragmentLightfvSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFRAGMENTLIGHTIVSGIX_PROC _glGetFragmentLightivSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFRAGMENTMATERIALFVSGIX_PROC _glGetFragmentMaterialfvSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETFRAGMENTMATERIALIVSGIX_PROC _glGetFragmentMaterialivSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLIGHTENVISGIX_PROC _glLightEnviSGIX_ GL_FUNC_DEF2;

// functions inline wrap
inline void glFragmentColorMaterialSGIX (GLenum face, GLenum mode) { return _glFragmentColorMaterialSGIX_(face, mode); };
inline void glFragmentLightfSGIX (GLenum light, GLenum pname, GLfloat param) { return _glFragmentLightfSGIX_(light, pname, param); };
inline void glFragmentLightfvSGIX (GLenum light, GLenum pname, const GLfloat * params) { return _glFragmentLightfvSGIX_(light, pname, params); };
inline void glFragmentLightiSGIX (GLenum light, GLenum pname, GLint param) { return _glFragmentLightiSGIX_(light, pname, param); };
inline void glFragmentLightivSGIX (GLenum light, GLenum pname, const GLint * params) { return _glFragmentLightivSGIX_(light, pname, params); };
inline void glFragmentLightModelfSGIX (GLenum pname, GLfloat param) { return _glFragmentLightModelfSGIX_(pname, param); };
inline void glFragmentLightModelfvSGIX (GLenum pname, const GLfloat * params) { return _glFragmentLightModelfvSGIX_(pname, params); };
inline void glFragmentLightModeliSGIX (GLenum pname, GLint param) { return _glFragmentLightModeliSGIX_(pname, param); };
inline void glFragmentLightModelivSGIX (GLenum pname, const GLint * params) { return _glFragmentLightModelivSGIX_(pname, params); };
inline void glFragmentMaterialfSGIX (GLenum face, GLenum pname, GLfloat param) { return _glFragmentMaterialfSGIX_(face, pname, param); };
inline void glFragmentMaterialfvSGIX (GLenum face, GLenum pname, const GLfloat * params) { return _glFragmentMaterialfvSGIX_(face, pname, params); };
inline void glFragmentMaterialiSGIX (GLenum face, GLenum pname, GLint param) { return _glFragmentMaterialiSGIX_(face, pname, param); };
inline void glFragmentMaterialivSGIX (GLenum face, GLenum pname, const GLint * params) { return _glFragmentMaterialivSGIX_(face, pname, params); };
inline void glGetFragmentLightfvSGIX (GLenum light, GLenum pname, GLfloat * params) { return _glGetFragmentLightfvSGIX_(light, pname, params); };
inline void glGetFragmentLightivSGIX (GLenum light, GLenum pname, GLint * params) { return _glGetFragmentLightivSGIX_(light, pname, params); };
inline void glGetFragmentMaterialfvSGIX (GLenum face, GLenum pname, GLfloat * params) { return _glGetFragmentMaterialfvSGIX_(face, pname, params); };
inline void glGetFragmentMaterialivSGIX (GLenum face, GLenum pname, GLint * params) { return _glGetFragmentMaterialivSGIX_(face, pname, params); };
inline void glLightEnviSGIX (GLenum pname, GLint param) { return _glLightEnviSGIX_(pname, param); };
#endif //GL_SGIX_fragment_lighting

#ifndef GL_SGIX_framezoom

// Defines
#define GL_FRAMEZOOM_SGIX                 0x818B 
#define GL_FRAMEZOOM_FACTOR_SGIX          0x818C 
#define GL_MAX_FRAMEZOOM_FACTOR_SGIX      0x818D 

// functions typedefs
typedef void (APIENTRYP PFN_GLFRAMEZOOMSGIX_PROC) (GLint factor);

// functions typedefs
GL_FUNC_DEF PFN_GLFRAMEZOOMSGIX_PROC _glFrameZoomSGIX_ GL_FUNC_DEF2;

// functions inline wrap
inline void glFrameZoomSGIX (GLint factor) { return _glFrameZoomSGIX_(factor); };
#endif //GL_SGIX_framezoom

#ifndef GL_SGIX_igloo_interface

// functions typedefs
typedef void (APIENTRYP PFN_GLIGLOOINTERFACESGIX_PROC) (GLenum pname, const void * params);

// functions typedefs
GL_FUNC_DEF PFN_GLIGLOOINTERFACESGIX_PROC _glIglooInterfaceSGIX_ GL_FUNC_DEF2;

// functions inline wrap
inline void glIglooInterfaceSGIX (GLenum pname, const void * params) { return _glIglooInterfaceSGIX_(pname, params); };
#endif //GL_SGIX_igloo_interface

#ifndef GL_SGIX_instruments

// Defines
#define GL_INSTRUMENT_BUFFER_POINTER_SGIX 0x8180 
#define GL_INSTRUMENT_MEASUREMENTS_SGIX   0x8181 

// functions typedefs
typedef GLint (APIENTRYP PFN_GLGETINSTRUMENTSSGIX_PROC) (void);
typedef void (APIENTRYP PFN_GLINSTRUMENTSBUFFERSGIX_PROC) (GLsizei size, GLint * buffer);
typedef GLint (APIENTRYP PFN_GLPOLLINSTRUMENTSSGIX_PROC) (GLint * marker_p);
typedef void (APIENTRYP PFN_GLREADINSTRUMENTSSGIX_PROC) (GLint marker);
typedef void (APIENTRYP PFN_GLSTARTINSTRUMENTSSGIX_PROC) (void);
typedef void (APIENTRYP PFN_GLSTOPINSTRUMENTSSGIX_PROC) (GLint marker);

// functions typedefs
GL_FUNC_DEF PFN_GLGETINSTRUMENTSSGIX_PROC _glGetInstrumentsSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLINSTRUMENTSBUFFERSGIX_PROC _glInstrumentsBufferSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLPOLLINSTRUMENTSSGIX_PROC _glPollInstrumentsSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREADINSTRUMENTSSGIX_PROC _glReadInstrumentsSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSTARTINSTRUMENTSSGIX_PROC _glStartInstrumentsSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSTOPINSTRUMENTSSGIX_PROC _glStopInstrumentsSGIX_ GL_FUNC_DEF2;

// functions inline wrap
inline GLint glGetInstrumentsSGIX (void) { return _glGetInstrumentsSGIX_(); };
inline void glInstrumentsBufferSGIX (GLsizei size, GLint * buffer) { return _glInstrumentsBufferSGIX_(size, buffer); };
inline GLint glPollInstrumentsSGIX (GLint * marker_p) { return _glPollInstrumentsSGIX_(marker_p); };
inline void glReadInstrumentsSGIX (GLint marker) { return _glReadInstrumentsSGIX_(marker); };
inline void glStartInstrumentsSGIX (void) { return _glStartInstrumentsSGIX_(); };
inline void glStopInstrumentsSGIX (GLint marker) { return _glStopInstrumentsSGIX_(marker); };
#endif //GL_SGIX_instruments

#ifndef GL_SGIX_interlace

// Defines
#define GL_INTERLACE_SGIX                 0x8094 
#endif //GL_SGIX_interlace

#ifndef GL_SGIX_ir_instrument1

// Defines
#define GL_IR_INSTRUMENT1_SGIX            0x817F 
#endif //GL_SGIX_ir_instrument1

#ifndef GL_SGIX_list_priority

// Defines
#define GL_LIST_PRIORITY_SGIX             0x8182 

// functions typedefs
typedef void (APIENTRYP PFN_GLGETLISTPARAMETERFVSGIX_PROC) (GLuint list, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETLISTPARAMETERIVSGIX_PROC) (GLuint list, GLenum pname, GLint * params);
typedef void (APIENTRYP PFN_GLLISTPARAMETERFSGIX_PROC) (GLuint list, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLLISTPARAMETERFVSGIX_PROC) (GLuint list, GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLLISTPARAMETERISGIX_PROC) (GLuint list, GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLLISTPARAMETERIVSGIX_PROC) (GLuint list, GLenum pname, const GLint * params);

// functions typedefs
GL_FUNC_DEF PFN_GLGETLISTPARAMETERFVSGIX_PROC _glGetListParameterfvSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETLISTPARAMETERIVSGIX_PROC _glGetListParameterivSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLISTPARAMETERFSGIX_PROC _glListParameterfSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLISTPARAMETERFVSGIX_PROC _glListParameterfvSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLISTPARAMETERISGIX_PROC _glListParameteriSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLISTPARAMETERIVSGIX_PROC _glListParameterivSGIX_ GL_FUNC_DEF2;

// functions inline wrap
inline void glGetListParameterfvSGIX (GLuint list, GLenum pname, GLfloat * params) { return _glGetListParameterfvSGIX_(list, pname, params); };
inline void glGetListParameterivSGIX (GLuint list, GLenum pname, GLint * params) { return _glGetListParameterivSGIX_(list, pname, params); };
inline void glListParameterfSGIX (GLuint list, GLenum pname, GLfloat param) { return _glListParameterfSGIX_(list, pname, param); };
inline void glListParameterfvSGIX (GLuint list, GLenum pname, const GLfloat * params) { return _glListParameterfvSGIX_(list, pname, params); };
inline void glListParameteriSGIX (GLuint list, GLenum pname, GLint param) { return _glListParameteriSGIX_(list, pname, param); };
inline void glListParameterivSGIX (GLuint list, GLenum pname, const GLint * params) { return _glListParameterivSGIX_(list, pname, params); };
#endif //GL_SGIX_list_priority

#ifndef GL_SGIX_pixel_texture

// Defines
#define GL_PIXEL_TEX_GEN_SGIX             0x8139 
#define GL_PIXEL_TEX_GEN_MODE_SGIX        0x832B 

// functions typedefs
typedef void (APIENTRYP PFN_GLPIXELTEXGENSGIX_PROC) (GLenum mode);

// functions typedefs
GL_FUNC_DEF PFN_GLPIXELTEXGENSGIX_PROC _glPixelTexGenSGIX_ GL_FUNC_DEF2;

// functions inline wrap
inline void glPixelTexGenSGIX (GLenum mode) { return _glPixelTexGenSGIX_(mode); };
#endif //GL_SGIX_pixel_texture

#ifndef GL_SGIX_pixel_tiles

// Defines
#define GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX 0x813E 
#define GL_PIXEL_TILE_CACHE_INCREMENT_SGIX 0x813F 
#define GL_PIXEL_TILE_WIDTH_SGIX          0x8140 
#define GL_PIXEL_TILE_HEIGHT_SGIX         0x8141 
#define GL_PIXEL_TILE_GRID_WIDTH_SGIX     0x8142 
#define GL_PIXEL_TILE_GRID_HEIGHT_SGIX    0x8143 
#define GL_PIXEL_TILE_GRID_DEPTH_SGIX     0x8144 
#define GL_PIXEL_TILE_CACHE_SIZE_SGIX     0x8145 
#endif //GL_SGIX_pixel_tiles

#ifndef GL_SGIX_polynomial_ffd

// Defines
#define GL_TEXTURE_DEFORMATION_BIT_SGIX   0x00000001 
#define GL_GEOMETRY_DEFORMATION_BIT_SGIX  0x00000002 
#define GL_GEOMETRY_DEFORMATION_SGIX      0x8194 
#define GL_TEXTURE_DEFORMATION_SGIX       0x8195 
#define GL_DEFORMATIONS_MASK_SGIX         0x8196 
#define GL_MAX_DEFORMATION_ORDER_SGIX     0x8197 

// functions typedefs
typedef void (APIENTRYP PFN_GLDEFORMATIONMAP3DSGIX_PROC) (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble * points);
typedef void (APIENTRYP PFN_GLDEFORMATIONMAP3FSGIX_PROC) (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat * points);
typedef void (APIENTRYP PFN_GLDEFORMSGIX_PROC) (GLbitfield mask);
typedef void (APIENTRYP PFN_GLLOADIDENTITYDEFORMATIONMAPSGIX_PROC) (GLbitfield mask);

// functions typedefs
GL_FUNC_DEF PFN_GLDEFORMATIONMAP3DSGIX_PROC _glDeformationMap3dSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDEFORMATIONMAP3FSGIX_PROC _glDeformationMap3fSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLDEFORMSGIX_PROC _glDeformSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLLOADIDENTITYDEFORMATIONMAPSGIX_PROC _glLoadIdentityDeformationMapSGIX_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDeformationMap3dSGIX (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble * points) { return _glDeformationMap3dSGIX_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points); };
inline void glDeformationMap3fSGIX (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat * points) { return _glDeformationMap3fSGIX_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points); };
inline void glDeformSGIX (GLbitfield mask) { return _glDeformSGIX_(mask); };
inline void glLoadIdentityDeformationMapSGIX (GLbitfield mask) { return _glLoadIdentityDeformationMapSGIX_(mask); };
#endif //GL_SGIX_polynomial_ffd

#ifndef GL_SGIX_reference_plane

// Defines
#define GL_REFERENCE_PLANE_SGIX           0x817D 
#define GL_REFERENCE_PLANE_EQUATION_SGIX  0x817E 

// functions typedefs
typedef void (APIENTRYP PFN_GLREFERENCEPLANESGIX_PROC) (const GLdouble * equation);

// functions typedefs
GL_FUNC_DEF PFN_GLREFERENCEPLANESGIX_PROC _glReferencePlaneSGIX_ GL_FUNC_DEF2;

// functions inline wrap
inline void glReferencePlaneSGIX (const GLdouble * equation) { return _glReferencePlaneSGIX_(equation); };
#endif //GL_SGIX_reference_plane

#ifndef GL_SGIX_resample

// Defines
#define GL_PACK_RESAMPLE_SGIX             0x842E 
#define GL_UNPACK_RESAMPLE_SGIX           0x842F 
#define GL_RESAMPLE_REPLICATE_SGIX        0x8433 
#define GL_RESAMPLE_ZERO_FILL_SGIX        0x8434 
#define GL_RESAMPLE_DECIMATE_SGIX         0x8430 
#endif //GL_SGIX_resample

#ifndef GL_SGIX_scalebias_hint

// Defines
#define GL_SCALEBIAS_HINT_SGIX            0x8322 
#endif //GL_SGIX_scalebias_hint

#ifndef GL_SGIX_shadow

// Defines
#define GL_TEXTURE_COMPARE_SGIX           0x819A 
#define GL_TEXTURE_COMPARE_OPERATOR_SGIX  0x819B 
#define GL_TEXTURE_LEQUAL_R_SGIX          0x819C 
#define GL_TEXTURE_GEQUAL_R_SGIX          0x819D 
#endif //GL_SGIX_shadow

#ifndef GL_SGIX_shadow_ambient

// Defines
#define GL_SHADOW_AMBIENT_SGIX            0x80BF 
#endif //GL_SGIX_shadow_ambient

#ifndef GL_SGIX_sprite

// Defines
#define GL_SPRITE_SGIX                    0x8148 
#define GL_SPRITE_MODE_SGIX               0x8149 
#define GL_SPRITE_AXIS_SGIX               0x814A 
#define GL_SPRITE_TRANSLATION_SGIX        0x814B 
#define GL_SPRITE_AXIAL_SGIX              0x814C 
#define GL_SPRITE_OBJECT_ALIGNED_SGIX     0x814D 
#define GL_SPRITE_EYE_ALIGNED_SGIX        0x814E 

// functions typedefs
typedef void (APIENTRYP PFN_GLSPRITEPARAMETERFSGIX_PROC) (GLenum pname, GLfloat param);
typedef void (APIENTRYP PFN_GLSPRITEPARAMETERFVSGIX_PROC) (GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLSPRITEPARAMETERISGIX_PROC) (GLenum pname, GLint param);
typedef void (APIENTRYP PFN_GLSPRITEPARAMETERIVSGIX_PROC) (GLenum pname, const GLint * params);

// functions typedefs
GL_FUNC_DEF PFN_GLSPRITEPARAMETERFSGIX_PROC _glSpriteParameterfSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSPRITEPARAMETERFVSGIX_PROC _glSpriteParameterfvSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSPRITEPARAMETERISGIX_PROC _glSpriteParameteriSGIX_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLSPRITEPARAMETERIVSGIX_PROC _glSpriteParameterivSGIX_ GL_FUNC_DEF2;

// functions inline wrap
inline void glSpriteParameterfSGIX (GLenum pname, GLfloat param) { return _glSpriteParameterfSGIX_(pname, param); };
inline void glSpriteParameterfvSGIX (GLenum pname, const GLfloat * params) { return _glSpriteParameterfvSGIX_(pname, params); };
inline void glSpriteParameteriSGIX (GLenum pname, GLint param) { return _glSpriteParameteriSGIX_(pname, param); };
inline void glSpriteParameterivSGIX (GLenum pname, const GLint * params) { return _glSpriteParameterivSGIX_(pname, params); };
#endif //GL_SGIX_sprite

#ifndef GL_SGIX_subsample

// Defines
#define GL_PACK_SUBSAMPLE_RATE_SGIX       0x85A0 
#define GL_UNPACK_SUBSAMPLE_RATE_SGIX     0x85A1 
#define GL_PIXEL_SUBSAMPLE_4444_SGIX      0x85A2 
#define GL_PIXEL_SUBSAMPLE_2424_SGIX      0x85A3 
#define GL_PIXEL_SUBSAMPLE_4242_SGIX      0x85A4 
#endif //GL_SGIX_subsample

#ifndef GL_SGIX_tag_sample_buffer

// functions typedefs
typedef void (APIENTRYP PFN_GLTAGSAMPLEBUFFERSGIX_PROC) (void);

// functions typedefs
GL_FUNC_DEF PFN_GLTAGSAMPLEBUFFERSGIX_PROC _glTagSampleBufferSGIX_ GL_FUNC_DEF2;

// functions inline wrap
inline void glTagSampleBufferSGIX (void) { return _glTagSampleBufferSGIX_(); };
#endif //GL_SGIX_tag_sample_buffer

#ifndef GL_SGIX_texture_add_env

// Defines
#define GL_TEXTURE_ENV_BIAS_SGIX          0x80BE 
#endif //GL_SGIX_texture_add_env

#ifndef GL_SGIX_texture_coordinate_clamp

// Defines
#define GL_TEXTURE_MAX_CLAMP_S_SGIX       0x8369 
#define GL_TEXTURE_MAX_CLAMP_T_SGIX       0x836A 
#define GL_TEXTURE_MAX_CLAMP_R_SGIX       0x836B 
#endif //GL_SGIX_texture_coordinate_clamp

#ifndef GL_SGIX_texture_lod_bias

// Defines
#define GL_TEXTURE_LOD_BIAS_S_SGIX        0x818E 
#define GL_TEXTURE_LOD_BIAS_T_SGIX        0x818F 
#define GL_TEXTURE_LOD_BIAS_R_SGIX        0x8190 
#endif //GL_SGIX_texture_lod_bias

#ifndef GL_SGIX_texture_multi_buffer

// Defines
#define GL_TEXTURE_MULTI_BUFFER_HINT_SGIX 0x812E 
#endif //GL_SGIX_texture_multi_buffer

#ifndef GL_SGIX_texture_scale_bias

// Defines
#define GL_POST_TEXTURE_FILTER_BIAS_SGIX  0x8179 
#define GL_POST_TEXTURE_FILTER_SCALE_SGIX 0x817A 
#define GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX 0x817B 
#define GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX 0x817C 
#endif //GL_SGIX_texture_scale_bias

#ifndef GL_SGIX_vertex_preclip

// Defines
#define GL_VERTEX_PRECLIP_SGIX            0x83EE 
#define GL_VERTEX_PRECLIP_HINT_SGIX       0x83EF 
#endif //GL_SGIX_vertex_preclip

#ifndef GL_SGIX_ycrcb

// Defines
#define GL_YCRCB_422_SGIX                 0x81BB 
#define GL_YCRCB_444_SGIX                 0x81BC 
#endif //GL_SGIX_ycrcb

// GL_SGIX_ycrcb_subsample

#ifndef GL_SGIX_ycrcba

// Defines
#define GL_YCRCB_SGIX                     0x8318 
#define GL_YCRCBA_SGIX                    0x8319 
#endif //GL_SGIX_ycrcba

#ifndef GL_SGI_color_matrix

// Defines
#define GL_COLOR_MATRIX_SGI               0x80B1 
#define GL_COLOR_MATRIX_STACK_DEPTH_SGI   0x80B2 
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B3 
#define GL_POST_COLOR_MATRIX_RED_SCALE_SGI 0x80B4 
#define GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI 0x80B5 
#define GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI 0x80B6 
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI 0x80B7 
#define GL_POST_COLOR_MATRIX_RED_BIAS_SGI 0x80B8 
#define GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI 0x80B9 
#define GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI 0x80BA 
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI 0x80BB 
#endif //GL_SGI_color_matrix

#ifndef GL_SGI_color_table

// Defines
#define GL_COLOR_TABLE_SGI                0x80D0 
#define GL_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D1 
#define GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D2 
#define GL_PROXY_COLOR_TABLE_SGI          0x80D3 
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D4 
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D5 
#define GL_COLOR_TABLE_SCALE_SGI          0x80D6 
#define GL_COLOR_TABLE_BIAS_SGI           0x80D7 
#define GL_COLOR_TABLE_FORMAT_SGI         0x80D8 
#define GL_COLOR_TABLE_WIDTH_SGI          0x80D9 
#define GL_COLOR_TABLE_RED_SIZE_SGI       0x80DA 
#define GL_COLOR_TABLE_GREEN_SIZE_SGI     0x80DB 
#define GL_COLOR_TABLE_BLUE_SIZE_SGI      0x80DC 
#define GL_COLOR_TABLE_ALPHA_SIZE_SGI     0x80DD 
#define GL_COLOR_TABLE_LUMINANCE_SIZE_SGI 0x80DE 
#define GL_COLOR_TABLE_INTENSITY_SIZE_SGI 0x80DF 

// functions typedefs
typedef void (APIENTRYP PFN_GLCOLORTABLESGI_PROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table);
typedef void (APIENTRYP PFN_GLCOLORTABLEPARAMETERFVSGI_PROC) (GLenum target, GLenum pname, const GLfloat * params);
typedef void (APIENTRYP PFN_GLCOLORTABLEPARAMETERIVSGI_PROC) (GLenum target, GLenum pname, const GLint * params);
typedef void (APIENTRYP PFN_GLCOPYCOLORTABLESGI_PROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (APIENTRYP PFN_GLGETCOLORTABLESGI_PROC) (GLenum target, GLenum format, GLenum type, void * table);
typedef void (APIENTRYP PFN_GLGETCOLORTABLEPARAMETERFVSGI_PROC) (GLenum target, GLenum pname, GLfloat * params);
typedef void (APIENTRYP PFN_GLGETCOLORTABLEPARAMETERIVSGI_PROC) (GLenum target, GLenum pname, GLint * params);

// functions typedefs
GL_FUNC_DEF PFN_GLCOLORTABLESGI_PROC _glColorTableSGI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLORTABLEPARAMETERFVSGI_PROC _glColorTableParameterfvSGI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLORTABLEPARAMETERIVSGI_PROC _glColorTableParameterivSGI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOPYCOLORTABLESGI_PROC _glCopyColorTableSGI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOLORTABLESGI_PROC _glGetColorTableSGI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOLORTABLEPARAMETERFVSGI_PROC _glGetColorTableParameterfvSGI_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGETCOLORTABLEPARAMETERIVSGI_PROC _glGetColorTableParameterivSGI_ GL_FUNC_DEF2;

// functions inline wrap
inline void glColorTableSGI (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table) { return _glColorTableSGI_(target, internalformat, width, format, type, table); };
inline void glColorTableParameterfvSGI (GLenum target, GLenum pname, const GLfloat * params) { return _glColorTableParameterfvSGI_(target, pname, params); };
inline void glColorTableParameterivSGI (GLenum target, GLenum pname, const GLint * params) { return _glColorTableParameterivSGI_(target, pname, params); };
inline void glCopyColorTableSGI (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { return _glCopyColorTableSGI_(target, internalformat, x, y, width); };
inline void glGetColorTableSGI (GLenum target, GLenum format, GLenum type, void * table) { return _glGetColorTableSGI_(target, format, type, table); };
inline void glGetColorTableParameterfvSGI (GLenum target, GLenum pname, GLfloat * params) { return _glGetColorTableParameterfvSGI_(target, pname, params); };
inline void glGetColorTableParameterivSGI (GLenum target, GLenum pname, GLint * params) { return _glGetColorTableParameterivSGI_(target, pname, params); };
#endif //GL_SGI_color_table

#ifndef GL_SGI_texture_color_table

// Defines
#define GL_TEXTURE_COLOR_TABLE_SGI        0x80BC 
#define GL_PROXY_TEXTURE_COLOR_TABLE_SGI  0x80BD 
#endif //GL_SGI_texture_color_table

#ifndef GL_SUNX_constant_data

// Defines
#define GL_UNPACK_CONSTANT_DATA_SUNX      0x81D5 
#define GL_TEXTURE_CONSTANT_DATA_SUNX     0x81D6 

// functions typedefs
typedef void (APIENTRYP PFN_GLFINISHTEXTURESUNX_PROC) (void);

// functions typedefs
GL_FUNC_DEF PFN_GLFINISHTEXTURESUNX_PROC _glFinishTextureSUNX_ GL_FUNC_DEF2;

// functions inline wrap
inline void glFinishTextureSUNX (void) { return _glFinishTextureSUNX_(); };
#endif //GL_SUNX_constant_data

#ifndef GL_SUN_convolution_border_modes

// Defines
#define GL_WRAP_BORDER_SUN                0x81D4 
#endif //GL_SUN_convolution_border_modes

#ifndef GL_SUN_global_alpha

// Defines
#define GL_GLOBAL_ALPHA_SUN               0x81D9 
#define GL_GLOBAL_ALPHA_FACTOR_SUN        0x81DA 

// functions typedefs
typedef void (APIENTRYP PFN_GLGLOBALALPHAFACTORBSUN_PROC) (GLbyte factor);
typedef void (APIENTRYP PFN_GLGLOBALALPHAFACTORSSUN_PROC) (GLshort factor);
typedef void (APIENTRYP PFN_GLGLOBALALPHAFACTORISUN_PROC) (GLint factor);
typedef void (APIENTRYP PFN_GLGLOBALALPHAFACTORFSUN_PROC) (GLfloat factor);
typedef void (APIENTRYP PFN_GLGLOBALALPHAFACTORDSUN_PROC) (GLdouble factor);
typedef void (APIENTRYP PFN_GLGLOBALALPHAFACTORUBSUN_PROC) (GLubyte factor);
typedef void (APIENTRYP PFN_GLGLOBALALPHAFACTORUSSUN_PROC) (GLushort factor);
typedef void (APIENTRYP PFN_GLGLOBALALPHAFACTORUISUN_PROC) (GLuint factor);

// functions typedefs
GL_FUNC_DEF PFN_GLGLOBALALPHAFACTORBSUN_PROC _glGlobalAlphaFactorbSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGLOBALALPHAFACTORSSUN_PROC _glGlobalAlphaFactorsSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGLOBALALPHAFACTORISUN_PROC _glGlobalAlphaFactoriSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGLOBALALPHAFACTORFSUN_PROC _glGlobalAlphaFactorfSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGLOBALALPHAFACTORDSUN_PROC _glGlobalAlphaFactordSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGLOBALALPHAFACTORUBSUN_PROC _glGlobalAlphaFactorubSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGLOBALALPHAFACTORUSSUN_PROC _glGlobalAlphaFactorusSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLGLOBALALPHAFACTORUISUN_PROC _glGlobalAlphaFactoruiSUN_ GL_FUNC_DEF2;

// functions inline wrap
inline void glGlobalAlphaFactorbSUN (GLbyte factor) { return _glGlobalAlphaFactorbSUN_(factor); };
inline void glGlobalAlphaFactorsSUN (GLshort factor) { return _glGlobalAlphaFactorsSUN_(factor); };
inline void glGlobalAlphaFactoriSUN (GLint factor) { return _glGlobalAlphaFactoriSUN_(factor); };
inline void glGlobalAlphaFactorfSUN (GLfloat factor) { return _glGlobalAlphaFactorfSUN_(factor); };
inline void glGlobalAlphaFactordSUN (GLdouble factor) { return _glGlobalAlphaFactordSUN_(factor); };
inline void glGlobalAlphaFactorubSUN (GLubyte factor) { return _glGlobalAlphaFactorubSUN_(factor); };
inline void glGlobalAlphaFactorusSUN (GLushort factor) { return _glGlobalAlphaFactorusSUN_(factor); };
inline void glGlobalAlphaFactoruiSUN (GLuint factor) { return _glGlobalAlphaFactoruiSUN_(factor); };
#endif //GL_SUN_global_alpha

#ifndef GL_SUN_mesh_array

// Defines
#define GL_QUAD_MESH_SUN                  0x8614 
#define GL_TRIANGLE_MESH_SUN              0x8615 

// functions typedefs
typedef void (APIENTRYP PFN_GLDRAWMESHARRAYSSUN_PROC) (GLenum mode, GLint first, GLsizei count, GLsizei width);

// functions typedefs
GL_FUNC_DEF PFN_GLDRAWMESHARRAYSSUN_PROC _glDrawMeshArraysSUN_ GL_FUNC_DEF2;

// functions inline wrap
inline void glDrawMeshArraysSUN (GLenum mode, GLint first, GLsizei count, GLsizei width) { return _glDrawMeshArraysSUN_(mode, first, count, width); };
#endif //GL_SUN_mesh_array

#ifndef GL_SUN_slice_accum

// Defines
#define GL_SLICE_ACCUM_SUN                0x85CC 
#endif //GL_SUN_slice_accum

#ifndef GL_SUN_triangle_list

// Defines
#define GL_RESTART_SUN                    0x0001 
#define GL_REPLACE_MIDDLE_SUN             0x0002 
#define GL_REPLACE_OLDEST_SUN             0x0003 
#define GL_TRIANGLE_LIST_SUN              0x81D7 
#define GL_REPLACEMENT_CODE_SUN           0x81D8 
#define GL_REPLACEMENT_CODE_ARRAY_SUN     0x85C0 
#define GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN 0x85C1 
#define GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN 0x85C2 
#define GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN 0x85C3 
#define GL_R1UI_V3F_SUN                   0x85C4 
#define GL_R1UI_C4UB_V3F_SUN              0x85C5 
#define GL_R1UI_C3F_V3F_SUN               0x85C6 
#define GL_R1UI_N3F_V3F_SUN               0x85C7 
#define GL_R1UI_C4F_N3F_V3F_SUN           0x85C8 
#define GL_R1UI_T2F_V3F_SUN               0x85C9 
#define GL_R1UI_T2F_N3F_V3F_SUN           0x85CA 
#define GL_R1UI_T2F_C4F_N3F_V3F_SUN       0x85CB 

// functions typedefs
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUISUN_PROC) (GLuint code);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUSSUN_PROC) (GLushort code);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUBSUN_PROC) (GLubyte code);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUIVSUN_PROC) (const GLuint * code);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUSVSUN_PROC) (const GLushort * code);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUBVSUN_PROC) (const GLubyte * code);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEPOINTERSUN_PROC) (GLenum type, GLsizei stride, const void * * pointer);

// functions typedefs
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUISUN_PROC _glReplacementCodeuiSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUSSUN_PROC _glReplacementCodeusSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUBSUN_PROC _glReplacementCodeubSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUIVSUN_PROC _glReplacementCodeuivSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUSVSUN_PROC _glReplacementCodeusvSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUBVSUN_PROC _glReplacementCodeubvSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEPOINTERSUN_PROC _glReplacementCodePointerSUN_ GL_FUNC_DEF2;

// functions inline wrap
inline void glReplacementCodeuiSUN (GLuint code) { return _glReplacementCodeuiSUN_(code); };
inline void glReplacementCodeusSUN (GLushort code) { return _glReplacementCodeusSUN_(code); };
inline void glReplacementCodeubSUN (GLubyte code) { return _glReplacementCodeubSUN_(code); };
inline void glReplacementCodeuivSUN (const GLuint * code) { return _glReplacementCodeuivSUN_(code); };
inline void glReplacementCodeusvSUN (const GLushort * code) { return _glReplacementCodeusvSUN_(code); };
inline void glReplacementCodeubvSUN (const GLubyte * code) { return _glReplacementCodeubvSUN_(code); };
inline void glReplacementCodePointerSUN (GLenum type, GLsizei stride, const void * * pointer) { return _glReplacementCodePointerSUN_(type, stride, pointer); };
#endif //GL_SUN_triangle_list

#ifndef GL_SUN_vertex

// functions typedefs
typedef void (APIENTRYP PFN_GLCOLOR4UBVERTEX2FSUN_PROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
typedef void (APIENTRYP PFN_GLCOLOR4UBVERTEX2FVSUN_PROC) (const GLubyte * c, const GLfloat * v);
typedef void (APIENTRYP PFN_GLCOLOR4UBVERTEX3FSUN_PROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLCOLOR4UBVERTEX3FVSUN_PROC) (const GLubyte * c, const GLfloat * v);
typedef void (APIENTRYP PFN_GLCOLOR3FVERTEX3FSUN_PROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLCOLOR3FVERTEX3FVSUN_PROC) (const GLfloat * c, const GLfloat * v);
typedef void (APIENTRYP PFN_GLNORMAL3FVERTEX3FSUN_PROC) (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLNORMAL3FVERTEX3FVSUN_PROC) (const GLfloat * n, const GLfloat * v);
typedef void (APIENTRYP PFN_GLCOLOR4FNORMAL3FVERTEX3FSUN_PROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLCOLOR4FNORMAL3FVERTEX3FVSUN_PROC) (const GLfloat * c, const GLfloat * n, const GLfloat * v);
typedef void (APIENTRYP PFN_GLTEXCOORD2FVERTEX3FSUN_PROC) (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLTEXCOORD2FVERTEX3FVSUN_PROC) (const GLfloat * tc, const GLfloat * v);
typedef void (APIENTRYP PFN_GLTEXCOORD4FVERTEX4FSUN_PROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRYP PFN_GLTEXCOORD4FVERTEX4FVSUN_PROC) (const GLfloat * tc, const GLfloat * v);
typedef void (APIENTRYP PFN_GLTEXCOORD2FCOLOR4UBVERTEX3FSUN_PROC) (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLTEXCOORD2FCOLOR4UBVERTEX3FVSUN_PROC) (const GLfloat * tc, const GLubyte * c, const GLfloat * v);
typedef void (APIENTRYP PFN_GLTEXCOORD2FCOLOR3FVERTEX3FSUN_PROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLTEXCOORD2FCOLOR3FVERTEX3FVSUN_PROC) (const GLfloat * tc, const GLfloat * c, const GLfloat * v);
typedef void (APIENTRYP PFN_GLTEXCOORD2FNORMAL3FVERTEX3FSUN_PROC) (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLTEXCOORD2FNORMAL3FVERTEX3FVSUN_PROC) (const GLfloat * tc, const GLfloat * n, const GLfloat * v);
typedef void (APIENTRYP PFN_GLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN_PROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN_PROC) (const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
typedef void (APIENTRYP PFN_GLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUN_PROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRYP PFN_GLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUN_PROC) (const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUIVERTEX3FSUN_PROC) (GLuint rc, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUIVERTEX3FVSUN_PROC) (const GLuint * rc, const GLfloat * v);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUN_PROC) (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUN_PROC) (const GLuint * rc, const GLubyte * c, const GLfloat * v);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUICOLOR3FVERTEX3FSUN_PROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUN_PROC) (const GLuint * rc, const GLfloat * c, const GLfloat * v);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUINORMAL3FVERTEX3FSUN_PROC) (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUN_PROC) (const GLuint * rc, const GLfloat * n, const GLfloat * v);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUN_PROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUN_PROC) (const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUN_PROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUN_PROC) (const GLuint * rc, const GLfloat * tc, const GLfloat * v);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUN_PROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUN_PROC) (const GLuint * rc, const GLfloat * tc, const GLfloat * n, const GLfloat * v);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN_PROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFN_GLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN_PROC) (const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);

// functions typedefs
GL_FUNC_DEF PFN_GLCOLOR4UBVERTEX2FSUN_PROC _glColor4ubVertex2fSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4UBVERTEX2FVSUN_PROC _glColor4ubVertex2fvSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4UBVERTEX3FSUN_PROC _glColor4ubVertex3fSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4UBVERTEX3FVSUN_PROC _glColor4ubVertex3fvSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3FVERTEX3FSUN_PROC _glColor3fVertex3fSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR3FVERTEX3FVSUN_PROC _glColor3fVertex3fvSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMAL3FVERTEX3FSUN_PROC _glNormal3fVertex3fSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLNORMAL3FVERTEX3FVSUN_PROC _glNormal3fVertex3fvSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4FNORMAL3FVERTEX3FSUN_PROC _glColor4fNormal3fVertex3fSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLCOLOR4FNORMAL3FVERTEX3FVSUN_PROC _glColor4fNormal3fVertex3fvSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2FVERTEX3FSUN_PROC _glTexCoord2fVertex3fSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2FVERTEX3FVSUN_PROC _glTexCoord2fVertex3fvSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD4FVERTEX4FSUN_PROC _glTexCoord4fVertex4fSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD4FVERTEX4FVSUN_PROC _glTexCoord4fVertex4fvSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2FCOLOR4UBVERTEX3FSUN_PROC _glTexCoord2fColor4ubVertex3fSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2FCOLOR4UBVERTEX3FVSUN_PROC _glTexCoord2fColor4ubVertex3fvSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2FCOLOR3FVERTEX3FSUN_PROC _glTexCoord2fColor3fVertex3fSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2FCOLOR3FVERTEX3FVSUN_PROC _glTexCoord2fColor3fVertex3fvSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2FNORMAL3FVERTEX3FSUN_PROC _glTexCoord2fNormal3fVertex3fSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2FNORMAL3FVERTEX3FVSUN_PROC _glTexCoord2fNormal3fVertex3fvSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN_PROC _glTexCoord2fColor4fNormal3fVertex3fSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN_PROC _glTexCoord2fColor4fNormal3fVertex3fvSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUN_PROC _glTexCoord4fColor4fNormal3fVertex4fSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUN_PROC _glTexCoord4fColor4fNormal3fVertex4fvSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUIVERTEX3FSUN_PROC _glReplacementCodeuiVertex3fSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUIVERTEX3FVSUN_PROC _glReplacementCodeuiVertex3fvSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUN_PROC _glReplacementCodeuiColor4ubVertex3fSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUN_PROC _glReplacementCodeuiColor4ubVertex3fvSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUICOLOR3FVERTEX3FSUN_PROC _glReplacementCodeuiColor3fVertex3fSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUN_PROC _glReplacementCodeuiColor3fVertex3fvSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUINORMAL3FVERTEX3FSUN_PROC _glReplacementCodeuiNormal3fVertex3fSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUN_PROC _glReplacementCodeuiNormal3fVertex3fvSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUN_PROC _glReplacementCodeuiColor4fNormal3fVertex3fSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUN_PROC _glReplacementCodeuiColor4fNormal3fVertex3fvSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUN_PROC _glReplacementCodeuiTexCoord2fVertex3fSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUN_PROC _glReplacementCodeuiTexCoord2fVertex3fvSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUN_PROC _glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUN_PROC _glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN_PROC _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_ GL_FUNC_DEF2;
GL_FUNC_DEF PFN_GLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN_PROC _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_ GL_FUNC_DEF2;

// functions inline wrap
inline void glColor4ubVertex2fSUN (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y) { return _glColor4ubVertex2fSUN_(r, g, b, a, x, y); };
inline void glColor4ubVertex2fvSUN (const GLubyte * c, const GLfloat * v) { return _glColor4ubVertex2fvSUN_(c, v); };
inline void glColor4ubVertex3fSUN (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { return _glColor4ubVertex3fSUN_(r, g, b, a, x, y, z); };
inline void glColor4ubVertex3fvSUN (const GLubyte * c, const GLfloat * v) { return _glColor4ubVertex3fvSUN_(c, v); };
inline void glColor3fVertex3fSUN (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { return _glColor3fVertex3fSUN_(r, g, b, x, y, z); };
inline void glColor3fVertex3fvSUN (const GLfloat * c, const GLfloat * v) { return _glColor3fVertex3fvSUN_(c, v); };
inline void glNormal3fVertex3fSUN (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { return _glNormal3fVertex3fSUN_(nx, ny, nz, x, y, z); };
inline void glNormal3fVertex3fvSUN (const GLfloat * n, const GLfloat * v) { return _glNormal3fVertex3fvSUN_(n, v); };
inline void glColor4fNormal3fVertex3fSUN (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { return _glColor4fNormal3fVertex3fSUN_(r, g, b, a, nx, ny, nz, x, y, z); };
inline void glColor4fNormal3fVertex3fvSUN (const GLfloat * c, const GLfloat * n, const GLfloat * v) { return _glColor4fNormal3fVertex3fvSUN_(c, n, v); };
inline void glTexCoord2fVertex3fSUN (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) { return _glTexCoord2fVertex3fSUN_(s, t, x, y, z); };
inline void glTexCoord2fVertex3fvSUN (const GLfloat * tc, const GLfloat * v) { return _glTexCoord2fVertex3fvSUN_(tc, v); };
inline void glTexCoord4fVertex4fSUN (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { return _glTexCoord4fVertex4fSUN_(s, t, p, q, x, y, z, w); };
inline void glTexCoord4fVertex4fvSUN (const GLfloat * tc, const GLfloat * v) { return _glTexCoord4fVertex4fvSUN_(tc, v); };
inline void glTexCoord2fColor4ubVertex3fSUN (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { return _glTexCoord2fColor4ubVertex3fSUN_(s, t, r, g, b, a, x, y, z); };
inline void glTexCoord2fColor4ubVertex3fvSUN (const GLfloat * tc, const GLubyte * c, const GLfloat * v) { return _glTexCoord2fColor4ubVertex3fvSUN_(tc, c, v); };
inline void glTexCoord2fColor3fVertex3fSUN (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { return _glTexCoord2fColor3fVertex3fSUN_(s, t, r, g, b, x, y, z); };
inline void glTexCoord2fColor3fVertex3fvSUN (const GLfloat * tc, const GLfloat * c, const GLfloat * v) { return _glTexCoord2fColor3fVertex3fvSUN_(tc, c, v); };
inline void glTexCoord2fNormal3fVertex3fSUN (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { return _glTexCoord2fNormal3fVertex3fSUN_(s, t, nx, ny, nz, x, y, z); };
inline void glTexCoord2fNormal3fVertex3fvSUN (const GLfloat * tc, const GLfloat * n, const GLfloat * v) { return _glTexCoord2fNormal3fVertex3fvSUN_(tc, n, v); };
inline void glTexCoord2fColor4fNormal3fVertex3fSUN (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { return _glTexCoord2fColor4fNormal3fVertex3fSUN_(s, t, r, g, b, a, nx, ny, nz, x, y, z); };
inline void glTexCoord2fColor4fNormal3fVertex3fvSUN (const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { return _glTexCoord2fColor4fNormal3fVertex3fvSUN_(tc, c, n, v); };
inline void glTexCoord4fColor4fNormal3fVertex4fSUN (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { return _glTexCoord4fColor4fNormal3fVertex4fSUN_(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w); };
inline void glTexCoord4fColor4fNormal3fVertex4fvSUN (const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { return _glTexCoord4fColor4fNormal3fVertex4fvSUN_(tc, c, n, v); };
inline void glReplacementCodeuiVertex3fSUN (GLuint rc, GLfloat x, GLfloat y, GLfloat z) { return _glReplacementCodeuiVertex3fSUN_(rc, x, y, z); };
inline void glReplacementCodeuiVertex3fvSUN (const GLuint * rc, const GLfloat * v) { return _glReplacementCodeuiVertex3fvSUN_(rc, v); };
inline void glReplacementCodeuiColor4ubVertex3fSUN (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { return _glReplacementCodeuiColor4ubVertex3fSUN_(rc, r, g, b, a, x, y, z); };
inline void glReplacementCodeuiColor4ubVertex3fvSUN (const GLuint * rc, const GLubyte * c, const GLfloat * v) { return _glReplacementCodeuiColor4ubVertex3fvSUN_(rc, c, v); };
inline void glReplacementCodeuiColor3fVertex3fSUN (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { return _glReplacementCodeuiColor3fVertex3fSUN_(rc, r, g, b, x, y, z); };
inline void glReplacementCodeuiColor3fVertex3fvSUN (const GLuint * rc, const GLfloat * c, const GLfloat * v) { return _glReplacementCodeuiColor3fVertex3fvSUN_(rc, c, v); };
inline void glReplacementCodeuiNormal3fVertex3fSUN (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { return _glReplacementCodeuiNormal3fVertex3fSUN_(rc, nx, ny, nz, x, y, z); };
inline void glReplacementCodeuiNormal3fVertex3fvSUN (const GLuint * rc, const GLfloat * n, const GLfloat * v) { return _glReplacementCodeuiNormal3fVertex3fvSUN_(rc, n, v); };
inline void glReplacementCodeuiColor4fNormal3fVertex3fSUN (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { return _glReplacementCodeuiColor4fNormal3fVertex3fSUN_(rc, r, g, b, a, nx, ny, nz, x, y, z); };
inline void glReplacementCodeuiColor4fNormal3fVertex3fvSUN (const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { return _glReplacementCodeuiColor4fNormal3fVertex3fvSUN_(rc, c, n, v); };
inline void glReplacementCodeuiTexCoord2fVertex3fSUN (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) { return _glReplacementCodeuiTexCoord2fVertex3fSUN_(rc, s, t, x, y, z); };
inline void glReplacementCodeuiTexCoord2fVertex3fvSUN (const GLuint * rc, const GLfloat * tc, const GLfloat * v) { return _glReplacementCodeuiTexCoord2fVertex3fvSUN_(rc, tc, v); };
inline void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { return _glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_(rc, s, t, nx, ny, nz, x, y, z); };
inline void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (const GLuint * rc, const GLfloat * tc, const GLfloat * n, const GLfloat * v) { return _glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_(rc, tc, n, v); };
inline void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { return _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z); };
inline void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { return _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_(rc, tc, c, n, v); };
#endif //GL_SUN_vertex

// GL_WIN_phong_shading

// GL_WIN_specular_fog

